drawString
\(x,y\)
	0:	android.graphics.Point public void set (int x, int y) Set the point's x and y coordinates
	1:	android.graphics.PointF public final void set (float x, float y) Set the point's x and y coordinates
	2:	android.util.FloatMath public static float pow (float x, float y) Returns the closest float approximation of the result of raising x to the power of y. Parameters x the base of the operation. y the exponent of the operation. Returns x to the power of y.
	3:	android.graphics.Path public void moveTo (float x, float y) Set the beginning of the next contour to the point (x,y). Parameters x The x-coordinate of the start of a new contour y The y-coordinate of the start of a new contour
	4:	android.graphics.Point public final boolean equals (int x, int y) Returns true if the point's coordinates equal (x,y)
	5:	android.graphics.PointF public final boolean equals (float x, float y) Returns true if the point's coordinates equal (x,y)
	6:	android.graphics.PointF public static float length (float x, float y) Returns the euclidian distance from (0,0) to (x,y)
	7:	android.graphics.PointF public final void set (PointF p) Set the point's x and y coordinates to the coordinates of p
	8:	android.renderscript.Matrix2f public void loadScale (float x, float y) Sets current values to be a scale matrix of given dimensions Parameters x scale component x y scale component y
	9:	android.renderscript.Matrix3f public void loadScale (float x, float y) Makes the upper 2x2 a scale matrix of given dimensions Parameters x scale component x y scale component y
translate
Translates the origin of the graphics context to the point \(x, y\) in the current coordinate system
	0:	android.renderscript.Matrix3f public void translate (float x, float y) Modifies the current matrix by post-multiplying it with a translation matrix of given dimensions Parameters x translation component x y translation component y
	1:	android.graphics.Canvas public void translate (float dx, float dy) Preconcat the current matrix with the specified translation Parameters dx The distance to translate in X dy The distance to translate in Y
	2:	android.renderscript.Matrix4f public void translate (float x, float y, float z) Modifies the current matrix by post-multiplying it with a translation matrix of given dimensions Parameters x translation component x y translation component y z translation component z
	3:	android.graphics.Camera public void translate (float x, float y, float z) Applies a translation transform on all three axis. Parameters x The distance to translate by on the X axis y The distance to translate by on the Y axis z The distance to translate by on the Z axis
	4:	android.graphics.Region public void translate (int dx, int dy) Translate the region by [dx, dy]. If the region is empty, do nothing.
	5:	android.graphics.Region public void translate (int dx, int dy, Region dst) Set the dst region to the result of translating this region by [dx, dy]. If this region is empty, then dst will be set to empty.
	6:	android.support.v4.widget.ViewDragHelper public boolean isCapturedViewUnder (int x, int y) Determine if the currently captured view is under the given point in the parent view's coordinate system. If there is no captured view this method will return false. Parameters x X position to test in the parent's coordinate system y Y position to test in the parent's coordinate system Returns true if the captured view is under the given point, false otherwise
	7:	android.graphics.Point public void set (int x, int y) Set the point's x and y coordinates
	8:	android.graphics.PointF public final void set (float x, float y) Set the point's x and y coordinates
	9:	android.graphics.PointF public final void set (PointF p) Set the point's x and y coordinates to the coordinates of p
getTranslateX
Gets the X coordinate of the translated origin of this graphics context
	0:	android.graphics.Canvas public void drawText (String text, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	1:	android.graphics.Canvas public void drawText (char[] text, int index, int count, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	2:	android.test.ViewAsserts public static void assertHasScreenCoordinates (View origin, View view, int x, int y) Assert that a view has a particular x and y position on the visible screen. Parameters origin The root view of the screen. view The view. x The expected x coordinate. y The expected y coordinate.
	3:	android.graphics.Bitmap public static Bitmap createBitmap (Bitmap source, int x, int y, int width, int height, Matrix m, boolean filter) Returns an immutable bitmap from subset of the source bitmap, transformed by the optional matrix. The new bitmap may be the same object as source, or a copy may have been made. It is initialized with the same density as the original bitmap. If the source bitmap is immutable and the requested subset is the same as the source bitmap itself, then the source bitmap is returned and no new bitmap is created. Parameters source The bitmap we are subsetting x The x coordinate of the first pixel in source y The y coordinate of the first pixel in source width The number of pixels in each row height The number of rows m Optional matrix to be applied to the pixels filter true if the source should be filtered. Only applies if the matrix contains more than just translation. Returns A bitmap that represents the specified subset of source Throws IllegalArgumentException if the x, y, width, height values are outside of the dimensions of the source bitmap.
	4:	android.view.DragEvent public float getX () Gets the X coordinate of the drag point. The value is only valid if the event action is ACTION_DRAG_LOCATION or ACTION_DROP. Returns The current drag point's Y coordinate
	5:	android.renderscript.Matrix3f public void loadTranslate (float x, float y) Sets current values to be a translation matrix of given dimensions Parameters x translation component x y translation component y
	6:	android.view.MotionEvent public final float getRawX () Returns the original raw X coordinate of this event. For touch events on the screen, this is the original location of the event on the screen, before it had been adjusted for the containing window and views. See Also getX(int) AXIS_X
	7:	android.graphics.Canvas public void drawText (CharSequence text, int start, int end, float x, float y, Paint paint) Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint. The origin is interpreted based on the Align setting in the Paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of origin for where to draw the text y The y-coordinate of origin for where to draw the text paint The paint used for the text (e.g. color, size, style)
	8:	android.graphics.Canvas public void drawText (String text, int start, int end, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	9:	android.graphics.PointF public final void set (PointF p) Set the point's x and y coordinates to the coordinates of p
getTranslateY
Gets the Y coordinate of the translated origin of this graphics context
	0:	android.graphics.Canvas public void drawText (String text, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	1:	android.graphics.Canvas public void drawText (char[] text, int index, int count, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	2:	android.test.ViewAsserts public static void assertHasScreenCoordinates (View origin, View view, int x, int y) Assert that a view has a particular x and y position on the visible screen. Parameters origin The root view of the screen. view The view. x The expected x coordinate. y The expected y coordinate.
	3:	android.view.DragEvent public float getY () Gets the Y coordinate of the drag point. The value is valid if the event action is ACTION_DRAG_ENTERED, ACTION_DRAG_LOCATION, ACTION_DROP, or ACTION_DRAG_EXITED. Returns The current drag point's Y coordinate
	4:	android.graphics.Bitmap public static Bitmap createBitmap (Bitmap source, int x, int y, int width, int height, Matrix m, boolean filter) Returns an immutable bitmap from subset of the source bitmap, transformed by the optional matrix. The new bitmap may be the same object as source, or a copy may have been made. It is initialized with the same density as the original bitmap. If the source bitmap is immutable and the requested subset is the same as the source bitmap itself, then the source bitmap is returned and no new bitmap is created. Parameters source The bitmap we are subsetting x The x coordinate of the first pixel in source y The y coordinate of the first pixel in source width The number of pixels in each row height The number of rows m Optional matrix to be applied to the pixels filter true if the source should be filtered. Only applies if the matrix contains more than just translation. Returns A bitmap that represents the specified subset of source Throws IllegalArgumentException if the x, y, width, height values are outside of the dimensions of the source bitmap.
	5:	android.renderscript.Matrix3f public void loadTranslate (float x, float y) Sets current values to be a translation matrix of given dimensions Parameters x translation component x y translation component y
	6:	android.view.DragEvent public float getX () Gets the X coordinate of the drag point. The value is only valid if the event action is ACTION_DRAG_LOCATION or ACTION_DROP. Returns The current drag point's Y coordinate
	7:	android.graphics.Canvas public void drawText (CharSequence text, int start, int end, float x, float y, Paint paint) Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint. The origin is interpreted based on the Align setting in the Paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of origin for where to draw the text y The y-coordinate of origin for where to draw the text paint The paint used for the text (e.g. color, size, style)
	8:	android.graphics.Canvas public void drawText (String text, int start, int end, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	9:	android.view.MotionEvent public final float getRawY () Returns the original raw Y coordinate of this event. For touch events on the screen, this is the original location of the event on the screen, before it had been adjusted for the containing window and views. See Also getY(int) AXIS_Y
getColor
Gets the current color
	0:	android.graphics.drawable.ColorDrawable public int getColor () Gets the drawable's color value. Returns int The color to draw.
	1:	android.graphics.Paint public int getColor () Return the paint's color. Note that the color is a 32bit value containing alpha as well as r,g,b. This 32bit value is not premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b. See the Color class for more details. Returns the paint's color (and alpha).
	2:	android.test.mock.MockResources public int getColor (int id) Return a color integer associated with a particular resource ID. If the resource holds a complex ColorStateList, then the default color from the set is returned. Parameters id The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier. Returns Returns a single color value in the form 0xAARRGGBB. Throws Resources.NotFoundException
	3:	android.content.res.Resources public int getColor (int id) Return a color integer associated with a particular resource ID. If the resource holds a complex ColorStateList, then the default color from the set is returned. Parameters id The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier. Returns Returns a single color value in the form 0xAARRGGBB. Throws Resources.NotFoundException Throws NotFoundException if the given ID does not exist.
	4:	android.content.res.TypedArray public int getColor (int index, int defValue) Retrieve the color value for the attribute at index. If the attribute references a color resource holding a complex ColorStateList, then the default color from the set is returned. Parameters index Index of attribute to retrieve. defValue Value to return if the attribute is not defined or not a resource. Returns Attribute color value, or defValue if not defined.
	5:	android.text.style.QuoteSpan public int getColor () 
	6:	android.hardware.Camera.Parameters public String getColorEffect () Gets the current color effect setting. Returns current color effect. null if color effect setting is not supported. See Also EFFECT_NONE EFFECT_MONO EFFECT_NEGATIVE EFFECT_SOLARIZE EFFECT_SEPIA EFFECT_POSTERIZE EFFECT_WHITEBOARD EFFECT_BLACKBOARD EFFECT_AQUA
	7:	android.support.v4.view.PagerTabStrip public int getTabIndicatorColor () Returns The current tab indicator color as an 0xRRGGBB value.
	8:	android.widget.TextView public final int getCurrentHintTextColor () Return the current color selected to paint the hint text. Returns Returns the current hint text color.
	9:	android.widget.TextView public final int getCurrentTextColor () Return the current color selected for normal text. Returns Returns the current text color.
getRedComponent
Gets the red component of the current color
	0:	android.graphics.Color public static int red (int color) Return the red component of a color int. This is the same as saying (color >> 16) & 0xFF
	1:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	2:	android.graphics.Color public static int argb (int alpha, int red, int green, int blue) Return a color-int from alpha, red, green, blue components. These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters alpha Alpha component [0..255] of the color red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	3:	android.graphics.Color public static int rgb (int red, int green, int blue) Return a color-int from red, green, blue components. The alpha component is implicity 255 (fully opaque). These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	4:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.graphics.Paint public void setARGB (int a, int r, int g, int b) Helper to setColor(), that takes a,r,g,b and constructs the color int Parameters a The new alpha component (0..255) of the paint's color. r The new red component (0..255) of the paint's color. g The new green component (0..255) of the paint's color. b The new blue component (0..255) of the paint's color.
	6:	android.graphics.ColorMatrix public void setRotate (int axis, float degrees) Set the rotation on a color axis by the specified values. axis=0 correspond to a rotation around the RED color axis=1 correspond to a rotation around the GREEN color axis=2 correspond to a rotation around the BLUE color
	7:	android.hardware.Camera.Parameters public String getColorEffect () Gets the current color effect setting. Returns current color effect. null if color effect setting is not supported. See Also EFFECT_NONE EFFECT_MONO EFFECT_NEGATIVE EFFECT_SOLARIZE EFFECT_SEPIA EFFECT_POSTERIZE EFFECT_WHITEBOARD EFFECT_BLACKBOARD EFFECT_AQUA
	8:	android.graphics.Bitmap public final boolean isPremultiplied () Indicates whether pixels stored in this bitmaps are stored pre-multiplied. When a pixel is pre-multiplied, the RGB components have been multiplied by the alpha component. For instance, if the original color is a 50% translucent red (128, 255, 0, 0), the pre-multiplied form is (128, 128, 0, 0). This method always returns false if getConfig() is RGB_565. This method only returns true if hasAlpha() returns true. A bitmap with no alpha channel can be used both as a pre-multiplied and as a non pre-multiplied bitmap. Returns true if the underlying pixels have been pre-multiplied, false otherwise
	9:	android.graphics.Color public static int alpha (int color) Return the alpha component of a color int. This is the same as saying color >>> 24
getGreenComponent
Gets the green component of the current color
	0:	android.graphics.Color public static int green (int color) Return the green component of a color int. This is the same as saying (color >> 8) & 0xFF
	1:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	2:	android.graphics.Color public static int argb (int alpha, int red, int green, int blue) Return a color-int from alpha, red, green, blue components. These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters alpha Alpha component [0..255] of the color red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	3:	android.graphics.Color public static int rgb (int red, int green, int blue) Return a color-int from red, green, blue components. The alpha component is implicity 255 (fully opaque). These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	4:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.graphics.Paint public void setARGB (int a, int r, int g, int b) Helper to setColor(), that takes a,r,g,b and constructs the color int Parameters a The new alpha component (0..255) of the paint's color. r The new red component (0..255) of the paint's color. g The new green component (0..255) of the paint's color. b The new blue component (0..255) of the paint's color.
	6:	android.graphics.ColorMatrix public void setRotate (int axis, float degrees) Set the rotation on a color axis by the specified values. axis=0 correspond to a rotation around the RED color axis=1 correspond to a rotation around the GREEN color axis=2 correspond to a rotation around the BLUE color
	7:	android.hardware.Camera.Parameters public String getColorEffect () Gets the current color effect setting. Returns current color effect. null if color effect setting is not supported. See Also EFFECT_NONE EFFECT_MONO EFFECT_NEGATIVE EFFECT_SOLARIZE EFFECT_SEPIA EFFECT_POSTERIZE EFFECT_WHITEBOARD EFFECT_BLACKBOARD EFFECT_AQUA
	8:	android.graphics.Color public static int alpha (int color) Return the alpha component of a color int. This is the same as saying color >>> 24
	9:	android.graphics.Color public static int blue (int color) Return the blue component of a color int. This is the same as saying color & 0xFF
getBlueComponent
Gets the blue component of the current color
	0:	android.graphics.Color public static int blue (int color) Return the blue component of a color int. This is the same as saying color & 0xFF
	1:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	2:	android.graphics.Color public static int argb (int alpha, int red, int green, int blue) Return a color-int from alpha, red, green, blue components. These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters alpha Alpha component [0..255] of the color red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	3:	android.graphics.Color public static int rgb (int red, int green, int blue) Return a color-int from red, green, blue components. The alpha component is implicity 255 (fully opaque). These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	4:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.graphics.Paint public void setARGB (int a, int r, int g, int b) Helper to setColor(), that takes a,r,g,b and constructs the color int Parameters a The new alpha component (0..255) of the paint's color. r The new red component (0..255) of the paint's color. g The new green component (0..255) of the paint's color. b The new blue component (0..255) of the paint's color.
	6:	android.graphics.ColorMatrix public void setRotate (int axis, float degrees) Set the rotation on a color axis by the specified values. axis=0 correspond to a rotation around the RED color axis=1 correspond to a rotation around the GREEN color axis=2 correspond to a rotation around the BLUE color
	7:	android.hardware.Camera.Parameters public String getColorEffect () Gets the current color effect setting. Returns current color effect. null if color effect setting is not supported. See Also EFFECT_NONE EFFECT_MONO EFFECT_NEGATIVE EFFECT_SOLARIZE EFFECT_SEPIA EFFECT_POSTERIZE EFFECT_WHITEBOARD EFFECT_BLACKBOARD EFFECT_AQUA
	8:	android.graphics.Color public static int alpha (int color) Return the alpha component of a color int. This is the same as saying color >>> 24
	9:	android.graphics.Color public static int green (int color) Return the green component of a color int. This is the same as saying (color >> 8) & 0xFF
getGrayScale
Gets the current grayscale value of the color being used for rendering operations
	0:	android.gesture.GestureUtils public static float[] spatialSampling (Gesture gesture, int bitmapSize, boolean keepAspectRatio) Samples the gesture spatially by rendering the gesture into a 2D grayscale bitmap. Scales the gesture to fit the size of the bitmap. Parameters gesture the gesture to be sampled bitmapSize the size of the bitmap keepAspectRatio if the scaling should keep the gesture's aspect ratio Returns a bitmapSize x bitmapSize grayscale bitmap that is represented as a 1D array. The float at index i represents the grayscale value at pixel [i%bitmapSize, i/bitmapSize]
	1:	android.gesture.GestureUtils public static float[] spatialSampling (Gesture gesture, int bitmapSize) Samples the gesture spatially by rendering the gesture into a 2D grayscale bitmap. Scales the gesture to fit the size of the bitmap. The scaling does not necessarily keep the aspect ratio of the gesture. Parameters gesture the gesture to be sampled bitmapSize the size of the bitmap Returns a bitmapSize x bitmapSize grayscale bitmap that is represented as a 1D array. The float at index i represents the grayscale value at pixel [i%bitmapSize, i/bitmapSize]
	2:	android.webkit.WebStorage public void getUsageForOrigin (String origin, ValueCallback<Long> callback) Gets the amount of storage currently being used by both the Application Cache and Web SQL Database APIs by the given origin. The amount is given in bytes and the origin is specified using its string representation. This method operates asynchronously, with the result being provided via a ValueCallback.
	3:	android.graphics.drawable.ColorDrawable public int getColor () Gets the drawable's color value. Returns int The color to draw.
	4:	android.animation.ValueAnimator public void setEvaluator (TypeEvaluator value) The type evaluator to be used when calculating the animated values of this animation. The system will automatically assign a float or int evaluator based on the type of startValue and endValue in the constructor. But if these values are not one of these primitive types, or if different evaluation is desired (such as is necessary with int values that represent colors), a custom evaluator needs to be assigned. For example, when running an animation on color values, the ArgbEvaluator should be used to get correct RGB color interpolation. If this ValueAnimator has only one set of values being animated between, this evaluator will be used for that set. If there are several sets of values being animated, which is the case if PropertyValuesHOlder objects were set on the ValueAnimator, then the evaluator is assigned just to the first PropertyValuesHolder object. Parameters value the evaluator to be used this animation
	5:	android.support.v4.view.PagerTabStrip public int getTabIndicatorColor () Returns The current tab indicator color as an 0xRRGGBB value.
	6:	android.opengl.GLSurfaceView public int getRenderMode () Get the current rendering mode. May be called from any thread. Must not be called before a renderer has been set. Returns the current rendering mode. See Also RENDERMODE_CONTINUOUSLY RENDERMODE_WHEN_DIRTY
	7:	android.webkit.WebStorage public void getOrigins (ValueCallback<Map> callback) Gets the origins currently using either the Application Cache or Web SQL Database APIs. This method operates asynchronously, with the result being provided via a ValueCallback. The origins are provided as a map, of type Map, from the string representation of the origin to a WebStorage.Origin object.
	8:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	9:	android.hardware.Camera.Parameters public void setColorEffect (String value) Sets the current color effect setting. Parameters value new color effect. See Also getColorEffect()
setColor
Sets the current color to the specified RGB values
	0:	android.graphics.Paint public void setColor (int color) Set the paint's color. Note that the color is an int containing alpha as well as r,g,b. This 32bit value is not premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b. See the Color class for more details. Parameters color The new color (including alpha) to set in the paint.
	1:	android.graphics.drawable.ColorDrawable public void setColor (int color) Sets the drawable's color value. This action will clobber the results of prior calls to setAlpha(int) on this object, which side-affected the underlying color. Parameters color The color to draw.
	2:	android.graphics.drawable.GradientDrawable public void setColors (int[] colors) Sets the colors used to draw the gradient. Each color is specified as an ARGB integer and the array must contain at least 2 colors. Note: changing orientation will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the orientation. Parameters colors 2 or more ARGB colors See Also mutate() setColor(int)
	3:	android.graphics.drawable.GradientDrawable public void setColor (int argb) Changes this drawbale to use a single color instead of a gradient. Note: changing color will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the color. Parameters argb The color used to fill the shape See Also mutate() setColors(int[])
	4:	android.renderscript.ScriptIntrinsicColorMatrix public void setGreyscale () Set a color matrix to convert from RGB to luminance. The alpha channel will be a copy.
	5:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	6:	android.hardware.Camera.Parameters public void setColorEffect (String value) Sets the current color effect setting. Parameters value new color effect. See Also getColorEffect()
	7:	android.graphics.ColorMatrix public void setRotate (int axis, float degrees) Set the rotation on a color axis by the specified values. axis=0 correspond to a rotation around the RED color axis=1 correspond to a rotation around the GREEN color axis=2 correspond to a rotation around the BLUE color
	8:	android.graphics.ColorMatrix public void setRGB2YUV () Set the matrix to convert RGB to YUV
	9:	android.animation.ValueAnimator public void setEvaluator (TypeEvaluator value) The type evaluator to be used when calculating the animated values of this animation. The system will automatically assign a float or int evaluator based on the type of startValue and endValue in the constructor. But if these values are not one of these primitive types, or if different evaluation is desired (such as is necessary with int values that represent colors), a custom evaluator needs to be assigned. For example, when running an animation on color values, the ArgbEvaluator should be used to get correct RGB color interpolation. If this ValueAnimator has only one set of values being animated between, this evaluator will be used for that set. If there are several sets of values being animated, which is the case if PropertyValuesHOlder objects were set on the ValueAnimator, then the evaluator is assigned just to the first PropertyValuesHolder object. Parameters value the evaluator to be used this animation
setColor
Sets the current color to the specified RGB values
	0:	android.graphics.Paint public void setColor (int color) Set the paint's color. Note that the color is an int containing alpha as well as r,g,b. This 32bit value is not premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b. See the Color class for more details. Parameters color The new color (including alpha) to set in the paint.
	1:	android.graphics.drawable.ColorDrawable public void setColor (int color) Sets the drawable's color value. This action will clobber the results of prior calls to setAlpha(int) on this object, which side-affected the underlying color. Parameters color The color to draw.
	2:	android.graphics.drawable.GradientDrawable public void setColors (int[] colors) Sets the colors used to draw the gradient. Each color is specified as an ARGB integer and the array must contain at least 2 colors. Note: changing orientation will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the orientation. Parameters colors 2 or more ARGB colors See Also mutate() setColor(int)
	3:	android.graphics.drawable.GradientDrawable public void setColor (int argb) Changes this drawbale to use a single color instead of a gradient. Note: changing color will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the color. Parameters argb The color used to fill the shape See Also mutate() setColors(int[])
	4:	android.renderscript.ScriptIntrinsicColorMatrix public void setGreyscale () Set a color matrix to convert from RGB to luminance. The alpha channel will be a copy.
	5:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	6:	android.hardware.Camera.Parameters public void setColorEffect (String value) Sets the current color effect setting. Parameters value new color effect. See Also getColorEffect()
	7:	android.graphics.ColorMatrix public void setRotate (int axis, float degrees) Set the rotation on a color axis by the specified values. axis=0 correspond to a rotation around the RED color axis=1 correspond to a rotation around the GREEN color axis=2 correspond to a rotation around the BLUE color
	8:	android.graphics.ColorMatrix public void setRGB2YUV () Set the matrix to convert RGB to YUV
	9:	android.animation.ValueAnimator public void setEvaluator (TypeEvaluator value) The type evaluator to be used when calculating the animated values of this animation. The system will automatically assign a float or int evaluator based on the type of startValue and endValue in the constructor. But if these values are not one of these primitive types, or if different evaluation is desired (such as is necessary with int values that represent colors), a custom evaluator needs to be assigned. For example, when running an animation on color values, the ArgbEvaluator should be used to get correct RGB color interpolation. If this ValueAnimator has only one set of values being animated between, this evaluator will be used for that set. If there are several sets of values being animated, which is the case if PropertyValuesHOlder objects were set on the ValueAnimator, then the evaluator is assigned just to the first PropertyValuesHolder object. Parameters value the evaluator to be used this animation
setGrayScale
Sets the current grayscale to be used for all subsequent rendering operations
	0:	android.graphics.Canvas public int save () Saves the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Returns The value to pass to restoreToCount() to balance this save()
	1:	android.opengl.GLSurfaceView public void queueEvent (Runnable r) Queue a runnable to be run on the GL rendering thread. This can be used to communicate with the Renderer on the rendering thread. Must not be called before a renderer has been set. Parameters r the runnable to be run on the GL rendering thread.
	2:	android.graphics.Canvas public int save (int saveFlags) Based on saveFlags, can save the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Parameters saveFlags flag bits that specify which parts of the Canvas state to save/restore Returns The value to pass to restoreToCount() to balance this save()
	3:	android.opengl.GLSurfaceView public int getRenderMode () Get the current rendering mode. May be called from any thread. Must not be called before a renderer has been set. Returns the current rendering mode. See Also RENDERMODE_CONTINUOUSLY RENDERMODE_WHEN_DIRTY
	4:	android.opengl.GLSurfaceView public void requestRender () Request that the renderer render a frame. This method is typically used when the render mode has been set to RENDERMODE_WHEN_DIRTY, so that frames are only rendered on demand. May be called from any thread. Must not be called before a renderer has been set.
	5:	android.gesture.GestureUtils public static float[] spatialSampling (Gesture gesture, int bitmapSize, boolean keepAspectRatio) Samples the gesture spatially by rendering the gesture into a 2D grayscale bitmap. Scales the gesture to fit the size of the bitmap. Parameters gesture the gesture to be sampled bitmapSize the size of the bitmap keepAspectRatio if the scaling should keep the gesture's aspect ratio Returns a bitmapSize x bitmapSize grayscale bitmap that is represented as a 1D array. The float at index i represents the grayscale value at pixel [i%bitmapSize, i/bitmapSize]
	6:	android.gesture.GestureUtils public static float[] spatialSampling (Gesture gesture, int bitmapSize) Samples the gesture spatially by rendering the gesture into a 2D grayscale bitmap. Scales the gesture to fit the size of the bitmap. The scaling does not necessarily keep the aspect ratio of the gesture. Parameters gesture the gesture to be sampled bitmapSize the size of the bitmap Returns a bitmapSize x bitmapSize grayscale bitmap that is represented as a 1D array. The float at index i represents the grayscale value at pixel [i%bitmapSize, i/bitmapSize]
	7:	android.media.effect.EffectContext public static EffectContext createWithCurrentGlContext () Creates a context within the current GL context. Binds the EffectContext to the current OpenGL context. All subsequent calls to the EffectContext must be made in the GL context that was active during creation. When you have finished using a context, you must call release(). to dispose of all resources associated with this context.
	8:	android.opengl.GLSurfaceView public void setRenderMode (int renderMode) Set the rendering mode. When renderMode is RENDERMODE_CONTINUOUSLY, the renderer is called repeatedly to re-render the scene. When renderMode is RENDERMODE_WHEN_DIRTY, the renderer only rendered when the surface is created, or when requestRender() is called. Defaults to RENDERMODE_CONTINUOUSLY. Using RENDERMODE_WHEN_DIRTY can improve battery life and overall system performance by allowing the GPU and CPU to idle when the view does not need to be updated. This method can only be called after setRenderer(Renderer) Parameters renderMode one of the RENDERMODE_X constants See Also RENDERMODE_CONTINUOUSLY RENDERMODE_WHEN_DIRTY
	9:	android.graphics.drawable.BitmapDrawable public final Paint getPaint () Returns the paint used to render this drawable.
getFont
Gets the current font
	0:	android.webkit.WebSettings public synchronized String getCursiveFontFamily () Gets the cursive font family name. Returns the cursive font family name as a string See Also setCursiveFontFamily(String)
	1:	android.webkit.WebSettings public synchronized String getFantasyFontFamily () Gets the fantasy font family name. Returns the fantasy font family name as a string See Also setFantasyFontFamily(String)
	2:	android.webkit.WebSettings public synchronized String getFixedFontFamily () Gets the fixed font family name. Returns the fixed font family name as a string See Also setFixedFontFamily(String)
	3:	android.webkit.WebSettings public synchronized String getStandardFontFamily () Gets the standard font family name. Returns the standard font family name as a string See Also setStandardFontFamily(String)
	4:	android.webkit.WebSettings public synchronized String getSansSerifFontFamily () Gets the sans-serif font family name. Returns the sans-serif font family name as a string See Also setSansSerifFontFamily(String)
	5:	android.webkit.WebSettings public synchronized String getSerifFontFamily () Gets the serif font family name. The default is "serif". Returns the serif font family name as a string See Also setSerifFontFamily(String)
	6:	android.webkit.WebSettings public synchronized int getDefaultFixedFontSize () Gets the default fixed font size. Returns a non-negative integer between 1 and 72 See Also setDefaultFixedFontSize(int)
	7:	android.webkit.WebSettings public synchronized int getDefaultFontSize () Gets the default font size. Returns a non-negative integer between 1 and 72 See Also setDefaultFontSize(int)
	8:	android.webkit.WebSettings public synchronized int getMinimumFontSize () Gets the minimum font size. Returns a non-negative integer between 1 and 72 See Also setMinimumFontSize(int)
	9:	android.webkit.WebSettings public synchronized int getMinimumLogicalFontSize () Gets the minimum logical font size. Returns a non-negative integer between 1 and 72 See Also setMinimumLogicalFontSize(int)
setStrokeStyle
Sets the stroke style used for drawing lines, arcs, rectangles, and rounded rectangles
	0:	android.graphics.Canvas public void drawRect (Rect r, Paint paint) Draw the specified Rect using the specified Paint. The rectangle will be filled or framed based on the Style in the paint. Parameters r The rectangle to be drawn. paint The paint used to draw the rectangle
	1:	android.graphics.Paint public void setStrokeCap (Paint.Cap cap) Set the paint's Cap. Parameters cap set the paint's line cap style, used whenever the paint's style is Stroke or StrokeAndFill.
	2:	android.graphics.Canvas public void drawRect (float left, float top, float right, float bottom, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters left The left side of the rectangle to be drawn top The top side of the rectangle to be drawn right The right side of the rectangle to be drawn bottom The bottom side of the rectangle to be drawn paint The paint used to draw the rect
	3:	android.graphics.Paint public void setStrokeWidth (float width) Set the width for stroking. Pass 0 to stroke in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Parameters width set the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	4:	android.graphics.Canvas public void drawOval (RectF oval, Paint paint) Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint. Parameters oval The rectangle bounds of the oval to be drawn
	5:	android.graphics.RectF public void round (Rect dst) Set the dst integer Rect by rounding this rectangle's coordinates to their nearest integer values.
	6:	android.graphics.Canvas public void drawRect (RectF rect, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters rect The rect to be drawn paint The paint used to draw the rect
	7:	android.graphics.CornerPathEffect public CornerPathEffect (float radius) Transforms geometries that are drawn (either STROKE or FILL styles) by replacing any sharp angles between line segments into rounded angles of the specified radius. Parameters radius Amount to round sharp angles between line segments.
	8:	android.graphics.Rect public boolean intersect (int left, int top, int right, int bottom) If the rectangle specified by left,top,right,bottom intersects this rectangle, return true and set this rectangle to that intersection, otherwise return false and do not change this rectangle. No check is performed to see if either rectangle is empty. Note: To just test for intersection, use intersects(Rect, Rect). Parameters left The left side of the rectangle being intersected with this rectangle top The top of the rectangle being intersected with this rectangle right The right side of the rectangle being intersected with this rectangle. bottom The bottom of the rectangle being intersected with this rectangle. Returns true if the specified rectangle and this rectangle intersect (and this rectangle is then set to that intersection) else return false and do not change this rectangle.
	9:	android.graphics.RectF public boolean intersect (float left, float top, float right, float bottom) If the rectangle specified by left,top,right,bottom intersects this rectangle, return true and set this rectangle to that intersection, otherwise return false and do not change this rectangle. No check is performed to see if either rectangle is empty. Note: To just test for intersection, use intersects() Parameters left The left side of the rectangle being intersected with this rectangle top The top of the rectangle being intersected with this rectangle right The right side of the rectangle being intersected with this rectangle. bottom The bottom of the rectangle being intersected with this rectangle. Returns true if the specified rectangle and this rectangle intersect (and this rectangle is then set to that intersection) else return false and do not change this rectangle.
getStrokeStyle
Gets the stroke style used for drawing operations
	0:	android.graphics.Paint public float getStrokeWidth () Return the width for stroking. A value of 0 strokes in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Returns the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	1:	android.graphics.Paint public void setStrokeWidth (float width) Set the width for stroking. Pass 0 to stroke in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Parameters width set the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	2:	android.graphics.Paint public void setStrokeCap (Paint.Cap cap) Set the paint's Cap. Parameters cap set the paint's line cap style, used whenever the paint's style is Stroke or StrokeAndFill.
	3:	android.graphics.Paint public Paint.Cap getStrokeCap () Return the paint's Cap, controlling how the start and end of stroked lines and paths are treated. Returns the line cap style for the paint, used whenever the paint's style is Stroke or StrokeAndFill.
	4:	android.graphics.Paint public void setStrokeJoin (Paint.Join join) Set the paint's Join. Parameters join set the paint's Join, used whenever the paint's style is Stroke or StrokeAndFill.
	5:	android.graphics.Paint public float getStrokeMiter () Return the paint's stroke miter value. Used to control the behavior of miter joins when the joins angle is sharp. Returns the paint's miter limit, used whenever the paint's style is Stroke or StrokeAndFill.
	6:	android.graphics.Paint public Paint.Style getStyle () Return the paint's style, used for controlling how primitives' geometries are interpreted (except for drawBitmap, which always assumes FILL_STYLE). Returns the paint's style setting (Fill, Stroke, StrokeAndFill)
	7:	android.graphics.Paint public void setStrokeMiter (float miter) Set the paint's stroke miter value. This is used to control the behavior of miter joins when the joins angle is sharp. This value must be >= 0. Parameters miter set the miter limit on the paint, used whenever the paint's style is Stroke or StrokeAndFill.
	8:	android.graphics.DashPathEffect public DashPathEffect (float[] intervals, float phase) The intervals array must contain an even number of entries (>=2), with the even indices specifying the "on" intervals, and the odd indices specifying the "off" intervals. phase is an offset into the intervals array (mod the sum of all of the intervals). The intervals array controls the length of the dashes. The paint's strokeWidth controls the thickness of the dashes. Note: this patheffect only affects drawing with the paint's style is set to STROKE or FILL_AND_STROKE. It is ignored if the drawing is done with style == FILL. Parameters intervals array of ON and OFF distances phase offset into the intervals array
	9:	android.graphics.PathDashPathEffect public PathDashPathEffect (Path shape, float advance, float phase, PathDashPathEffect.Style style) Dash the drawn path by stamping it with the specified shape. This only applies to drawings when the paint's style is STROKE or STROKE_AND_FILL. If the paint's style is FILL, then this effect is ignored. The paint's strokeWidth does not affect the results. Parameters shape The path to stamp along advance spacing between each stamp of shape phase amount to offset before the first shape is stamped style how to transform the shape at each position as it is stamped
setFont
Sets the font for all subsequent text rendering operations
	0:	android.graphics.Paint public void setTextLocale (Locale locale) Set the text locale. The text locale affects how the text is drawn for some languages. For example, if the locale is CHINESE or CHINA, then the text renderer will prefer to draw text using a Chinese font. Likewise, if the locale is JAPANESE or JAPAN, then the text renderer will prefer to draw text using a Japanese font. This distinction is important because Chinese and Japanese text both use many of the same Unicode code points but their appearance is subtly different for each language. By default, the text locale is initialized to the system locale (as returned by getDefault()). This assumes that the text to be rendered will most likely be in the user's preferred language. If the actual language of the text is known, then it can be provided to the text renderer using this method. The text renderer may attempt to guess the language script based on the contents of the text to be drawn independent of the text locale here. Specifying the text locale just helps it do a better job in certain ambiguous cases Parameters locale the paint's locale value for drawing text, must not be null.
	1:	android.text.Layout protected Layout (CharSequence text, TextPaint paint, int width, Layout.Alignment align, float spacingMult, float spacingAdd) Subclasses of Layout use this constructor to set the display text, width, and other standard properties. Parameters text the text to render paint the default paint for the layout. Styles can override various attributes of the paint. width the wrapping width for the text. align whether to left, right, or center the text. Styles can override the alignment. spacingMult factor by which to scale the font size to get the default line spacing spacingAdd amount to add to the default line spacing
	2:	android.preference.DialogPreference public void setNegativeButtonText (CharSequence negativeButtonText) Sets the text of the negative button of the dialog. This will be shown on subsequent dialogs. Parameters negativeButtonText The text of the negative button.
	3:	android.preference.DialogPreference public void setPositiveButtonText (CharSequence positiveButtonText) Sets the text of the positive button of the dialog. This will be shown on subsequent dialogs. Parameters positiveButtonText The text of the positive button.
	4:	android.graphics.Canvas public int save () Saves the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Returns The value to pass to restoreToCount() to balance this save()
	5:	android.webkit.WebSettings public synchronized void setCursiveFontFamily (String font) Sets the cursive font family name. The default is "cursive". Parameters font a font family name
	6:	android.webkit.WebSettings public synchronized void setFantasyFontFamily (String font) Sets the fantasy font family name. The default is "fantasy". Parameters font a font family name
	7:	android.webkit.WebSettings public synchronized void setFixedFontFamily (String font) Sets the fixed font family name. The default is "monospace". Parameters font a font family name
	8:	android.webkit.WebSettings public synchronized void setSansSerifFontFamily (String font) Sets the sans-serif font family name. The default is "sans-serif". Parameters font a font family name
	9:	android.webkit.WebSettings public synchronized void setSerifFontFamily (String font) Sets the serif font family name. The default is "sans-serif". Parameters font a font family name
getClipX
Gets the X offset of the current clipping area, relative to the coordinate system origin of this graphics context
	0:	android.widget.OverScroller public final int getCurrX () Returns the current X offset in the scroll. Returns The new X offset as an absolute distance from the origin.
	1:	android.widget.Scroller public final int getCurrX () Returns the current X offset in the scroll. Returns The new X offset as an absolute distance from the origin.
	2:	android.support.v4.widget.ScrollerCompat public int getCurrX () Returns the current X offset in the scroll. Returns The new X offset as an absolute distance from the origin.
	3:	android.hardware.Camera.Parameters public List<Camera.Area> getFocusAreas () Gets the current focus areas. Camera driver uses the areas to decide focus. Before using this API or setFocusAreas(List), apps should call getMaxNumFocusAreas() to know the maximum number of focus areas first. If the value is 0, focus area is not supported. Each focus area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of setDisplayOrientation(int). Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of focus areas cannot be 0 or negative. The weight must range from 1 to 1000. The weight should be interpreted as a per-pixel weight - all pixels in the area have the specified weight. This means a small area with the same weight as a larger area will have less influence on the focusing than the larger area. Focus areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null focus area list means the driver is free to select focus targets as it wants. For example, the driver may use more signals to select focus areas and change them dynamically. Apps can set the focus area list to null if they want the driver to completely control focusing. Focus areas are relative to the current field of view (getZoom()). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The focus area cannot be set to be outside the current field of view, even when using zoom. Focus area only has effect if the current focus mode is FOCUS_MODE_AUTO, FOCUS_MODE_MACRO, FOCUS_MODE_CONTINUOUS_VIDEO, or FOCUS_MODE_CONTINUOUS_PICTURE. Returns a list of current focus areas
	4:	android.hardware.Camera.Parameters public List<Camera.Area> getMeteringAreas () Gets the current metering areas. Camera driver uses these areas to decide exposure. Before using this API or setMeteringAreas(List), apps should call getMaxNumMeteringAreas() to know the maximum number of metering areas first. If the value is 0, metering area is not supported. Each metering area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of setDisplayOrientation(int). Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of metering areas cannot be 0 or negative. The weight must range from 1 to 1000, and represents a weight for every pixel in the area. This means that a large metering area with the same weight as a smaller area will have more effect in the metering result. Metering areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null metering area list means the driver is free to meter as it chooses. For example, the driver may use more signals to select metering areas and change them dynamically. Apps can set the metering area list to null if they want the driver to completely control metering. Metering areas are relative to the current field of view (getZoom()). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The metering area cannot be set to be outside the current field of view, even when using zoom. No matter what metering areas are, the final exposure are compensated by setExposureCompensation(int). Returns a list of current metering areas
	5:	android.support.v4.widget.ViewDragHelper public boolean isCapturedViewUnder (int x, int y) Determine if the currently captured view is under the given point in the parent view's coordinate system. If there is no captured view this method will return false. Parameters x X position to test in the parent's coordinate system y Y position to test in the parent's coordinate system Returns true if the captured view is under the given point, false otherwise
	6:	android.graphics.Canvas public final Rect getClipBounds () Retrieve the bounds of the current clip (in local coordinates). Returns the clip bounds, or [0, 0, 0, 0] if the clip is empty.
	7:	android.graphics.Canvas public boolean clipRegion (Region region) Intersect the current clip with the specified region. Note that unlike clipRect() and clipPath() which transform their arguments by the current matrix, clipRegion() assumes its argument is already in the coordinate system of the current layer's bitmap, and so not transformation is performed. Parameters region The region to operate on the current clip, based on op Returns true if the resulting is non-empty
	8:	android.view.DragEvent public float getX () Gets the X coordinate of the drag point. The value is only valid if the event action is ACTION_DRAG_LOCATION or ACTION_DROP. Returns The current drag point's Y coordinate
	9:	android.app.ActivityOptions public static ActivityOptions makeScaleUpAnimation (View source, int startX, int startY, int startWidth, int startHeight) Create an ActivityOptions specifying an animation where the new activity is scaled from a small originating area of the screen to its final full representation. If the Intent this is being used with has not set its Intent.setSourceBounds, those bounds will be filled in for you based on the initial bounds passed in here. Parameters source The View that the new activity is animating from. This defines the coordinate space for startX and startY. startX The x starting location of the new activity, relative to source. startY The y starting location of the activity, relative to source. startWidth The initial width of the new activity. startHeight The initial height of the new activity. Returns Returns a new ActivityOptions object that you can use to supply these options as the options Bundle when starting an activity.
getClipY
Gets the Y offset of the current clipping area, relative to the coordinate system origin of this graphics context
	0:	android.widget.OverScroller public final int getCurrY () Returns the current Y offset in the scroll. Returns The new Y offset as an absolute distance from the origin.
	1:	android.widget.Scroller public final int getCurrY () Returns the current Y offset in the scroll. Returns The new Y offset as an absolute distance from the origin.
	2:	android.support.v4.widget.ScrollerCompat public int getCurrY () Returns the current Y offset in the scroll. Returns The new Y offset as an absolute distance from the origin.
	3:	android.view.DragEvent public float getY () Gets the Y coordinate of the drag point. The value is valid if the event action is ACTION_DRAG_ENTERED, ACTION_DRAG_LOCATION, ACTION_DROP, or ACTION_DRAG_EXITED. Returns The current drag point's Y coordinate
	4:	android.hardware.Camera.Parameters public List<Camera.Area> getFocusAreas () Gets the current focus areas. Camera driver uses the areas to decide focus. Before using this API or setFocusAreas(List), apps should call getMaxNumFocusAreas() to know the maximum number of focus areas first. If the value is 0, focus area is not supported. Each focus area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of setDisplayOrientation(int). Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of focus areas cannot be 0 or negative. The weight must range from 1 to 1000. The weight should be interpreted as a per-pixel weight - all pixels in the area have the specified weight. This means a small area with the same weight as a larger area will have less influence on the focusing than the larger area. Focus areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null focus area list means the driver is free to select focus targets as it wants. For example, the driver may use more signals to select focus areas and change them dynamically. Apps can set the focus area list to null if they want the driver to completely control focusing. Focus areas are relative to the current field of view (getZoom()). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The focus area cannot be set to be outside the current field of view, even when using zoom. Focus area only has effect if the current focus mode is FOCUS_MODE_AUTO, FOCUS_MODE_MACRO, FOCUS_MODE_CONTINUOUS_VIDEO, or FOCUS_MODE_CONTINUOUS_PICTURE. Returns a list of current focus areas
	5:	android.support.v4.widget.ViewDragHelper public boolean isCapturedViewUnder (int x, int y) Determine if the currently captured view is under the given point in the parent view's coordinate system. If there is no captured view this method will return false. Parameters x X position to test in the parent's coordinate system y Y position to test in the parent's coordinate system Returns true if the captured view is under the given point, false otherwise
	6:	android.hardware.Camera.Parameters public List<Camera.Area> getMeteringAreas () Gets the current metering areas. Camera driver uses these areas to decide exposure. Before using this API or setMeteringAreas(List), apps should call getMaxNumMeteringAreas() to know the maximum number of metering areas first. If the value is 0, metering area is not supported. Each metering area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of setDisplayOrientation(int). Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of metering areas cannot be 0 or negative. The weight must range from 1 to 1000, and represents a weight for every pixel in the area. This means that a large metering area with the same weight as a smaller area will have more effect in the metering result. Metering areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null metering area list means the driver is free to meter as it chooses. For example, the driver may use more signals to select metering areas and change them dynamically. Apps can set the metering area list to null if they want the driver to completely control metering. Metering areas are relative to the current field of view (getZoom()). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The metering area cannot be set to be outside the current field of view, even when using zoom. No matter what metering areas are, the final exposure are compensated by setExposureCompensation(int). Returns a list of current metering areas
	7:	android.graphics.Canvas public final Rect getClipBounds () Retrieve the bounds of the current clip (in local coordinates). Returns the clip bounds, or [0, 0, 0, 0] if the clip is empty.
	8:	android.view.DragEvent public float getX () Gets the X coordinate of the drag point. The value is only valid if the event action is ACTION_DRAG_LOCATION or ACTION_DROP. Returns The current drag point's Y coordinate
	9:	android.graphics.Canvas public boolean clipRegion (Region region) Intersect the current clip with the specified region. Note that unlike clipRect() and clipPath() which transform their arguments by the current matrix, clipRegion() assumes its argument is already in the coordinate system of the current layer's bitmap, and so not transformation is performed. Parameters region The region to operate on the current clip, based on op Returns true if the resulting is non-empty
getClipWidth
Gets the width of the current clipping area
	0:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	1:	android.hardware.Camera.Parameters public List<Camera.Area> getFocusAreas () Gets the current focus areas. Camera driver uses the areas to decide focus. Before using this API or setFocusAreas(List), apps should call getMaxNumFocusAreas() to know the maximum number of focus areas first. If the value is 0, focus area is not supported. Each focus area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of setDisplayOrientation(int). Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of focus areas cannot be 0 or negative. The weight must range from 1 to 1000. The weight should be interpreted as a per-pixel weight - all pixels in the area have the specified weight. This means a small area with the same weight as a larger area will have less influence on the focusing than the larger area. Focus areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null focus area list means the driver is free to select focus targets as it wants. For example, the driver may use more signals to select focus areas and change them dynamically. Apps can set the focus area list to null if they want the driver to completely control focusing. Focus areas are relative to the current field of view (getZoom()). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The focus area cannot be set to be outside the current field of view, even when using zoom. Focus area only has effect if the current focus mode is FOCUS_MODE_AUTO, FOCUS_MODE_MACRO, FOCUS_MODE_CONTINUOUS_VIDEO, or FOCUS_MODE_CONTINUOUS_PICTURE. Returns a list of current focus areas
	2:	android.hardware.Camera.Parameters public List<Camera.Area> getMeteringAreas () Gets the current metering areas. Camera driver uses these areas to decide exposure. Before using this API or setMeteringAreas(List), apps should call getMaxNumMeteringAreas() to know the maximum number of metering areas first. If the value is 0, metering area is not supported. Each metering area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of setDisplayOrientation(int). Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of metering areas cannot be 0 or negative. The weight must range from 1 to 1000, and represents a weight for every pixel in the area. This means that a large metering area with the same weight as a smaller area will have more effect in the metering result. Metering areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null metering area list means the driver is free to meter as it chooses. For example, the driver may use more signals to select metering areas and change them dynamically. Apps can set the metering area list to null if they want the driver to completely control metering. Metering areas are relative to the current field of view (getZoom()). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The metering area cannot be set to be outside the current field of view, even when using zoom. No matter what metering areas are, the final exposure are compensated by setExposureCompensation(int). Returns a list of current metering areas
	3:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
	4:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	5:	android.content.ClipboardManager public ClipData getPrimaryClip () Returns the current primary clip on the clipboard.
	6:	android.graphics.Canvas public final Rect getClipBounds () Retrieve the bounds of the current clip (in local coordinates). Returns the clip bounds, or [0, 0, 0, 0] if the clip is empty.
	7:	android.content.ClipboardManager public void setPrimaryClip (ClipData clip) Sets the current primary clip on the clipboard. This is the clip that is involved in normal cut and paste operations. Parameters clip The clipped data item to set.
	8:	android.view.View public void setClipBounds (Rect clipBounds) Sets a rectangular area on this view to which the view will be clipped when it is drawn. Setting the value to null will remove the clip bounds and the view will draw normally, using its full bounds. Parameters clipBounds The rectangular area, in the local coordinates of this view, to which future drawing operations will be clipped.
	9:	android.content.ClipboardManager public boolean hasPrimaryClip () Returns true if there is currently a primary clip on the clipboard.
getClipHeight
Gets the height of the current clipping area
	0:	android.hardware.Camera.Parameters public List<Camera.Area> getFocusAreas () Gets the current focus areas. Camera driver uses the areas to decide focus. Before using this API or setFocusAreas(List), apps should call getMaxNumFocusAreas() to know the maximum number of focus areas first. If the value is 0, focus area is not supported. Each focus area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of setDisplayOrientation(int). Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of focus areas cannot be 0 or negative. The weight must range from 1 to 1000. The weight should be interpreted as a per-pixel weight - all pixels in the area have the specified weight. This means a small area with the same weight as a larger area will have less influence on the focusing than the larger area. Focus areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null focus area list means the driver is free to select focus targets as it wants. For example, the driver may use more signals to select focus areas and change them dynamically. Apps can set the focus area list to null if they want the driver to completely control focusing. Focus areas are relative to the current field of view (getZoom()). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The focus area cannot be set to be outside the current field of view, even when using zoom. Focus area only has effect if the current focus mode is FOCUS_MODE_AUTO, FOCUS_MODE_MACRO, FOCUS_MODE_CONTINUOUS_VIDEO, or FOCUS_MODE_CONTINUOUS_PICTURE. Returns a list of current focus areas
	1:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	2:	android.hardware.Camera.Parameters public List<Camera.Area> getMeteringAreas () Gets the current metering areas. Camera driver uses these areas to decide exposure. Before using this API or setMeteringAreas(List), apps should call getMaxNumMeteringAreas() to know the maximum number of metering areas first. If the value is 0, metering area is not supported. Each metering area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of setDisplayOrientation(int). Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of metering areas cannot be 0 or negative. The weight must range from 1 to 1000, and represents a weight for every pixel in the area. This means that a large metering area with the same weight as a smaller area will have more effect in the metering result. Metering areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null metering area list means the driver is free to meter as it chooses. For example, the driver may use more signals to select metering areas and change them dynamically. Apps can set the metering area list to null if they want the driver to completely control metering. Metering areas are relative to the current field of view (getZoom()). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The metering area cannot be set to be outside the current field of view, even when using zoom. No matter what metering areas are, the final exposure are compensated by setExposureCompensation(int). Returns a list of current metering areas
	3:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
	4:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	5:	android.content.ClipboardManager public ClipData getPrimaryClip () Returns the current primary clip on the clipboard.
	6:	android.graphics.Canvas public final Rect getClipBounds () Retrieve the bounds of the current clip (in local coordinates). Returns the clip bounds, or [0, 0, 0, 0] if the clip is empty.
	7:	android.content.ClipboardManager public void setPrimaryClip (ClipData clip) Sets the current primary clip on the clipboard. This is the clip that is involved in normal cut and paste operations. Parameters clip The clipped data item to set.
	8:	android.view.View public void setClipBounds (Rect clipBounds) Sets a rectangular area on this view to which the view will be clipped when it is drawn. Setting the value to null will remove the clip bounds and the view will draw normally, using its full bounds. Parameters clipBounds The rectangular area, in the local coordinates of this view, to which future drawing operations will be clipped.
	9:	android.content.ClipboardManager public boolean hasPrimaryClip () Returns true if there is currently a primary clip on the clipboard.
clipRect
Intersects the current clip with the specified rectangle
	0:	android.graphics.Canvas public boolean clipRect (RectF rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	1:	android.graphics.Canvas public boolean clipRect (Rect rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	2:	android.graphics.Canvas public boolean clipRect (Rect rect, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. op How the clip is modified Returns true if the resulting clip is non-empty
	3:	android.graphics.Canvas public boolean clipRect (RectF rect, Region.Op op) Modify the current clip with the specified rectangle. Parameters rect The rect to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	4:	android.graphics.Canvas public boolean clipRect (int left, int top, int right, int bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	5:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	6:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	7:	android.graphics.Canvas public boolean clipPath (Path path) Intersect the current clip with the specified path. Parameters path The path to intersect with the current clip Returns true if the resulting is non-empty
	8:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	9:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
setClip
Sets the current clip to the rectangle specified by the given coordinates
	0:	android.graphics.Canvas public boolean clipRect (Rect rect, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. op How the clip is modified Returns true if the resulting clip is non-empty
	1:	android.graphics.Canvas public boolean clipRect (RectF rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	2:	android.graphics.Canvas public boolean clipRect (Rect rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	3:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	4:	android.graphics.Canvas public boolean clipRect (int left, int top, int right, int bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	5:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	6:	android.graphics.Rect public void readFromParcel (Parcel in) Set the rectangle's coordinates from the data stored in the specified parcel. To write a rectangle to a parcel, call writeToParcel(). Parameters in The parcel to read the rectangle's coordinates from
	7:	android.graphics.RectF public void readFromParcel (Parcel in) Set the rectangle's coordinates from the data stored in the specified parcel. To write a rectangle to a parcel, call writeToParcel(). Parameters in The parcel to read the rectangle's coordinates from
	8:	android.graphics.Canvas public boolean clipRect (RectF rect, Region.Op op) Modify the current clip with the specified rectangle. Parameters rect The rect to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	9:	android.graphics.Rect public void set (int left, int top, int right, int bottom) Set the rectangle's coordinates to the specified values. Note: no range checking is performed, so it is up to the caller to ensure that left <= right and top <= bottom. Parameters left The X coordinate of the left side of the rectangle top The Y coordinate of the top of the rectangle right The X coordinate of the right side of the rectangle bottom The Y coordinate of the bottom of the rectangle
drawLine
Draws a line between the coordinates \(x1,y1\) and \(x2,y2\) using the current color and stroke style
	0:	android.graphics.Canvas public void drawLines (float[] pts, int offset, int count, Paint paint) Draw a series of lines. Each line is taken from 4 consecutive values in the pts array. Thus to draw 1 line, the array must contain at least 4 values. This is logically the same as drawing the array as follows: drawLine(pts[0], pts[1], pts[2], pts[3]) followed by drawLine(pts[4], pts[5], pts[6], pts[7]) and so on. Parameters pts Array of points to draw [x0 y0 x1 y1 x2 y2 ...] offset Number of values in the array to skip before drawing. count The number of values in the array to process, after skipping "offset" of them. Since each line uses 4 values, the number of "lines" that are drawn is really (count >> 2). paint The paint used to draw the points
	1:	android.graphics.Canvas public void drawLine (float startX, float startY, float stopX, float stopY, Paint paint) Draw a line segment with the specified start and stop x,y coordinates, using the specified paint. Note that since a line is always "framed", the Style is ignored in the paint. Degenerate lines (length is 0) will not be drawn. Parameters startX The x-coordinate of the start point of the line startY The y-coordinate of the start point of the line paint The paint used to draw the line
	2:	android.graphics.Canvas public void drawLines (float[] pts, Paint paint) 
	3:	android.graphics.Canvas public void drawPoints (float[] pts, int offset, int count, Paint paint) Draw a series of points. Each point is centered at the coordinate specified by pts[], and its diameter is specified by the paint's stroke width (as transformed by the canvas' CTM), with special treatment for a stroke width of 0, which always draws exactly 1 pixel (or at most 4 if antialiasing is enabled). The shape of the point is controlled by the paint's Cap type. The shape is a square, unless the cap type is Round, in which case the shape is a circle. Parameters pts Array of points to draw [x0 y0 x1 y1 x2 y2 ...] offset Number of values to skip before starting to draw. count The number of values to process, after skipping offset of them. Since one point uses two values, the number of "points" that are drawn is really (count >> 1). paint The paint used to draw the points
	4:	android.graphics.LinearGradient public LinearGradient (float x0, float y0, float x1, float y1, int[] colors, float[] positions, Shader.TileMode tile) Create a shader that draws a linear gradient along a line. Parameters x0 The x-coordinate for the start of the gradient line y0 The y-coordinate for the start of the gradient line x1 The x-coordinate for the end of the gradient line y1 The y-coordinate for the end of the gradient line colors The colors to be distributed along the gradient line positions May be null. The relative positions [0..1] of each corresponding color in the colors array. If this is null, the the colors are distributed evenly along the gradient line. tile The Shader tiling mode
	5:	android.gesture.GestureUtils public static float[] temporalSampling (GestureStroke stroke, int numPoints) Samples a stroke temporally into a given number of evenly-distributed points. Parameters stroke the gesture stroke to be sampled numPoints the number of points Returns the sampled points in the form of [x1, y1, x2, y2, ..., xn, yn]
	6:	android.graphics.LinearGradient public LinearGradient (float x0, float y0, float x1, float y1, int color0, int color1, Shader.TileMode tile) Create a shader that draws a linear gradient along a line. Parameters x0 The x-coordinate for the start of the gradient line y0 The y-coordinate for the start of the gradient line x1 The x-coordinate for the end of the gradient line y1 The y-coordinate for the end of the gradient line color0 The color at the start of the gradient line. color1 The color at the end of the gradient line. tile The Shader tiling mode
	7:	android.graphics.Path public void quadTo (float x1, float y1, float x2, float y2) Add a quadratic bezier from the last point, approaching control point (x1,y1), and ending at (x2,y2). If no moveTo() call has been made for this contour, the first point is automatically set to (0,0). Parameters x1 The x-coordinate of the control point on a quadratic curve y1 The y-coordinate of the control point on a quadratic curve x2 The x-coordinate of the end point on a quadratic curve y2 The y-coordinate of the end point on a quadratic curve
	8:	android.graphics.Path public void cubicTo (float x1, float y1, float x2, float y2, float x3, float y3) Add a cubic bezier from the last point, approaching control points (x1,y1) and (x2,y2), and ending at (x3,y3). If no moveTo() call has been made for this contour, the first point is automatically set to (0,0). Parameters x1 The x-coordinate of the 1st control point on a cubic curve y1 The y-coordinate of the 1st control point on a cubic curve x2 The x-coordinate of the 2nd control point on a cubic curve y2 The y-coordinate of the 2nd control point on a cubic curve x3 The x-coordinate of the end point on a cubic curve y3 The y-coordinate of the end point on a cubic curve
	9:	android.graphics.Paint public void setStrokeCap (Paint.Cap cap) Set the paint's Cap. Parameters cap set the paint's line cap style, used whenever the paint's style is Stroke or StrokeAndFill.
fillRect
Fills the specified rectangle with the current color
	0:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	1:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	2:	android.graphics.Bitmap public void eraseColor (int c) Fills the bitmap's pixels with the specified Color. Throws IllegalStateException if the bitmap is not mutable.
	3:	android.graphics.Canvas public void drawPaint (Paint paint) Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint. Parameters paint The paint used to draw onto the canvas
	4:	android.text.Layout public void getSelectionPath (int start, int end, Path dest) Fills in the specified Path with a representation of a highlight between the specified offsets. This will often be a rectangle or a potentially discontinuous set of rectangles. If the start and end are the same, the returned path is empty.
	5:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	6:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, Rect src, RectF dst, Paint paint) Draw the specified bitmap, scaling/translating automatically to fill the destination rectangle. If the source rectangle is not null, it specifies the subset of the bitmap to draw. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. This function ignores the density associated with the bitmap. This is because the source and destination rectangle coordinate spaces are in their respective densities, so must already have the appropriate scaling factor applied. Parameters bitmap The bitmap to be drawn src May be null. The subset of the bitmap to be drawn dst The rectangle that the bitmap will be scaled/translated to fit into paint May be null. The paint used to draw the bitmap
	7:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, Rect src, Rect dst, Paint paint) Draw the specified bitmap, scaling/translating automatically to fill the destination rectangle. If the source rectangle is not null, it specifies the subset of the bitmap to draw. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. This function ignores the density associated with the bitmap. This is because the source and destination rectangle coordinate spaces are in their respective densities, so must already have the appropriate scaling factor applied. Parameters bitmap The bitmap to be drawn src May be null. The subset of the bitmap to be drawn dst The rectangle that the bitmap will be scaled/translated to fit into paint May be null. The paint used to draw the bitmap
	8:	android.graphics.Canvas public void drawRect (Rect r, Paint paint) Draw the specified Rect using the specified Paint. The rectangle will be filled or framed based on the Style in the paint. Parameters r The rectangle to be drawn. paint The paint used to draw the rectangle
	9:	android.graphics.Canvas public void drawRect (float left, float top, float right, float bottom, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters left The left side of the rectangle to be drawn top The top side of the rectangle to be drawn right The right side of the rectangle to be drawn bottom The bottom side of the rectangle to be drawn paint The paint used to draw the rect
drawRect
Draws the outline of the specified rectangle using the current color and stroke style
	0:	android.graphics.Canvas public void drawRect (Rect r, Paint paint) Draw the specified Rect using the specified Paint. The rectangle will be filled or framed based on the Style in the paint. Parameters r The rectangle to be drawn. paint The paint used to draw the rectangle
	1:	android.graphics.Canvas public void drawRect (RectF rect, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters rect The rect to be drawn paint The paint used to draw the rect
	2:	android.graphics.Canvas public void drawRect (float left, float top, float right, float bottom, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters left The left side of the rectangle to be drawn top The top side of the rectangle to be drawn right The right side of the rectangle to be drawn bottom The bottom side of the rectangle to be drawn paint The paint used to draw the rect
	3:	android.graphics.Paint public float getStrokeWidth () Return the width for stroking. A value of 0 strokes in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Returns the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	4:	android.graphics.Paint public void setStrokeWidth (float width) Set the width for stroking. Pass 0 to stroke in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Parameters width set the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	5:	android.graphics.Canvas public void drawOval (RectF oval, Paint paint) Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint. Parameters oval The rectangle bounds of the oval to be drawn
	6:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	7:	android.graphics.Canvas public void drawPaint (Paint paint) Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint. Parameters paint The paint used to draw onto the canvas
	8:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	9:	android.graphics.Canvas public void drawText (CharSequence text, int start, int end, float x, float y, Paint paint) Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint. The origin is interpreted based on the Align setting in the Paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of origin for where to draw the text y The y-coordinate of origin for where to draw the text paint The paint used for the text (e.g. color, size, style)
drawRoundRect
Draws the outline of the specified rounded corner rectangle using the current color and stroke style
	0:	android.graphics.Canvas public void drawRoundRect (RectF rect, float rx, float ry, Paint paint) Draw the specified round-rect using the specified paint. The roundrect will be filled or framed based on the Style in the paint. Parameters rect The rectangular bounds of the roundRect to be drawn rx The x-radius of the oval used to round the corners ry The y-radius of the oval used to round the corners paint The paint used to draw the roundRect
	1:	android.graphics.drawable.PaintDrawable public void setCornerRadius (float radius) Specify radius for the corners of the rectangle. If this is > 0, then the drawable is drawn in a round-rectangle, rather than a rectangle. Parameters radius the radius for the corners of the rectangle
	2:	android.graphics.Canvas public void drawRect (Rect r, Paint paint) Draw the specified Rect using the specified Paint. The rectangle will be filled or framed based on the Style in the paint. Parameters r The rectangle to be drawn. paint The paint used to draw the rectangle
	3:	android.graphics.Paint public float getStrokeWidth () Return the width for stroking. A value of 0 strokes in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Returns the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	4:	android.graphics.Paint public void setStrokeWidth (float width) Set the width for stroking. Pass 0 to stroke in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Parameters width set the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	5:	android.graphics.Canvas public void drawRect (float left, float top, float right, float bottom, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters left The left side of the rectangle to be drawn top The top side of the rectangle to be drawn right The right side of the rectangle to be drawn bottom The bottom side of the rectangle to be drawn paint The paint used to draw the rect
	6:	android.graphics.Canvas public void drawOval (RectF oval, Paint paint) Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint. Parameters oval The rectangle bounds of the oval to be drawn
	7:	android.graphics.Path public void addRoundRect (RectF rect, float rx, float ry, Path.Direction dir) Add a closed round-rectangle contour to the path Parameters rect The bounds of a round-rectangle to add to the path rx The x-radius of the rounded corners on the round-rectangle ry The y-radius of the rounded corners on the round-rectangle dir The direction to wind the round-rectangle's contour
	8:	android.graphics.Canvas public void drawRect (RectF rect, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters rect The rect to be drawn paint The paint used to draw the rect
	9:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
fillRoundRect
Fills the specified rounded corner rectangle with the current color
	0:	android.graphics.drawable.PaintDrawable public void setCornerRadius (float radius) Specify radius for the corners of the rectangle. If this is > 0, then the drawable is drawn in a round-rectangle, rather than a rectangle. Parameters radius the radius for the corners of the rectangle
	1:	android.graphics.Path public void addRoundRect (RectF rect, float rx, float ry, Path.Direction dir) Add a closed round-rectangle contour to the path Parameters rect The bounds of a round-rectangle to add to the path rx The x-radius of the rounded corners on the round-rectangle ry The y-radius of the rounded corners on the round-rectangle dir The direction to wind the round-rectangle's contour
	2:	android.graphics.Canvas public void drawRoundRect (RectF rect, float rx, float ry, Paint paint) Draw the specified round-rect using the specified paint. The roundrect will be filled or framed based on the Style in the paint. Parameters rect The rectangular bounds of the roundRect to be drawn rx The x-radius of the oval used to round the corners ry The y-radius of the oval used to round the corners paint The paint used to draw the roundRect
	3:	android.graphics.drawable.shapes.RoundRectShape public RoundRectShape (float[] outerRadii, RectF inset, float[] innerRadii) RoundRectShape constructor. Specifies an outer (round)rect and an optional inner (round)rect. Parameters outerRadii An array of 8 radius values, for the outer roundrect. The first two floats are for the top-left corner (remaining pairs correspond clockwise). For no rounded corners on the outer rectangle, pass null. inset A RectF that specifies the distance from the inner rect to each side of the outer rect. For no inner, pass null. innerRadii An array of 8 radius values, for the inner roundrect. The first two floats are for the top-left corner (remaining pairs correspond clockwise). For no rounded corners on the inner rectangle, pass null. If inset parameter is null, this parameter is ignored.
	4:	android.graphics.drawable.GradientDrawable public void setCornerRadius (float radius) Specify radius for the corners of the gradient. If this is > 0, then the drawable is drawn in a round-rectangle, rather than a rectangle. This property is honored only when the shape is of type RECTANGLE. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters radius The radius in pixels of the corners of the rectangle shape See Also mutate() setCornerRadii(float[]) setShape(int)
	5:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	6:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	7:	android.graphics.Path public void addRoundRect (RectF rect, float[] radii, Path.Direction dir) Add a closed round-rectangle contour to the path. Each corner receives two radius values [X, Y]. The corners are ordered top-left, top-right, bottom-right, bottom-left Parameters rect The bounds of a round-rectangle to add to the path radii Array of 8 values, 4 pairs of [X,Y] radii dir The direction to wind the round-rectangle's contour
	8:	android.graphics.Bitmap public void eraseColor (int c) Fills the bitmap's pixels with the specified Color. Throws IllegalStateException if the bitmap is not mutable.
	9:	android.graphics.Canvas public void drawPaint (Paint paint) Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint. Parameters paint The paint used to draw onto the canvas
fillArc
Fills a circular or elliptical arc covering the specified rectangle
	0:	android.text.Layout public void getSelectionPath (int start, int end, Path dest) Fills in the specified Path with a representation of a highlight between the specified offsets. This will often be a rectangle or a potentially discontinuous set of rectangles. If the start and end are the same, the returned path is empty.
	1:	android.graphics.Canvas public void drawRect (Rect r, Paint paint) Draw the specified Rect using the specified Paint. The rectangle will be filled or framed based on the Style in the paint. Parameters r The rectangle to be drawn. paint The paint used to draw the rectangle
	2:	android.graphics.Canvas public void drawRect (float left, float top, float right, float bottom, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters left The left side of the rectangle to be drawn top The top side of the rectangle to be drawn right The right side of the rectangle to be drawn bottom The bottom side of the rectangle to be drawn paint The paint used to draw the rect
	3:	android.graphics.Canvas public void drawOval (RectF oval, Paint paint) Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint. Parameters oval The rectangle bounds of the oval to be drawn
	4:	android.graphics.Path public void addArc (RectF oval, float startAngle, float sweepAngle) Add the specified arc to the path as a new contour. Parameters oval The bounds of oval defining the shape and size of the arc startAngle Starting angle (in degrees) where the arc begins sweepAngle Sweep angle (in degrees) measured clockwise
	5:	java.security.spec.EllipticCurve public boolean equals (Object other) Returns whether the specified object equals to this elliptic curve. Parameters other the object to compare. Returns true if the specified object is equal to this elliptic curve, otherwise false.
	6:	android.graphics.Canvas public void drawPaint (Paint paint) Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint. Parameters paint The paint used to draw onto the canvas
	7:	android.graphics.Canvas public void drawRect (RectF rect, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters rect The rect to be drawn paint The paint used to draw the rect
	8:	java.security.spec.EllipticCurve public byte[] getSeed () Returns a copy of the seed that was used to generate this elliptic curve. Returns a copy of the seed that was used to generate this elliptic curve, or null if none specified.
	9:	android.graphics.Region public boolean set (int left, int top, int right, int bottom) Set the region to the specified rectangle
drawArc
Draws the outline of a circular or elliptical arc covering the specified rectangle, using the current color and stroke style
	0:	android.graphics.Canvas public void drawArc (RectF oval, float startAngle, float sweepAngle, boolean useCenter, Paint paint) Draw the specified arc, which will be scaled to fit inside the specified oval. If the start angle is negative or >= 360, the start angle is treated as start angle modulo 360. If the sweep angle is >= 360, then the oval is drawn completely. Note that this differs slightly from SkPath::arcTo, which treats the sweep angle modulo 360. If the sweep angle is negative, the sweep angle is treated as sweep angle modulo 360 The arc is drawn clockwise. An angle of 0 degrees correspond to the geometric angle of 0 degrees (3 o'clock on a watch.) Parameters oval The bounds of oval used to define the shape and size of the arc startAngle Starting angle (in degrees) where the arc begins sweepAngle Sweep angle (in degrees) measured clockwise useCenter If true, include the center of the oval in the arc, and close it if it is being stroked. This will draw a wedge paint The paint used to draw the arc
	1:	android.graphics.Canvas public void drawRect (Rect r, Paint paint) Draw the specified Rect using the specified Paint. The rectangle will be filled or framed based on the Style in the paint. Parameters r The rectangle to be drawn. paint The paint used to draw the rectangle
	2:	android.graphics.Paint public float getStrokeWidth () Return the width for stroking. A value of 0 strokes in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Returns the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	3:	android.graphics.Paint public void setStrokeWidth (float width) Set the width for stroking. Pass 0 to stroke in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Parameters width set the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	4:	android.graphics.Canvas public void drawRect (float left, float top, float right, float bottom, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters left The left side of the rectangle to be drawn top The top side of the rectangle to be drawn right The right side of the rectangle to be drawn bottom The bottom side of the rectangle to be drawn paint The paint used to draw the rect
	5:	android.graphics.Canvas public void drawOval (RectF oval, Paint paint) Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint. Parameters oval The rectangle bounds of the oval to be drawn
	6:	android.graphics.Canvas public void drawRect (RectF rect, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters rect The rect to be drawn paint The paint used to draw the rect
	7:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	8:	android.graphics.Canvas public void drawPaint (Paint paint) Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint. Parameters paint The paint used to draw onto the canvas
	9:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
drawString
Draws the specified String using the current font and color
	0:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	1:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	2:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	3:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	4:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	5:	android.graphics.Canvas public void drawVertices (Canvas.VertexMode mode, int vertexCount, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, Paint paint) Draw the array of vertices, interpreted as triangles (based on mode). The verts array is required, and specifies the x,y pairs for each vertex. If texs is non-null, then it is used to specify the coordinate in shader coordinates to use at each vertex (the paint must have a shader in this case). If there is no texs array, but there is a color array, then each color is interpolated across its corresponding triangle in a gradient. If both texs and colors arrays are present, then they behave as before, but the resulting color at each pixels is the result of multiplying the colors from the shader and the color-gradient together. The indices array is optional, but if it is present, then it is used to specify the index of each triangle, rather than just walking through the arrays in order. Parameters mode How to interpret the array of vertices vertexCount The number of values in the vertices array (and corresponding texs and colors arrays if non-null). Each logical vertex is two values (x, y), vertexCount must be a multiple of 2. verts Array of vertices for the mesh vertOffset Number of values in the verts to skip before drawing. texs May be null. If not null, specifies the coordinates to sample into the current shader (e.g. bitmap tile or gradient) texOffset Number of values in texs to skip before drawing. colors May be null. If not null, specifies a color for each vertex, to be interpolated across the triangle. colorOffset Number of values in colors to skip before drawing. indices If not null, array of indices to reference into the vertex (texs, colors) array. indexCount number of entries in the indices array (if not null). paint Specifies the shader to use if the texs array is non-null.
	6:	android.graphics.Canvas public void drawBitmap (int[] colors, int offset, int stride, float x, float y, int width, int height, boolean hasAlpha, Paint paint) Treat the specified array of colors as a bitmap, and draw it. This gives the same result as first creating a bitmap from the array, and then drawing it, but this method avoids explicitly creating a bitmap object which can be more efficient if the colors are changing often. Parameters colors Array of colors representing the pixels of the bitmap offset Offset into the array of colors for the first pixel stride The number of colors in the array between rows (must be >= width or <= -width). x The X coordinate for where to draw the bitmap y The Y coordinate for where to draw the bitmap width The width of the bitmap height The height of the bitmap hasAlpha True if the alpha channel of the colors contains valid values. If false, the alpha byte is ignored (assumed to be 0xFF for every pixel). paint May be null. The paint used to draw the bitmap
	7:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, float left, float top, Paint paint) Draw the specified bitmap, with its top/left corner at (x,y), using the specified paint, transformed by the current matrix. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. If the bitmap and canvas have different densities, this function will take care of automatically scaling the bitmap to draw at the same density as the canvas. Parameters bitmap The bitmap to be drawn left The position of the left side of the bitmap being drawn top The position of the top side of the bitmap being drawn paint The paint used to draw the bitmap (may be null)
	8:	android.graphics.drawable.GradientDrawable public void setColors (int[] colors) Sets the colors used to draw the gradient. Each color is specified as an ARGB integer and the array must contain at least 2 colors. Note: changing orientation will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the orientation. Parameters colors 2 or more ARGB colors See Also mutate() setColor(int)
	9:	android.graphics.Canvas public void drawText (CharSequence text, int start, int end, float x, float y, Paint paint) Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint. The origin is interpreted based on the Align setting in the Paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of origin for where to draw the text y The y-coordinate of origin for where to draw the text paint The paint used for the text (e.g. color, size, style)
drawSubstring
Draws the specified String using the current font and color
	0:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	1:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	2:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	3:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	4:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	5:	android.graphics.Canvas public void drawVertices (Canvas.VertexMode mode, int vertexCount, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, Paint paint) Draw the array of vertices, interpreted as triangles (based on mode). The verts array is required, and specifies the x,y pairs for each vertex. If texs is non-null, then it is used to specify the coordinate in shader coordinates to use at each vertex (the paint must have a shader in this case). If there is no texs array, but there is a color array, then each color is interpolated across its corresponding triangle in a gradient. If both texs and colors arrays are present, then they behave as before, but the resulting color at each pixels is the result of multiplying the colors from the shader and the color-gradient together. The indices array is optional, but if it is present, then it is used to specify the index of each triangle, rather than just walking through the arrays in order. Parameters mode How to interpret the array of vertices vertexCount The number of values in the vertices array (and corresponding texs and colors arrays if non-null). Each logical vertex is two values (x, y), vertexCount must be a multiple of 2. verts Array of vertices for the mesh vertOffset Number of values in the verts to skip before drawing. texs May be null. If not null, specifies the coordinates to sample into the current shader (e.g. bitmap tile or gradient) texOffset Number of values in texs to skip before drawing. colors May be null. If not null, specifies a color for each vertex, to be interpolated across the triangle. colorOffset Number of values in colors to skip before drawing. indices If not null, array of indices to reference into the vertex (texs, colors) array. indexCount number of entries in the indices array (if not null). paint Specifies the shader to use if the texs array is non-null.
	6:	android.graphics.Canvas public void drawBitmap (int[] colors, int offset, int stride, float x, float y, int width, int height, boolean hasAlpha, Paint paint) Treat the specified array of colors as a bitmap, and draw it. This gives the same result as first creating a bitmap from the array, and then drawing it, but this method avoids explicitly creating a bitmap object which can be more efficient if the colors are changing often. Parameters colors Array of colors representing the pixels of the bitmap offset Offset into the array of colors for the first pixel stride The number of colors in the array between rows (must be >= width or <= -width). x The X coordinate for where to draw the bitmap y The Y coordinate for where to draw the bitmap width The width of the bitmap height The height of the bitmap hasAlpha True if the alpha channel of the colors contains valid values. If false, the alpha byte is ignored (assumed to be 0xFF for every pixel). paint May be null. The paint used to draw the bitmap
	7:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, float left, float top, Paint paint) Draw the specified bitmap, with its top/left corner at (x,y), using the specified paint, transformed by the current matrix. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. If the bitmap and canvas have different densities, this function will take care of automatically scaling the bitmap to draw at the same density as the canvas. Parameters bitmap The bitmap to be drawn left The position of the left side of the bitmap being drawn top The position of the top side of the bitmap being drawn paint The paint used to draw the bitmap (may be null)
	8:	android.graphics.drawable.GradientDrawable public void setColors (int[] colors) Sets the colors used to draw the gradient. Each color is specified as an ARGB integer and the array must contain at least 2 colors. Note: changing orientation will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the orientation. Parameters colors 2 or more ARGB colors See Also mutate() setColor(int)
	9:	android.graphics.Canvas public void drawText (CharSequence text, int start, int end, float x, float y, Paint paint) Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint. The origin is interpreted based on the Align setting in the Paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of origin for where to draw the text y The y-coordinate of origin for where to draw the text paint The paint used for the text (e.g. color, size, style)
drawChar
Draws the specified character using the current font and color
	0:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	1:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	2:	android.graphics.Canvas public void drawText (CharSequence text, int start, int end, float x, float y, Paint paint) Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint. The origin is interpreted based on the Align setting in the Paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of origin for where to draw the text y The y-coordinate of origin for where to draw the text paint The paint used for the text (e.g. color, size, style)
	3:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	4:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	5:	android.graphics.Canvas public void drawPosText (char[] text, int index, int count, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array. This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. Parameters text The text to be drawn index The index of the first character to draw count The number of characters to draw, starting from index. pos Array of [x,y] positions, used to position each character paint The paint used for the text (e.g. color, size, style)
	6:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	7:	android.graphics.Canvas public void drawText (String text, int start, int end, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	8:	android.graphics.Canvas public void drawPosText (String text, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array. This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. Parameters text The text to be drawn pos Array of [x,y] positions, used to position each character paint The paint used for the text (e.g. color, size, style)
	9:	android.graphics.Canvas public void drawVertices (Canvas.VertexMode mode, int vertexCount, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, Paint paint) Draw the array of vertices, interpreted as triangles (based on mode). The verts array is required, and specifies the x,y pairs for each vertex. If texs is non-null, then it is used to specify the coordinate in shader coordinates to use at each vertex (the paint must have a shader in this case). If there is no texs array, but there is a color array, then each color is interpolated across its corresponding triangle in a gradient. If both texs and colors arrays are present, then they behave as before, but the resulting color at each pixels is the result of multiplying the colors from the shader and the color-gradient together. The indices array is optional, but if it is present, then it is used to specify the index of each triangle, rather than just walking through the arrays in order. Parameters mode How to interpret the array of vertices vertexCount The number of values in the vertices array (and corresponding texs and colors arrays if non-null). Each logical vertex is two values (x, y), vertexCount must be a multiple of 2. verts Array of vertices for the mesh vertOffset Number of values in the verts to skip before drawing. texs May be null. If not null, specifies the coordinates to sample into the current shader (e.g. bitmap tile or gradient) texOffset Number of values in texs to skip before drawing. colors May be null. If not null, specifies a color for each vertex, to be interpolated across the triangle. colorOffset Number of values in colors to skip before drawing. indices If not null, array of indices to reference into the vertex (texs, colors) array. indexCount number of entries in the indices array (if not null). paint Specifies the shader to use if the texs array is non-null.
drawChars
Draws the specified characters using the current font and color
	0:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	1:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	2:	android.graphics.Canvas public void drawText (CharSequence text, int start, int end, float x, float y, Paint paint) Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint. The origin is interpreted based on the Align setting in the Paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of origin for where to draw the text y The y-coordinate of origin for where to draw the text paint The paint used for the text (e.g. color, size, style)
	3:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	4:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	5:	android.graphics.Canvas public void drawPosText (char[] text, int index, int count, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array. This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. Parameters text The text to be drawn index The index of the first character to draw count The number of characters to draw, starting from index. pos Array of [x,y] positions, used to position each character paint The paint used for the text (e.g. color, size, style)
	6:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	7:	android.graphics.Canvas public void drawText (String text, int start, int end, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	8:	android.graphics.Canvas public void drawPosText (String text, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array. This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. Parameters text The text to be drawn pos Array of [x,y] positions, used to position each character paint The paint used for the text (e.g. color, size, style)
	9:	android.graphics.Canvas public void drawVertices (Canvas.VertexMode mode, int vertexCount, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, Paint paint) Draw the array of vertices, interpreted as triangles (based on mode). The verts array is required, and specifies the x,y pairs for each vertex. If texs is non-null, then it is used to specify the coordinate in shader coordinates to use at each vertex (the paint must have a shader in this case). If there is no texs array, but there is a color array, then each color is interpolated across its corresponding triangle in a gradient. If both texs and colors arrays are present, then they behave as before, but the resulting color at each pixels is the result of multiplying the colors from the shader and the color-gradient together. The indices array is optional, but if it is present, then it is used to specify the index of each triangle, rather than just walking through the arrays in order. Parameters mode How to interpret the array of vertices vertexCount The number of values in the vertices array (and corresponding texs and colors arrays if non-null). Each logical vertex is two values (x, y), vertexCount must be a multiple of 2. verts Array of vertices for the mesh vertOffset Number of values in the verts to skip before drawing. texs May be null. If not null, specifies the coordinates to sample into the current shader (e.g. bitmap tile or gradient) texOffset Number of values in texs to skip before drawing. colors May be null. If not null, specifies a color for each vertex, to be interpolated across the triangle. colorOffset Number of values in colors to skip before drawing. indices If not null, array of indices to reference into the vertex (texs, colors) array. indexCount number of entries in the indices array (if not null). paint Specifies the shader to use if the texs array is non-null.
drawImage
Draws the specified image by using the anchor point
	0:	android.webkit.WebView public void requestFocusNodeHref (Message hrefMsg) Requests the anchor or image element URL at the last tapped point. If hrefMsg is null, this method returns immediately and does not dispatch hrefMsg to its target. If the tapped point hits an image, an anchor, or an image in an anchor, the message associates strings in named keys in its data. The value paired with the key may be an empty string. Parameters hrefMsg the message to be dispatched with the result of the request. The message data contains three keys. "url" returns the anchor's href attribute. "title" returns the anchor's text. "src" returns the image's src attribute.
	1:	android.view.View.DragShadowBuilder public void onDrawShadow (Canvas canvas) Draws the shadow image. The system creates the Canvas object based on the dimensions it received from the onProvideShadowMetrics(Point, Point) callback. Parameters canvas A Canvas object in which to draw the shadow image.
	2:	android.widget.ListPopupWindow public View getAnchorView () Returns the view that will be used to anchor this popup. Returns The popup's anchor view
	3:	android.graphics.Canvas public void drawPoints (float[] pts, int offset, int count, Paint paint) Draw a series of points. Each point is centered at the coordinate specified by pts[], and its diameter is specified by the paint's stroke width (as transformed by the canvas' CTM), with special treatment for a stroke width of 0, which always draws exactly 1 pixel (or at most 4 if antialiasing is enabled). The shape of the point is controlled by the paint's Cap type. The shape is a square, unless the cap type is Round, in which case the shape is a circle. Parameters pts Array of points to draw [x0 y0 x1 y1 x2 y2 ...] offset Number of values to skip before starting to draw. count The number of values to process, after skipping offset of them. Since one point uses two values, the number of "points" that are drawn is really (count >> 1). paint The paint used to draw the points
	4:	android.widget.ListPopupWindow public void setAnchorView (View anchor) Sets the popup's anchor view. This popup will always be positioned relative to the anchor view when shown. Parameters anchor The view to use as an anchor.
	5:	android.webkit.WebChromeClient public Bitmap getDefaultVideoPoster () When not playing, video elements are represented by a 'poster' image. The image to use can be specified by the poster attribute of the video tag in HTML. If the attribute is absent, then a default poster will be used. This method allows the ChromeClient to provide that default image. Returns Bitmap The image to use as a default poster, or null if no such image is available.
	6:	android.graphics.Canvas public void drawLine (float startX, float startY, float stopX, float stopY, Paint paint) Draw a line segment with the specified start and stop x,y coordinates, using the specified paint. Note that since a line is always "framed", the Style is ignored in the paint. Degenerate lines (length is 0) will not be drawn. Parameters startX The x-coordinate of the start point of the line startY The y-coordinate of the start point of the line paint The paint used to draw the line
	7:	java.security.cert.PKIXCertPathBuilderResult public PKIXCertPathBuilderResult (CertPath certPath, TrustAnchor trustAnchor, PolicyNode policyTree, PublicKey subjectPublicKey) Creates a new PKIXCertPathBuilderResult instance with the specified validated certification path, the trust anchor of the certification path, the policy tree and the public key of the subject. Parameters certPath the validated certification path. trustAnchor the trust anchor. policyTree the policy tree (or null if not used). subjectPublicKey the public key. Throws NullPointerException if the cerPath, trustAnchor or subjectPolicyKey is null.
	8:	android.graphics.Canvas public void drawPoint (float x, float y, Paint paint) Helper for drawPoints() for drawing a single point.
	9:	android.graphics.SurfaceTexture public long getTimestamp () Retrieve the timestamp associated with the texture image set by the most recent call to updateTexImage. This timestamp is in nanoseconds, and is normally monotonically increasing. The timestamp should be unaffected by time-of-day adjustments, and for a camera should be strictly monotonic but for a MediaPlayer may be reset when the position is set. The specific meaning and zero point of the timestamp depends on the source providing images to the SurfaceTexture. Unless otherwise specified by the image source, timestamps cannot generally be compared across SurfaceTexture instances, or across multiple program invocations. It is mostly useful for determining time offsets between subsequent frames.
drawRegion
Copies a region of the specified source image to a location within the destination, possibly transforming \(rotating and reflecting\) the image data using the chosen transform function
	0:	javax.xml.transform.TransformerFactory public abstract Transformer newTransformer () Create a new Transformer that performs a copy of the Source to the Result. i.e. the "identity transform". Returns A Transformer object that may be used to perform a transformation in a single thread, never null. Throws TransformerConfigurationException Thrown if it is not possible to create a Transformer instance.
	1:	android.graphics.SurfaceTexture public void getTransformMatrix (float[] mtx) Retrieve the 4x4 texture coordinate transform matrix associated with the texture image set by the most recent call to updateTexImage. This transform matrix maps 2D homogeneous texture coordinates of the form (s, t, 0, 1) with s and t in the inclusive range [0, 1] to the texture coordinate that should be used to sample that location from the texture. Sampling the texture outside of the range of this transform is undefined. The matrix is stored in column-major order so that it may be passed directly to OpenGL ES via the glLoadMatrixf or glUniformMatrix4fv functions. Parameters mtx the array into which the 4x4 matrix will be stored. The array must have exactly 16 elements.
	2:	android.graphics.BitmapRegionDecoder public Bitmap decodeRegion (Rect rect, BitmapFactory.Options options) Decodes a rectangle region in the image specified by rect. Parameters rect The rectangle that specified the region to be decode. options null-ok; Options that control downsampling. inPurgeable is not supported. Returns The decoded bitmap, or null if the image data could not be decoded.
	3:	android.graphics.ColorMatrixColorFilter public ColorMatrixColorFilter (ColorMatrix matrix) Create a colorfilter that transforms colors through a 4x5 color matrix. Parameters matrix 4x5 matrix used to transform colors. It is copied into the filter, so changes made to the matrix after the filter is constructed will not be reflected in the filter.
	4:	javax.xml.transform.TransformerFactory public abstract Transformer newTransformer (Source source) Process the Source into a Transformer Object. The Source is an XSLT document that conforms to XSL Transformations (XSLT) Version 1.0. Care must be taken not to use this Transformer in multiple Threads running concurrently. Different TransformerFactories can be used concurrently by different Threads. Parameters source Source of XSLT document used to create Transformer. Examples of XML Sources include StreamSource, SAXSource and DOMSource. Returns A Transformer object that may be used to perform a transformation in a single Thread, never null. Throws TransformerConfigurationException Thrown if there are errors when parsing the Source or it is not possible to create a Transformer instance. See Also XSL Transformations (XSLT) Version 1.0
	5:	android.graphics.BitmapRegionDecoder public static BitmapRegionDecoder newInstance (FileDescriptor fd, boolean isShareable) Create a BitmapRegionDecoder from the file descriptor. The position within the descriptor will not be changed when this returns, so the descriptor can be used again as is. Currently only the JPEG and PNG formats are supported. Parameters fd The file descriptor containing the data to decode isShareable If this is true, then the BitmapRegionDecoder may keep a shallow reference to the input. If this is false, then the BitmapRegionDecoder will explicitly make a copy of the input data, and keep that. Even if sharing is allowed, the implementation may still decide to make a deep copy of the input data. If an image is progressively encoded, allowing sharing may degrade the decoding speed. Returns BitmapRegionDecoder, or null if the image data could not be decoded. Throws IOException if the image format is not supported or can not be decoded.
	6:	android.hardware.SensorManager public static boolean remapCoordinateSystem (float[] inR, int X, int Y, float[] outR) Rotates the supplied rotation matrix so it is expressed in a different coordinate system. This is typically used when an application needs to compute the three orientation angles of the device (see getOrientation(float[], float[])) in a different coordinate system. When the rotation matrix is used for drawing (for instance with OpenGL ES), it usually doesn't need to be transformed by this function, unless the screen is physically rotated, in which case you can use Display.getRotation() to retrieve the current rotation of the screen. Note that because the user is generally free to rotate their screen, you often should consider the rotation in deciding the parameters to use here. Examples: Using the camera (Y axis along the camera's axis) for an augmented reality application where the rotation angles are needed: remapCoordinateSystem(inR, AXIS_X, AXIS_Z, outR); Using the device as a mechanical compass when rotation is Surface.ROTATION_90: remapCoordinateSystem(inR, AXIS_Y, AXIS_MINUS_X, outR); Beware of the above example. This call is needed only to account for a rotation from its natural orientation when calculating the rotation angles (see getOrientation(float[], float[])). If the rotation matrix is also used for rendering, it may not need to be transformed, for instance if your Activity is running in landscape mode. Since the resulting coordinate system is orthonormal, only two axes need to be specified. Parameters inR the rotation matrix to be transformed. Usually it is the matrix returned by getRotationMatrix(float[], float[], float[], float[]). X defines on which world axis and direction the X axis of the device is mapped. Y defines on which world axis and direction the Y axis of the device is mapped. outR the transformed rotation matrix. inR and outR can be the same array, but it is not recommended for performance reason. Returns true on success. false if the input parameters are incorrect, for instance if X and Y define the same axis. Or if inR and outR don't have the same length. See Also getRotationMatrix(float[], float[], float[], float[])
	7:	android.provider.MediaStore.Images.Media public static final String insertImage (ContentResolver cr, Bitmap source, String title, String description) Insert an image and create a thumbnail for it. Parameters cr The content resolver to use source The stream to use for the image title The name of the image description The description of the image Returns The URL to the newly created image, or null if the image failed to be stored for any reason.
	8:	android.view.animation.Transformation public void set (Transformation t) Clones the specified transformation. Parameters t The transformation to clone.
	9:	android.opengl.ETC1Util public static ETC1Util.ETC1Texture compressTexture (Buffer input, int width, int height, int pixelSize, int stride) Helper function that compresses an image into an ETC1Texture. Parameters input a native order direct buffer containing the image data width the width of the image in pixels height the height of the image in pixels pixelSize the size of a pixel in bytes (2 or 3) stride the width of a line of the image in bytes Returns the ETC1 texture.
copyArea
Copies the contents of a rectangular area \(x_src, y_src, width, height\) to a destination area, whose anchor point identified by anchor is located at \(x_dest, y_dest\)
	0:	android.widget.PopupWindow public void update (View anchor, int xoff, int yoff, int width, int height) Updates the position and the dimension of the popup window. Width and height can be set to -1 to update location only. Calling this function also updates the window with the current popup state as described for update(). If the view later scrolls to move anchor to a different location, the popup will be moved correspondingly. Parameters anchor the popup's anchor view xoff x offset from the view's left edge yoff y offset from the view's bottom edge width the new width, can be -1 to ignore height the new height, can be -1 to ignore
	1:	android.widget.PopupWindow public void update (View anchor, int width, int height) Updates the position and the dimension of the popup window. Calling this function also updates the window with the current popup state as described for update(). Parameters anchor the popup's anchor view width the new width, can be -1 to ignore height the new height, can be -1 to ignore
	2:	android.hardware.Camera.Parameters public List<Camera.Area> getFocusAreas () Gets the current focus areas. Camera driver uses the areas to decide focus. Before using this API or setFocusAreas(List), apps should call getMaxNumFocusAreas() to know the maximum number of focus areas first. If the value is 0, focus area is not supported. Each focus area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of setDisplayOrientation(int). Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of focus areas cannot be 0 or negative. The weight must range from 1 to 1000. The weight should be interpreted as a per-pixel weight - all pixels in the area have the specified weight. This means a small area with the same weight as a larger area will have less influence on the focusing than the larger area. Focus areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null focus area list means the driver is free to select focus targets as it wants. For example, the driver may use more signals to select focus areas and change them dynamically. Apps can set the focus area list to null if they want the driver to completely control focusing. Focus areas are relative to the current field of view (getZoom()). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The focus area cannot be set to be outside the current field of view, even when using zoom. Focus area only has effect if the current focus mode is FOCUS_MODE_AUTO, FOCUS_MODE_MACRO, FOCUS_MODE_CONTINUOUS_VIDEO, or FOCUS_MODE_CONTINUOUS_PICTURE. Returns a list of current focus areas
	3:	android.hardware.Camera.Parameters public List<Camera.Area> getMeteringAreas () Gets the current metering areas. Camera driver uses these areas to decide exposure. Before using this API or setMeteringAreas(List), apps should call getMaxNumMeteringAreas() to know the maximum number of metering areas first. If the value is 0, metering area is not supported. Each metering area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of setDisplayOrientation(int). Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of metering areas cannot be 0 or negative. The weight must range from 1 to 1000, and represents a weight for every pixel in the area. This means that a large metering area with the same weight as a smaller area will have more effect in the metering result. Metering areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null metering area list means the driver is free to meter as it chooses. For example, the driver may use more signals to select metering areas and change them dynamically. Apps can set the metering area list to null if they want the driver to completely control metering. Metering areas are relative to the current field of view (getZoom()). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The metering area cannot be set to be outside the current field of view, even when using zoom. No matter what metering areas are, the final exposure are compensated by setExposureCompensation(int). Returns a list of current metering areas
	4:	android.widget.PopupWindow public void showAsDropDown (View anchor, int xoff, int yoff) Display the content view in a popup window anchored to the bottom-left corner of the anchor view offset by the specified x and y coordinates. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled, the bottom-left corner of the popup is pinned at the top left corner of the anchor view. If the view later scrolls to move anchor to a different location, the popup will be moved correspondingly. Parameters anchor the view on which to pin the popup window See Also dismiss()
	5:	android.telephony.gsm.GsmCellLocation public void setLacAndCid (int lac, int cid) Set the location area code and the cell id.
	6:	android.renderscript.Allocation public void copy2DRangeFrom (int xoff, int yoff, int w, int h, Allocation data, int dataXoff, int dataYoff) Copy a rectangular region from an Allocation into a rectangular region in this Allocation. Parameters xoff X offset of the region in this Allocation yoff Y offset of the region in this Allocation w Width of the region to update. h Height of the region to update. data source Allocation. dataXoff X offset in source Allocation dataYoff Y offset in source Allocation
	7:	android.webkit.URLUtil public static String stripAnchor (String url) Strips the url of the anchor.
	8:	android.telephony.CellIdentityGsm public int getLac () Returns 16-bit Location Area Code, 0..65535, Integer.MAX_VALUE if unknown
	9:	android.telephony.CellIdentityWcdma public int getLac () Returns 16-bit Location Area Code, 0..65535, Integer.MAX_VALUE if unknown
fillTriangle
Fills the specified triangle will the current color
	0:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	1:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	2:	android.graphics.Canvas public void drawVertices (Canvas.VertexMode mode, int vertexCount, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, Paint paint) Draw the array of vertices, interpreted as triangles (based on mode). The verts array is required, and specifies the x,y pairs for each vertex. If texs is non-null, then it is used to specify the coordinate in shader coordinates to use at each vertex (the paint must have a shader in this case). If there is no texs array, but there is a color array, then each color is interpolated across its corresponding triangle in a gradient. If both texs and colors arrays are present, then they behave as before, but the resulting color at each pixels is the result of multiplying the colors from the shader and the color-gradient together. The indices array is optional, but if it is present, then it is used to specify the index of each triangle, rather than just walking through the arrays in order. Parameters mode How to interpret the array of vertices vertexCount The number of values in the vertices array (and corresponding texs and colors arrays if non-null). Each logical vertex is two values (x, y), vertexCount must be a multiple of 2. verts Array of vertices for the mesh vertOffset Number of values in the verts to skip before drawing. texs May be null. If not null, specifies the coordinates to sample into the current shader (e.g. bitmap tile or gradient) texOffset Number of values in texs to skip before drawing. colors May be null. If not null, specifies a color for each vertex, to be interpolated across the triangle. colorOffset Number of values in colors to skip before drawing. indices If not null, array of indices to reference into the vertex (texs, colors) array. indexCount number of entries in the indices array (if not null). paint Specifies the shader to use if the texs array is non-null.
	3:	android.graphics.Bitmap public void eraseColor (int c) Fills the bitmap's pixels with the specified Color. Throws IllegalStateException if the bitmap is not mutable.
	4:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	6:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	7:	java.util.ConcurrentModificationException public ConcurrentModificationException () Constructs a new ConcurrentModificationException with the current stack trace filled in.
	8:	java.util.InputMismatchException public InputMismatchException () Constructs a new InputMismatchException with the current stack trace filled in.
	9:	java.util.NoSuchElementException public NoSuchElementException () Constructs a new NoSuchElementException with the current stack trace filled in.
drawRGB
Renders a series of device\-independent RGB\+transparency values in a specified region
	0:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	1:	android.media.TimedText public Rect getBounds () Get the rectangle area or region for rendering the timed text as specified by a Rect object. Returns the rectangle region to render the characters in the timed text. If no bounds information is available (a null is returned), render the timed text at the center bottom of the display.
	2:	android.graphics.drawable.Drawable public Region getTransparentRegion () Returns a Region representing the part of the Drawable that is completely transparent. This can be used to perform drawing operations, identifying which parts of the target will not change when rendering the Drawable. The default implementation returns null, indicating no transparent region; subclasses can optionally override this to return an actual Region if they want to supply this optimization information, but it is not required that they do so. Returns Returns null if the Drawables has no transparent region to report, else a Region holding the parts of the Drawable's bounds that are transparent.
	3:	android.graphics.drawable.NinePatchDrawable public Region getTransparentRegion () Returns a Region representing the part of the Drawable that is completely transparent. This can be used to perform drawing operations, identifying which parts of the target will not change when rendering the Drawable. The default implementation returns null, indicating no transparent region; subclasses can optionally override this to return an actual Region if they want to supply this optimization information, but it is not required that they do so. Returns Returns null if the Drawables has no transparent region to report, else a Region holding the parts of the Drawable's bounds that are transparent.
	4:	android.graphics.Region public boolean set (Region region) Set the region to the specified region.
	5:	android.graphics.Region public Region (Region region) Return a copy of the specified region
	6:	android.graphics.Region public boolean set (int left, int top, int right, int bottom) Set the region to the specified rectangle
	7:	android.graphics.Region public boolean set (Rect r) Set the region to the specified rectangle
	8:	java.util.regex.Matcher public Matcher useTransparentBounds (boolean value) Determines whether this matcher has transparent bounds enabled or not. When transparent bounds are enabled, the parts of the input outside the region are subject to lookahead and lookbehind, otherwise they are not. Transparent bounds are disabled by default. Parameters value the new value for transparent bounds. Returns the Matcher itself.
	9:	android.graphics.Region public Region (Rect r) Return a region set to the specified rectangle
getDisplayColor
Gets the color that will be displayed if the specified color is requested
	0:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	1:	android.graphics.drawable.ColorDrawable public int getColor () Gets the drawable's color value. Returns int The color to draw.
	2:	android.widget.TextView public void setTextAppearance (Context context, int resid) Sets the text color, size, style, hint color, and highlight color from the specified TextAppearance resource.
	3:	android.graphics.Bitmap public static Bitmap createBitmap (DisplayMetrics display, int[] colors, int offset, int stride, int width, int height, Bitmap.Config config) Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array. Its initial density is determined from the given DisplayMetrics. Parameters display Display metrics for the display this bitmap will be drawn on. colors Array of Color used to initialize the pixels. offset Number of values to skip before the first color in the array of colors. stride Number of colors in the array between rows (must be >= width or <= -width). width The width of the bitmap height The height of the bitmap config The bitmap config to create. If the config does not support per-pixel alpha (e.g. RGB_565), then the alpha bytes in the colors[] will be ignored (assumed to be FF) Throws IllegalArgumentException if the width or height are <= 0, or if the color array's length is less than the number of pixels.
	4:	android.support.v4.view.PagerTitleStrip public void setTextColor (int color) Set the color value used as the base color for all displayed page titles. Alpha will be ignored for non-primary page titles. See setNonPrimaryAlpha(float). Parameters color Color hex code in 0xAARRGGBB format
	5:	android.graphics.Bitmap public static Bitmap createBitmap (DisplayMetrics display, int[] colors, int width, int height, Bitmap.Config config) Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array. Its initial density is determined from the given DisplayMetrics. Parameters display Display metrics for the display this bitmap will be drawn on. colors Array of Color used to initialize the pixels. This array must be at least as large as width * height. width The width of the bitmap height The height of the bitmap config The bitmap config to create. If the config does not support per-pixel alpha (e.g. RGB_565), then the alpha bytes in the colors[] will be ignored (assumed to be FF) Throws IllegalArgumentException if the width or height are <= 0, or if the color array's length is less than the number of pixels.
	6:	android.graphics.drawable.Drawable public void setColorFilter (int color, PorterDuff.Mode mode) Specify a color and porterduff mode to be the colorfilter for this drawable.
	7:	android.hardware.Camera.Parameters public List<String> getSupportedColorEffects () Gets the supported color effects. Returns a list of supported color effects. null if color effect setting is not supported. See Also getColorEffect()
	8:	android.widget.TextView public void setHighlightColor (int color) Sets the color used to display the selection highlight. Related XML Attributes android:textColorHighlight
	9:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
