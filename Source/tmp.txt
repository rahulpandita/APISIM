Alert
Constructs a new, empty Alert object with the given title
	0:	android.app.AlertDialog.Builder public AlertDialog.Builder setTitle (int titleId) Set the title using the given resource id. Returns This Builder object to allow for chaining of calls to set methods
	1:	android.app.AlertDialog.Builder public AlertDialog.Builder setMessage (int messageId) Set the message to display using the given resource id. Returns This Builder object to allow for chaining of calls to set methods
	2:	android.app.AlertDialog.Builder public AlertDialog.Builder setAdapter (ListAdapter adapter, DialogInterface.OnClickListener listener) Set a list of items, which are supplied by the given ListAdapter, to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. Parameters adapter The ListAdapter to supply the list of items listener The listener that will be called when an item is clicked. Returns This Builder object to allow for chaining of calls to set methods
	3:	android.app.AlertDialog.Builder public AlertDialog.Builder setCursor (Cursor cursor, DialogInterface.OnClickListener listener, String labelColumn) Set a list of items, which are supplied by the given Cursor, to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. Parameters cursor The Cursor to supply the list of items listener The listener that will be called when an item is clicked. labelColumn The column name on the cursor containing the string to display in the label. Returns This Builder object to allow for chaining of calls to set methods
	4:	android.app.AlertDialog protected AlertDialog (Context context, int theme) Construct an AlertDialog that uses an explicit theme. The actual style that an AlertDialog uses is a private implementation, however you can here supply either the name of an attribute in the theme from which to get the dialog's style (such as alertDialogTheme or one of the constants THEME_TRADITIONAL, THEME_HOLO_DARK, or THEME_HOLO_LIGHT.
	5:	android.app.AlertDialog.Builder public AlertDialog.Builder setIcon (Drawable icon) Set the Drawable to be used in the title. Returns This Builder object to allow for chaining of calls to set methods
	6:	android.app.AlertDialog.Builder public AlertDialog.Builder setMessage (CharSequence message) Set the message to display. Returns This Builder object to allow for chaining of calls to set methods
	7:	android.app.AlertDialog.Builder public AlertDialog.Builder setTitle (CharSequence title) Set the title displayed in the Dialog. Returns This Builder object to allow for chaining of calls to set methods
	8:	android.app.AlertDialog.Builder public AlertDialog.Builder setItems (int itemsId, DialogInterface.OnClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. This should be an array type i.e. R.array.foo Returns This Builder object to allow for chaining of calls to set methods
	9:	android.app.AlertDialog.Builder public AlertDialog.Builder setItems (CharSequence[] items, DialogInterface.OnClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. Returns This Builder object to allow for chaining of calls to set methods
Alert


Alert
Constructs a new Alert object with the given title, content string and image, and alert type
	0:	android.app.AlertDialog.Builder public AlertDialog.Builder setCursor (Cursor cursor, DialogInterface.OnClickListener listener, String labelColumn) Set a list of items, which are supplied by the given Cursor, to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. Parameters cursor The Cursor to supply the list of items listener The listener that will be called when an item is clicked. labelColumn The column name on the cursor containing the string to display in the label. Returns This Builder object to allow for chaining of calls to set methods
	1:	android.app.AlertDialog.Builder public AlertDialog.Builder setAdapter (ListAdapter adapter, DialogInterface.OnClickListener listener) Set a list of items, which are supplied by the given ListAdapter, to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. Parameters adapter The ListAdapter to supply the list of items listener The listener that will be called when an item is clicked. Returns This Builder object to allow for chaining of calls to set methods
	2:	android.app.AlertDialog.Builder public AlertDialog.Builder setMessage (int messageId) Set the message to display using the given resource id. Returns This Builder object to allow for chaining of calls to set methods
	3:	android.app.AlertDialog.Builder public AlertDialog.Builder setMultiChoiceItems (Cursor cursor, String isCheckedColumn, String labelColumn, DialogInterface.OnMultiChoiceClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. The list will have a check mark displayed to the right of the text for each checked item. Clicking on an item in the list will not dismiss the dialog. Clicking on a button will dismiss the dialog. Parameters cursor the cursor used to provide the items. isCheckedColumn specifies the column name on the cursor to use to determine whether a checkbox is checked or not. It must return an integer value where 1 means checked and 0 means unchecked. labelColumn The column name on the cursor containing the string to display in the label. listener notified when an item on the list is clicked. The dialog will not be dismissed when an item is clicked. It will only be dismissed if clicked on a button, if no buttons are supplied it's up to the user to dismiss the dialog. Returns This Builder object to allow for chaining of calls to set methods
	4:	android.app.AlertDialog.Builder public AlertDialog.Builder setSingleChoiceItems (Cursor cursor, int checkedItem, String labelColumn, DialogInterface.OnClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. The list will have a check mark displayed to the right of the text for the checked item. Clicking on an item in the list will not dismiss the dialog. Clicking on a button will dismiss the dialog. Parameters cursor the cursor to retrieve the items from. checkedItem specifies which item is checked. If -1 no items are checked. labelColumn The column name on the cursor containing the string to display in the label. listener notified when an item on the list is clicked. The dialog will not be dismissed when an item is clicked. It will only be dismissed if clicked on a button, if no buttons are supplied it's up to the user to dismiss the dialog. Returns This Builder object to allow for chaining of calls to set methods
	5:	android.app.AlertDialog.Builder public AlertDialog.Builder setItems (int itemsId, DialogInterface.OnClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. This should be an array type i.e. R.array.foo Returns This Builder object to allow for chaining of calls to set methods
	6:	android.app.AlertDialog.Builder public AlertDialog.Builder setItems (CharSequence[] items, DialogInterface.OnClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. Returns This Builder object to allow for chaining of calls to set methods
	7:	android.app.AlertDialog.Builder public AlertDialog.Builder setMessage (CharSequence message) Set the message to display. Returns This Builder object to allow for chaining of calls to set methods
	8:	android.app.AlertDialog.Builder public AlertDialog.Builder setSingleChoiceItems (int itemsId, int checkedItem, DialogInterface.OnClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. This should be an array type i.e. R.array.foo The list will have a check mark displayed to the right of the text for the checked item. Clicking on an item in the list will not dismiss the dialog. Clicking on a button will dismiss the dialog. Parameters itemsId the resource id of an array i.e. R.array.foo checkedItem specifies which item is checked. If -1 no items are checked. listener notified when an item on the list is clicked. The dialog will not be dismissed when an item is clicked. It will only be dismissed if clicked on a button, if no buttons are supplied it's up to the user to dismiss the dialog. Returns This Builder object to allow for chaining of calls to set methods
	9:	android.app.AlertDialog.Builder public AlertDialog.Builder setSingleChoiceItems (CharSequence[] items, int checkedItem, DialogInterface.OnClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. The list will have a check mark displayed to the right of the text for the checked item. Clicking on an item in the list will not dismiss the dialog. Clicking on a button will dismiss the dialog. Parameters items the items to be displayed. checkedItem specifies which item is checked. If -1 no items are checked. listener notified when an item on the list is clicked. The dialog will not be dismissed when an item is clicked. It will only be dismissed if clicked on a button, if no buttons are supplied it's up to the user to dismiss the dialog. Returns This Builder object to allow for chaining of calls to set methods
getDefaultTimeout
Gets the default time for showing an Alert
	0:	android.app.AlertDialog public boolean onKeyUp (int keyCode, KeyEvent event) A key was released. The default implementation handles KEYCODE_BACK to close the dialog. Parameters keyCode The value in event.getKeyCode(). event Description of the key event. Returns If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false.
	1:	android.app.AlertDialog.Builder public AlertDialog create () Creates a AlertDialog with the arguments supplied to this builder. It does not show() the dialog. This allows the user to do any extra processing before displaying the dialog. Use show() if you don't have any other processing to do and want this to be created and displayed.
	2:	android.app.AlertDialog public boolean onKeyDown (int keyCode, KeyEvent event) A key was pressed down. If the focused view didn't want this event, this method is called. The default implementation consumed the KEYCODE_BACK to later handle it in onKeyUp(int, KeyEvent). Parameters keyCode The value in event.getKeyCode(). event Description of the key event. Returns If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false.
	3:	android.app.AlertDialog.Builder public AlertDialog show () Creates a AlertDialog with the arguments supplied to this builder and show()'s the dialog.
	4:	android.app.AlertDialog.Builder public AlertDialog.Builder setMultiChoiceItems (Cursor cursor, String isCheckedColumn, String labelColumn, DialogInterface.OnMultiChoiceClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. The list will have a check mark displayed to the right of the text for each checked item. Clicking on an item in the list will not dismiss the dialog. Clicking on a button will dismiss the dialog. Parameters cursor the cursor used to provide the items. isCheckedColumn specifies the column name on the cursor to use to determine whether a checkbox is checked or not. It must return an integer value where 1 means checked and 0 means unchecked. labelColumn The column name on the cursor containing the string to display in the label. listener notified when an item on the list is clicked. The dialog will not be dismissed when an item is clicked. It will only be dismissed if clicked on a button, if no buttons are supplied it's up to the user to dismiss the dialog. Returns This Builder object to allow for chaining of calls to set methods
	5:	android.app.AlertDialog protected void onCreate (Bundle savedInstanceState) Similar to onCreate(Bundle), you should initialize your dialog in this method, including calling setContentView(View). Parameters savedInstanceState If this dialog is being reinitalized after a the hosting activity was previously shut down, holds the result from the most recent call to onSaveInstanceState(), or null if this is the first time.
	6:	android.app.AlertDialog.Builder public AlertDialog.Builder setCancelable (boolean cancelable) Sets whether the dialog is cancelable or not. Default is true. Returns This Builder object to allow for chaining of calls to set methods
	7:	android.app.AlertDialog public void setView (View view) Set the view to display in that dialog.
	8:	android.app.AlertDialog public void setView (View view, int viewSpacingLeft, int viewSpacingTop, int viewSpacingRight, int viewSpacingBottom) Set the view to display in that dialog, specifying the spacing to appear around that view. Parameters view The view to show in the content area of the dialog viewSpacingLeft Extra space to appear to the left of view viewSpacingTop Extra space to appear above view viewSpacingRight Extra space to appear to the right of view viewSpacingBottom Extra space to appear below view
	9:	android.app.AlertDialog public void setTitle (CharSequence title) Set the title text for this dialog's window. Parameters title The new text to display in the title.
getTimeout
Gets the time this Alert will be shown
	0:	android.app.AlertDialog protected void onCreate (Bundle savedInstanceState) Similar to onCreate(Bundle), you should initialize your dialog in this method, including calling setContentView(View). Parameters savedInstanceState If this dialog is being reinitalized after a the hosting activity was previously shut down, holds the result from the most recent call to onSaveInstanceState(), or null if this is the first time.
	1:	android.app.AlertDialog public void setCustomTitle (View customTitleView) See Also setCustomTitle(View)
	2:	android.app.AlertDialog.Builder public AlertDialog.Builder setMultiChoiceItems (Cursor cursor, String isCheckedColumn, String labelColumn, DialogInterface.OnMultiChoiceClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. The list will have a check mark displayed to the right of the text for each checked item. Clicking on an item in the list will not dismiss the dialog. Clicking on a button will dismiss the dialog. Parameters cursor the cursor used to provide the items. isCheckedColumn specifies the column name on the cursor to use to determine whether a checkbox is checked or not. It must return an integer value where 1 means checked and 0 means unchecked. labelColumn The column name on the cursor containing the string to display in the label. listener notified when an item on the list is clicked. The dialog will not be dismissed when an item is clicked. It will only be dismissed if clicked on a button, if no buttons are supplied it's up to the user to dismiss the dialog. Returns This Builder object to allow for chaining of calls to set methods
	3:	android.app.AlertDialog protected AlertDialog (Context context, int theme) Construct an AlertDialog that uses an explicit theme. The actual style that an AlertDialog uses is a private implementation, however you can here supply either the name of an attribute in the theme from which to get the dialog's style (such as alertDialogTheme or one of the constants THEME_TRADITIONAL, THEME_HOLO_DARK, or THEME_HOLO_LIGHT.
	4:	android.app.AlertDialog.Builder public AlertDialog.Builder (Context context, int theme) Constructor using a context and theme for this builder and the AlertDialog it creates. The actual theme that an AlertDialog uses is a private implementation, however you can here supply either the name of an attribute in the theme from which to get the dialog's style (such as alertDialogTheme or one of the constants AlertDialog.THEME_TRADITIONAL, AlertDialog.THEME_HOLO_DARK, or AlertDialog.THEME_HOLO_LIGHT.
	5:	android.app.AlertDialog.Builder public AlertDialog.Builder setOnCancelListener (DialogInterface.OnCancelListener onCancelListener) Sets the callback that will be called if the dialog is canceled. Even in a cancelable dialog, the dialog may be dismissed for reasons other than being canceled or one of the supplied choices being selected. If you are interested in listening for all cases where the dialog is dismissed and not just when it is canceled, see setOnDismissListener. Returns This Builder object to allow for chaining of calls to set methods See Also setCancelable(boolean) setOnDismissListener(android.content.DialogInterface.OnDismissListener)
	6:	android.app.AlertDialog.Builder public AlertDialog.Builder setOnItemSelectedListener (AdapterView.OnItemSelectedListener listener) Sets a listener to be invoked when an item in the list is selected. Parameters listener The listener to be invoked. Returns This Builder object to allow for chaining of calls to set methods See Also setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener)
	7:	android.app.AlertDialog.Builder public AlertDialog.Builder setView (View view) Set a custom view to be the contents of the Dialog. If the supplied view is an instance of a ListView the light background will be used. Parameters view The view to use as the contents of the Dialog. Returns This Builder object to allow for chaining of calls to set methods
	8:	android.app.AlertDialog public boolean onKeyUp (int keyCode, KeyEvent event) A key was released. The default implementation handles KEYCODE_BACK to close the dialog. Parameters keyCode The value in event.getKeyCode(). event Description of the key event. Returns If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false.
	9:	android.app.AlertDialog public boolean onKeyDown (int keyCode, KeyEvent event) A key was pressed down. If the focused view didn't want this event, this method is called. The default implementation consumed the KEYCODE_BACK to later handle it in onKeyUp(int, KeyEvent). Parameters keyCode The value in event.getKeyCode(). event Description of the key event. Returns If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false.
setTimeout
Set the time for which the Alert is to be shown
	0:	android.app.AlertDialog public void setButton (int whichButton, CharSequence text, DialogInterface.OnClickListener listener) Set a listener to be invoked when the positive button of the dialog is pressed. Parameters whichButton Which button to set the listener on, can be one of BUTTON_POSITIVE, BUTTON_NEGATIVE, or BUTTON_NEUTRAL text The text to display in positive button. listener The DialogInterface.OnClickListener to use.
	1:	android.app.AlertDialog public void setButton (int whichButton, CharSequence text, Message msg) Set a message to be sent when a button is pressed. Parameters whichButton Which button to set the message for, can be one of BUTTON_POSITIVE, BUTTON_NEGATIVE, or BUTTON_NEUTRAL text The text to display in positive button. msg The Message to be sent when clicked.
	2:	android.app.AlertDialog.Builder public AlertDialog.Builder setAdapter (ListAdapter adapter, DialogInterface.OnClickListener listener) Set a list of items, which are supplied by the given ListAdapter, to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. Parameters adapter The ListAdapter to supply the list of items listener The listener that will be called when an item is clicked. Returns This Builder object to allow for chaining of calls to set methods
	3:	android.app.AlertDialog.Builder public AlertDialog.Builder setCursor (Cursor cursor, DialogInterface.OnClickListener listener, String labelColumn) Set a list of items, which are supplied by the given Cursor, to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. Parameters cursor The Cursor to supply the list of items listener The listener that will be called when an item is clicked. labelColumn The column name on the cursor containing the string to display in the label. Returns This Builder object to allow for chaining of calls to set methods
	4:	android.app.AlertDialog.Builder public AlertDialog.Builder setSingleChoiceItems (int itemsId, int checkedItem, DialogInterface.OnClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. This should be an array type i.e. R.array.foo The list will have a check mark displayed to the right of the text for the checked item. Clicking on an item in the list will not dismiss the dialog. Clicking on a button will dismiss the dialog. Parameters itemsId the resource id of an array i.e. R.array.foo checkedItem specifies which item is checked. If -1 no items are checked. listener notified when an item on the list is clicked. The dialog will not be dismissed when an item is clicked. It will only be dismissed if clicked on a button, if no buttons are supplied it's up to the user to dismiss the dialog. Returns This Builder object to allow for chaining of calls to set methods
	5:	android.app.AlertDialog.Builder public AlertDialog.Builder setMultiChoiceItems (int itemsId, boolean[] checkedItems, DialogInterface.OnMultiChoiceClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. This should be an array type, e.g. R.array.foo. The list will have a check mark displayed to the right of the text for each checked item. Clicking on an item in the list will not dismiss the dialog. Clicking on a button will dismiss the dialog. Parameters itemsId the resource id of an array i.e. R.array.foo checkedItems specifies which items are checked. It should be null in which case no items are checked. If non null it must be exactly the same length as the array of items. listener notified when an item on the list is clicked. The dialog will not be dismissed when an item is clicked. It will only be dismissed if clicked on a button, if no buttons are supplied it's up to the user to dismiss the dialog. Returns This Builder object to allow for chaining of calls to set methods
	6:	android.app.AlertDialog protected AlertDialog (Context context, int theme) Construct an AlertDialog that uses an explicit theme. The actual style that an AlertDialog uses is a private implementation, however you can here supply either the name of an attribute in the theme from which to get the dialog's style (such as alertDialogTheme or one of the constants THEME_TRADITIONAL, THEME_HOLO_DARK, or THEME_HOLO_LIGHT.
	7:	android.app.AlertDialog.Builder public AlertDialog.Builder (Context context, int theme) Constructor using a context and theme for this builder and the AlertDialog it creates. The actual theme that an AlertDialog uses is a private implementation, however you can here supply either the name of an attribute in the theme from which to get the dialog's style (such as alertDialogTheme or one of the constants AlertDialog.THEME_TRADITIONAL, AlertDialog.THEME_HOLO_DARK, or AlertDialog.THEME_HOLO_LIGHT.
	8:	android.app.AlertDialog.Builder public AlertDialog.Builder setSingleChoiceItems (CharSequence[] items, int checkedItem, DialogInterface.OnClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. The list will have a check mark displayed to the right of the text for the checked item. Clicking on an item in the list will not dismiss the dialog. Clicking on a button will dismiss the dialog. Parameters items the items to be displayed. checkedItem specifies which item is checked. If -1 no items are checked. listener notified when an item on the list is clicked. The dialog will not be dismissed when an item is clicked. It will only be dismissed if clicked on a button, if no buttons are supplied it's up to the user to dismiss the dialog. Returns This Builder object to allow for chaining of calls to set methods
	9:	android.app.AlertDialog.Builder public AlertDialog.Builder setSingleChoiceItems (ListAdapter adapter, int checkedItem, DialogInterface.OnClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. The list will have a check mark displayed to the right of the text for the checked item. Clicking on an item in the list will not dismiss the dialog. Clicking on a button will dismiss the dialog. Parameters adapter The ListAdapter to supply the list of items checkedItem specifies which item is checked. If -1 no items are checked. listener notified when an item on the list is clicked. The dialog will not be dismissed when an item is clicked. It will only be dismissed if clicked on a button, if no buttons are supplied it's up to the user to dismiss the dialog. Returns This Builder object to allow for chaining of calls to set methods
getType
Gets the type of the Alert
	0:	android.app.AlertDialog.Builder public AlertDialog.Builder (Context context, int theme) Constructor using a context and theme for this builder and the AlertDialog it creates. The actual theme that an AlertDialog uses is a private implementation, however you can here supply either the name of an attribute in the theme from which to get the dialog's style (such as alertDialogTheme or one of the constants AlertDialog.THEME_TRADITIONAL, AlertDialog.THEME_HOLO_DARK, or AlertDialog.THEME_HOLO_LIGHT.
	1:	android.app.AlertDialog protected AlertDialog (Context context, int theme) Construct an AlertDialog that uses an explicit theme. The actual style that an AlertDialog uses is a private implementation, however you can here supply either the name of an attribute in the theme from which to get the dialog's style (such as alertDialogTheme or one of the constants THEME_TRADITIONAL, THEME_HOLO_DARK, or THEME_HOLO_LIGHT.
	2:	android.app.AlertDialog.Builder public AlertDialog.Builder setOnItemSelectedListener (AdapterView.OnItemSelectedListener listener) Sets a listener to be invoked when an item in the list is selected. Parameters listener The listener to be invoked. Returns This Builder object to allow for chaining of calls to set methods See Also setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener)
	3:	android.app.AlertDialog.Builder public AlertDialog.Builder setView (View view) Set a custom view to be the contents of the Dialog. If the supplied view is an instance of a ListView the light background will be used. Parameters view The view to use as the contents of the Dialog. Returns This Builder object to allow for chaining of calls to set methods
	4:	android.app.AlertDialog.Builder public AlertDialog.Builder setOnCancelListener (DialogInterface.OnCancelListener onCancelListener) Sets the callback that will be called if the dialog is canceled. Even in a cancelable dialog, the dialog may be dismissed for reasons other than being canceled or one of the supplied choices being selected. If you are interested in listening for all cases where the dialog is dismissed and not just when it is canceled, see setOnDismissListener. Returns This Builder object to allow for chaining of calls to set methods See Also setCancelable(boolean) setOnDismissListener(android.content.DialogInterface.OnDismissListener)
	5:	android.app.AlertDialog.Builder public Context getContext () Returns a Context with the appropriate theme for dialogs created by this Builder. Applications should use this Context for obtaining LayoutInflaters for inflating views that will be used in the resulting dialogs, as it will cause views to be inflated with the correct theme. Returns A Context for built Dialogs.
	6:	android.app.AlertDialog public void setCustomTitle (View customTitleView) See Also setCustomTitle(View)
	7:	android.app.AlertDialog protected void onCreate (Bundle savedInstanceState) Similar to onCreate(Bundle), you should initialize your dialog in this method, including calling setContentView(View). Parameters savedInstanceState If this dialog is being reinitalized after a the hosting activity was previously shut down, holds the result from the most recent call to onSaveInstanceState(), or null if this is the first time.
	8:	android.app.AlertDialog.Builder public AlertDialog create () Creates a AlertDialog with the arguments supplied to this builder. It does not show() the dialog. This allows the user to do any extra processing before displaying the dialog. Use show() if you don't have any other processing to do and want this to be created and displayed.
	9:	android.app.AlertDialog.Builder public AlertDialog.Builder setSingleChoiceItems (int itemsId, int checkedItem, DialogInterface.OnClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. This should be an array type i.e. R.array.foo The list will have a check mark displayed to the right of the text for the checked item. Clicking on an item in the list will not dismiss the dialog. Clicking on a button will dismiss the dialog. Parameters itemsId the resource id of an array i.e. R.array.foo checkedItem specifies which item is checked. If -1 no items are checked. listener notified when an item on the list is clicked. The dialog will not be dismissed when an item is clicked. It will only be dismissed if clicked on a button, if no buttons are supplied it's up to the user to dismiss the dialog. Returns This Builder object to allow for chaining of calls to set methods
setType
Sets the type of the Alert
	0:	android.app.AlertDialog public void setIconAttribute (int attrId) Set an icon as supplied by a theme attribute. e.g. android.R.attr.alertDialogIcon Parameters attrId ID of a theme attribute that points to a drawable resource.
	1:	android.app.AlertDialog.Builder public AlertDialog.Builder setIconAttribute (int attrId) Set an icon as supplied by a theme attribute. e.g. android.R.attr.alertDialogIcon Parameters attrId ID of a theme attribute that points to a drawable resource.
	2:	android.app.AlertDialog.Builder public AlertDialog.Builder setItems (int itemsId, DialogInterface.OnClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. This should be an array type i.e. R.array.foo Returns This Builder object to allow for chaining of calls to set methods
	3:	android.app.AlertDialog public void setButton (int whichButton, CharSequence text, Message msg) Set a message to be sent when a button is pressed. Parameters whichButton Which button to set the message for, can be one of BUTTON_POSITIVE, BUTTON_NEGATIVE, or BUTTON_NEUTRAL text The text to display in positive button. msg The Message to be sent when clicked.
	4:	android.app.AlertDialog.Builder public AlertDialog.Builder setView (View view) Set a custom view to be the contents of the Dialog. If the supplied view is an instance of a ListView the light background will be used. Parameters view The view to use as the contents of the Dialog. Returns This Builder object to allow for chaining of calls to set methods
	5:	android.app.AlertDialog public void setButton (int whichButton, CharSequence text, DialogInterface.OnClickListener listener) Set a listener to be invoked when the positive button of the dialog is pressed. Parameters whichButton Which button to set the listener on, can be one of BUTTON_POSITIVE, BUTTON_NEGATIVE, or BUTTON_NEUTRAL text The text to display in positive button. listener The DialogInterface.OnClickListener to use.
	6:	android.app.AlertDialog.Builder public AlertDialog.Builder setItems (CharSequence[] items, DialogInterface.OnClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. Returns This Builder object to allow for chaining of calls to set methods
	7:	android.app.AlertDialog.Builder public AlertDialog.Builder setNegativeButton (CharSequence text, DialogInterface.OnClickListener listener) Set a listener to be invoked when the negative button of the dialog is pressed. Parameters text The text to display in the negative button listener The DialogInterface.OnClickListener to use. Returns This Builder object to allow for chaining of calls to set methods
	8:	android.app.AlertDialog.Builder public AlertDialog.Builder setNegativeButton (int textId, DialogInterface.OnClickListener listener) Set a listener to be invoked when the negative button of the dialog is pressed. Parameters textId The resource id of the text to display in the negative button listener The DialogInterface.OnClickListener to use. Returns This Builder object to allow for chaining of calls to set methods
	9:	android.app.AlertDialog.Builder public AlertDialog.Builder setNeutralButton (int textId, DialogInterface.OnClickListener listener) Set a listener to be invoked when the neutral button of the dialog is pressed. Parameters textId The resource id of the text to display in the neutral button listener The DialogInterface.OnClickListener to use. Returns This Builder object to allow for chaining of calls to set methods
getString
Gets the text string used in the Alert
	0:	android.app.AlertDialog.Builder public AlertDialog.Builder setMultiChoiceItems (Cursor cursor, String isCheckedColumn, String labelColumn, DialogInterface.OnMultiChoiceClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. The list will have a check mark displayed to the right of the text for each checked item. Clicking on an item in the list will not dismiss the dialog. Clicking on a button will dismiss the dialog. Parameters cursor the cursor used to provide the items. isCheckedColumn specifies the column name on the cursor to use to determine whether a checkbox is checked or not. It must return an integer value where 1 means checked and 0 means unchecked. labelColumn The column name on the cursor containing the string to display in the label. listener notified when an item on the list is clicked. The dialog will not be dismissed when an item is clicked. It will only be dismissed if clicked on a button, if no buttons are supplied it's up to the user to dismiss the dialog. Returns This Builder object to allow for chaining of calls to set methods
	1:	android.app.AlertDialog.Builder public AlertDialog.Builder setSingleChoiceItems (Cursor cursor, int checkedItem, String labelColumn, DialogInterface.OnClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. The list will have a check mark displayed to the right of the text for the checked item. Clicking on an item in the list will not dismiss the dialog. Clicking on a button will dismiss the dialog. Parameters cursor the cursor to retrieve the items from. checkedItem specifies which item is checked. If -1 no items are checked. labelColumn The column name on the cursor containing the string to display in the label. listener notified when an item on the list is clicked. The dialog will not be dismissed when an item is clicked. It will only be dismissed if clicked on a button, if no buttons are supplied it's up to the user to dismiss the dialog. Returns This Builder object to allow for chaining of calls to set methods
	2:	android.app.AlertDialog public void setTitle (CharSequence title) Set the title text for this dialog's window. Parameters title The new text to display in the title.
	3:	android.app.AlertDialog public void setButton (int whichButton, CharSequence text, DialogInterface.OnClickListener listener) Set a listener to be invoked when the positive button of the dialog is pressed. Parameters whichButton Which button to set the listener on, can be one of BUTTON_POSITIVE, BUTTON_NEGATIVE, or BUTTON_NEUTRAL text The text to display in positive button. listener The DialogInterface.OnClickListener to use.
	4:	android.app.AlertDialog public void setButton (CharSequence text, DialogInterface.OnClickListener listener) This method was deprecated in API level 3. Use setButton(int, CharSequence, android.content.DialogInterface.OnClickListener) with BUTTON_POSITIVE Set a listener to be invoked when button 1 of the dialog is pressed. Parameters text The text to display in button 1. listener The DialogInterface.OnClickListener to use.
	5:	android.app.AlertDialog public void setButton (int whichButton, CharSequence text, Message msg) Set a message to be sent when a button is pressed. Parameters whichButton Which button to set the message for, can be one of BUTTON_POSITIVE, BUTTON_NEGATIVE, or BUTTON_NEUTRAL text The text to display in positive button. msg The Message to be sent when clicked.
	6:	android.app.AlertDialog public void setButton2 (CharSequence text, DialogInterface.OnClickListener listener) This method was deprecated in API level 3. Use setButton(int, CharSequence, android.content.DialogInterface.OnClickListener) with BUTTON_NEGATIVE Set a listener to be invoked when button 2 of the dialog is pressed. Parameters text The text to display in button 2. listener The DialogInterface.OnClickListener to use.
	7:	android.app.AlertDialog public void setButton3 (CharSequence text, DialogInterface.OnClickListener listener) This method was deprecated in API level 3. Use setButton(int, CharSequence, android.content.DialogInterface.OnClickListener) with BUTTON_POSITIVE Set a listener to be invoked when button 3 of the dialog is pressed. Parameters text The text to display in button 3. listener The DialogInterface.OnClickListener to use.
	8:	android.app.AlertDialog.Builder public AlertDialog.Builder setNegativeButton (CharSequence text, DialogInterface.OnClickListener listener) Set a listener to be invoked when the negative button of the dialog is pressed. Parameters text The text to display in the negative button listener The DialogInterface.OnClickListener to use. Returns This Builder object to allow for chaining of calls to set methods
	9:	android.app.AlertDialog.Builder public AlertDialog.Builder setNeutralButton (CharSequence text, DialogInterface.OnClickListener listener) Set a listener to be invoked when the neutral button of the dialog is pressed. Parameters text The text to display in the neutral button listener The DialogInterface.OnClickListener to use. Returns This Builder object to allow for chaining of calls to set methods
setString
Sets the text string used in the Alert
	0:	android.app.AlertDialog public void setTitle (CharSequence title) Set the title text for this dialog's window. Parameters title The new text to display in the title.
	1:	android.app.AlertDialog public void setButton (int whichButton, CharSequence text, DialogInterface.OnClickListener listener) Set a listener to be invoked when the positive button of the dialog is pressed. Parameters whichButton Which button to set the listener on, can be one of BUTTON_POSITIVE, BUTTON_NEGATIVE, or BUTTON_NEUTRAL text The text to display in positive button. listener The DialogInterface.OnClickListener to use.
	2:	android.app.AlertDialog public void setButton (int whichButton, CharSequence text, Message msg) Set a message to be sent when a button is pressed. Parameters whichButton Which button to set the message for, can be one of BUTTON_POSITIVE, BUTTON_NEGATIVE, or BUTTON_NEUTRAL text The text to display in positive button. msg The Message to be sent when clicked.
	3:	android.app.AlertDialog.Builder public AlertDialog.Builder setNegativeButton (CharSequence text, DialogInterface.OnClickListener listener) Set a listener to be invoked when the negative button of the dialog is pressed. Parameters text The text to display in the negative button listener The DialogInterface.OnClickListener to use. Returns This Builder object to allow for chaining of calls to set methods
	4:	android.app.AlertDialog.Builder public AlertDialog.Builder setNeutralButton (CharSequence text, DialogInterface.OnClickListener listener) Set a listener to be invoked when the neutral button of the dialog is pressed. Parameters text The text to display in the neutral button listener The DialogInterface.OnClickListener to use. Returns This Builder object to allow for chaining of calls to set methods
	5:	android.app.AlertDialog.Builder public AlertDialog.Builder setPositiveButton (CharSequence text, DialogInterface.OnClickListener listener) Set a listener to be invoked when the positive button of the dialog is pressed. Parameters text The text to display in the positive button listener The DialogInterface.OnClickListener to use. Returns This Builder object to allow for chaining of calls to set methods
	6:	android.app.AlertDialog public void setButton (CharSequence text, DialogInterface.OnClickListener listener) This method was deprecated in API level 3. Use setButton(int, CharSequence, android.content.DialogInterface.OnClickListener) with BUTTON_POSITIVE Set a listener to be invoked when button 1 of the dialog is pressed. Parameters text The text to display in button 1. listener The DialogInterface.OnClickListener to use.
	7:	android.app.AlertDialog public void setButton2 (CharSequence text, DialogInterface.OnClickListener listener) This method was deprecated in API level 3. Use setButton(int, CharSequence, android.content.DialogInterface.OnClickListener) with BUTTON_NEGATIVE Set a listener to be invoked when button 2 of the dialog is pressed. Parameters text The text to display in button 2. listener The DialogInterface.OnClickListener to use.
	8:	android.app.AlertDialog public void setButton3 (CharSequence text, DialogInterface.OnClickListener listener) This method was deprecated in API level 3. Use setButton(int, CharSequence, android.content.DialogInterface.OnClickListener) with BUTTON_POSITIVE Set a listener to be invoked when button 3 of the dialog is pressed. Parameters text The text to display in button 3. listener The DialogInterface.OnClickListener to use.
	9:	android.app.AlertDialog.Builder public AlertDialog.Builder setMultiChoiceItems (Cursor cursor, String isCheckedColumn, String labelColumn, DialogInterface.OnMultiChoiceClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. The list will have a check mark displayed to the right of the text for each checked item. Clicking on an item in the list will not dismiss the dialog. Clicking on a button will dismiss the dialog. Parameters cursor the cursor used to provide the items. isCheckedColumn specifies the column name on the cursor to use to determine whether a checkbox is checked or not. It must return an integer value where 1 means checked and 0 means unchecked. labelColumn The column name on the cursor containing the string to display in the label. listener notified when an item on the list is clicked. The dialog will not be dismissed when an item is clicked. It will only be dismissed if clicked on a button, if no buttons are supplied it's up to the user to dismiss the dialog. Returns This Builder object to allow for chaining of calls to set methods
getImage
Gets the Image used in the Alert
	0:	android.app.AlertDialog public void setCustomTitle (View customTitleView) See Also setCustomTitle(View)
	1:	android.app.AlertDialog protected AlertDialog (Context context, int theme) Construct an AlertDialog that uses an explicit theme. The actual style that an AlertDialog uses is a private implementation, however you can here supply either the name of an attribute in the theme from which to get the dialog's style (such as alertDialogTheme or one of the constants THEME_TRADITIONAL, THEME_HOLO_DARK, or THEME_HOLO_LIGHT.
	2:	android.app.AlertDialog.Builder public AlertDialog.Builder (Context context, int theme) Constructor using a context and theme for this builder and the AlertDialog it creates. The actual theme that an AlertDialog uses is a private implementation, however you can here supply either the name of an attribute in the theme from which to get the dialog's style (such as alertDialogTheme or one of the constants AlertDialog.THEME_TRADITIONAL, AlertDialog.THEME_HOLO_DARK, or AlertDialog.THEME_HOLO_LIGHT.
	3:	android.app.AlertDialog.Builder public AlertDialog.Builder setOnCancelListener (DialogInterface.OnCancelListener onCancelListener) Sets the callback that will be called if the dialog is canceled. Even in a cancelable dialog, the dialog may be dismissed for reasons other than being canceled or one of the supplied choices being selected. If you are interested in listening for all cases where the dialog is dismissed and not just when it is canceled, see setOnDismissListener. Returns This Builder object to allow for chaining of calls to set methods See Also setCancelable(boolean) setOnDismissListener(android.content.DialogInterface.OnDismissListener)
	4:	android.app.AlertDialog.Builder public AlertDialog.Builder setOnItemSelectedListener (AdapterView.OnItemSelectedListener listener) Sets a listener to be invoked when an item in the list is selected. Parameters listener The listener to be invoked. Returns This Builder object to allow for chaining of calls to set methods See Also setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener)
	5:	android.app.AlertDialog.Builder public AlertDialog.Builder setView (View view) Set a custom view to be the contents of the Dialog. If the supplied view is an instance of a ListView the light background will be used. Parameters view The view to use as the contents of the Dialog. Returns This Builder object to allow for chaining of calls to set methods
	6:	android.app.AlertDialog protected void onCreate (Bundle savedInstanceState) Similar to onCreate(Bundle), you should initialize your dialog in this method, including calling setContentView(View). Parameters savedInstanceState If this dialog is being reinitalized after a the hosting activity was previously shut down, holds the result from the most recent call to onSaveInstanceState(), or null if this is the first time.
	7:	android.app.AlertDialog.Builder public AlertDialog create () Creates a AlertDialog with the arguments supplied to this builder. It does not show() the dialog. This allows the user to do any extra processing before displaying the dialog. Use show() if you don't have any other processing to do and want this to be created and displayed.
	8:	android.app.AlertDialog.Builder public Context getContext () Returns a Context with the appropriate theme for dialogs created by this Builder. Applications should use this Context for obtaining LayoutInflaters for inflating views that will be used in the resulting dialogs, as it will cause views to be inflated with the correct theme. Returns A Context for built Dialogs.
	9:	android.app.AlertDialog.Builder public AlertDialog.Builder setSingleChoiceItems (CharSequence[] items, int checkedItem, DialogInterface.OnClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. The list will have a check mark displayed to the right of the text for the checked item. Clicking on an item in the list will not dismiss the dialog. Clicking on a button will dismiss the dialog. Parameters items the items to be displayed. checkedItem specifies which item is checked. If -1 no items are checked. listener notified when an item on the list is clicked. The dialog will not be dismissed when an item is clicked. It will only be dismissed if clicked on a button, if no buttons are supplied it's up to the user to dismiss the dialog. Returns This Builder object to allow for chaining of calls to set methods
setImage
Sets the Image used in the Alert
	0:	android.app.AlertDialog.Builder public AlertDialog.Builder setIcon (Drawable icon) Set the Drawable to be used in the title. Returns This Builder object to allow for chaining of calls to set methods
	1:	android.app.AlertDialog.Builder public AlertDialog.Builder setMessage (CharSequence message) Set the message to display. Returns This Builder object to allow for chaining of calls to set methods
	2:	android.app.AlertDialog.Builder public AlertDialog.Builder setTitle (CharSequence title) Set the title displayed in the Dialog. Returns This Builder object to allow for chaining of calls to set methods
	3:	android.app.AlertDialog.Builder public AlertDialog.Builder setTitle (int titleId) Set the title using the given resource id. Returns This Builder object to allow for chaining of calls to set methods
	4:	android.app.AlertDialog public void setView (View view) Set the view to display in that dialog.
	5:	android.app.AlertDialog.Builder public AlertDialog.Builder setIcon (int iconId) Set the resource id of the Drawable to be used in the title. Returns This Builder object to allow for chaining of calls to set methods
	6:	android.app.AlertDialog.Builder public AlertDialog.Builder setMessage (int messageId) Set the message to display using the given resource id. Returns This Builder object to allow for chaining of calls to set methods
	7:	android.app.AlertDialog.Builder public AlertDialog.Builder setCustomTitle (View customTitleView) Set the title using the custom view customTitleView. The methods setTitle(int) and setIcon(int) should be sufficient for most titles, but this is provided if the title needs more customization. Using this will replace the title and icon set via the other methods. Parameters customTitleView The custom view to use as the title. Returns This Builder object to allow for chaining of calls to set methods
	8:	android.app.AlertDialog public void setTitle (CharSequence title) Set the title text for this dialog's window. Parameters title The new text to display in the title.
	9:	android.app.AlertDialog.Builder public AlertDialog.Builder setItems (int itemsId, DialogInterface.OnClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. This should be an array type i.e. R.array.foo Returns This Builder object to allow for chaining of calls to set methods
setIndicator
Sets an activity indicator on this Alert
	0:	android.app.AlertDialog.Builder public AlertDialog.Builder setIcon (Drawable icon) Set the Drawable to be used in the title. Returns This Builder object to allow for chaining of calls to set methods
	1:	android.app.AlertDialog.Builder public AlertDialog.Builder setMessage (CharSequence message) Set the message to display. Returns This Builder object to allow for chaining of calls to set methods
	2:	android.app.AlertDialog.Builder public AlertDialog.Builder setTitle (CharSequence title) Set the title displayed in the Dialog. Returns This Builder object to allow for chaining of calls to set methods
	3:	android.app.AlertDialog.Builder public AlertDialog.Builder setTitle (int titleId) Set the title using the given resource id. Returns This Builder object to allow for chaining of calls to set methods
	4:	android.app.AlertDialog public void setView (View view) Set the view to display in that dialog.
	5:	android.app.AlertDialog.Builder public AlertDialog.Builder setIcon (int iconId) Set the resource id of the Drawable to be used in the title. Returns This Builder object to allow for chaining of calls to set methods
	6:	android.app.AlertDialog.Builder public AlertDialog.Builder setMessage (int messageId) Set the message to display using the given resource id. Returns This Builder object to allow for chaining of calls to set methods
	7:	android.app.AlertDialog.Builder public AlertDialog.Builder setCustomTitle (View customTitleView) Set the title using the custom view customTitleView. The methods setTitle(int) and setIcon(int) should be sufficient for most titles, but this is provided if the title needs more customization. Using this will replace the title and icon set via the other methods. Parameters customTitleView The custom view to use as the title. Returns This Builder object to allow for chaining of calls to set methods
	8:	android.app.AlertDialog public void setTitle (CharSequence title) Set the title text for this dialog's window. Parameters title The new text to display in the title.
	9:	android.app.AlertDialog.Builder public AlertDialog.Builder setItems (int itemsId, DialogInterface.OnClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. This should be an array type i.e. R.array.foo Returns This Builder object to allow for chaining of calls to set methods
getIndicator
Gets the activity indicator for this Alert
	0:	android.app.AlertDialog public void setCustomTitle (View customTitleView) See Also setCustomTitle(View)
	1:	android.app.AlertDialog protected AlertDialog (Context context, int theme) Construct an AlertDialog that uses an explicit theme. The actual style that an AlertDialog uses is a private implementation, however you can here supply either the name of an attribute in the theme from which to get the dialog's style (such as alertDialogTheme or one of the constants THEME_TRADITIONAL, THEME_HOLO_DARK, or THEME_HOLO_LIGHT.
	2:	android.app.AlertDialog.Builder public AlertDialog.Builder (Context context, int theme) Constructor using a context and theme for this builder and the AlertDialog it creates. The actual theme that an AlertDialog uses is a private implementation, however you can here supply either the name of an attribute in the theme from which to get the dialog's style (such as alertDialogTheme or one of the constants AlertDialog.THEME_TRADITIONAL, AlertDialog.THEME_HOLO_DARK, or AlertDialog.THEME_HOLO_LIGHT.
	3:	android.app.AlertDialog.Builder public AlertDialog.Builder setOnCancelListener (DialogInterface.OnCancelListener onCancelListener) Sets the callback that will be called if the dialog is canceled. Even in a cancelable dialog, the dialog may be dismissed for reasons other than being canceled or one of the supplied choices being selected. If you are interested in listening for all cases where the dialog is dismissed and not just when it is canceled, see setOnDismissListener. Returns This Builder object to allow for chaining of calls to set methods See Also setCancelable(boolean) setOnDismissListener(android.content.DialogInterface.OnDismissListener)
	4:	android.app.AlertDialog.Builder public AlertDialog.Builder setOnItemSelectedListener (AdapterView.OnItemSelectedListener listener) Sets a listener to be invoked when an item in the list is selected. Parameters listener The listener to be invoked. Returns This Builder object to allow for chaining of calls to set methods See Also setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener)
	5:	android.app.AlertDialog.Builder public AlertDialog.Builder setView (View view) Set a custom view to be the contents of the Dialog. If the supplied view is an instance of a ListView the light background will be used. Parameters view The view to use as the contents of the Dialog. Returns This Builder object to allow for chaining of calls to set methods
	6:	android.app.AlertDialog protected void onCreate (Bundle savedInstanceState) Similar to onCreate(Bundle), you should initialize your dialog in this method, including calling setContentView(View). Parameters savedInstanceState If this dialog is being reinitalized after a the hosting activity was previously shut down, holds the result from the most recent call to onSaveInstanceState(), or null if this is the first time.
	7:	android.app.AlertDialog.Builder public AlertDialog create () Creates a AlertDialog with the arguments supplied to this builder. It does not show() the dialog. This allows the user to do any extra processing before displaying the dialog. Use show() if you don't have any other processing to do and want this to be created and displayed.
	8:	android.app.AlertDialog.Builder public Context getContext () Returns a Context with the appropriate theme for dialogs created by this Builder. Applications should use this Context for obtaining LayoutInflaters for inflating views that will be used in the resulting dialogs, as it will cause views to be inflated with the correct theme. Returns A Context for built Dialogs.
	9:	android.app.AlertDialog.Builder public AlertDialog.Builder setSingleChoiceItems (CharSequence[] items, int checkedItem, DialogInterface.OnClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. The list will have a check mark displayed to the right of the text for the checked item. Clicking on an item in the list will not dismiss the dialog. Clicking on a button will dismiss the dialog. Parameters items the items to be displayed. checkedItem specifies which item is checked. If -1 no items are checked. listener notified when an item on the list is clicked. The dialog will not be dismissed when an item is clicked. It will only be dismissed if clicked on a button, if no buttons are supplied it's up to the user to dismiss the dialog. Returns This Builder object to allow for chaining of calls to set methods
addCommand
Similar to Displayable
	0:	android.app.AlertDialog public void setView (View view) Set the view to display in that dialog.
	1:	android.app.AlertDialog.Builder public AlertDialog show () Creates a AlertDialog with the arguments supplied to this builder and show()'s the dialog.
	2:	android.app.AlertDialog public void setTitle (CharSequence title) Set the title text for this dialog's window. Parameters title The new text to display in the title.
	3:	android.app.AlertDialog.Builder public AlertDialog.Builder setMessage (CharSequence message) Set the message to display. Returns This Builder object to allow for chaining of calls to set methods
	4:	android.app.AlertDialog.Builder public AlertDialog.Builder setMessage (int messageId) Set the message to display using the given resource id. Returns This Builder object to allow for chaining of calls to set methods
	5:	android.app.AlertDialog public void setView (View view, int viewSpacingLeft, int viewSpacingTop, int viewSpacingRight, int viewSpacingBottom) Set the view to display in that dialog, specifying the spacing to appear around that view. Parameters view The view to show in the content area of the dialog viewSpacingLeft Extra space to appear to the left of view viewSpacingTop Extra space to appear above view viewSpacingRight Extra space to appear to the right of view viewSpacingBottom Extra space to appear below view
	6:	android.app.AlertDialog public void setButton (int whichButton, CharSequence text, DialogInterface.OnClickListener listener) Set a listener to be invoked when the positive button of the dialog is pressed. Parameters whichButton Which button to set the listener on, can be one of BUTTON_POSITIVE, BUTTON_NEGATIVE, or BUTTON_NEUTRAL text The text to display in positive button. listener The DialogInterface.OnClickListener to use.
	7:	android.app.AlertDialog public void setButton (CharSequence text, DialogInterface.OnClickListener listener) This method was deprecated in API level 3. Use setButton(int, CharSequence, android.content.DialogInterface.OnClickListener) with BUTTON_POSITIVE Set a listener to be invoked when button 1 of the dialog is pressed. Parameters text The text to display in button 1. listener The DialogInterface.OnClickListener to use.
	8:	android.app.AlertDialog public void setButton (int whichButton, CharSequence text, Message msg) Set a message to be sent when a button is pressed. Parameters whichButton Which button to set the message for, can be one of BUTTON_POSITIVE, BUTTON_NEGATIVE, or BUTTON_NEUTRAL text The text to display in positive button. msg The Message to be sent when clicked.
	9:	android.app.AlertDialog public void setButton2 (CharSequence text, DialogInterface.OnClickListener listener) This method was deprecated in API level 3. Use setButton(int, CharSequence, android.content.DialogInterface.OnClickListener) with BUTTON_NEGATIVE Set a listener to be invoked when button 2 of the dialog is pressed. Parameters text The text to display in button 2. listener The DialogInterface.OnClickListener to use.
removeCommand
Similar to Displayable
	0:	android.app.AlertDialog public void setView (View view) Set the view to display in that dialog.
	1:	android.app.AlertDialog.Builder public AlertDialog show () Creates a AlertDialog with the arguments supplied to this builder and show()'s the dialog.
	2:	android.app.AlertDialog public void setTitle (CharSequence title) Set the title text for this dialog's window. Parameters title The new text to display in the title.
	3:	android.app.AlertDialog.Builder public AlertDialog.Builder setMessage (CharSequence message) Set the message to display. Returns This Builder object to allow for chaining of calls to set methods
	4:	android.app.AlertDialog.Builder public AlertDialog.Builder setMessage (int messageId) Set the message to display using the given resource id. Returns This Builder object to allow for chaining of calls to set methods
	5:	android.app.AlertDialog public void setView (View view, int viewSpacingLeft, int viewSpacingTop, int viewSpacingRight, int viewSpacingBottom) Set the view to display in that dialog, specifying the spacing to appear around that view. Parameters view The view to show in the content area of the dialog viewSpacingLeft Extra space to appear to the left of view viewSpacingTop Extra space to appear above view viewSpacingRight Extra space to appear to the right of view viewSpacingBottom Extra space to appear below view
	6:	android.app.AlertDialog public void setButton (int whichButton, CharSequence text, DialogInterface.OnClickListener listener) Set a listener to be invoked when the positive button of the dialog is pressed. Parameters whichButton Which button to set the listener on, can be one of BUTTON_POSITIVE, BUTTON_NEGATIVE, or BUTTON_NEUTRAL text The text to display in positive button. listener The DialogInterface.OnClickListener to use.
	7:	android.app.AlertDialog public void setButton (CharSequence text, DialogInterface.OnClickListener listener) This method was deprecated in API level 3. Use setButton(int, CharSequence, android.content.DialogInterface.OnClickListener) with BUTTON_POSITIVE Set a listener to be invoked when button 1 of the dialog is pressed. Parameters text The text to display in button 1. listener The DialogInterface.OnClickListener to use.
	8:	android.app.AlertDialog public void setButton (int whichButton, CharSequence text, Message msg) Set a message to be sent when a button is pressed. Parameters whichButton Which button to set the message for, can be one of BUTTON_POSITIVE, BUTTON_NEGATIVE, or BUTTON_NEUTRAL text The text to display in positive button. msg The Message to be sent when clicked.
	9:	android.app.AlertDialog public void setButton2 (CharSequence text, DialogInterface.OnClickListener listener) This method was deprecated in API level 3. Use setButton(int, CharSequence, android.content.DialogInterface.OnClickListener) with BUTTON_NEGATIVE Set a listener to be invoked when button 2 of the dialog is pressed. Parameters text The text to display in button 2. listener The DialogInterface.OnClickListener to use.
setCommandListener
The same as Displayable
	0:	android.app.AlertDialog public void setView (View view) Set the view to display in that dialog.
	1:	android.app.AlertDialog.Builder public AlertDialog show () Creates a AlertDialog with the arguments supplied to this builder and show()'s the dialog.
	2:	android.app.AlertDialog public void setTitle (CharSequence title) Set the title text for this dialog's window. Parameters title The new text to display in the title.
	3:	android.app.AlertDialog.Builder public AlertDialog.Builder setMessage (CharSequence message) Set the message to display. Returns This Builder object to allow for chaining of calls to set methods
	4:	android.app.AlertDialog.Builder public AlertDialog.Builder setMessage (int messageId) Set the message to display using the given resource id. Returns This Builder object to allow for chaining of calls to set methods
	5:	android.app.AlertDialog.Builder public AlertDialog.Builder setMultiChoiceItems (CharSequence[] items, boolean[] checkedItems, DialogInterface.OnMultiChoiceClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. The list will have a check mark displayed to the right of the text for each checked item. Clicking on an item in the list will not dismiss the dialog. Clicking on a button will dismiss the dialog. Parameters items the text of the items to be displayed in the list. checkedItems specifies which items are checked. It should be null in which case no items are checked. If non null it must be exactly the same length as the array of items. listener notified when an item on the list is clicked. The dialog will not be dismissed when an item is clicked. It will only be dismissed if clicked on a button, if no buttons are supplied it's up to the user to dismiss the dialog. Returns This Builder object to allow for chaining of calls to set methods
	6:	android.app.AlertDialog.Builder public AlertDialog.Builder setMultiChoiceItems (int itemsId, boolean[] checkedItems, DialogInterface.OnMultiChoiceClickListener listener) Set a list of items to be displayed in the dialog as the content, you will be notified of the selected item via the supplied listener. This should be an array type, e.g. R.array.foo. The list will have a check mark displayed to the right of the text for each checked item. Clicking on an item in the list will not dismiss the dialog. Clicking on a button will dismiss the dialog. Parameters itemsId the resource id of an array i.e. R.array.foo checkedItems specifies which items are checked. It should be null in which case no items are checked. If non null it must be exactly the same length as the array of items. listener notified when an item on the list is clicked. The dialog will not be dismissed when an item is clicked. It will only be dismissed if clicked on a button, if no buttons are supplied it's up to the user to dismiss the dialog. Returns This Builder object to allow for chaining of calls to set methods
	7:	android.app.AlertDialog public void setView (View view, int viewSpacingLeft, int viewSpacingTop, int viewSpacingRight, int viewSpacingBottom) Set the view to display in that dialog, specifying the spacing to appear around that view. Parameters view The view to show in the content area of the dialog viewSpacingLeft Extra space to appear to the left of view viewSpacingTop Extra space to appear above view viewSpacingRight Extra space to appear to the right of view viewSpacingBottom Extra space to appear below view
	8:	android.app.AlertDialog public void setButton (int whichButton, CharSequence text, DialogInterface.OnClickListener listener) Set a listener to be invoked when the positive button of the dialog is pressed. Parameters whichButton Which button to set the listener on, can be one of BUTTON_POSITIVE, BUTTON_NEGATIVE, or BUTTON_NEUTRAL text The text to display in positive button. listener The DialogInterface.OnClickListener to use.
	9:	android.app.AlertDialog public void setButton (CharSequence text, DialogInterface.OnClickListener listener) This method was deprecated in API level 3. Use setButton(int, CharSequence, android.content.DialogInterface.OnClickListener) with BUTTON_POSITIVE Set a listener to be invoked when button 1 of the dialog is pressed. Parameters text The text to display in button 1. listener The DialogInterface.OnClickListener to use.
getGameAction

Canvas
Constructs a new Canvas object
	0:	android.graphics.Canvas public Canvas () Construct an empty raster canvas. Use setBitmap() to specify a bitmap to draw into. The initial target density is DENSITY_NONE; this will typically be replaced when a target bitmap is set for the canvas.
	1:	android.graphics.Canvas public Canvas (Bitmap bitmap) Construct a canvas with the specified bitmap to draw into. The bitmap must be mutable. The initial target density of the canvas is the same as the given bitmap's density. Parameters bitmap Specifies a mutable bitmap for the canvas to draw into.
	2:	android.graphics.Canvas public void setDensity (int density) Specifies the density for this Canvas' backing bitmap. This modifies the target density of the canvas itself, as well as the density of its backing bitmap via Bitmap.setDensity(int). Parameters density The new target density of the canvas, which is used to determine the scaling factor when drawing a bitmap into it. Use DENSITY_NONE to disable bitmap scaling. See Also getDensity() setDensity(int)
	3:	android.graphics.Canvas public final Matrix getMatrix () Return a new matrix with a copy of the canvas' current transformation matrix.
	4:	android.graphics.Canvas public int getDensity () Returns the target density of the canvas. The default density is derived from the density of its backing bitmap, or DENSITY_NONE if there is not one. Returns Returns the current target density of the canvas, which is used to determine the scaling factor when drawing a bitmap into it. See Also setDensity(int) getDensity()
	5:	android.graphics.Canvas public void restoreToCount (int saveCount) Efficient way to pop any calls to save() that happened after the save count reached saveCount. It is an error for saveCount to be less than 1. Example: int count = canvas.save(); ... // more calls potentially to save() canvas.restoreToCount(count); // now the canvas is back in the same state it was before the initial // call to save(). Parameters saveCount The save level to restore to.
	6:	android.graphics.Canvas public void setBitmap (Bitmap bitmap) Specify a bitmap for the canvas to draw into. All canvas state such as layers, filters, and the save/restore stack are reset with the exception of the current matrix and clip stack. Additionally, as a side-effect the canvas' target density is updated to match that of the bitmap. Parameters bitmap Specifies a mutable bitmap for the canvas to draw into. See Also setDensity(int) getDensity()
	7:	android.graphics.Canvas public void drawBitmap (int[] colors, int offset, int stride, float x, float y, int width, int height, boolean hasAlpha, Paint paint) Treat the specified array of colors as a bitmap, and draw it. This gives the same result as first creating a bitmap from the array, and then drawing it, but this method avoids explicitly creating a bitmap object which can be more efficient if the colors are changing often. Parameters colors Array of colors representing the pixels of the bitmap offset Offset into the array of colors for the first pixel stride The number of colors in the array between rows (must be >= width or <= -width). x The X coordinate for where to draw the bitmap y The Y coordinate for where to draw the bitmap width The width of the bitmap height The height of the bitmap hasAlpha True if the alpha channel of the colors contains valid values. If false, the alpha byte is ignored (assumed to be 0xFF for every pixel). paint May be null. The paint used to draw the bitmap
	8:	android.graphics.Canvas public boolean clipPath (Path path) Intersect the current clip with the specified path. Parameters path The path to intersect with the current clip Returns true if the resulting is non-empty
	9:	android.graphics.Canvas public boolean clipPath (Path path, Region.Op op) Modify the current clip with the specified path. Parameters path The path to operate on the current clip op How the clip is modified Returns true if the resulting is non-empty
isDoubleBuffered
Checks if the Canvas is double buffered by the implementation
	0:	android.graphics.Canvas public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds The maximum size the offscreen bitmap needs to be (in local coordinates) alpha The alpha to apply to the offscreen when when it is drawn during restore() saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this call
	1:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	2:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	3:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
	4:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	5:	android.graphics.Canvas public void drawPicture (Picture picture, RectF dst) Draw the picture, stretched to fit into the dst rectangle.
	6:	android.graphics.Canvas public void drawPicture (Picture picture, Rect dst) Draw the picture, stretched to fit into the dst rectangle.
	7:	android.graphics.Canvas public int getDensity () Returns the target density of the canvas. The default density is derived from the density of its backing bitmap, or DENSITY_NONE if there is not one. Returns Returns the current target density of the canvas, which is used to determine the scaling factor when drawing a bitmap into it. See Also setDensity(int) getDensity()
	8:	android.graphics.Canvas public int getMaximumBitmapHeight () Returns the maximum allowed height for bitmaps drawn with this canvas. Attempting to draw with a bitmap taller than this value will result in an error. See Also getMaximumBitmapWidth()
	9:	android.graphics.Canvas public int getMaximumBitmapWidth () Returns the maximum allowed width for bitmaps drawn with this canvas. Attempting to draw with a bitmap wider than this value will result in an error. See Also getMaximumBitmapHeight()
hasPointerEvents
Checks if the platform supports pointer press and release events
	0:	android.graphics.Canvas public void setDensity (int density) Specifies the density for this Canvas' backing bitmap. This modifies the target density of the canvas itself, as well as the density of its backing bitmap via Bitmap.setDensity(int). Parameters density The new target density of the canvas, which is used to determine the scaling factor when drawing a bitmap into it. Use DENSITY_NONE to disable bitmap scaling. See Also getDensity() setDensity(int)
	1:	android.graphics.Canvas public int getDensity () Returns the target density of the canvas. The default density is derived from the density of its backing bitmap, or DENSITY_NONE if there is not one. Returns Returns the current target density of the canvas, which is used to determine the scaling factor when drawing a bitmap into it. See Also setDensity(int) getDensity()
	2:	android.graphics.Canvas public int getMaximumBitmapHeight () Returns the maximum allowed height for bitmaps drawn with this canvas. Attempting to draw with a bitmap taller than this value will result in an error. See Also getMaximumBitmapWidth()
	3:	android.graphics.Canvas public int getMaximumBitmapWidth () Returns the maximum allowed width for bitmaps drawn with this canvas. Attempting to draw with a bitmap wider than this value will result in an error. See Also getMaximumBitmapHeight()
	4:	android.graphics.Canvas public boolean isOpaque () Return true if the device that the current layer draws into is opaque (i.e. does not support per-pixel alpha). Returns true if the device that the current layer draws into is opaque
	5:	android.graphics.Canvas public void drawPosText (String text, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array. This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. Parameters text The text to be drawn pos Array of [x,y] positions, used to position each character paint The paint used for the text (e.g. color, size, style)
	6:	android.graphics.Canvas public void drawPosText (char[] text, int index, int count, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array. This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. Parameters text The text to be drawn index The index of the first character to draw count The number of characters to draw, starting from index. pos Array of [x,y] positions, used to position each character paint The paint used for the text (e.g. color, size, style)
	7:	android.graphics.Canvas public void restoreToCount (int saveCount) Efficient way to pop any calls to save() that happened after the save count reached saveCount. It is an error for saveCount to be less than 1. Example: int count = canvas.save(); ... // more calls potentially to save() canvas.restoreToCount(count); // now the canvas is back in the same state it was before the initial // call to save(). Parameters saveCount The save level to restore to.
	8:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	9:	android.graphics.Canvas public void drawPoints (float[] pts, int offset, int count, Paint paint) Draw a series of points. Each point is centered at the coordinate specified by pts[], and its diameter is specified by the paint's stroke width (as transformed by the canvas' CTM), with special treatment for a stroke width of 0, which always draws exactly 1 pixel (or at most 4 if antialiasing is enabled). The shape of the point is controlled by the paint's Cap type. The shape is a square, unless the cap type is Round, in which case the shape is a circle. Parameters pts Array of points to draw [x0 y0 x1 y1 x2 y2 ...] offset Number of values to skip before starting to draw. count The number of values to process, after skipping offset of them. Since one point uses two values, the number of "points" that are drawn is really (count >> 1). paint The paint used to draw the points
hasPointerMotionEvents
Checks if the platform supports pointer motion events (pointer dragged)
	0:	android.graphics.Canvas public void drawPicture (Picture picture, RectF dst) Draw the picture, stretched to fit into the dst rectangle.
	1:	android.graphics.Canvas public void drawPicture (Picture picture, Rect dst) Draw the picture, stretched to fit into the dst rectangle.
	2:	android.graphics.Canvas public void drawPicture (Picture picture) Save the canvas state, draw the picture, and restore the canvas state. This differs from picture.draw(canvas), which does not perform any save/restore. Note: This forces the picture to internally call endRecording() in order to prepare for playback. Parameters picture The picture to be drawn
	3:	android.graphics.Canvas public int getMaximumBitmapHeight () Returns the maximum allowed height for bitmaps drawn with this canvas. Attempting to draw with a bitmap taller than this value will result in an error. See Also getMaximumBitmapWidth()
	4:	android.graphics.Canvas public int getMaximumBitmapWidth () Returns the maximum allowed width for bitmaps drawn with this canvas. Attempting to draw with a bitmap wider than this value will result in an error. See Also getMaximumBitmapHeight()
	5:	android.graphics.Canvas public void drawArc (RectF oval, float startAngle, float sweepAngle, boolean useCenter, Paint paint) Draw the specified arc, which will be scaled to fit inside the specified oval. If the start angle is negative or >= 360, the start angle is treated as start angle modulo 360. If the sweep angle is >= 360, then the oval is drawn completely. Note that this differs slightly from SkPath::arcTo, which treats the sweep angle modulo 360. If the sweep angle is negative, the sweep angle is treated as sweep angle modulo 360 The arc is drawn clockwise. An angle of 0 degrees correspond to the geometric angle of 0 degrees (3 o'clock on a watch.) Parameters oval The bounds of oval used to define the shape and size of the arc startAngle Starting angle (in degrees) where the arc begins sweepAngle Sweep angle (in degrees) measured clockwise useCenter If true, include the center of the oval in the arc, and close it if it is being stroked. This will draw a wedge paint The paint used to draw the arc
	6:	android.graphics.Canvas public void drawPosText (char[] text, int index, int count, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array. This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. Parameters text The text to be drawn index The index of the first character to draw count The number of characters to draw, starting from index. pos Array of [x,y] positions, used to position each character paint The paint used for the text (e.g. color, size, style)
	7:	android.graphics.Canvas public void drawPoints (float[] pts, int offset, int count, Paint paint) Draw a series of points. Each point is centered at the coordinate specified by pts[], and its diameter is specified by the paint's stroke width (as transformed by the canvas' CTM), with special treatment for a stroke width of 0, which always draws exactly 1 pixel (or at most 4 if antialiasing is enabled). The shape of the point is controlled by the paint's Cap type. The shape is a square, unless the cap type is Round, in which case the shape is a circle. Parameters pts Array of points to draw [x0 y0 x1 y1 x2 y2 ...] offset Number of values to skip before starting to draw. count The number of values to process, after skipping offset of them. Since one point uses two values, the number of "points" that are drawn is really (count >> 1). paint The paint used to draw the points
	8:	android.graphics.Canvas public void drawPosText (String text, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array. This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. Parameters text The text to be drawn pos Array of [x,y] positions, used to position each character paint The paint used for the text (e.g. color, size, style)
	9:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
hasRepeatEvents
Checks if the platform can generate repeat events when key is kept down
	0:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	1:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	2:	android.graphics.Canvas public int save (int saveFlags) Based on saveFlags, can save the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Parameters saveFlags flag bits that specify which parts of the Canvas state to save/restore Returns The value to pass to restoreToCount() to balance this save()
	3:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
	4:	android.graphics.Canvas public void drawBitmap (int[] colors, int offset, int stride, float x, float y, int width, int height, boolean hasAlpha, Paint paint) Treat the specified array of colors as a bitmap, and draw it. This gives the same result as first creating a bitmap from the array, and then drawing it, but this method avoids explicitly creating a bitmap object which can be more efficient if the colors are changing often. Parameters colors Array of colors representing the pixels of the bitmap offset Offset into the array of colors for the first pixel stride The number of colors in the array between rows (must be >= width or <= -width). x The X coordinate for where to draw the bitmap y The Y coordinate for where to draw the bitmap width The width of the bitmap height The height of the bitmap hasAlpha True if the alpha channel of the colors contains valid values. If false, the alpha byte is ignored (assumed to be 0xFF for every pixel). paint May be null. The paint used to draw the bitmap
	5:	android.graphics.Canvas public int getMaximumBitmapHeight () Returns the maximum allowed height for bitmaps drawn with this canvas. Attempting to draw with a bitmap taller than this value will result in an error. See Also getMaximumBitmapWidth()
	6:	android.graphics.Canvas public int getMaximumBitmapWidth () Returns the maximum allowed width for bitmaps drawn with this canvas. Attempting to draw with a bitmap wider than this value will result in an error. See Also getMaximumBitmapHeight()
	7:	android.graphics.Canvas public Canvas () Construct an empty raster canvas. Use setBitmap() to specify a bitmap to draw into. The initial target density is DENSITY_NONE; this will typically be replaced when a target bitmap is set for the canvas.
	8:	android.graphics.Canvas public void setBitmap (Bitmap bitmap) Specify a bitmap for the canvas to draw into. All canvas state such as layers, filters, and the save/restore stack are reset with the exception of the current matrix and clip stack. Additionally, as a side-effect the canvas' target density is updated to match that of the bitmap. Parameters bitmap Specifies a mutable bitmap for the canvas to draw into. See Also setDensity(int) getDensity()
	9:	android.graphics.Canvas public void drawPoints (float[] pts, int offset, int count, Paint paint) Draw a series of points. Each point is centered at the coordinate specified by pts[], and its diameter is specified by the paint's stroke width (as transformed by the canvas' CTM), with special treatment for a stroke width of 0, which always draws exactly 1 pixel (or at most 4 if antialiasing is enabled). The shape of the point is controlled by the paint's Cap type. The shape is a square, unless the cap type is Round, in which case the shape is a circle. Parameters pts Array of points to draw [x0 y0 x1 y1 x2 y2 ...] offset Number of values to skip before starting to draw. count The number of values to process, after skipping offset of them. Since one point uses two values, the number of "points" that are drawn is really (count >> 1). paint The paint used to draw the points
getKeyCode
Gets a key code that corresponds to the specified game action on the device
	0:	android.graphics.Canvas public void setBitmap (Bitmap bitmap) Specify a bitmap for the canvas to draw into. All canvas state such as layers, filters, and the save/restore stack are reset with the exception of the current matrix and clip stack. Additionally, as a side-effect the canvas' target density is updated to match that of the bitmap. Parameters bitmap Specifies a mutable bitmap for the canvas to draw into. See Also setDensity(int) getDensity()
	1:	android.graphics.Canvas public void drawPicture (Picture picture, RectF dst) Draw the picture, stretched to fit into the dst rectangle.
	2:	android.graphics.Canvas public void drawPicture (Picture picture, Rect dst) Draw the picture, stretched to fit into the dst rectangle.
	3:	android.graphics.Canvas public Canvas () Construct an empty raster canvas. Use setBitmap() to specify a bitmap to draw into. The initial target density is DENSITY_NONE; this will typically be replaced when a target bitmap is set for the canvas.
	4:	android.graphics.Canvas public int getDensity () Returns the target density of the canvas. The default density is derived from the density of its backing bitmap, or DENSITY_NONE if there is not one. Returns Returns the current target density of the canvas, which is used to determine the scaling factor when drawing a bitmap into it. See Also setDensity(int) getDensity()
	5:	android.graphics.Canvas public void setDensity (int density) Specifies the density for this Canvas' backing bitmap. This modifies the target density of the canvas itself, as well as the density of its backing bitmap via Bitmap.setDensity(int). Parameters density The new target density of the canvas, which is used to determine the scaling factor when drawing a bitmap into it. Use DENSITY_NONE to disable bitmap scaling. See Also getDensity() setDensity(int)
	6:	android.graphics.Canvas public void drawArc (RectF oval, float startAngle, float sweepAngle, boolean useCenter, Paint paint) Draw the specified arc, which will be scaled to fit inside the specified oval. If the start angle is negative or >= 360, the start angle is treated as start angle modulo 360. If the sweep angle is >= 360, then the oval is drawn completely. Note that this differs slightly from SkPath::arcTo, which treats the sweep angle modulo 360. If the sweep angle is negative, the sweep angle is treated as sweep angle modulo 360 The arc is drawn clockwise. An angle of 0 degrees correspond to the geometric angle of 0 degrees (3 o'clock on a watch.) Parameters oval The bounds of oval used to define the shape and size of the arc startAngle Starting angle (in degrees) where the arc begins sweepAngle Sweep angle (in degrees) measured clockwise useCenter If true, include the center of the oval in the arc, and close it if it is being stroked. This will draw a wedge paint The paint used to draw the arc
	7:	android.graphics.Canvas public Canvas (Bitmap bitmap) Construct a canvas with the specified bitmap to draw into. The bitmap must be mutable. The initial target density of the canvas is the same as the given bitmap's density. Parameters bitmap Specifies a mutable bitmap for the canvas to draw into.
	8:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	9:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
getKeyName
Gets an informative key string for a key
	0:	android.graphics.Canvas public void drawText (String text, int start, int end, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	1:	android.graphics.Canvas public void drawText (CharSequence text, int start, int end, float x, float y, Paint paint) Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint. The origin is interpreted based on the Align setting in the Paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of origin for where to draw the text y The y-coordinate of origin for where to draw the text paint The paint used for the text (e.g. color, size, style)
	2:	android.graphics.Canvas public void drawPicture (Picture picture, RectF dst) Draw the picture, stretched to fit into the dst rectangle.
	3:	android.graphics.Canvas public void drawPicture (Picture picture, Rect dst) Draw the picture, stretched to fit into the dst rectangle.
	4:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, Matrix matrix, Paint paint) Draw the bitmap using the specified matrix. Parameters bitmap The bitmap to draw matrix The matrix used to transform the bitmap when it is drawn paint May be null. The paint used to draw the bitmap
	5:	android.graphics.Canvas public int getMaximumBitmapHeight () Returns the maximum allowed height for bitmaps drawn with this canvas. Attempting to draw with a bitmap taller than this value will result in an error. See Also getMaximumBitmapWidth()
	6:	android.graphics.Canvas public int getMaximumBitmapWidth () Returns the maximum allowed width for bitmaps drawn with this canvas. Attempting to draw with a bitmap wider than this value will result in an error. See Also getMaximumBitmapHeight()
	7:	android.graphics.Canvas public void drawTextOnPath (String text, Path path, float hOffset, float vOffset, Paint paint) Draw the text, with origin at (x,y), using the specified paint, along the specified path. The paint's Align setting determins where along the path to start the text. Parameters text The text to be drawn path The path the text should follow for its baseline hOffset The distance along the path to add to the text's starting position vOffset The distance above(-) or below(+) the path to position the text paint The paint used for the text (e.g. color, size, style)
	8:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	9:	android.graphics.Canvas public void drawPosText (String text, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array. This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. Parameters text The text to be drawn pos Array of [x,y] positions, used to position each character paint The paint used for the text (e.g. color, size, style)
getKeyName

getGameAction
Gets the game action associated with the given key code of the device
	0:	android.graphics.Canvas public Canvas (Bitmap bitmap) Construct a canvas with the specified bitmap to draw into. The bitmap must be mutable. The initial target density of the canvas is the same as the given bitmap's density. Parameters bitmap Specifies a mutable bitmap for the canvas to draw into.
	1:	android.graphics.Canvas public Canvas () Construct an empty raster canvas. Use setBitmap() to specify a bitmap to draw into. The initial target density is DENSITY_NONE; this will typically be replaced when a target bitmap is set for the canvas.
	2:	android.graphics.Canvas public int getDensity () Returns the target density of the canvas. The default density is derived from the density of its backing bitmap, or DENSITY_NONE if there is not one. Returns Returns the current target density of the canvas, which is used to determine the scaling factor when drawing a bitmap into it. See Also setDensity(int) getDensity()
	3:	android.graphics.Canvas public void setDensity (int density) Specifies the density for this Canvas' backing bitmap. This modifies the target density of the canvas itself, as well as the density of its backing bitmap via Bitmap.setDensity(int). Parameters density The new target density of the canvas, which is used to determine the scaling factor when drawing a bitmap into it. Use DENSITY_NONE to disable bitmap scaling. See Also getDensity() setDensity(int)
	4:	android.graphics.Canvas public void setBitmap (Bitmap bitmap) Specify a bitmap for the canvas to draw into. All canvas state such as layers, filters, and the save/restore stack are reset with the exception of the current matrix and clip stack. Additionally, as a side-effect the canvas' target density is updated to match that of the bitmap. Parameters bitmap Specifies a mutable bitmap for the canvas to draw into. See Also setDensity(int) getDensity()
	5:	android.graphics.Canvas public void drawLines (float[] pts, int offset, int count, Paint paint) Draw a series of lines. Each line is taken from 4 consecutive values in the pts array. Thus to draw 1 line, the array must contain at least 4 values. This is logically the same as drawing the array as follows: drawLine(pts[0], pts[1], pts[2], pts[3]) followed by drawLine(pts[4], pts[5], pts[6], pts[7]) and so on. Parameters pts Array of points to draw [x0 y0 x1 y1 x2 y2 ...] offset Number of values in the array to skip before drawing. count The number of values in the array to process, after skipping "offset" of them. Since each line uses 4 values, the number of "lines" that are drawn is really (count >> 2). paint The paint used to draw the points
	6:	android.graphics.Canvas public void drawPoints (float[] pts, int offset, int count, Paint paint) Draw a series of points. Each point is centered at the coordinate specified by pts[], and its diameter is specified by the paint's stroke width (as transformed by the canvas' CTM), with special treatment for a stroke width of 0, which always draws exactly 1 pixel (or at most 4 if antialiasing is enabled). The shape of the point is controlled by the paint's Cap type. The shape is a square, unless the cap type is Round, in which case the shape is a circle. Parameters pts Array of points to draw [x0 y0 x1 y1 x2 y2 ...] offset Number of values to skip before starting to draw. count The number of values to process, after skipping offset of them. Since one point uses two values, the number of "points" that are drawn is really (count >> 1). paint The paint used to draw the points
	7:	android.graphics.Canvas public int saveLayer (RectF bounds, Paint paint, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds May be null. The maximum size the offscreen bitmap needs to be (in local coordinates) paint This is copied, and is applied to the offscreen when restore() is called. saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this save()
	8:	android.graphics.Canvas public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds The maximum size the offscreen bitmap needs to be (in local coordinates) alpha The alpha to apply to the offscreen when when it is drawn during restore() saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this call
	9:	android.graphics.Canvas public void drawText (CharSequence text, int start, int end, float x, float y, Paint paint) Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint. The origin is interpreted based on the Align setting in the Paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of origin for where to draw the text y The y-coordinate of origin for where to draw the text paint The paint used for the text (e.g. color, size, style)
setFullScreenMode
Controls whether the Canvas is in full-screen mode or in normal mode
	0:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	1:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	2:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	3:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	4:	android.graphics.Canvas public void drawLine (float startX, float startY, float stopX, float stopY, Paint paint) Draw a line segment with the specified start and stop x,y coordinates, using the specified paint. Note that since a line is always "framed", the Style is ignored in the paint. Degenerate lines (length is 0) will not be drawn. Parameters startX The x-coordinate of the start point of the line startY The y-coordinate of the start point of the line paint The paint used to draw the line
	5:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, Rect src, RectF dst, Paint paint) Draw the specified bitmap, scaling/translating automatically to fill the destination rectangle. If the source rectangle is not null, it specifies the subset of the bitmap to draw. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. This function ignores the density associated with the bitmap. This is because the source and destination rectangle coordinate spaces are in their respective densities, so must already have the appropriate scaling factor applied. Parameters bitmap The bitmap to be drawn src May be null. The subset of the bitmap to be drawn dst The rectangle that the bitmap will be scaled/translated to fit into paint May be null. The paint used to draw the bitmap
	6:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, Rect src, Rect dst, Paint paint) Draw the specified bitmap, scaling/translating automatically to fill the destination rectangle. If the source rectangle is not null, it specifies the subset of the bitmap to draw. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. This function ignores the density associated with the bitmap. This is because the source and destination rectangle coordinate spaces are in their respective densities, so must already have the appropriate scaling factor applied. Parameters bitmap The bitmap to be drawn src May be null. The subset of the bitmap to be drawn dst The rectangle that the bitmap will be scaled/translated to fit into paint May be null. The paint used to draw the bitmap
	7:	android.graphics.Canvas public void drawVertices (Canvas.VertexMode mode, int vertexCount, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, Paint paint) Draw the array of vertices, interpreted as triangles (based on mode). The verts array is required, and specifies the x,y pairs for each vertex. If texs is non-null, then it is used to specify the coordinate in shader coordinates to use at each vertex (the paint must have a shader in this case). If there is no texs array, but there is a color array, then each color is interpolated across its corresponding triangle in a gradient. If both texs and colors arrays are present, then they behave as before, but the resulting color at each pixels is the result of multiplying the colors from the shader and the color-gradient together. The indices array is optional, but if it is present, then it is used to specify the index of each triangle, rather than just walking through the arrays in order. Parameters mode How to interpret the array of vertices vertexCount The number of values in the vertices array (and corresponding texs and colors arrays if non-null). Each logical vertex is two values (x, y), vertexCount must be a multiple of 2. verts Array of vertices for the mesh vertOffset Number of values in the verts to skip before drawing. texs May be null. If not null, specifies the coordinates to sample into the current shader (e.g. bitmap tile or gradient) texOffset Number of values in texs to skip before drawing. colors May be null. If not null, specifies a color for each vertex, to be interpolated across the triangle. colorOffset Number of values in colors to skip before drawing. indices If not null, array of indices to reference into the vertex (texs, colors) array. indexCount number of entries in the indices array (if not null). paint Specifies the shader to use if the texs array is non-null.
	8:	android.graphics.Canvas public void drawOval (RectF oval, Paint paint) Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint. Parameters oval The rectangle bounds of the oval to be drawn
	9:	android.graphics.Canvas public void drawPath (Path path, Paint paint) Draw the specified path using the specified paint. The path will be filled or framed based on the Style in the paint. Parameters path The path to be drawn paint The paint used to draw the path
keyPressed
Called when a key is pressed
	0:	android.graphics.Canvas public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds The maximum size the offscreen bitmap needs to be (in local coordinates) alpha The alpha to apply to the offscreen when when it is drawn during restore() saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this call
	1:	android.graphics.Canvas public int saveLayer (RectF bounds, Paint paint, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds May be null. The maximum size the offscreen bitmap needs to be (in local coordinates) paint This is copied, and is applied to the offscreen when restore() is called. saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this save()
	2:	android.graphics.Canvas public int save () Saves the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Returns The value to pass to restoreToCount() to balance this save()
	3:	android.graphics.Canvas public int save (int saveFlags) Based on saveFlags, can save the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Parameters saveFlags flag bits that specify which parts of the Canvas state to save/restore Returns The value to pass to restoreToCount() to balance this save()
	4:	android.graphics.Canvas public void restore () This call balances a previous call to save(), and is used to remove all modifications to the matrix/clip state since the last save call. It is an error to call restore() more times than save() was called.
	5:	android.graphics.Canvas public void drawPicture (Picture picture) Save the canvas state, draw the picture, and restore the canvas state. This differs from picture.draw(canvas), which does not perform any save/restore. Note: This forces the picture to internally call endRecording() in order to prepare for playback. Parameters picture The picture to be drawn
	6:	android.graphics.Canvas.EdgeType public static Canvas.EdgeType valueOf (String name) 
	7:	android.graphics.Canvas.VertexMode public static Canvas.VertexMode valueOf (String name) 
	8:	android.graphics.Canvas public void restoreToCount (int saveCount) Efficient way to pop any calls to save() that happened after the save count reached saveCount. It is an error for saveCount to be less than 1. Example: int count = canvas.save(); ... // more calls potentially to save() canvas.restoreToCount(count); // now the canvas is back in the same state it was before the initial // call to save(). Parameters saveCount The save level to restore to.
	9:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
keyRepeated
Called when a key is repeated (held down)
	0:	android.graphics.Canvas public int save () Saves the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Returns The value to pass to restoreToCount() to balance this save()
	1:	android.graphics.Canvas public int save (int saveFlags) Based on saveFlags, can save the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Parameters saveFlags flag bits that specify which parts of the Canvas state to save/restore Returns The value to pass to restoreToCount() to balance this save()
	2:	android.graphics.Canvas public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds The maximum size the offscreen bitmap needs to be (in local coordinates) alpha The alpha to apply to the offscreen when when it is drawn during restore() saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this call
	3:	android.graphics.Canvas public void restoreToCount (int saveCount) Efficient way to pop any calls to save() that happened after the save count reached saveCount. It is an error for saveCount to be less than 1. Example: int count = canvas.save(); ... // more calls potentially to save() canvas.restoreToCount(count); // now the canvas is back in the same state it was before the initial // call to save(). Parameters saveCount The save level to restore to.
	4:	android.graphics.Canvas public int saveLayer (RectF bounds, Paint paint, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds May be null. The maximum size the offscreen bitmap needs to be (in local coordinates) paint This is copied, and is applied to the offscreen when restore() is called. saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this save()
	5:	android.graphics.Canvas public void drawPicture (Picture picture) Save the canvas state, draw the picture, and restore the canvas state. This differs from picture.draw(canvas), which does not perform any save/restore. Note: This forces the picture to internally call endRecording() in order to prepare for playback. Parameters picture The picture to be drawn
	6:	android.graphics.Canvas public Canvas () Construct an empty raster canvas. Use setBitmap() to specify a bitmap to draw into. The initial target density is DENSITY_NONE; this will typically be replaced when a target bitmap is set for the canvas.
	7:	android.graphics.Canvas public void restore () This call balances a previous call to save(), and is used to remove all modifications to the matrix/clip state since the last save call. It is an error to call restore() more times than save() was called.
	8:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	9:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
keyReleased
Called when a key is released
	0:	android.graphics.Canvas public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds The maximum size the offscreen bitmap needs to be (in local coordinates) alpha The alpha to apply to the offscreen when when it is drawn during restore() saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this call
	1:	android.graphics.Canvas public int saveLayer (RectF bounds, Paint paint, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds May be null. The maximum size the offscreen bitmap needs to be (in local coordinates) paint This is copied, and is applied to the offscreen when restore() is called. saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this save()
	2:	android.graphics.Canvas public int save () Saves the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Returns The value to pass to restoreToCount() to balance this save()
	3:	android.graphics.Canvas public int save (int saveFlags) Based on saveFlags, can save the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Parameters saveFlags flag bits that specify which parts of the Canvas state to save/restore Returns The value to pass to restoreToCount() to balance this save()
	4:	android.graphics.Canvas public void restore () This call balances a previous call to save(), and is used to remove all modifications to the matrix/clip state since the last save call. It is an error to call restore() more times than save() was called.
	5:	android.graphics.Canvas public void drawPicture (Picture picture) Save the canvas state, draw the picture, and restore the canvas state. This differs from picture.draw(canvas), which does not perform any save/restore. Note: This forces the picture to internally call endRecording() in order to prepare for playback. Parameters picture The picture to be drawn
	6:	android.graphics.Canvas.EdgeType public static Canvas.EdgeType valueOf (String name) 
	7:	android.graphics.Canvas.VertexMode public static Canvas.VertexMode valueOf (String name) 
	8:	android.graphics.Canvas public void restoreToCount (int saveCount) Efficient way to pop any calls to save() that happened after the save count reached saveCount. It is an error for saveCount to be less than 1. Example: int count = canvas.save(); ... // more calls potentially to save() canvas.restoreToCount(count); // now the canvas is back in the same state it was before the initial // call to save(). Parameters saveCount The save level to restore to.
	9:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
pointerPressed
Called when the pointer is pressed
	0:	android.graphics.Canvas public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds The maximum size the offscreen bitmap needs to be (in local coordinates) alpha The alpha to apply to the offscreen when when it is drawn during restore() saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this call
	1:	android.graphics.Canvas public int saveLayer (RectF bounds, Paint paint, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds May be null. The maximum size the offscreen bitmap needs to be (in local coordinates) paint This is copied, and is applied to the offscreen when restore() is called. saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this save()
	2:	android.graphics.Canvas public int save () Saves the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Returns The value to pass to restoreToCount() to balance this save()
	3:	android.graphics.Canvas public int save (int saveFlags) Based on saveFlags, can save the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Parameters saveFlags flag bits that specify which parts of the Canvas state to save/restore Returns The value to pass to restoreToCount() to balance this save()
	4:	android.graphics.Canvas public void restore () This call balances a previous call to save(), and is used to remove all modifications to the matrix/clip state since the last save call. It is an error to call restore() more times than save() was called.
	5:	android.graphics.Canvas public void drawPicture (Picture picture) Save the canvas state, draw the picture, and restore the canvas state. This differs from picture.draw(canvas), which does not perform any save/restore. Note: This forces the picture to internally call endRecording() in order to prepare for playback. Parameters picture The picture to be drawn
	6:	android.graphics.Canvas.EdgeType public static Canvas.EdgeType valueOf (String name) 
	7:	android.graphics.Canvas.VertexMode public static Canvas.VertexMode valueOf (String name) 
	8:	android.graphics.Canvas public void restoreToCount (int saveCount) Efficient way to pop any calls to save() that happened after the save count reached saveCount. It is an error for saveCount to be less than 1. Example: int count = canvas.save(); ... // more calls potentially to save() canvas.restoreToCount(count); // now the canvas is back in the same state it was before the initial // call to save(). Parameters saveCount The save level to restore to.
	9:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
pointerReleased
Called when the pointer is released
	0:	android.graphics.Canvas public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds The maximum size the offscreen bitmap needs to be (in local coordinates) alpha The alpha to apply to the offscreen when when it is drawn during restore() saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this call
	1:	android.graphics.Canvas public int saveLayer (RectF bounds, Paint paint, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds May be null. The maximum size the offscreen bitmap needs to be (in local coordinates) paint This is copied, and is applied to the offscreen when restore() is called. saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this save()
	2:	android.graphics.Canvas public int save () Saves the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Returns The value to pass to restoreToCount() to balance this save()
	3:	android.graphics.Canvas public int save (int saveFlags) Based on saveFlags, can save the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Parameters saveFlags flag bits that specify which parts of the Canvas state to save/restore Returns The value to pass to restoreToCount() to balance this save()
	4:	android.graphics.Canvas public void restore () This call balances a previous call to save(), and is used to remove all modifications to the matrix/clip state since the last save call. It is an error to call restore() more times than save() was called.
	5:	android.graphics.Canvas public void drawPicture (Picture picture) Save the canvas state, draw the picture, and restore the canvas state. This differs from picture.draw(canvas), which does not perform any save/restore. Note: This forces the picture to internally call endRecording() in order to prepare for playback. Parameters picture The picture to be drawn
	6:	android.graphics.Canvas.EdgeType public static Canvas.EdgeType valueOf (String name) 
	7:	android.graphics.Canvas.VertexMode public static Canvas.VertexMode valueOf (String name) 
	8:	android.graphics.Canvas public void restoreToCount (int saveCount) Efficient way to pop any calls to save() that happened after the save count reached saveCount. It is an error for saveCount to be less than 1. Example: int count = canvas.save(); ... // more calls potentially to save() canvas.restoreToCount(count); // now the canvas is back in the same state it was before the initial // call to save(). Parameters saveCount The save level to restore to.
	9:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
pointerDragged
Called when the pointer is dragged
	0:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, Matrix matrix, Paint paint) Draw the bitmap using the specified matrix. Parameters bitmap The bitmap to draw matrix The matrix used to transform the bitmap when it is drawn paint May be null. The paint used to draw the bitmap
	1:	android.graphics.Canvas public void drawPicture (Picture picture) Save the canvas state, draw the picture, and restore the canvas state. This differs from picture.draw(canvas), which does not perform any save/restore. Note: This forces the picture to internally call endRecording() in order to prepare for playback. Parameters picture The picture to be drawn
	2:	android.graphics.Canvas public Canvas () Construct an empty raster canvas. Use setBitmap() to specify a bitmap to draw into. The initial target density is DENSITY_NONE; this will typically be replaced when a target bitmap is set for the canvas.
	3:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	4:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
	5:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	6:	android.graphics.Canvas public void drawArc (RectF oval, float startAngle, float sweepAngle, boolean useCenter, Paint paint) Draw the specified arc, which will be scaled to fit inside the specified oval. If the start angle is negative or >= 360, the start angle is treated as start angle modulo 360. If the sweep angle is >= 360, then the oval is drawn completely. Note that this differs slightly from SkPath::arcTo, which treats the sweep angle modulo 360. If the sweep angle is negative, the sweep angle is treated as sweep angle modulo 360 The arc is drawn clockwise. An angle of 0 degrees correspond to the geometric angle of 0 degrees (3 o'clock on a watch.) Parameters oval The bounds of oval used to define the shape and size of the arc startAngle Starting angle (in degrees) where the arc begins sweepAngle Sweep angle (in degrees) measured clockwise useCenter If true, include the center of the oval in the arc, and close it if it is being stroked. This will draw a wedge paint The paint used to draw the arc
	7:	android.graphics.Canvas public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds The maximum size the offscreen bitmap needs to be (in local coordinates) alpha The alpha to apply to the offscreen when when it is drawn during restore() saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this call
	8:	android.graphics.Canvas public void drawPicture (Picture picture, RectF dst) Draw the picture, stretched to fit into the dst rectangle.
	9:	android.graphics.Canvas public void drawPicture (Picture picture, Rect dst) Draw the picture, stretched to fit into the dst rectangle.
repaint
Requests a repaint for the specified region of the Canvas
	0:	android.graphics.Canvas public boolean clipRegion (Region region) Intersect the current clip with the specified region. Note that unlike clipRect() and clipPath() which transform their arguments by the current matrix, clipRegion() assumes its argument is already in the coordinate system of the current layer's bitmap, and so not transformation is performed. Parameters region The region to operate on the current clip, based on op Returns true if the resulting is non-empty
	1:	android.graphics.Canvas public boolean clipRegion (Region region, Region.Op op) Modify the current clip with the specified region. Note that unlike clipRect() and clipPath() which transform their arguments by the current matrix, clipRegion() assumes its argument is already in the coordinate system of the current layer's bitmap, and so not transformation is performed. Parameters region The region to operate on the current clip, based on op op How the clip is modified Returns true if the resulting is non-empty
	2:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	3:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
	4:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	5:	android.graphics.Canvas public Canvas () Construct an empty raster canvas. Use setBitmap() to specify a bitmap to draw into. The initial target density is DENSITY_NONE; this will typically be replaced when a target bitmap is set for the canvas.
	6:	android.graphics.Canvas public Canvas (Bitmap bitmap) Construct a canvas with the specified bitmap to draw into. The bitmap must be mutable. The initial target density of the canvas is the same as the given bitmap's density. Parameters bitmap Specifies a mutable bitmap for the canvas to draw into.
	7:	android.graphics.Canvas public boolean clipPath (Path path) Intersect the current clip with the specified path. Parameters path The path to intersect with the current clip Returns true if the resulting is non-empty
	8:	android.graphics.Canvas public boolean clipPath (Path path, Region.Op op) Modify the current clip with the specified path. Parameters path The path to operate on the current clip op How the clip is modified Returns true if the resulting is non-empty
	9:	android.graphics.Canvas public boolean clipRect (Rect rect, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. op How the clip is modified Returns true if the resulting clip is non-empty
repaint
Requests a repaint for the entire Canvas
	0:	android.graphics.Canvas public Canvas () Construct an empty raster canvas. Use setBitmap() to specify a bitmap to draw into. The initial target density is DENSITY_NONE; this will typically be replaced when a target bitmap is set for the canvas.
	1:	android.graphics.Canvas public Canvas (Bitmap bitmap) Construct a canvas with the specified bitmap to draw into. The bitmap must be mutable. The initial target density of the canvas is the same as the given bitmap's density. Parameters bitmap Specifies a mutable bitmap for the canvas to draw into.
	2:	android.graphics.Canvas public boolean clipPath (Path path) Intersect the current clip with the specified path. Parameters path The path to intersect with the current clip Returns true if the resulting is non-empty
	3:	android.graphics.Canvas public boolean clipPath (Path path, Region.Op op) Modify the current clip with the specified path. Parameters path The path to operate on the current clip op How the clip is modified Returns true if the resulting is non-empty
	4:	android.graphics.Canvas public boolean clipRect (Rect rect, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. op How the clip is modified Returns true if the resulting clip is non-empty
	5:	android.graphics.Canvas public boolean clipRect (RectF rect, Region.Op op) Modify the current clip with the specified rectangle. Parameters rect The rect to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	6:	android.graphics.Canvas public boolean clipRect (int left, int top, int right, int bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	7:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	8:	android.graphics.Canvas public boolean clipRect (RectF rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	9:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
serviceRepaints
Forces any pending repaint requests to be serviced immediately
	0:	android.graphics.Canvas public Canvas () Construct an empty raster canvas. Use setBitmap() to specify a bitmap to draw into. The initial target density is DENSITY_NONE; this will typically be replaced when a target bitmap is set for the canvas.
	1:	android.graphics.Canvas public Canvas (Bitmap bitmap) Construct a canvas with the specified bitmap to draw into. The bitmap must be mutable. The initial target density of the canvas is the same as the given bitmap's density. Parameters bitmap Specifies a mutable bitmap for the canvas to draw into.
	2:	android.graphics.Canvas public boolean clipPath (Path path) Intersect the current clip with the specified path. Parameters path The path to intersect with the current clip Returns true if the resulting is non-empty
	3:	android.graphics.Canvas public boolean clipPath (Path path, Region.Op op) Modify the current clip with the specified path. Parameters path The path to operate on the current clip op How the clip is modified Returns true if the resulting is non-empty
	4:	android.graphics.Canvas public boolean clipRect (Rect rect, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. op How the clip is modified Returns true if the resulting clip is non-empty
	5:	android.graphics.Canvas public boolean clipRect (RectF rect, Region.Op op) Modify the current clip with the specified rectangle. Parameters rect The rect to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	6:	android.graphics.Canvas public boolean clipRect (int left, int top, int right, int bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	7:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	8:	android.graphics.Canvas public boolean clipRect (RectF rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	9:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
showNotify
The implementation calls showNotify() immediately prior to this Canvas being made visible on the display
	0:	android.graphics.Canvas public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds The maximum size the offscreen bitmap needs to be (in local coordinates) alpha The alpha to apply to the offscreen when when it is drawn during restore() saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this call
	1:	android.graphics.Canvas public int save () Saves the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Returns The value to pass to restoreToCount() to balance this save()
	2:	android.graphics.Canvas public int saveLayer (RectF bounds, Paint paint, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds May be null. The maximum size the offscreen bitmap needs to be (in local coordinates) paint This is copied, and is applied to the offscreen when restore() is called. saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this save()
	3:	android.graphics.Canvas public int save (int saveFlags) Based on saveFlags, can save the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Parameters saveFlags flag bits that specify which parts of the Canvas state to save/restore Returns The value to pass to restoreToCount() to balance this save()
	4:	android.graphics.Canvas public void drawPicture (Picture picture) Save the canvas state, draw the picture, and restore the canvas state. This differs from picture.draw(canvas), which does not perform any save/restore. Note: This forces the picture to internally call endRecording() in order to prepare for playback. Parameters picture The picture to be drawn
	5:	android.graphics.Canvas public void restoreToCount (int saveCount) Efficient way to pop any calls to save() that happened after the save count reached saveCount. It is an error for saveCount to be less than 1. Example: int count = canvas.save(); ... // more calls potentially to save() canvas.restoreToCount(count); // now the canvas is back in the same state it was before the initial // call to save(). Parameters saveCount The save level to restore to.
	6:	android.graphics.Canvas public void restore () This call balances a previous call to save(), and is used to remove all modifications to the matrix/clip state since the last save call. It is an error to call restore() more times than save() was called.
	7:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	8:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	9:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
hideNotify
The implementation calls hideNotify() shortly after the Canvas has been removed from the display
	0:	android.graphics.Canvas public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds The maximum size the offscreen bitmap needs to be (in local coordinates) alpha The alpha to apply to the offscreen when when it is drawn during restore() saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this call
	1:	android.graphics.Canvas public void restoreToCount (int saveCount) Efficient way to pop any calls to save() that happened after the save count reached saveCount. It is an error for saveCount to be less than 1. Example: int count = canvas.save(); ... // more calls potentially to save() canvas.restoreToCount(count); // now the canvas is back in the same state it was before the initial // call to save(). Parameters saveCount The save level to restore to.
	2:	android.graphics.Canvas public void drawPicture (Picture picture) Save the canvas state, draw the picture, and restore the canvas state. This differs from picture.draw(canvas), which does not perform any save/restore. Note: This forces the picture to internally call endRecording() in order to prepare for playback. Parameters picture The picture to be drawn
	3:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	4:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
	5:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	6:	android.graphics.Canvas public void restore () This call balances a previous call to save(), and is used to remove all modifications to the matrix/clip state since the last save call. It is an error to call restore() more times than save() was called.
	7:	android.graphics.Canvas public void drawLines (float[] pts, int offset, int count, Paint paint) Draw a series of lines. Each line is taken from 4 consecutive values in the pts array. Thus to draw 1 line, the array must contain at least 4 values. This is logically the same as drawing the array as follows: drawLine(pts[0], pts[1], pts[2], pts[3]) followed by drawLine(pts[4], pts[5], pts[6], pts[7]) and so on. Parameters pts Array of points to draw [x0 y0 x1 y1 x2 y2 ...] offset Number of values in the array to skip before drawing. count The number of values in the array to process, after skipping "offset" of them. Since each line uses 4 values, the number of "lines" that are drawn is really (count >> 2). paint The paint used to draw the points
	8:	android.graphics.Canvas public void drawPoints (float[] pts, int offset, int count, Paint paint) Draw a series of points. Each point is centered at the coordinate specified by pts[], and its diameter is specified by the paint's stroke width (as transformed by the canvas' CTM), with special treatment for a stroke width of 0, which always draws exactly 1 pixel (or at most 4 if antialiasing is enabled). The shape of the point is controlled by the paint's Cap type. The shape is a square, unless the cap type is Round, in which case the shape is a circle. Parameters pts Array of points to draw [x0 y0 x1 y1 x2 y2 ...] offset Number of values to skip before starting to draw. count The number of values to process, after skipping offset of them. Since one point uses two values, the number of "points" that are drawn is really (count >> 1). paint The paint used to draw the points
	9:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
paint
Renders the Canvas
	0:	android.graphics.Canvas public void drawPosText (String text, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array. This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. Parameters text The text to be drawn pos Array of [x,y] positions, used to position each character paint The paint used for the text (e.g. color, size, style)
	1:	android.graphics.Canvas public int saveLayer (RectF bounds, Paint paint, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds May be null. The maximum size the offscreen bitmap needs to be (in local coordinates) paint This is copied, and is applied to the offscreen when restore() is called. saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this save()
	2:	android.graphics.Canvas public void drawPaint (Paint paint) Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint. Parameters paint The paint used to draw onto the canvas
	3:	android.graphics.Canvas public void drawLines (float[] pts, Paint paint) 
	4:	android.graphics.Canvas public void drawOval (RectF oval, Paint paint) Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint. Parameters oval The rectangle bounds of the oval to be drawn
	5:	android.graphics.Canvas public void drawPath (Path path, Paint paint) Draw the specified path using the specified paint. The path will be filled or framed based on the Style in the paint. Parameters path The path to be drawn paint The paint used to draw the path
	6:	android.graphics.Canvas public void drawPoints (float[] pts, Paint paint) Helper for drawPoints() that assumes you want to draw the entire array
	7:	android.graphics.Canvas public void drawRect (RectF rect, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters rect The rect to be drawn paint The paint used to draw the rect
	8:	android.graphics.Canvas public void drawRect (Rect r, Paint paint) Draw the specified Rect using the specified Paint. The rectangle will be filled or framed based on the Style in the paint. Parameters r The rectangle to be drawn. paint The paint used to draw the rectangle
	9:	android.graphics.Canvas public void drawPosText (char[] text, int index, int count, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array. This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. Parameters text The text to be drawn index The index of the first character to draw count The number of characters to draw, starting from index. pos Array of [x,y] positions, used to position each character paint The paint used for the text (e.g. color, size, style)
sizeChanged
Called when the drawable area of the Canvas has been changed
	0:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	1:	android.graphics.Canvas public Canvas () Construct an empty raster canvas. Use setBitmap() to specify a bitmap to draw into. The initial target density is DENSITY_NONE; this will typically be replaced when a target bitmap is set for the canvas.
	2:	android.graphics.Canvas public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds The maximum size the offscreen bitmap needs to be (in local coordinates) alpha The alpha to apply to the offscreen when when it is drawn during restore() saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this call
	3:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
	4:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	5:	android.graphics.Canvas public int getDensity () Returns the target density of the canvas. The default density is derived from the density of its backing bitmap, or DENSITY_NONE if there is not one. Returns Returns the current target density of the canvas, which is used to determine the scaling factor when drawing a bitmap into it. See Also setDensity(int) getDensity()
	6:	android.graphics.Canvas public int saveLayer (RectF bounds, Paint paint, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds May be null. The maximum size the offscreen bitmap needs to be (in local coordinates) paint This is copied, and is applied to the offscreen when restore() is called. saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this save()
	7:	android.graphics.Canvas public int save () Saves the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Returns The value to pass to restoreToCount() to balance this save()
	8:	android.graphics.Canvas public void setDensity (int density) Specifies the density for this Canvas' backing bitmap. This modifies the target density of the canvas itself, as well as the density of its backing bitmap via Bitmap.setDensity(int). Parameters density The new target density of the canvas, which is used to determine the scaling factor when drawing a bitmap into it. Use DENSITY_NONE to disable bitmap scaling. See Also getDensity() setDensity(int)
	9:	android.graphics.Canvas public int save (int saveFlags) Based on saveFlags, can save the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Parameters saveFlags flag bits that specify which parts of the Canvas state to save/restore Returns The value to pass to restoreToCount() to balance this save()
Command
Creates a new command object with the given short label, type, and priority
	0:	java.util.ResourceBundle.Control public static ResourceBundle.Control getControl (List<String> formats) Returns a control according to formats.
	1:	java.util.ResourceBundle.Control public static ResourceBundle.Control getNoFallbackControl (List<String> formats) Returns a control according to formats whose fallback locale is null.
	2:	java.util.ResourceBundle.Control public ResourceBundle newBundle (String baseName, Locale locale, String format, ClassLoader loader, boolean reload) Returns a new ResourceBundle. Parameters baseName the base name to use locale the given locale format the format, default is "java.class" or "java.properties" loader the classloader to use reload whether to reload the resource Returns a new ResourceBundle according to the give parameters Throws IllegalAccessException if we can not access resources InstantiationException if we can not instantiate a resource class IOException if other I/O exception happens
	3:	java.util.ResourceBundle.Control public String toBundleName (String baseName, Locale locale) a utility method to answer the name of a resource bundle according to the given base name and locale Parameters baseName the given base name locale the locale to use Returns the name of a resource bundle according to the given base name and locale
	4:	java.util.ResourceBundle.Control public final String toResourceName (String bundleName, String suffix) a utility method to answer the name of a resource according to the given bundleName and suffix Parameters bundleName the given bundle name suffix the suffix Returns the name of a resource according to the given bundleName and suffix
	5:	java.util.ResourceBundle.Control public long getTimeToLive (String baseName, Locale locale) Returns the time to live of the ResourceBundle baseName in locale, default is TTL_NO_EXPIRATION_CONTROL.
	6:	java.util.ResourceBundle.Control public List<String> getFormats (String baseName) Returns a list of strings of formats according to baseName.
	7:	java.util.ResourceBundle.Control public List<Locale> getCandidateLocales (String baseName, Locale locale) Returns a list of candidate locales according to baseName in locale.
	8:	java.util.ResourceBundle.Control protected ResourceBundle.Control () default constructor
	9:	java.util.ResourceBundle.Control public Locale getFallbackLocale (String baseName, Locale locale) Returns the fallback locale for baseName in locale.
Command
Creates a new command object with the given labels, type, and priority
	0:	java.util.ResourceBundle.Control public static ResourceBundle.Control getControl (List<String> formats) Returns a control according to formats.
	1:	java.util.ResourceBundle.Control public static ResourceBundle.Control getNoFallbackControl (List<String> formats) Returns a control according to formats whose fallback locale is null.
	2:	java.util.ResourceBundle.Control public ResourceBundle newBundle (String baseName, Locale locale, String format, ClassLoader loader, boolean reload) Returns a new ResourceBundle. Parameters baseName the base name to use locale the given locale format the format, default is "java.class" or "java.properties" loader the classloader to use reload whether to reload the resource Returns a new ResourceBundle according to the give parameters Throws IllegalAccessException if we can not access resources InstantiationException if we can not instantiate a resource class IOException if other I/O exception happens
	3:	java.util.ResourceBundle.Control public String toBundleName (String baseName, Locale locale) a utility method to answer the name of a resource bundle according to the given base name and locale Parameters baseName the given base name locale the locale to use Returns the name of a resource bundle according to the given base name and locale
	4:	java.util.ResourceBundle.Control public final String toResourceName (String bundleName, String suffix) a utility method to answer the name of a resource according to the given bundleName and suffix Parameters bundleName the given bundle name suffix the suffix Returns the name of a resource according to the given bundleName and suffix
	5:	java.util.ResourceBundle.Control public long getTimeToLive (String baseName, Locale locale) Returns the time to live of the ResourceBundle baseName in locale, default is TTL_NO_EXPIRATION_CONTROL.
	6:	java.util.ResourceBundle.Control public List<String> getFormats (String baseName) Returns a list of strings of formats according to baseName.
	7:	java.util.ResourceBundle.Control public List<Locale> getCandidateLocales (String baseName, Locale locale) Returns a list of candidate locales according to baseName in locale.
	8:	java.util.ResourceBundle.Control protected ResourceBundle.Control () default constructor
	9:	java.util.ResourceBundle.Control public Locale getFallbackLocale (String baseName, Locale locale) Returns the fallback locale for baseName in locale.
getLabel
Gets the short label of the command
	0:	java.util.ResourceBundle.Control public static ResourceBundle.Control getControl (List<String> formats) Returns a control according to formats.
	1:	java.util.ResourceBundle.Control public static ResourceBundle.Control getNoFallbackControl (List<String> formats) Returns a control according to formats whose fallback locale is null.
	2:	java.util.ResourceBundle.Control public long getTimeToLive (String baseName, Locale locale) Returns the time to live of the ResourceBundle baseName in locale, default is TTL_NO_EXPIRATION_CONTROL.
	3:	java.util.ResourceBundle.Control public ResourceBundle newBundle (String baseName, Locale locale, String format, ClassLoader loader, boolean reload) Returns a new ResourceBundle. Parameters baseName the base name to use locale the given locale format the format, default is "java.class" or "java.properties" loader the classloader to use reload whether to reload the resource Returns a new ResourceBundle according to the give parameters Throws IllegalAccessException if we can not access resources InstantiationException if we can not instantiate a resource class IOException if other I/O exception happens
	4:	java.util.ResourceBundle.Control protected ResourceBundle.Control () default constructor
	5:	java.util.ResourceBundle.Control public List<Locale> getCandidateLocales (String baseName, Locale locale) Returns a list of candidate locales according to baseName in locale.
	6:	java.util.ResourceBundle.Control public Locale getFallbackLocale (String baseName, Locale locale) Returns the fallback locale for baseName in locale.
	7:	java.util.ResourceBundle.Control public List<String> getFormats (String baseName) Returns a list of strings of formats according to baseName.
	8:	java.util.ResourceBundle.Control public boolean needsReload (String baseName, Locale locale, String format, ClassLoader loader, ResourceBundle bundle, long loadTime) Returns true if the ResourceBundle needs to reload. Parameters baseName the base name of the ResourceBundle locale the locale of the ResourceBundle format the format to load loader the ClassLoader to load resource bundle the ResourceBundle loadTime the expired time Returns if the ResourceBundle needs to reload
	9:	java.util.ResourceBundle.Control public String toBundleName (String baseName, Locale locale) a utility method to answer the name of a resource bundle according to the given base name and locale Parameters baseName the given base name locale the locale to use Returns the name of a resource bundle according to the given base name and locale
getLongLabel
Gets the long label of the command
	0:	java.util.ResourceBundle.Control public long getTimeToLive (String baseName, Locale locale) Returns the time to live of the ResourceBundle baseName in locale, default is TTL_NO_EXPIRATION_CONTROL.
	1:	java.util.ResourceBundle.Control public static ResourceBundle.Control getControl (List<String> formats) Returns a control according to formats.
	2:	java.util.ResourceBundle.Control public static ResourceBundle.Control getNoFallbackControl (List<String> formats) Returns a control according to formats whose fallback locale is null.
	3:	java.util.ResourceBundle.Control public boolean needsReload (String baseName, Locale locale, String format, ClassLoader loader, ResourceBundle bundle, long loadTime) Returns true if the ResourceBundle needs to reload. Parameters baseName the base name of the ResourceBundle locale the locale of the ResourceBundle format the format to load loader the ClassLoader to load resource bundle the ResourceBundle loadTime the expired time Returns if the ResourceBundle needs to reload
	4:	java.util.ResourceBundle.Control public ResourceBundle newBundle (String baseName, Locale locale, String format, ClassLoader loader, boolean reload) Returns a new ResourceBundle. Parameters baseName the base name to use locale the given locale format the format, default is "java.class" or "java.properties" loader the classloader to use reload whether to reload the resource Returns a new ResourceBundle according to the give parameters Throws IllegalAccessException if we can not access resources InstantiationException if we can not instantiate a resource class IOException if other I/O exception happens
	5:	java.util.ResourceBundle.Control protected ResourceBundle.Control () default constructor
	6:	java.util.ResourceBundle.Control public List<Locale> getCandidateLocales (String baseName, Locale locale) Returns a list of candidate locales according to baseName in locale.
	7:	java.util.ResourceBundle.Control public Locale getFallbackLocale (String baseName, Locale locale) Returns the fallback locale for baseName in locale.
	8:	java.util.ResourceBundle.Control public List<String> getFormats (String baseName) Returns a list of strings of formats according to baseName.
	9:	java.util.ResourceBundle.Control public String toBundleName (String baseName, Locale locale) a utility method to answer the name of a resource bundle according to the given base name and locale Parameters baseName the given base name locale the locale to use Returns the name of a resource bundle according to the given base name and locale
getCommandType
Gets the type of the command
	0:	java.util.ResourceBundle.Control public static ResourceBundle.Control getControl (List<String> formats) Returns a control according to formats.
	1:	java.util.ResourceBundle.Control public static ResourceBundle.Control getNoFallbackControl (List<String> formats) Returns a control according to formats whose fallback locale is null.
	2:	java.util.ResourceBundle.Control public long getTimeToLive (String baseName, Locale locale) Returns the time to live of the ResourceBundle baseName in locale, default is TTL_NO_EXPIRATION_CONTROL.
	3:	java.util.ResourceBundle.Control public ResourceBundle newBundle (String baseName, Locale locale, String format, ClassLoader loader, boolean reload) Returns a new ResourceBundle. Parameters baseName the base name to use locale the given locale format the format, default is "java.class" or "java.properties" loader the classloader to use reload whether to reload the resource Returns a new ResourceBundle according to the give parameters Throws IllegalAccessException if we can not access resources InstantiationException if we can not instantiate a resource class IOException if other I/O exception happens
	4:	java.util.ResourceBundle.Control public List<String> getFormats (String baseName) Returns a list of strings of formats according to baseName.
	5:	java.util.ResourceBundle.Control public String toBundleName (String baseName, Locale locale) a utility method to answer the name of a resource bundle according to the given base name and locale Parameters baseName the given base name locale the locale to use Returns the name of a resource bundle according to the given base name and locale
	6:	java.util.ResourceBundle.Control public final String toResourceName (String bundleName, String suffix) a utility method to answer the name of a resource according to the given bundleName and suffix Parameters bundleName the given bundle name suffix the suffix Returns the name of a resource according to the given bundleName and suffix
	7:	java.util.ResourceBundle.Control public List<Locale> getCandidateLocales (String baseName, Locale locale) Returns a list of candidate locales according to baseName in locale.
	8:	java.util.ResourceBundle.Control protected ResourceBundle.Control () default constructor
	9:	java.util.ResourceBundle.Control public Locale getFallbackLocale (String baseName, Locale locale) Returns the fallback locale for baseName in locale.
getPriority
Gets the priority of the command
	0:	java.util.ResourceBundle.Control public static ResourceBundle.Control getControl (List<String> formats) Returns a control according to formats.
	1:	java.util.ResourceBundle.Control public static ResourceBundle.Control getNoFallbackControl (List<String> formats) Returns a control according to formats whose fallback locale is null.
	2:	java.util.ResourceBundle.Control public long getTimeToLive (String baseName, Locale locale) Returns the time to live of the ResourceBundle baseName in locale, default is TTL_NO_EXPIRATION_CONTROL.
	3:	java.util.ResourceBundle.Control public ResourceBundle newBundle (String baseName, Locale locale, String format, ClassLoader loader, boolean reload) Returns a new ResourceBundle. Parameters baseName the base name to use locale the given locale format the format, default is "java.class" or "java.properties" loader the classloader to use reload whether to reload the resource Returns a new ResourceBundle according to the give parameters Throws IllegalAccessException if we can not access resources InstantiationException if we can not instantiate a resource class IOException if other I/O exception happens
	4:	java.util.ResourceBundle.Control protected ResourceBundle.Control () default constructor
	5:	java.util.ResourceBundle.Control public List<Locale> getCandidateLocales (String baseName, Locale locale) Returns a list of candidate locales according to baseName in locale.
	6:	java.util.ResourceBundle.Control public Locale getFallbackLocale (String baseName, Locale locale) Returns the fallback locale for baseName in locale.
	7:	java.util.ResourceBundle.Control public List<String> getFormats (String baseName) Returns a list of strings of formats according to baseName.
	8:	java.util.ResourceBundle.Control public boolean needsReload (String baseName, Locale locale, String format, ClassLoader loader, ResourceBundle bundle, long loadTime) Returns true if the ResourceBundle needs to reload. Parameters baseName the base name of the ResourceBundle locale the locale of the ResourceBundle format the format to load loader the ClassLoader to load resource bundle the ResourceBundle loadTime the expired time Returns if the ResourceBundle needs to reload
	9:	java.util.ResourceBundle.Control public String toBundleName (String baseName, Locale locale) a utility method to answer the name of a resource bundle according to the given base name and locale Parameters baseName the given base name locale the locale to use Returns the name of a resource bundle according to the given base name and locale
getDisplay
Gets the Display object that is unique to this MIDlet
	0:	android.util.DisplayMetrics public boolean equals (Object o) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters o the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	1:	android.view.Display public void getRectSize (Rect outSize) Gets the size of the display as a rectangle, in pixels. Parameters outSize A Rect object to receive the size information. See Also getSize(Point)
	2:	android.util.DisplayMetrics public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	3:	android.view.Display public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	4:	android.util.DisplayMetrics public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	5:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	6:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
	7:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	8:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	9:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
getColor
Returns one of the colors from the high level user interface color scheme, in the form 0x00RRGGBB based on the colorSpecifier passed in
	0:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	1:	android.support.v4.hardware.display.DisplayManagerCompat public abstract Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	2:	android.view.Display public void getCurrentSizeRange (Point outSmallestSize, Point outLargestSize) Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size. This is basically the sizes you will see as the orientation changes, taking into account whatever screen decoration there is in each rotation. For example, the status bar is always at the top of the screen, so it will reduce the height both in landscape and portrait, and the smallest height returned here will be the smaller of the two. This is intended for applications to get an idea of the range of sizes they will encounter while going through device rotations, to provide a stable UI through rotation. The sizes here take into account all standard system decorations that reduce the size actually available to the application: the status bar, navigation bar, system bar, etc. It does not take into account more transient elements like an IME soft keyboard. Parameters outSmallestSize Filled in with the smallest width and height that the application will encounter, in pixels (not dp units). The x (width) dimension here directly corresponds to Configuration.smallestScreenWidthDp, except the value here is in raw screen pixels rather than dp units. Your application may of course still get smaller space yet if, for example, a soft keyboard is being displayed. outLargestSize Filled in with the largest width and height that the application will encounter, in pixels (not dp units). Your application may of course still get larger space than this if, for example, screen decorations like the status bar are being hidden.
	3:	android.util.DisplayMetrics public boolean equals (Object o) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters o the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	4:	android.view.Display public int getRotation () Returns the rotation of the screen from its "natural" orientation. The returned value may be Surface.ROTATION_0 (no rotation), Surface.ROTATION_90, Surface.ROTATION_180, or Surface.ROTATION_270. For example, if a device has a naturally tall screen, and the user has turned it on its side to go into a landscape orientation, the value returned here may be either Surface.ROTATION_90 or Surface.ROTATION_270 depending on the direction it was turned. The angle is the rotation of the drawn graphics on the screen, which is the opposite direction of the physical rotation of the device. For example, if the device is rotated 90 degrees counter-clockwise, to compensate rendering will be rotated by 90 degrees clockwise and thus the returned value here will be Surface.ROTATION_90.
	5:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	6:	android.view.Display public int getOrientation () This method was deprecated in API level 8. use getRotation() Returns orientation of this display.
	7:	android.app.Presentation public Presentation (Context outerContext, Display display, int theme) Creates a new presentation that is attached to the specified display using the optionally specified theme. Parameters outerContext The context of the application that is showing the presentation. The presentation will create its own context (see getContext()) based on this context and information about the associated display. display The display to which the presentation should be attached. theme A style resource describing the theme to use for the window. See Style and Theme Resources for more information about defining and using styles. This theme is applied on top of the current theme in outerContext. If 0, the default presentation theme will be used.
	8:	android.util.DisplayMetrics public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	9:	android.app.Presentation public void onDisplayRemoved () Called by the system when the Display to which the presentation is attached has been removed. The system automatically calls cancel() to dismiss the presentation after sending this event. See Also getDisplay()
getBorderStyle
Returns the stroke style used for border drawing depending on the state of the component (highlighted/non-highlighted)
	0:	android.app.Presentation public void show () Inherited from show(). Will throw WindowManager.InvalidDisplayException if the specified secondary Display can't be found.
	1:	android.view.Display public void getCurrentSizeRange (Point outSmallestSize, Point outLargestSize) Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size. This is basically the sizes you will see as the orientation changes, taking into account whatever screen decoration there is in each rotation. For example, the status bar is always at the top of the screen, so it will reduce the height both in landscape and portrait, and the smallest height returned here will be the smaller of the two. This is intended for applications to get an idea of the range of sizes they will encounter while going through device rotations, to provide a stable UI through rotation. The sizes here take into account all standard system decorations that reduce the size actually available to the application: the status bar, navigation bar, system bar, etc. It does not take into account more transient elements like an IME soft keyboard. Parameters outSmallestSize Filled in with the smallest width and height that the application will encounter, in pixels (not dp units). The x (width) dimension here directly corresponds to Configuration.smallestScreenWidthDp, except the value here is in raw screen pixels rather than dp units. Your application may of course still get smaller space yet if, for example, a soft keyboard is being displayed. outLargestSize Filled in with the largest width and height that the application will encounter, in pixels (not dp units). Your application may of course still get larger space than this if, for example, screen decorations like the status bar are being hidden.
	2:	android.util.DisplayMetrics public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	3:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	4:	android.support.v4.hardware.display.DisplayManagerCompat public abstract Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	5:	android.app.Presentation public Presentation (Context outerContext, Display display, int theme) Creates a new presentation that is attached to the specified display using the optionally specified theme. Parameters outerContext The context of the application that is showing the presentation. The presentation will create its own context (see getContext()) based on this context and information about the associated display. display The display to which the presentation should be attached. theme A style resource describing the theme to use for the window. See Style and Theme Resources for more information about defining and using styles. This theme is applied on top of the current theme in outerContext. If 0, the default presentation theme will be used.
	6:	android.util.DisplayMetrics public boolean equals (Object o) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters o the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	7:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	8:	android.view.Display public int getState () Gets the state of the display, such as whether it is on or off. Returns The state of the display: one of STATE_OFF, STATE_ON, STATE_DOZING, or STATE_UNKNOWN.
	9:	android.hardware.display.DisplayManager.DisplayListener public abstract void onDisplayAdded (int displayId) Called whenever a logical display has been added to the system. Use getDisplay(int) to get more information about the display. Parameters displayId The id of the logical display that was added.
isColor
Gets information about color support of the device
	0:	android.hardware.display.DisplayManager.DisplayListener public abstract void onDisplayAdded (int displayId) Called whenever a logical display has been added to the system. Use getDisplay(int) to get more information about the display. Parameters displayId The id of the logical display that was added.
	1:	android.app.Presentation public Presentation (Context outerContext, Display display, int theme) Creates a new presentation that is attached to the specified display using the optionally specified theme. Parameters outerContext The context of the application that is showing the presentation. The presentation will create its own context (see getContext()) based on this context and information about the associated display. display The display to which the presentation should be attached. theme A style resource describing the theme to use for the window. See Style and Theme Resources for more information about defining and using styles. This theme is applied on top of the current theme in outerContext. If 0, the default presentation theme will be used.
	2:	android.hardware.display.DisplayManager public void registerDisplayListener (DisplayManager.DisplayListener listener, Handler handler) Registers an display listener to receive notifications about when displays are added, removed or changed. Parameters listener The listener to register. handler The handler on which the listener should be invoked, or null if the listener should be invoked on the calling thread's looper. See Also unregisterDisplayListener(DisplayManager.DisplayListener)
	3:	android.app.Presentation public Presentation (Context outerContext, Display display) Creates a new presentation that is attached to the specified display using the default theme. Parameters outerContext The context of the application that is showing the presentation. The presentation will create its own context (see getContext()) based on this context and information about the associated display. display The display to which the presentation should be attached.
	4:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	5:	android.support.v4.hardware.display.DisplayManagerCompat public abstract Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	6:	android.view.Display public void getCurrentSizeRange (Point outSmallestSize, Point outLargestSize) Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size. This is basically the sizes you will see as the orientation changes, taking into account whatever screen decoration there is in each rotation. For example, the status bar is always at the top of the screen, so it will reduce the height both in landscape and portrait, and the smallest height returned here will be the smaller of the two. This is intended for applications to get an idea of the range of sizes they will encounter while going through device rotations, to provide a stable UI through rotation. The sizes here take into account all standard system decorations that reduce the size actually available to the application: the status bar, navigation bar, system bar, etc. It does not take into account more transient elements like an IME soft keyboard. Parameters outSmallestSize Filled in with the smallest width and height that the application will encounter, in pixels (not dp units). The x (width) dimension here directly corresponds to Configuration.smallestScreenWidthDp, except the value here is in raw screen pixels rather than dp units. Your application may of course still get smaller space yet if, for example, a soft keyboard is being displayed. outLargestSize Filled in with the largest width and height that the application will encounter, in pixels (not dp units). Your application may of course still get larger space than this if, for example, screen decorations like the status bar are being hidden.
	7:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	8:	android.view.Display public String getName () Gets the name of the display. Note that some displays may be renamed by the user. Returns The display's name.
	9:	android.hardware.display.DisplayManager public Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
numColors
Gets the number of colors (if isColor() is true) or graylevels (if isColor() is false) that can be represented on the device
	0:	android.app.Presentation public void onDisplayRemoved () Called by the system when the Display to which the presentation is attached has been removed. The system automatically calls cancel() to dismiss the presentation after sending this event. See Also getDisplay()
	1:	android.util.DisplayMetrics public boolean equals (Object o) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters o the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	2:	android.app.Presentation public void onDisplayChanged () Called by the system when the properties of the Display to which the presentation is attached have changed. If the display metrics have changed (for example, if the display has been resized or rotated), then the system automatically calls cancel() to dismiss the presentation. See Also getDisplay()
	3:	android.util.DisplayMetrics public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	4:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	5:	android.view.Display public void getCurrentSizeRange (Point outSmallestSize, Point outLargestSize) Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size. This is basically the sizes you will see as the orientation changes, taking into account whatever screen decoration there is in each rotation. For example, the status bar is always at the top of the screen, so it will reduce the height both in landscape and portrait, and the smallest height returned here will be the smaller of the two. This is intended for applications to get an idea of the range of sizes they will encounter while going through device rotations, to provide a stable UI through rotation. The sizes here take into account all standard system decorations that reduce the size actually available to the application: the status bar, navigation bar, system bar, etc. It does not take into account more transient elements like an IME soft keyboard. Parameters outSmallestSize Filled in with the smallest width and height that the application will encounter, in pixels (not dp units). The x (width) dimension here directly corresponds to Configuration.smallestScreenWidthDp, except the value here is in raw screen pixels rather than dp units. Your application may of course still get smaller space yet if, for example, a soft keyboard is being displayed. outLargestSize Filled in with the largest width and height that the application will encounter, in pixels (not dp units). Your application may of course still get larger space than this if, for example, screen decorations like the status bar are being hidden.
	6:	android.view.Display public void getRectSize (Rect outSize) Gets the size of the display as a rectangle, in pixels. Parameters outSize A Rect object to receive the size information. See Also getSize(Point)
	7:	android.util.DisplayMetrics public boolean equals (DisplayMetrics other) Returns true if these display metrics equal the other display metrics. Parameters other The display metrics with which to compare. Returns True if the display metrics are equal.
	8:	android.hardware.display.DisplayManager.DisplayListener public abstract void onDisplayAdded (int displayId) Called whenever a logical display has been added to the system. Use getDisplay(int) to get more information about the display. Parameters displayId The id of the logical display that was added.
	9:	android.hardware.display.DisplayManager public void registerDisplayListener (DisplayManager.DisplayListener listener, Handler handler) Registers an display listener to receive notifications about when displays are added, removed or changed. Parameters listener The listener to register. handler The handler on which the listener should be invoked, or null if the listener should be invoked on the calling thread's looper. See Also unregisterDisplayListener(DisplayManager.DisplayListener)
numAlphaLevels
Gets the number of alpha transparency levels supported by this implementation
	0:	android.view.Display public int getHeight () This method was deprecated in API level 13. Use getSize(Point) instead.
	1:	android.view.Display public int getWidth () This method was deprecated in API level 13. Use getSize(Point) instead.
	2:	android.view.Display public void getRectSize (Rect outSize) Gets the size of the display as a rectangle, in pixels. Parameters outSize A Rect object to receive the size information. See Also getSize(Point)
	3:	android.view.Display public int getOrientation () This method was deprecated in API level 8. use getRotation() Returns orientation of this display.
	4:	android.view.Display public int getPixelFormat () This method was deprecated in API level 17. This method is no longer supported. The result is always RGBA_8888. Gets the pixel format of the display. Returns One of the constants defined in PixelFormat.
	5:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	6:	android.view.Display public void getCurrentSizeRange (Point outSmallestSize, Point outLargestSize) Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size. This is basically the sizes you will see as the orientation changes, taking into account whatever screen decoration there is in each rotation. For example, the status bar is always at the top of the screen, so it will reduce the height both in landscape and portrait, and the smallest height returned here will be the smaller of the two. This is intended for applications to get an idea of the range of sizes they will encounter while going through device rotations, to provide a stable UI through rotation. The sizes here take into account all standard system decorations that reduce the size actually available to the application: the status bar, navigation bar, system bar, etc. It does not take into account more transient elements like an IME soft keyboard. Parameters outSmallestSize Filled in with the smallest width and height that the application will encounter, in pixels (not dp units). The x (width) dimension here directly corresponds to Configuration.smallestScreenWidthDp, except the value here is in raw screen pixels rather than dp units. Your application may of course still get smaller space yet if, for example, a soft keyboard is being displayed. outLargestSize Filled in with the largest width and height that the application will encounter, in pixels (not dp units). Your application may of course still get larger space than this if, for example, screen decorations like the status bar are being hidden.
	7:	android.view.Display public void getRealSize (Point outSize) Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outSize Set to the real size of the display.
	8:	android.hardware.display.DisplayManager.DisplayListener public abstract void onDisplayAdded (int displayId) Called whenever a logical display has been added to the system. Use getDisplay(int) to get more information about the display. Parameters displayId The id of the logical display that was added.
	9:	android.app.Presentation public void onDisplayRemoved () Called by the system when the Display to which the presentation is attached has been removed. The system automatically calls cancel() to dismiss the presentation after sending this event. See Also getDisplay()
getCurrent
Gets the current Displayable object for this MIDlet
	0:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	1:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
	2:	android.app.Presentation public Presentation (Context outerContext, Display display, int theme) Creates a new presentation that is attached to the specified display using the optionally specified theme. Parameters outerContext The context of the application that is showing the presentation. The presentation will create its own context (see getContext()) based on this context and information about the associated display. display The display to which the presentation should be attached. theme A style resource describing the theme to use for the window. See Style and Theme Resources for more information about defining and using styles. This theme is applied on top of the current theme in outerContext. If 0, the default presentation theme will be used.
	3:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	4:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	5:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	6:	android.view.Display public void getRectSize (Rect outSize) Gets the size of the display as a rectangle, in pixels. Parameters outSize A Rect object to receive the size information. See Also getSize(Point)
	7:	android.app.Presentation public Presentation (Context outerContext, Display display) Creates a new presentation that is attached to the specified display using the default theme. Parameters outerContext The context of the application that is showing the presentation. The presentation will create its own context (see getContext()) based on this context and information about the associated display. display The display to which the presentation should be attached.
	8:	android.hardware.display.DisplayManager public Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	9:	android.support.v4.hardware.display.DisplayManagerCompat public abstract Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
setCurrent
Requests that a different Displayable object be made visible on the display
	0:	android.hardware.display.DisplayManager public Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	1:	android.support.v4.hardware.display.DisplayManagerCompat public abstract Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	2:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	3:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	4:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	5:	android.app.Presentation public Resources getResources () Gets the Resources that should be used to inflate the layout of this presentation. This resources object has been configured according to the metrics of the display that the presentation appears on. Returns The presentation resources object.
	6:	android.app.Presentation public Display getDisplay () Gets the Display that this presentation appears on. Returns The display.
	7:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
	8:	android.view.Display public void getRectSize (Rect outSize) Gets the size of the display as a rectangle, in pixels. Parameters outSize A Rect object to receive the size information. See Also getSize(Point)
	9:	android.view.Display public int getDisplayId () Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
setCurrent
Requests that this Alert be made current, and that nextDisplayable be made current after the Alert is dismissed
	0:	android.app.Presentation public void onDisplayRemoved () Called by the system when the Display to which the presentation is attached has been removed. The system automatically calls cancel() to dismiss the presentation after sending this event. See Also getDisplay()
	1:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	2:	android.view.Display public void getRealSize (Point outSize) Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outSize Set to the real size of the display.
	3:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
	4:	android.app.Presentation public Presentation (Context outerContext, Display display, int theme) Creates a new presentation that is attached to the specified display using the optionally specified theme. Parameters outerContext The context of the application that is showing the presentation. The presentation will create its own context (see getContext()) based on this context and information about the associated display. display The display to which the presentation should be attached. theme A style resource describing the theme to use for the window. See Style and Theme Resources for more information about defining and using styles. This theme is applied on top of the current theme in outerContext. If 0, the default presentation theme will be used.
	5:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	6:	android.app.Presentation public void onDisplayChanged () Called by the system when the properties of the Display to which the presentation is attached have changed. If the display metrics have changed (for example, if the display has been resized or rotated), then the system automatically calls cancel() to dismiss the presentation. See Also getDisplay()
	7:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	8:	android.view.Display public void getCurrentSizeRange (Point outSmallestSize, Point outLargestSize) Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size. This is basically the sizes you will see as the orientation changes, taking into account whatever screen decoration there is in each rotation. For example, the status bar is always at the top of the screen, so it will reduce the height both in landscape and portrait, and the smallest height returned here will be the smaller of the two. This is intended for applications to get an idea of the range of sizes they will encounter while going through device rotations, to provide a stable UI through rotation. The sizes here take into account all standard system decorations that reduce the size actually available to the application: the status bar, navigation bar, system bar, etc. It does not take into account more transient elements like an IME soft keyboard. Parameters outSmallestSize Filled in with the smallest width and height that the application will encounter, in pixels (not dp units). The x (width) dimension here directly corresponds to Configuration.smallestScreenWidthDp, except the value here is in raw screen pixels rather than dp units. Your application may of course still get smaller space yet if, for example, a soft keyboard is being displayed. outLargestSize Filled in with the largest width and height that the application will encounter, in pixels (not dp units). Your application may of course still get larger space than this if, for example, screen decorations like the status bar are being hidden.
	9:	android.content.pm.ApplicationInfo.DisplayNameComparator public ApplicationInfo.DisplayNameComparator (PackageManager pm) 
setCurrentItem
Requests that the Displayable that contains this Item be made current, scrolls the Displayable so that this Item is visible, and possibly assigns the focus to this Item
	0:	android.view.Display public void getRealSize (Point outSize) Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outSize Set to the real size of the display.
	1:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	2:	android.view.Display public void getRectSize (Rect outSize) Gets the size of the display as a rectangle, in pixels. Parameters outSize A Rect object to receive the size information. See Also getSize(Point)
	3:	android.app.Presentation public Presentation (Context outerContext, Display display, int theme) Creates a new presentation that is attached to the specified display using the optionally specified theme. Parameters outerContext The context of the application that is showing the presentation. The presentation will create its own context (see getContext()) based on this context and information about the associated display. display The display to which the presentation should be attached. theme A style resource describing the theme to use for the window. See Style and Theme Resources for more information about defining and using styles. This theme is applied on top of the current theme in outerContext. If 0, the default presentation theme will be used.
	4:	android.app.Presentation public Presentation (Context outerContext, Display display) Creates a new presentation that is attached to the specified display using the default theme. Parameters outerContext The context of the application that is showing the presentation. The presentation will create its own context (see getContext()) based on this context and information about the associated display. display The display to which the presentation should be attached.
	5:	android.hardware.display.DisplayManager public Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	6:	android.support.v4.hardware.display.DisplayManagerCompat public abstract Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	7:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	8:	android.support.v4.hardware.display.DisplayManagerCompat public abstract Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	9:	android.app.Presentation public Display getDisplay () Gets the Display that this presentation appears on. Returns The display.
callSerially
Causes the Runnable object r to have its run() method called later, serialized with the event stream, soon after completion of the repaint cycle
	0:	android.app.Presentation public void onDisplayRemoved () Called by the system when the Display to which the presentation is attached has been removed. The system automatically calls cancel() to dismiss the presentation after sending this event. See Also getDisplay()
	1:	android.util.DisplayMetrics public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	2:	android.view.Display public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	3:	android.util.DisplayMetrics public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	4:	android.util.DisplayMetrics public boolean equals (Object o) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters o the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	5:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
	6:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	7:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	8:	android.view.Display public void getRectSize (Rect outSize) Gets the size of the display as a rectangle, in pixels. Parameters outSize A Rect object to receive the size information. See Also getSize(Point)
	9:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
flashBacklight
Requests a flashing effect for the device's backlight
	0:	android.view.Display public int getPixelFormat () This method was deprecated in API level 17. This method is no longer supported. The result is always RGBA_8888. Gets the pixel format of the display. Returns One of the constants defined in PixelFormat.
	1:	android.app.Presentation public void onDisplayRemoved () Called by the system when the Display to which the presentation is attached has been removed. The system automatically calls cancel() to dismiss the presentation after sending this event. See Also getDisplay()
	2:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	3:	android.content.pm.ApplicationInfo.DisplayNameComparator public ApplicationInfo.DisplayNameComparator (PackageManager pm) 
	4:	android.content.pm.ApplicationInfo.DisplayNameComparator public final int compare (ApplicationInfo aa, ApplicationInfo ab) 
	5:	android.view.Display public void getCurrentSizeRange (Point outSmallestSize, Point outLargestSize) Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size. This is basically the sizes you will see as the orientation changes, taking into account whatever screen decoration there is in each rotation. For example, the status bar is always at the top of the screen, so it will reduce the height both in landscape and portrait, and the smallest height returned here will be the smaller of the two. This is intended for applications to get an idea of the range of sizes they will encounter while going through device rotations, to provide a stable UI through rotation. The sizes here take into account all standard system decorations that reduce the size actually available to the application: the status bar, navigation bar, system bar, etc. It does not take into account more transient elements like an IME soft keyboard. Parameters outSmallestSize Filled in with the smallest width and height that the application will encounter, in pixels (not dp units). The x (width) dimension here directly corresponds to Configuration.smallestScreenWidthDp, except the value here is in raw screen pixels rather than dp units. Your application may of course still get smaller space yet if, for example, a soft keyboard is being displayed. outLargestSize Filled in with the largest width and height that the application will encounter, in pixels (not dp units). Your application may of course still get larger space than this if, for example, screen decorations like the status bar are being hidden.
	6:	android.view.Display public int getDisplayId () Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
	7:	android.view.Display public int getFlags () Returns a combination of flags that describe the capabilities of the display. Returns The display flags. See Also FLAG_SUPPORTS_PROTECTED_BUFFERS FLAG_SECURE FLAG_PRIVATE
	8:	android.view.Display public int getHeight () This method was deprecated in API level 13. Use getSize(Point) instead.
	9:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
vibrate
Requests operation of the device's vibrator
	0:	android.content.pm.ApplicationInfo.DisplayNameComparator public ApplicationInfo.DisplayNameComparator (PackageManager pm) 
	1:	android.content.pm.ApplicationInfo.DisplayNameComparator public final int compare (ApplicationInfo aa, ApplicationInfo ab) 
	2:	android.view.Display public void getCurrentSizeRange (Point outSmallestSize, Point outLargestSize) Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size. This is basically the sizes you will see as the orientation changes, taking into account whatever screen decoration there is in each rotation. For example, the status bar is always at the top of the screen, so it will reduce the height both in landscape and portrait, and the smallest height returned here will be the smaller of the two. This is intended for applications to get an idea of the range of sizes they will encounter while going through device rotations, to provide a stable UI through rotation. The sizes here take into account all standard system decorations that reduce the size actually available to the application: the status bar, navigation bar, system bar, etc. It does not take into account more transient elements like an IME soft keyboard. Parameters outSmallestSize Filled in with the smallest width and height that the application will encounter, in pixels (not dp units). The x (width) dimension here directly corresponds to Configuration.smallestScreenWidthDp, except the value here is in raw screen pixels rather than dp units. Your application may of course still get smaller space yet if, for example, a soft keyboard is being displayed. outLargestSize Filled in with the largest width and height that the application will encounter, in pixels (not dp units). Your application may of course still get larger space than this if, for example, screen decorations like the status bar are being hidden.
	3:	android.view.Display public int getDisplayId () Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
	4:	android.view.Display public int getFlags () Returns a combination of flags that describe the capabilities of the display. Returns The display flags. See Also FLAG_SUPPORTS_PROTECTED_BUFFERS FLAG_SECURE FLAG_PRIVATE
	5:	android.view.Display public int getHeight () This method was deprecated in API level 13. Use getSize(Point) instead.
	6:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
	7:	android.view.Display public String getName () Gets the name of the display. Note that some displays may be renamed by the user. Returns The display's name.
	8:	android.view.Display public int getOrientation () This method was deprecated in API level 8. use getRotation() Returns orientation of this display.
	9:	android.view.Display public int getPixelFormat () This method was deprecated in API level 17. This method is no longer supported. The result is always RGBA_8888. Gets the pixel format of the display. Returns One of the constants defined in PixelFormat.
getBestImageWidth
Returns the best image width for a given image type
	0:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	1:	android.support.v4.hardware.display.DisplayManagerCompat public abstract Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	2:	android.view.Display public void getCurrentSizeRange (Point outSmallestSize, Point outLargestSize) Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size. This is basically the sizes you will see as the orientation changes, taking into account whatever screen decoration there is in each rotation. For example, the status bar is always at the top of the screen, so it will reduce the height both in landscape and portrait, and the smallest height returned here will be the smaller of the two. This is intended for applications to get an idea of the range of sizes they will encounter while going through device rotations, to provide a stable UI through rotation. The sizes here take into account all standard system decorations that reduce the size actually available to the application: the status bar, navigation bar, system bar, etc. It does not take into account more transient elements like an IME soft keyboard. Parameters outSmallestSize Filled in with the smallest width and height that the application will encounter, in pixels (not dp units). The x (width) dimension here directly corresponds to Configuration.smallestScreenWidthDp, except the value here is in raw screen pixels rather than dp units. Your application may of course still get smaller space yet if, for example, a soft keyboard is being displayed. outLargestSize Filled in with the largest width and height that the application will encounter, in pixels (not dp units). Your application may of course still get larger space than this if, for example, screen decorations like the status bar are being hidden.
	3:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	4:	android.util.DisplayMetrics public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	5:	android.util.DisplayMetrics public boolean equals (Object o) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters o the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	6:	android.hardware.display.DisplayManager public Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	7:	android.support.v4.hardware.display.DisplayManagerCompat public abstract Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	8:	android.view.Display public int getRotation () Returns the rotation of the screen from its "natural" orientation. The returned value may be Surface.ROTATION_0 (no rotation), Surface.ROTATION_90, Surface.ROTATION_180, or Surface.ROTATION_270. For example, if a device has a naturally tall screen, and the user has turned it on its side to go into a landscape orientation, the value returned here may be either Surface.ROTATION_90 or Surface.ROTATION_270 depending on the direction it was turned. The angle is the rotation of the drawn graphics on the screen, which is the opposite direction of the physical rotation of the device. For example, if the device is rotated 90 degrees counter-clockwise, to compensate rendering will be rotated by 90 degrees clockwise and thus the returned value here will be Surface.ROTATION_90.
	9:	android.support.v4.hardware.display.DisplayManagerCompat public static DisplayManagerCompat getInstance (Context context) Gets an instance of the display manager given the context.
getBestImageHeight
Returns the best image height for a given image type
	0:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	1:	android.support.v4.hardware.display.DisplayManagerCompat public abstract Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	2:	android.view.Display public void getCurrentSizeRange (Point outSmallestSize, Point outLargestSize) Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size. This is basically the sizes you will see as the orientation changes, taking into account whatever screen decoration there is in each rotation. For example, the status bar is always at the top of the screen, so it will reduce the height both in landscape and portrait, and the smallest height returned here will be the smaller of the two. This is intended for applications to get an idea of the range of sizes they will encounter while going through device rotations, to provide a stable UI through rotation. The sizes here take into account all standard system decorations that reduce the size actually available to the application: the status bar, navigation bar, system bar, etc. It does not take into account more transient elements like an IME soft keyboard. Parameters outSmallestSize Filled in with the smallest width and height that the application will encounter, in pixels (not dp units). The x (width) dimension here directly corresponds to Configuration.smallestScreenWidthDp, except the value here is in raw screen pixels rather than dp units. Your application may of course still get smaller space yet if, for example, a soft keyboard is being displayed. outLargestSize Filled in with the largest width and height that the application will encounter, in pixels (not dp units). Your application may of course still get larger space than this if, for example, screen decorations like the status bar are being hidden.
	3:	android.util.DisplayMetrics public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	4:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	5:	android.app.Presentation public Presentation (Context outerContext, Display display, int theme) Creates a new presentation that is attached to the specified display using the optionally specified theme. Parameters outerContext The context of the application that is showing the presentation. The presentation will create its own context (see getContext()) based on this context and information about the associated display. display The display to which the presentation should be attached. theme A style resource describing the theme to use for the window. See Style and Theme Resources for more information about defining and using styles. This theme is applied on top of the current theme in outerContext. If 0, the default presentation theme will be used.
	6:	android.util.DisplayMetrics public boolean equals (Object o) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters o the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	7:	android.hardware.display.DisplayManager public Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	8:	android.support.v4.hardware.display.DisplayManagerCompat public abstract Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	9:	android.view.Display public int getRotation () Returns the rotation of the screen from its "natural" orientation. The returned value may be Surface.ROTATION_0 (no rotation), Surface.ROTATION_90, Surface.ROTATION_180, or Surface.ROTATION_270. For example, if a device has a naturally tall screen, and the user has turned it on its side to go into a landscape orientation, the value returned here may be either Surface.ROTATION_90 or Surface.ROTATION_270 depending on the direction it was turned. The angle is the rotation of the drawn graphics on the screen, which is the opposite direction of the physical rotation of the device. For example, if the device is rotated 90 degrees counter-clockwise, to compensate rendering will be rotated by 90 degrees clockwise and thus the returned value here will be Surface.ROTATION_90.
getTitle
Gets the title of the Displayable
	0:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	1:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	2:	android.view.Display public int getFlags () Returns a combination of flags that describe the capabilities of the display. Returns The display flags. See Also FLAG_SUPPORTS_PROTECTED_BUFFERS FLAG_SECURE FLAG_PRIVATE
	3:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	4:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	5:	android.view.Display public void getRectSize (Rect outSize) Gets the size of the display as a rectangle, in pixels. Parameters outSize A Rect object to receive the size information. See Also getSize(Point)
	6:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
	7:	android.view.Display public int getDisplayId () Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
	8:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	9:	android.hardware.display.DisplayManager public void registerDisplayListener (DisplayManager.DisplayListener listener, Handler handler) Registers an display listener to receive notifications about when displays are added, removed or changed. Parameters listener The listener to register. handler The handler on which the listener should be invoked, or null if the listener should be invoked on the calling thread's looper. See Also unregisterDisplayListener(DisplayManager.DisplayListener)
setTitle
Sets the title of the Displayable
	0:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	1:	android.hardware.display.DisplayManager public Display[] getDisplays () Gets all currently valid logical displays. Returns An array containing all displays.
	2:	android.view.Display public void getRealSize (Point outSize) Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outSize Set to the real size of the display.
	3:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	4:	android.view.Display public int getDisplayId () Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
	5:	android.hardware.display.DisplayManager public Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	6:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	7:	android.view.Display public float getRefreshRate () Gets the refresh rate of this display in frames per second.
	8:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	9:	android.view.Display public int getFlags () Returns a combination of flags that describe the capabilities of the display. Returns The display flags. See Also FLAG_SUPPORTS_PROTECTED_BUFFERS FLAG_SECURE FLAG_PRIVATE
getTicker
Gets the ticker used by this Displayable
	0:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	1:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	2:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	3:	android.view.Display public int getFlags () Returns a combination of flags that describe the capabilities of the display. Returns The display flags. See Also FLAG_SUPPORTS_PROTECTED_BUFFERS FLAG_SECURE FLAG_PRIVATE
	4:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	5:	android.view.Display public void getRectSize (Rect outSize) Gets the size of the display as a rectangle, in pixels. Parameters outSize A Rect object to receive the size information. See Also getSize(Point)
	6:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
	7:	android.view.Display public int getDisplayId () Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
	8:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	9:	android.hardware.display.DisplayManager public void registerDisplayListener (DisplayManager.DisplayListener listener, Handler handler) Registers an display listener to receive notifications about when displays are added, removed or changed. Parameters listener The listener to register. handler The handler on which the listener should be invoked, or null if the listener should be invoked on the calling thread's looper. See Also unregisterDisplayListener(DisplayManager.DisplayListener)
setTicker
Sets a ticker for use with this Displayable, replacing any previous ticker
	0:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	1:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	2:	android.hardware.display.DisplayManager public Display[] getDisplays () Gets all currently valid logical displays. Returns An array containing all displays.
	3:	android.view.Display public void getRealSize (Point outSize) Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outSize Set to the real size of the display.
	4:	android.view.Display public int getDisplayId () Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
	5:	android.hardware.display.DisplayManager public Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	6:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	7:	android.view.Display public float getRefreshRate () Gets the refresh rate of this display in frames per second.
	8:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	9:	android.view.Display public int getFlags () Returns a combination of flags that describe the capabilities of the display. Returns The display flags. See Also FLAG_SUPPORTS_PROTECTED_BUFFERS FLAG_SECURE FLAG_PRIVATE
isShown
Checks if the Displayable is actually visible on the display
	0:	android.view.Display public void getRealSize (Point outSize) Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outSize Set to the real size of the display.
	1:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	2:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	3:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
	4:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	5:	android.view.Display public int getFlags () Returns a combination of flags that describe the capabilities of the display. Returns The display flags. See Also FLAG_SUPPORTS_PROTECTED_BUFFERS FLAG_SECURE FLAG_PRIVATE
	6:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	7:	android.view.Display public void getRectSize (Rect outSize) Gets the size of the display as a rectangle, in pixels. Parameters outSize A Rect object to receive the size information. See Also getSize(Point)
	8:	android.view.Display public int getDisplayId () Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
	9:	android.hardware.display.DisplayManager public void registerDisplayListener (DisplayManager.DisplayListener listener, Handler handler) Registers an display listener to receive notifications about when displays are added, removed or changed. Parameters listener The listener to register. handler The handler on which the listener should be invoked, or null if the listener should be invoked on the calling thread's looper. See Also unregisterDisplayListener(DisplayManager.DisplayListener)
addCommand
Adds a command to the Displayable
	0:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	1:	android.view.Display public int getDisplayId () Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
	2:	android.hardware.display.DisplayManager public Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	3:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	4:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	5:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	6:	android.view.Display public float getRefreshRate () Gets the refresh rate of this display in frames per second.
	7:	android.hardware.display.DisplayManager public Display[] getDisplays () Gets all currently valid logical displays. Returns An array containing all displays.
	8:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	9:	android.view.Display public void getRealSize (Point outSize) Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outSize Set to the real size of the display.
removeCommand
Removes a command from the Displayable
	0:	android.view.Display public int getDisplayId () Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
	1:	android.view.Display public int getOrientation () This method was deprecated in API level 8. use getRotation() Returns orientation of this display.
	2:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	3:	android.hardware.display.DisplayManager public Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	4:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	5:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	6:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	7:	android.view.Display public float getRefreshRate () Gets the refresh rate of this display in frames per second.
	8:	android.hardware.display.DisplayManager public Display[] getDisplays () Gets all currently valid logical displays. Returns An array containing all displays.
	9:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
setCommandListener
Sets a listener for Commands to this Displayable, replacing any previous CommandListener
	0:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	1:	android.hardware.display.DisplayManager public Display[] getDisplays () Gets all currently valid logical displays. Returns An array containing all displays.
	2:	android.view.Display public void getRealSize (Point outSize) Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outSize Set to the real size of the display.
	3:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	4:	android.view.Display public int getDisplayId () Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
	5:	android.hardware.display.DisplayManager public Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	6:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	7:	android.view.Display public float getRefreshRate () Gets the refresh rate of this display in frames per second.
	8:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	9:	android.view.Display public int getFlags () Returns a combination of flags that describe the capabilities of the display. Returns The display flags. See Also FLAG_SUPPORTS_PROTECTED_BUFFERS FLAG_SECURE FLAG_PRIVATE
getWidth
Gets the width in pixels of the displayable area available to the application
	0:	android.view.Display public int getWidth () This method was deprecated in API level 13. Use getSize(Point) instead.
	1:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	2:	android.view.Display public int getPixelFormat () This method was deprecated in API level 17. This method is no longer supported. The result is always RGBA_8888. Gets the pixel format of the display. Returns One of the constants defined in PixelFormat.
	3:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	4:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	5:	android.view.Display public void getCurrentSizeRange (Point outSmallestSize, Point outLargestSize) Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size. This is basically the sizes you will see as the orientation changes, taking into account whatever screen decoration there is in each rotation. For example, the status bar is always at the top of the screen, so it will reduce the height both in landscape and portrait, and the smallest height returned here will be the smaller of the two. This is intended for applications to get an idea of the range of sizes they will encounter while going through device rotations, to provide a stable UI through rotation. The sizes here take into account all standard system decorations that reduce the size actually available to the application: the status bar, navigation bar, system bar, etc. It does not take into account more transient elements like an IME soft keyboard. Parameters outSmallestSize Filled in with the smallest width and height that the application will encounter, in pixels (not dp units). The x (width) dimension here directly corresponds to Configuration.smallestScreenWidthDp, except the value here is in raw screen pixels rather than dp units. Your application may of course still get smaller space yet if, for example, a soft keyboard is being displayed. outLargestSize Filled in with the largest width and height that the application will encounter, in pixels (not dp units). Your application may of course still get larger space than this if, for example, screen decorations like the status bar are being hidden.
	6:	android.view.Display public int getFlags () Returns a combination of flags that describe the capabilities of the display. Returns The display flags. See Also FLAG_SUPPORTS_PROTECTED_BUFFERS FLAG_SECURE FLAG_PRIVATE
	7:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	8:	android.view.Display public void getRectSize (Rect outSize) Gets the size of the display as a rectangle, in pixels. Parameters outSize A Rect object to receive the size information. See Also getSize(Point)
	9:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
getHeight
Gets the height in pixels of the displayable area available to the application
	0:	android.view.Display public int getHeight () This method was deprecated in API level 13. Use getSize(Point) instead.
	1:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	2:	android.view.Display public int getPixelFormat () This method was deprecated in API level 17. This method is no longer supported. The result is always RGBA_8888. Gets the pixel format of the display. Returns One of the constants defined in PixelFormat.
	3:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	4:	android.view.Display public void getCurrentSizeRange (Point outSmallestSize, Point outLargestSize) Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size. This is basically the sizes you will see as the orientation changes, taking into account whatever screen decoration there is in each rotation. For example, the status bar is always at the top of the screen, so it will reduce the height both in landscape and portrait, and the smallest height returned here will be the smaller of the two. This is intended for applications to get an idea of the range of sizes they will encounter while going through device rotations, to provide a stable UI through rotation. The sizes here take into account all standard system decorations that reduce the size actually available to the application: the status bar, navigation bar, system bar, etc. It does not take into account more transient elements like an IME soft keyboard. Parameters outSmallestSize Filled in with the smallest width and height that the application will encounter, in pixels (not dp units). The x (width) dimension here directly corresponds to Configuration.smallestScreenWidthDp, except the value here is in raw screen pixels rather than dp units. Your application may of course still get smaller space yet if, for example, a soft keyboard is being displayed. outLargestSize Filled in with the largest width and height that the application will encounter, in pixels (not dp units). Your application may of course still get larger space than this if, for example, screen decorations like the status bar are being hidden.
	5:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	6:	android.view.Display public int getFlags () Returns a combination of flags that describe the capabilities of the display. Returns The display flags. See Also FLAG_SUPPORTS_PROTECTED_BUFFERS FLAG_SECURE FLAG_PRIVATE
	7:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	8:	android.view.Display public void getRectSize (Rect outSize) Gets the size of the display as a rectangle, in pixels. Parameters outSize A Rect object to receive the size information. See Also getSize(Point)
	9:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
sizeChanged
The implementation calls this method when the available area of the Displayable has been changed
	0:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	1:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	2:	android.view.Display public int getOrientation () This method was deprecated in API level 8. use getRotation() Returns orientation of this display.
	3:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	4:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	5:	android.view.Display public void getRealSize (Point outSize) Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outSize Set to the real size of the display.
	6:	android.view.Display public String getName () Gets the name of the display. Note that some displays may be renamed by the user. Returns The display's name.
	7:	android.view.Display public int getPixelFormat () This method was deprecated in API level 17. This method is no longer supported. The result is always RGBA_8888. Gets the pixel format of the display. Returns One of the constants defined in PixelFormat.
	8:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
	9:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
getFont
Gets the Font used by the high level user interface for the fontSpecifier passed in
	0:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	1:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	2:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	3:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
	4:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	5:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	6:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	7:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	8:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	9:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
getDefaultFont
Gets the default font of the system
	0:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	1:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	2:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	3:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	4:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
	5:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	6:	android.hardware.Camera.Face public Camera.Face () Create an empty face.
	7:	android.media.FaceDetector.Face public float pose (int euler) Returns the face's pose. That is, the rotations around either the X, Y or Z axis (the positions in 3-dimensional Euclidean space). Parameters euler the Euler axis to retrieve an angle from (EULER_X, EULER_Y or EULER_Z) Returns the Euler angle of the of the face, for the given axis
	8:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	9:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
getFont
Obtains an object representing a font having the specified face, style, and size
	0:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	1:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	2:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	3:	android.hardware.Camera.Face public Camera.Face () Create an empty face.
	4:	android.media.FaceDetector.Face public float confidence () Returns a confidence factor between 0 and 1. This indicates how certain what has been found is actually a face. A confidence factor above 0.3 is usually good enough.
	5:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	6:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	7:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	8:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	9:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
getStyle
Gets the style of the font
	0:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	1:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
	2:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	3:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	4:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	5:	android.hardware.Camera.Face public Camera.Face () Create an empty face.
	6:	android.media.FaceDetector.Face public float pose (int euler) Returns the face's pose. That is, the rotations around either the X, Y or Z axis (the positions in 3-dimensional Euclidean space). Parameters euler the Euler axis to retrieve an angle from (EULER_X, EULER_Y or EULER_Z) Returns the Euler angle of the of the face, for the given axis
	7:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	8:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	9:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
getSize
Gets the size of the font
	0:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	1:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
	2:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	3:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	4:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	5:	android.hardware.Camera.Face public Camera.Face () Create an empty face.
	6:	android.media.FaceDetector.Face public float pose (int euler) Returns the face's pose. That is, the rotations around either the X, Y or Z axis (the positions in 3-dimensional Euclidean space). Parameters euler the Euler axis to retrieve an angle from (EULER_X, EULER_Y or EULER_Z) Returns the Euler angle of the of the face, for the given axis
	7:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	8:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	9:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
getFace
Gets the face of the font
	0:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	1:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	2:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
	3:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	4:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	5:	android.hardware.Camera.Face public Camera.Face () Create an empty face.
	6:	android.media.FaceDetector.Face public float pose (int euler) Returns the face's pose. That is, the rotations around either the X, Y or Z axis (the positions in 3-dimensional Euclidean space). Parameters euler the Euler axis to retrieve an angle from (EULER_X, EULER_Y or EULER_Z) Returns the Euler angle of the of the face, for the given axis
	7:	android.media.FaceDetector.Face public float confidence () Returns a confidence factor between 0 and 1. This indicates how certain what has been found is actually a face. A confidence factor above 0.3 is usually good enough.
	8:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	9:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
isPlain
Returns true if the font is plain
	0:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	1:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	2:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
	3:	android.hardware.Camera.Face public Camera.Face () Create an empty face.
	4:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	5:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	6:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	7:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	8:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	9:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
isBold
Returns true if the font is bold
	0:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	1:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	2:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
	3:	android.hardware.Camera.Face public Camera.Face () Create an empty face.
	4:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	5:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	6:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	7:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	8:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	9:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
isItalic
Returns true if the font is italic
	0:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	1:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	2:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
	3:	android.hardware.Camera.Face public Camera.Face () Create an empty face.
	4:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	5:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	6:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	7:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	8:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	9:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
isUnderlined
Returns true if the font is underlined
	0:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	1:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	2:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
	3:	android.hardware.Camera.Face public Camera.Face () Create an empty face.
	4:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	5:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	6:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	7:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	8:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	9:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
getHeight
Gets the standard height of a line of text in this font
	0:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	1:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
	2:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	3:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	4:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	5:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	6:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	7:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	8:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	9:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
getBaselinePosition
Gets the distance in pixels from the top of the text to the text's baseline
	0:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	1:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
	2:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	3:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	4:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	5:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	6:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	7:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	8:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	9:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
charWidth
Gets the advance width of the specified character in this Font
	0:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	1:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
	2:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	3:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	4:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	5:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	6:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	7:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	8:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	9:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
charsWidth
Returns the advance width of the characters in ch, starting at the specified offset and for the specified number of characters (length)
	0:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	1:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
	2:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	3:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	4:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	5:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	6:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	7:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	8:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
	9:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
stringWidth
Gets the total advance width for showing the specified String in this Font
	0:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	1:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
	2:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	3:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	4:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	5:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	6:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	7:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	8:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	9:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
substringWidth
Gets the total advance width for showing the specified substring in this Font
	0:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	1:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
	2:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	3:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	4:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	5:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	6:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	7:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	8:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	9:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
GameCanvas
Creates a new instance of a GameCanvas
	0:	java.nio.channels.spi.AbstractSelectionKey protected AbstractSelectionKey () Constructs a new AbstractSelectionKey.
	1:	android.support.v4.view.AccessibilityDelegateCompat public AccessibilityDelegateCompat () Creates a new instance.
	2:	android.support.v4.view.accessibility.AccessibilityNodeProviderCompat public AccessibilityNodeProviderCompat () Creates a new instance.
	3:	android.accessibilityservice.AccessibilityServiceInfo public AccessibilityServiceInfo () Creates a new instance.
	4:	java.security.acl.AclNotFoundException public AclNotFoundException () Creates a new AclNotFoundException.
	5:	java.net.BindException public BindException () Constructs a new instance.
	6:	javax.security.cert.Certificate public Certificate () Creates a new Certificate.
	7:	java.security.cert.CertificateEncodingException public CertificateEncodingException () Creates a new CertificateEncodingException.
	8:	javax.security.cert.CertificateEncodingException public CertificateEncodingException () Creates a new CertificateEncodingException.
	9:	java.security.cert.CertificateException public CertificateException () Creates a new CertificateException.
getGraphics
Obtains the Graphics object for rendering a GameCanvas
	0:	org.xml.sax.InputSource public String getSystemId () Get the system identifier for this input source. The getEncoding method will return the character encoding of the object pointed to, or null if unknown. If the system ID is a URL, it will be fully resolved. Returns The system identifier, or null if none was supplied. See Also setSystemId(String) getEncoding()
	1:	android.graphics.Picture public int getHeight () Get the height of the picture as passed to beginRecording. This does not reflect (per se) the content of the picture.
	2:	android.graphics.Picture public int getWidth () Get the width of the picture as passed to beginRecording. This does not reflect (per se) the content of the picture.
	3:	android.app.ActionBar.Tab public abstract ActionBar.Tab setTag (Object obj) Give this Tab an arbitrary object to hold for later use. Parameters obj Object to store Returns The current instance for call chaining
	4:	android.support.v7.app.ActionBar.Tab public abstract ActionBar.Tab setTag (Object obj) Give this Tab an arbitrary object to hold for later use. Parameters obj Object to store Returns The current instance for call chaining
	5:	org.xml.sax.ContentHandler public abstract void setDocumentLocator (Locator locator) Receive an object for locating the origin of SAX document events. SAX parsers are strongly encouraged (though not absolutely required) to supply a locator: if it does so, it must supply the locator to the application by invoking this method before invoking any of the other methods in the ContentHandler interface. The locator allows the application to determine the end position of any document-related event, even if the parser is not reporting an error. Typically, the application will use this information for reporting its own errors (such as character content that does not match an application's business rules). The information returned by the locator is probably not sufficient for use with a search engine. Note that the locator will return correct information only during the invocation SAX event callbacks after startDocument returns and before endDocument is called. The application should not attempt to use it at any other time. Parameters locator an object that can return the location of any SAX document event See Also Locator
	6:	org.xml.sax.DocumentHandler public abstract void setDocumentLocator (Locator locator) Receive an object for locating the origin of SAX document events. SAX parsers are strongly encouraged (though not absolutely required) to supply a locator: if it does so, it must supply the locator to the application by invoking this method before invoking any of the other methods in the DocumentHandler interface. The locator allows the application to determine the end position of any document-related event, even if the parser is not reporting an error. Typically, the application will use this information for reporting its own errors (such as character content that does not match an application's business rules). The information returned by the locator is probably not sufficient for use with a search engine. Note that the locator will return correct information only during the invocation of the events in this interface. The application should not attempt to use it at any other time. Parameters locator An object that can return the location of any SAX document event. See Also Locator
	7:	org.xml.sax.ContentHandler public abstract void characters (char[] ch, int start, int length) Receive notification of character data. The Parser will call this method to report each chunk of character data. SAX parsers may return all contiguous character data in a single chunk, or they may split it into several chunks; however, all of the characters in any single event must come from the same external entity so that the Locator provides useful information. The application must not attempt to read from the array outside of the specified range. Individual characters may consist of more than one Java char value. There are two important cases where this happens, because characters can't be represented in just sixteen bits. In one case, characters are represented in a Surrogate Pair, using two special Unicode values. Such characters are in the so-called "Astral Planes", with a code point above U+FFFF. A second case involves composite characters, such as a base character combining with one or more accent characters. Your code should not assume that algorithms using char-at-a-time idioms will be working in character units; in some cases they will split characters. This is relevant wherever XML permits arbitrary characters, such as attribute values, processing instruction data, and comments as well as in data reported from this method. It's also generally relevant whenever Java code manipulates internationalized text; the issue isn't unique to XML. Note that some parsers will report whitespace in element content using the ignorableWhitespace method rather than this one (validating parsers must do so). Parameters ch the characters from the XML document start the start position in the array length the number of characters to read from the array Throws SAXException any SAX exception, possibly wrapping another exception See Also ignorableWhitespace(char[], int, int) Locator
	8:	org.xml.sax.InputSource public InputStream getByteStream () Get the byte stream for this input source. The getEncoding method will return the character encoding for this byte stream, or null if unknown. Returns The byte stream, or null if none was supplied. See Also getEncoding() setByteStream(InputStream)
	9:	org.xml.sax.InputSource public Reader getCharacterStream () Get the character stream for this input source. Returns The character stream, or null if none was supplied. See Also setCharacterStream(Reader)
getKeyStates
Gets the states of the physical game keys
	0:	android.app.LocalActivityManager public Bundle saveInstanceState () Retrieve the state of all activities known by the group. For activities that have previously run and are now stopped or finished, the last saved state is used. For the current running activity, its onSaveInstanceState(Bundle) is called to retrieve its current state. Returns a Bundle holding the newly created state of all known activities See Also dispatchCreate(Bundle)
	1:	android.app.Instrumentation public void start () Create and start a new thread in which to run instrumentation. This new thread will call to onStart() where you can implement the instrumentation.
	2:	android.media.audiofx.LoudnessEnhancer public float getTargetGain () Return the target gain. Returns the effect target gain expressed in mB. Throws IllegalStateException IllegalArgumentException UnsupportedOperationException IllegalStateException IllegalArgumentException
	3:	android.view.MotionEvent public final int getButtonState () Gets the state of all buttons that are pressed such as a mouse or stylus button. Returns The button state. See Also BUTTON_PRIMARY BUTTON_SECONDARY BUTTON_TERTIARY BUTTON_FORWARD BUTTON_BACK
	4:	android.app.LocalActivityManager public String getCurrentId () Retrieve the ID of the activity that is currently running. Returns the ID of the currently running (resumed) Activity, or null if there is not one See Also startActivity(String, Intent) getCurrentActivity()
	5:	org.apache.http.conn.routing.RouteInfo public abstract HttpHost getHopTarget (int hop) Obtains the target of a hop in this route. The target of the last hop is the target host, the target of previous hops is the respective proxy in the chain. For a route through exactly one proxy, target of hop 0 is the proxy and target of hop 1 is the target host. Parameters hop index of the hop for which to get the target, 0 for first Returns the target of the given hop Throws IllegalArgumentException if the argument is negative or not less than getHopCount()
	6:	org.apache.http.conn.routing.HttpRoute public final HttpHost getHopTarget (int hop) Obtains the target of a hop in this route. The target of the last hop is the target host, the target of previous hops is the respective proxy in the chain. For a route through exactly one proxy, target of hop 0 is the proxy and target of hop 1 is the target host. Parameters hop index of the hop for which to get the target, 0 for first Returns the target of the given hop
	7:	org.apache.http.conn.routing.RouteTracker public final HttpHost getHopTarget (int hop) Obtains the target of a hop in this route. The target of the last hop is the target host, the target of previous hops is the respective proxy in the chain. For a route through exactly one proxy, target of hop 0 is the proxy and target of hop 1 is the target host. Parameters hop index of the hop for which to get the target, 0 for first Returns the target of the given hop
	8:	java.io.PrintStream public PrintStream append (CharSequence charSequence, int start, int end) Appends a subsequence of CharSequence charSequence, or "null". Parameters charSequence the character sequence appended to the target stream. start the index of the first char in the character sequence appended to the target stream. end the index of the character following the last character of the subsequence appended to the target stream. Returns this stream. Throws IndexOutOfBoundsException if start > end, start < 0, end < 0 or either start or end are greater or equal than the length of charSequence.
	9:	java.io.PipedOutputStream public PipedOutputStream (PipedInputStream target) Constructs a new PipedOutputStream connected to the PipedInputStream target. Any data written to this stream can be read from the target stream. Parameters target the piped input stream to connect to. Throws IOException if this stream or target are already connected.
paint
Paints this GameCanvas
	0:	android.graphics.Paint public Paint (Paint paint) Create a new paint, initialized with the attributes in the specified paint parameter. Parameters paint Existing paint used to initialized the attributes of the new paint.
	1:	android.graphics.LayerRasterizer public void addLayer (Paint paint) 
	2:	android.graphics.Paint public Paint () Create a new paint with default settings.
	3:	android.graphics.Canvas public void drawPaint (Paint paint) Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint. Parameters paint The paint used to draw onto the canvas
	4:	java.security.KeyFactory public final Key translateKey (Key key) Translates the given key into a key from this key factory. Parameters key the key to translate. Returns the translated key. Throws InvalidKeyException if the specified key can not be translated by this key factory.
	5:	java.security.KeyFactorySpi protected abstract Key engineTranslateKey (Key key) Translates the given key into a key from this key factory. Parameters key the key to translate. Returns the translated key. Throws InvalidKeyException if the specified key can not be translated by this key factory.
	6:	android.graphics.Canvas public void drawLines (float[] pts, Paint paint) 
	7:	android.graphics.drawable.NinePatchDrawable public Paint getPaint () 
	8:	javax.crypto.KeyAgreement public final Key doPhase (Key key, boolean lastPhase) Does the next (or the last) phase of the key agreement, using the specified key. Parameters key the key received from the other party for this phase. lastPhase set to true if this is the last phase of this key agreement. Returns the intermediate key from this phase or null if there is no intermediate key for this phase. Throws InvalidKeyException if the specified key cannot be used in this key agreement or this phase, IllegalStateException if this instance has not been initialized.
	9:	javax.crypto.KeyAgreementSpi protected abstract Key engineDoPhase (Key key, boolean lastPhase) Does the next (or the last) phase of the key agreement, using the specified key. Parameters key the key received from the other party for this phase. lastPhase set to true if this is the last phase of this key agreement. Returns the intermediate key from this phase or null if there is no intermediate key for this phase. Throws InvalidKeyException if the specified key cannot be used in this key agreement or this phase, IllegalStateException if this instance has not been initialized.
flushGraphics
Flushes the specified region of the off-screen buffer to the display
	0:	java.util.zip.Deflater public synchronized int deflate (byte[] buf, int offset, int byteCount, int flush) Deflates data (previously passed to setInput) into a specific region within the supplied buffer, optionally flushing the input buffer. Parameters flush one of NO_FLUSH, SYNC_FLUSH or FULL_FLUSH. Returns the number of compressed bytes written to buf. If this equals byteCount, the number of bytes of input to be flushed may have exceeded the output buffer's capacity. In this case, finishing a flush will require the output buffer to be drained and additional calls to deflate(byte[]) to be made. Throws IllegalArgumentException if flush is invalid.
	1:	android.os.PowerManager public PowerManager.WakeLock newWakeLock (int levelAndFlags, String tag) Creates a new wake lock with the specified level and flags. The levelAndFlags parameter specifies a wake lock level and optional flags combined using the logical OR operator. The wake lock levels are: PARTIAL_WAKE_LOCK, FULL_WAKE_LOCK, SCREEN_DIM_WAKE_LOCK and SCREEN_BRIGHT_WAKE_LOCK. Exactly one wake lock level must be specified as part of the levelAndFlags parameter. The wake lock flags are: ACQUIRE_CAUSES_WAKEUP and ON_AFTER_RELEASE. Multiple flags can be combined as part of the levelAndFlags parameters. Call acquire() on the object to acquire the wake lock, and release() when you are done. PowerManager pm = (PowerManager)mContext.getSystemService( Context.POWER_SERVICE); PowerManager.WakeLock wl = pm.newWakeLock( PowerManager.SCREEN_DIM_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE, TAG); wl.acquire(); // ... do work... wl.release(); Although a wake lock can be created without special permissions, the WAKE_LOCK permission is required to actually acquire or release the wake lock that is returned. If using this to keep the screen on, you should strongly consider using FLAG_KEEP_SCREEN_ON instead. This window flag will be correctly managed by the platform as the user moves between applications and doesn't require a special permission. Parameters levelAndFlags Combination of wake lock level and flag values defining the requested behavior of the WakeLock. tag Your class name (or other tag) for debugging purposes. See Also acquire() release() PARTIAL_WAKE_LOCK FULL_WAKE_LOCK SCREEN_DIM_WAKE_LOCK SCREEN_BRIGHT_WAKE_LOCK ACQUIRE_CAUSES_WAKEUP ON_AFTER_RELEASE
	2:	java.nio.ByteBuffer public abstract ByteBuffer asReadOnlyBuffer () Returns a read-only buffer that shares its content with this buffer. The returned buffer is guaranteed to be a new instance, even if this buffer is read-only itself. The new buffer's position, limit, capacity and mark are the same as this buffer. The new buffer shares its content with this buffer, which means this buffer's change of content will be visible to the new buffer. The two buffer's position, limit and mark are independent. Returns a read-only version of this buffer.
	3:	java.nio.FloatBuffer public abstract FloatBuffer asReadOnlyBuffer () Returns a read-only buffer that shares its content with this buffer. The returned buffer is guaranteed to be a new instance, even if this buffer is read-only itself. The new buffer's position, limit, capacity and mark are the same as this buffer. The new buffer shares its content with this buffer, which means this buffer's change of content will be visible to the new buffer. The two buffer's position, limit and mark are independent. Returns a read-only version of this buffer.
	4:	android.inputmethodservice.KeyboardView public void invalidateAllKeys () Requests a redraw of the entire keyboard. Calling invalidate() is not sufficient because the keyboard renders the keys to an off-screen buffer and an invalidate() only draws the cached buffer. See Also invalidateKey(int)
	5:	java.nio.CharBuffer public abstract CharBuffer asReadOnlyBuffer () Returns a read-only buffer that shares its content with this buffer. The returned buffer is guaranteed to be a new instance, even if this buffer is read-only itself. The new buffer's position, limit, capacity and mark are the same as this buffer's. The new buffer shares its content with this buffer, which means this buffer's change of content will be visible to the new buffer. The two buffer's position, limit and mark are independent. Returns a read-only version of this buffer.
	6:	java.nio.DoubleBuffer public abstract DoubleBuffer asReadOnlyBuffer () Returns a read-only buffer that shares its content with this buffer. The returned buffer is guaranteed to be a new instance, even if this buffer is read-only itself. The new buffer's position, limit, capacity and mark are the same as this buffer's. The new buffer shares its content with this buffer, which means that this buffer's change of content will be visible to the new buffer. The two buffer's position, limit and mark are independent. Returns a read-only version of this buffer.
	7:	java.nio.IntBuffer public abstract IntBuffer asReadOnlyBuffer () Returns a read-only buffer that shares its content with this buffer. The returned buffer is guaranteed to be a new instance, even this buffer is read-only itself. The new buffer's position, limit, capacity and mark are the same as this buffer's. The new buffer shares its content with this buffer, which means this buffer's change of content will be visible to the new buffer. The two buffer's position, limit and mark are independent. Returns a read-only version of this buffer.
	8:	java.nio.LongBuffer public abstract LongBuffer asReadOnlyBuffer () Returns a read-only buffer that shares its content with this buffer. The returned buffer is guaranteed to be a new instance, even if this buffer is read-only itself. The new buffer's position, limit, capacity and mark are the same as this buffer's. The new buffer shares its content with this buffer, which means this buffer's change of content will be visible to the new buffer. The two buffer's position, limit and mark are independent. Returns a read-only version of this buffer.
	9:	java.io.PrintStream public void write (byte[] buffer, int offset, int length) Writes count bytes from buffer starting at offset to the target stream. If autoFlush is set, this stream gets flushed after writing the buffer. This stream's error flag is set to true if this stream is closed or an I/O error occurs. Parameters buffer the buffer to be written. offset the index of the first byte in buffer to write. length the number of bytes in buffer to write. Throws IndexOutOfBoundsException if offset < 0 or count < 0, or if offset + count is bigger than the length of buffer. See Also flush()
flushGraphics
Flushes the off-screen buffer to the display
	0:	java.nio.ByteBuffer public abstract ByteBuffer asReadOnlyBuffer () Returns a read-only buffer that shares its content with this buffer. The returned buffer is guaranteed to be a new instance, even if this buffer is read-only itself. The new buffer's position, limit, capacity and mark are the same as this buffer. The new buffer shares its content with this buffer, which means this buffer's change of content will be visible to the new buffer. The two buffer's position, limit and mark are independent. Returns a read-only version of this buffer.
	1:	java.nio.FloatBuffer public abstract FloatBuffer asReadOnlyBuffer () Returns a read-only buffer that shares its content with this buffer. The returned buffer is guaranteed to be a new instance, even if this buffer is read-only itself. The new buffer's position, limit, capacity and mark are the same as this buffer. The new buffer shares its content with this buffer, which means this buffer's change of content will be visible to the new buffer. The two buffer's position, limit and mark are independent. Returns a read-only version of this buffer.
	2:	android.inputmethodservice.KeyboardView public void invalidateAllKeys () Requests a redraw of the entire keyboard. Calling invalidate() is not sufficient because the keyboard renders the keys to an off-screen buffer and an invalidate() only draws the cached buffer. See Also invalidateKey(int)
	3:	java.nio.CharBuffer public abstract CharBuffer asReadOnlyBuffer () Returns a read-only buffer that shares its content with this buffer. The returned buffer is guaranteed to be a new instance, even if this buffer is read-only itself. The new buffer's position, limit, capacity and mark are the same as this buffer's. The new buffer shares its content with this buffer, which means this buffer's change of content will be visible to the new buffer. The two buffer's position, limit and mark are independent. Returns a read-only version of this buffer.
	4:	java.nio.DoubleBuffer public abstract DoubleBuffer asReadOnlyBuffer () Returns a read-only buffer that shares its content with this buffer. The returned buffer is guaranteed to be a new instance, even if this buffer is read-only itself. The new buffer's position, limit, capacity and mark are the same as this buffer's. The new buffer shares its content with this buffer, which means that this buffer's change of content will be visible to the new buffer. The two buffer's position, limit and mark are independent. Returns a read-only version of this buffer.
	5:	java.nio.IntBuffer public abstract IntBuffer asReadOnlyBuffer () Returns a read-only buffer that shares its content with this buffer. The returned buffer is guaranteed to be a new instance, even this buffer is read-only itself. The new buffer's position, limit, capacity and mark are the same as this buffer's. The new buffer shares its content with this buffer, which means this buffer's change of content will be visible to the new buffer. The two buffer's position, limit and mark are independent. Returns a read-only version of this buffer.
	6:	java.nio.LongBuffer public abstract LongBuffer asReadOnlyBuffer () Returns a read-only buffer that shares its content with this buffer. The returned buffer is guaranteed to be a new instance, even if this buffer is read-only itself. The new buffer's position, limit, capacity and mark are the same as this buffer's. The new buffer shares its content with this buffer, which means this buffer's change of content will be visible to the new buffer. The two buffer's position, limit and mark are independent. Returns a read-only version of this buffer.
	7:	java.io.PrintStream public void write (byte[] buffer, int offset, int length) Writes count bytes from buffer starting at offset to the target stream. If autoFlush is set, this stream gets flushed after writing the buffer. This stream's error flag is set to true if this stream is closed or an I/O error occurs. Parameters buffer the buffer to be written. offset the index of the first byte in buffer to write. length the number of bytes in buffer to write. Throws IndexOutOfBoundsException if offset < 0 or count < 0, or if offset + count is bigger than the length of buffer. See Also flush()
	8:	android.app.Dialog public void setContentView (int layoutResID) Set the screen content from a layout resource. The resource will be inflated, adding all top-level views to the screen. Parameters layoutResID Resource ID to be inflated.
	9:	javax.microedition.khronos.opengles.GL10 public abstract void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, Buffer data) 
drawString
(x,y)
(LEFT, HCENTER, RIGHT)
(TOP, BASELINE, BOTTOM)
OR
TOP | LEFT

Vertical centering of the text is not specified since it is not considered useful, it is hard to specify, and it is burdensome to implement
	0:	java.lang.Character public static int getNumericValue (int codePoint) Gets the numeric value of the specified Unicode code point. For example, the code point 'Ⅻ' stands for the Roman number XII, which has the numeric value 12. There are two points of divergence between this method and the Unicode specification. This method treats the letters a-z (in both upper and lower cases, and their full-width variants) as numbers from 10 to 35. The Unicode specification also supports the idea of code points with non-integer numeric values; this method does not (except to the extent of returning -2 for such code points). Parameters codePoint the code point Returns a non-negative numeric integer value if a numeric value for codePoint exists, -1 if there is no numeric value for codePoint, -2 if the numeric value can not be represented with an integer.
	1:	java.lang.Character public static boolean isBmpCodePoint (int codePoint) Returns true if the given code point is in the Basic Multilingual Plane (BMP). Such code points can be represented by a single char.
	2:	java.lang.Character public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	3:	java.lang.Character public static int getNumericValue (char c) Returns the numeric value of the specified Unicode character. See getNumericValue(int). Parameters c the character Returns a non-negative numeric integer value if a numeric value for c exists, -1 if there is no numeric value for c, -2 if the numeric value can not be represented as an integer.
	4:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	5:	java.lang.Character public Character (char value) Constructs a new Character with the specified primitive char value. Parameters value the primitive char value to store in the new instance.
	6:	java.lang.Character public static int charCount (int codePoint) Calculates the number of char values required to represent the specified Unicode code point. This method checks if the codePoint is greater than or equal to 0x10000, in which case 2 is returned, otherwise 1. To test if the code point is valid, use the isValidCodePoint(int) method. Parameters codePoint the code point for which to calculate the number of required chars. Returns 2 if codePoint >= 0x10000; 1 otherwise. See Also isValidCodePoint(int) isSupplementaryCodePoint(int)
	7:	java.lang.Character public char charValue () Gets the primitive value of this character. Returns this object's primitive value.
	8:	java.lang.Character public static int codePointAt (char[] seq, int index) Returns the code point at index in the specified array of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the array and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	9:	java.lang.Character public static int codePointAt (CharSequence seq, int index) Returns the code point at index in the specified sequence of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the sequence and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source sequence of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
drawString

translate
Translates the origin of the graphics context to the point (x, y) in the current coordinate system
	0:	java.lang.Character public static boolean isSpaceChar (int codePoint) Returns true if the given code point is a Unicode space character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are considered whitespace. Note also that line separators are not considered whitespace; see isWhitespace(char) for an alternative.
	1:	java.lang.Character public static boolean isWhitespace (int codePoint) Returns true if the given code point is a Unicode whitespace character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are not considered whitespace. Note also that line separators are considered whitespace; see isSpaceChar(char) for an alternative.
	2:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	3:	java.lang.Character public static boolean isTitleCase (int codePoint) Indicates whether the specified code point is a titlecase character. Parameters codePoint the code point to check. Returns true if codePoint is a titlecase character, false otherwise.
	4:	java.lang.Character public static int codePointAt (char[] seq, int index) Returns the code point at index in the specified array of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the array and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	5:	java.lang.Character public static int codePointAt (CharSequence seq, int index) Returns the code point at index in the specified sequence of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the sequence and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source sequence of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	6:	java.lang.Character public static int codePointBefore (CharSequence seq, int index) Returns the code point that precedes index in the specified sequence of character units. If the unit at index - 1 is a low-surrogate unit, index - 2 is not negative and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source sequence of char units. index the position in seq following the code point that should be returned. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is less than 1 or greater than the length of seq.
	7:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	8:	java.lang.Character public static int codePointBefore (char[] seq, int index) Returns the code point that precedes index in the specified array of character units. If the unit at index - 1 is a low-surrogate unit, index - 2 is not negative and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is less than 1 or greater than the length of seq.
	9:	java.lang.Character public static boolean isIdeographic (int codePoint) Returns true if the given code point is a CJKV ideographic character.
getTranslateX
Gets the X coordinate of the translated origin of this graphics context
	0:	java.lang.Character public static boolean isSpaceChar (int codePoint) Returns true if the given code point is a Unicode space character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are considered whitespace. Note also that line separators are not considered whitespace; see isWhitespace(char) for an alternative.
	1:	java.lang.Character public static boolean isWhitespace (int codePoint) Returns true if the given code point is a Unicode whitespace character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are not considered whitespace. Note also that line separators are considered whitespace; see isSpaceChar(char) for an alternative.
	2:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	3:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	4:	java.lang.Character public static char toLowerCase (char c) Returns the lower case equivalent for the specified character if the character is an upper case letter. Otherwise, the specified character is returned unchanged. Parameters c the character Returns if c is an upper case character then its lower case counterpart, otherwise just c.
	5:	java.lang.Character public int compareTo (Character c) Compares this object to the specified character object to determine their relative order. Parameters c the character object to compare this object to. Returns 0 if the value of this character and the value of c are equal; a positive value if the value of this character is greater than the value of c; a negative value if the value of this character is less than the value of c. See Also Comparable
	6:	java.lang.Character public static char toUpperCase (char c) Returns the upper case equivalent for the specified character if the character is a lower case letter. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns if c is a lower case character then its upper case counterpart, otherwise just c.
	7:	java.lang.Character public static char reverseBytes (char c) Reverses the order of the first and second byte in the specified character. Parameters c the character to reverse. Returns the character with reordered bytes.
	8:	java.lang.Character public static Character valueOf (char c) Returns a Character instance for the char value passed. If it is not necessary to get a new Character instance, it is recommended to use this method instead of the constructor, since it maintains a cache of instances which may result in better performance. Parameters c the char value for which to get a Character instance. Returns the Character instance for c.
	9:	java.lang.Character public static boolean isJavaIdentifierStart (char c) Indicates whether the specified character is a valid first character for a Java identifier. Parameters c the character to check. Returns true if c is a valid first character of a Java identifier; false otherwise.
getTranslateY
Gets the Y coordinate of the translated origin of this graphics context
	0:	java.lang.Character public static boolean isSpaceChar (int codePoint) Returns true if the given code point is a Unicode space character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are considered whitespace. Note also that line separators are not considered whitespace; see isWhitespace(char) for an alternative.
	1:	java.lang.Character public static boolean isWhitespace (int codePoint) Returns true if the given code point is a Unicode whitespace character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are not considered whitespace. Note also that line separators are considered whitespace; see isSpaceChar(char) for an alternative.
	2:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	3:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	4:	java.lang.Character public static char toLowerCase (char c) Returns the lower case equivalent for the specified character if the character is an upper case letter. Otherwise, the specified character is returned unchanged. Parameters c the character Returns if c is an upper case character then its lower case counterpart, otherwise just c.
	5:	java.lang.Character public int compareTo (Character c) Compares this object to the specified character object to determine their relative order. Parameters c the character object to compare this object to. Returns 0 if the value of this character and the value of c are equal; a positive value if the value of this character is greater than the value of c; a negative value if the value of this character is less than the value of c. See Also Comparable
	6:	java.lang.Character public static char toUpperCase (char c) Returns the upper case equivalent for the specified character if the character is a lower case letter. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns if c is a lower case character then its upper case counterpart, otherwise just c.
	7:	java.lang.Character public static char reverseBytes (char c) Reverses the order of the first and second byte in the specified character. Parameters c the character to reverse. Returns the character with reordered bytes.
	8:	java.lang.Character public static Character valueOf (char c) Returns a Character instance for the char value passed. If it is not necessary to get a new Character instance, it is recommended to use this method instead of the constructor, since it maintains a cache of instances which may result in better performance. Parameters c the char value for which to get a Character instance. Returns the Character instance for c.
	9:	java.lang.Character public static boolean isJavaIdentifierStart (char c) Indicates whether the specified character is a valid first character for a Java identifier. Parameters c the character to check. Returns true if c is a valid first character of a Java identifier; false otherwise.
getColor
Gets the current color
	0:	java.lang.Character public static boolean isSpaceChar (char c) See isSpaceChar(int).
	1:	java.lang.Character public static boolean isWhitespace (char c) See isWhitespace(int).
	2:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	3:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	4:	java.lang.Character public static boolean isJavaIdentifierStart (int codePoint) Indicates whether the specified code point is a valid first character for a Java identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid start of a Java identifier; false otherwise.
	5:	java.lang.Character public static byte getDirectionality (int codePoint) Gets the Unicode directionality of the specified character. Parameters codePoint the Unicode code point to get the directionality of. Returns the Unicode directionality of codePoint.
	6:	java.lang.Character public static byte getDirectionality (char c) Gets the Unicode directionality of the specified character. Parameters c the character to get the directionality of. Returns the Unicode directionality of c.
	7:	java.lang.Character public static int getType (char c) Gets the general Unicode category of the specified character. Parameters c the character to get the category of. Returns the Unicode category of c.
	8:	java.lang.Character public static int getType (int codePoint) Gets the general Unicode category of the specified code point. Parameters codePoint the Unicode code point to get the category of. Returns the Unicode category of codePoint.
	9:	java.lang.Character public static Character valueOf (char c) Returns a Character instance for the char value passed. If it is not necessary to get a new Character instance, it is recommended to use this method instead of the constructor, since it maintains a cache of instances which may result in better performance. Parameters c the char value for which to get a Character instance. Returns the Character instance for c.
getRedComponent
Gets the red component of the current color
	0:	java.lang.Character public static boolean isSpaceChar (char c) See isSpaceChar(int).
	1:	java.lang.Character public static boolean isWhitespace (char c) See isWhitespace(int).
	2:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	3:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	4:	java.lang.Character public static boolean isJavaIdentifierStart (int codePoint) Indicates whether the specified code point is a valid first character for a Java identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid start of a Java identifier; false otherwise.
	5:	java.lang.Character public static byte getDirectionality (int codePoint) Gets the Unicode directionality of the specified character. Parameters codePoint the Unicode code point to get the directionality of. Returns the Unicode directionality of codePoint.
	6:	java.lang.Character public static byte getDirectionality (char c) Gets the Unicode directionality of the specified character. Parameters c the character to get the directionality of. Returns the Unicode directionality of c.
	7:	java.lang.Character public static int getType (char c) Gets the general Unicode category of the specified character. Parameters c the character to get the category of. Returns the Unicode category of c.
	8:	java.lang.Character public static int getType (int codePoint) Gets the general Unicode category of the specified code point. Parameters codePoint the Unicode code point to get the category of. Returns the Unicode category of codePoint.
	9:	java.lang.Character public static Character valueOf (char c) Returns a Character instance for the char value passed. If it is not necessary to get a new Character instance, it is recommended to use this method instead of the constructor, since it maintains a cache of instances which may result in better performance. Parameters c the char value for which to get a Character instance. Returns the Character instance for c.
getGreenComponent
Gets the green component of the current color
	0:	java.lang.Character public static boolean isSpaceChar (char c) See isSpaceChar(int).
	1:	java.lang.Character public static boolean isWhitespace (char c) See isWhitespace(int).
	2:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	3:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	4:	java.lang.Character public static boolean isJavaIdentifierStart (int codePoint) Indicates whether the specified code point is a valid first character for a Java identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid start of a Java identifier; false otherwise.
	5:	java.lang.Character public static byte getDirectionality (int codePoint) Gets the Unicode directionality of the specified character. Parameters codePoint the Unicode code point to get the directionality of. Returns the Unicode directionality of codePoint.
	6:	java.lang.Character public static byte getDirectionality (char c) Gets the Unicode directionality of the specified character. Parameters c the character to get the directionality of. Returns the Unicode directionality of c.
	7:	java.lang.Character public static int getType (char c) Gets the general Unicode category of the specified character. Parameters c the character to get the category of. Returns the Unicode category of c.
	8:	java.lang.Character public static int getType (int codePoint) Gets the general Unicode category of the specified code point. Parameters codePoint the Unicode code point to get the category of. Returns the Unicode category of codePoint.
	9:	java.lang.Character public static Character valueOf (char c) Returns a Character instance for the char value passed. If it is not necessary to get a new Character instance, it is recommended to use this method instead of the constructor, since it maintains a cache of instances which may result in better performance. Parameters c the char value for which to get a Character instance. Returns the Character instance for c.
getBlueComponent
Gets the blue component of the current color
	0:	java.lang.Character public static boolean isSurrogatePair (char high, char low) Indicates whether the specified character pair is a valid surrogate pair. Parameters high the high surrogate unit to test. low the low surrogate unit to test. Returns true if high is a high-surrogate code unit and low is a low-surrogate code unit; false otherwise. See Also isHighSurrogate(char) isLowSurrogate(char)
	1:	java.lang.Character public static int toCodePoint (char high, char low) Converts a surrogate pair into a Unicode code point. This method assumes that the pair are valid surrogates. If the pair are not valid surrogates, then the result is indeterminate. The isSurrogatePair(char, char) method should be used prior to this method to validate the pair. Parameters high the high surrogate unit. low the low surrogate unit. Returns the Unicode code point corresponding to the surrogate unit pair. See Also isSurrogatePair(char, char)
	2:	java.lang.Character public static boolean isLowSurrogate (char ch) Indicates whether ch is a low- (or trailing-) surrogate code unit that is used for representing supplementary characters in UTF-16 encoding. Parameters ch the character to test. Returns true if ch is a low-surrogate code unit; false otherwise. See Also isHighSurrogate(char)
	3:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	4:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	5:	java.lang.Character public static boolean isSurrogate (char ch) Returns true if the given character is a high or low surrogate.
	6:	java.lang.Character public static char lowSurrogate (int codePoint) Returns the low surrogate for the given code point. The result is meaningless if the given code point is not a supplementary character.
	7:	java.lang.Character public static boolean isSpaceChar (char c) See isSpaceChar(int).
	8:	java.lang.Character public static boolean isWhitespace (char c) See isWhitespace(int).
	9:	java.lang.Character public static int codePointAt (char[] seq, int index) Returns the code point at index in the specified array of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the array and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
getGrayScale
Gets the current grayscale value of the color being used for rendering operations
	0:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	1:	java.lang.Character public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	2:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	3:	java.lang.Character public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	4:	java.lang.Character public boolean equals (Object object) Compares this object with the specified object and indicates if they are equal. In order to be equal, object must be an instance of Character and have the same char value as this object. Parameters object the object to compare this double with. Returns true if the specified object is equal to this Character; false otherwise.
	5:	java.lang.Character public static int getNumericValue (char c) Returns the numeric value of the specified Unicode character. See getNumericValue(int). Parameters c the character Returns a non-negative numeric integer value if a numeric value for c exists, -1 if there is no numeric value for c, -2 if the numeric value can not be represented as an integer.
	6:	java.lang.Character public static int codePointCount (char[] seq, int offset, int count) Counts the number of Unicode code points in the subsequence of the specified char array, as delineated by offset and count. Any surrogate values with missing pair values will be counted as one code point. Parameters seq the char array to look through offset the inclusive index to begin counting at. count the number of char values to look through in seq. Returns the number of Unicode code points. Throws NullPointerException if seq is null. IndexOutOfBoundsException if offset < 0, count < 0 or if offset + count is greater than the length of seq.
	7:	java.lang.Character public static int charCount (int codePoint) Calculates the number of char values required to represent the specified Unicode code point. This method checks if the codePoint is greater than or equal to 0x10000, in which case 2 is returned, otherwise 1. To test if the code point is valid, use the isValidCodePoint(int) method. Parameters codePoint the code point for which to calculate the number of required chars. Returns 2 if codePoint >= 0x10000; 1 otherwise. See Also isValidCodePoint(int) isSupplementaryCodePoint(int)
	8:	java.lang.Character public int compareTo (Character c) Compares this object to the specified character object to determine their relative order. Parameters c the character object to compare this object to. Returns 0 if the value of this character and the value of c are equal; a positive value if the value of this character is greater than the value of c; a negative value if the value of this character is less than the value of c. See Also Comparable
	9:	java.lang.Character public static int toCodePoint (char high, char low) Converts a surrogate pair into a Unicode code point. This method assumes that the pair are valid surrogates. If the pair are not valid surrogates, then the result is indeterminate. The isSurrogatePair(char, char) method should be used prior to this method to validate the pair. Parameters high the high surrogate unit. low the low surrogate unit. Returns the Unicode code point corresponding to the surrogate unit pair. See Also isSurrogatePair(char, char)
setColor
Sets the current color to the specified RGB values
	0:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	1:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	2:	java.lang.Character public static int codePointCount (char[] seq, int offset, int count) Counts the number of Unicode code points in the subsequence of the specified char array, as delineated by offset and count. Any surrogate values with missing pair values will be counted as one code point. Parameters seq the char array to look through offset the inclusive index to begin counting at. count the number of char values to look through in seq. Returns the number of Unicode code points. Throws NullPointerException if seq is null. IndexOutOfBoundsException if offset < 0, count < 0 or if offset + count is greater than the length of seq.
	3:	java.lang.Character public static boolean isJavaIdentifierPart (int codePoint) Indicates whether the specified code point is a valid part of a Java identifier other than the first character. Parameters codePoint the code point to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	4:	java.lang.Character public static boolean isJavaIdentifierPart (char c) Indicates whether the specified character is a valid part of a Java identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	5:	java.lang.Character public static boolean isUnicodeIdentifierPart (int codePoint) Indicates whether the specified code point is valid as part of a Unicode identifier other than the first character. Parameters codePoint the code point to check. Returns true if codePoint is valid as part of a Unicode identifier; false otherwise.
	6:	java.lang.Character public static boolean isUnicodeIdentifierPart (char c) Indicates whether the specified character is valid as part of a Unicode identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Unicode identifier; false otherwise.
	7:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	8:	java.lang.Character public static boolean isJavaIdentifierStart (int codePoint) Indicates whether the specified code point is a valid first character for a Java identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid start of a Java identifier; false otherwise.
	9:	java.lang.Character public static boolean isSpaceChar (int codePoint) Returns true if the given code point is a Unicode space character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are considered whitespace. Note also that line separators are not considered whitespace; see isWhitespace(char) for an alternative.
setColor
Sets the current color to the specified RGB values
	0:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	1:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	2:	java.lang.Character public static int codePointCount (char[] seq, int offset, int count) Counts the number of Unicode code points in the subsequence of the specified char array, as delineated by offset and count. Any surrogate values with missing pair values will be counted as one code point. Parameters seq the char array to look through offset the inclusive index to begin counting at. count the number of char values to look through in seq. Returns the number of Unicode code points. Throws NullPointerException if seq is null. IndexOutOfBoundsException if offset < 0, count < 0 or if offset + count is greater than the length of seq.
	3:	java.lang.Character public static boolean isJavaIdentifierPart (int codePoint) Indicates whether the specified code point is a valid part of a Java identifier other than the first character. Parameters codePoint the code point to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	4:	java.lang.Character public static boolean isJavaIdentifierPart (char c) Indicates whether the specified character is a valid part of a Java identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	5:	java.lang.Character public static boolean isUnicodeIdentifierPart (int codePoint) Indicates whether the specified code point is valid as part of a Unicode identifier other than the first character. Parameters codePoint the code point to check. Returns true if codePoint is valid as part of a Unicode identifier; false otherwise.
	6:	java.lang.Character public static boolean isUnicodeIdentifierPart (char c) Indicates whether the specified character is valid as part of a Unicode identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Unicode identifier; false otherwise.
	7:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	8:	java.lang.Character public static boolean isJavaIdentifierStart (int codePoint) Indicates whether the specified code point is a valid first character for a Java identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid start of a Java identifier; false otherwise.
	9:	java.lang.Character public static boolean isSpaceChar (int codePoint) Returns true if the given code point is a Unicode space character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are considered whitespace. Note also that line separators are not considered whitespace; see isWhitespace(char) for an alternative.
setGrayScale
Sets the current grayscale to be used for all subsequent rendering operations
	0:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	1:	java.lang.Character public static boolean isJavaIdentifierPart (int codePoint) Indicates whether the specified code point is a valid part of a Java identifier other than the first character. Parameters codePoint the code point to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	2:	java.lang.Character public static boolean isJavaIdentifierPart (char c) Indicates whether the specified character is a valid part of a Java identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	3:	java.lang.Character public static boolean isUnicodeIdentifierPart (int codePoint) Indicates whether the specified code point is valid as part of a Unicode identifier other than the first character. Parameters codePoint the code point to check. Returns true if codePoint is valid as part of a Unicode identifier; false otherwise.
	4:	java.lang.Character public static boolean isUnicodeIdentifierPart (char c) Indicates whether the specified character is valid as part of a Unicode identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Unicode identifier; false otherwise.
	5:	java.lang.Character public static boolean isJavaIdentifierStart (int codePoint) Indicates whether the specified code point is a valid first character for a Java identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid start of a Java identifier; false otherwise.
	6:	java.lang.Character public static char reverseBytes (char c) Reverses the order of the first and second byte in the specified character. Parameters c the character to reverse. Returns the character with reordered bytes.
	7:	java.lang.Character public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	8:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock forName (String blockName) Returns the Unicode block for the given block name, or null if there is no such block. Block names may be one of the following: Canonical block name, as defined by the Unicode specification; case-insensitive. Canonical block name without any spaces, as defined by the Unicode specification; case-insensitive. A UnicodeBlock constant identifier. This is determined by converting the canonical name to uppercase and replacing all spaces and hyphens with underscores. Throws NullPointerException if blockName == null. IllegalArgumentException if blockName is not the name of any known block.
	9:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
getFont
Gets the current font
	0:	java.lang.Character public static char toLowerCase (char c) Returns the lower case equivalent for the specified character if the character is an upper case letter. Otherwise, the specified character is returned unchanged. Parameters c the character Returns if c is an upper case character then its lower case counterpart, otherwise just c.
	1:	java.lang.Character public static int toLowerCase (int codePoint) Returns the lower case equivalent for the specified code point if it is an upper case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to check. Returns if codePoint is an upper case character then its lower case counterpart, otherwise just codePoint.
	2:	java.lang.Character public static char toUpperCase (char c) Returns the upper case equivalent for the specified character if the character is a lower case letter. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns if c is a lower case character then its upper case counterpart, otherwise just c.
	3:	java.lang.Character public static int toUpperCase (int codePoint) Returns the upper case equivalent for the specified code point if the code point is a lower case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns if codePoint is a lower case character then its upper case counterpart, otherwise just codePoint.
	4:	java.lang.Character public static int charCount (int codePoint) Calculates the number of char values required to represent the specified Unicode code point. This method checks if the codePoint is greater than or equal to 0x10000, in which case 2 is returned, otherwise 1. To test if the code point is valid, use the isValidCodePoint(int) method. Parameters codePoint the code point for which to calculate the number of required chars. Returns 2 if codePoint >= 0x10000; 1 otherwise. See Also isValidCodePoint(int) isSupplementaryCodePoint(int)
	5:	java.lang.Character public static char toTitleCase (char c) Returns the title case equivalent for the specified character if it exists. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns the title case equivalent of c if it exists, otherwise c.
	6:	java.lang.Character public static int toTitleCase (int codePoint) Returns the title case equivalent for the specified code point if it exists. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns the title case equivalent of codePoint if it exists, otherwise codePoint.
	7:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock forName (String blockName) Returns the Unicode block for the given block name, or null if there is no such block. Block names may be one of the following: Canonical block name, as defined by the Unicode specification; case-insensitive. Canonical block name without any spaces, as defined by the Unicode specification; case-insensitive. A UnicodeBlock constant identifier. This is determined by converting the canonical name to uppercase and replacing all spaces and hyphens with underscores. Throws NullPointerException if blockName == null. IllegalArgumentException if blockName is not the name of any known block.
	8:	java.lang.Character public static boolean isSpaceChar (char c) See isSpaceChar(int).
	9:	java.lang.Character public static boolean isWhitespace (char c) See isWhitespace(int).
setStrokeStyle
Sets the stroke style used for drawing lines, arcs, rectangles, and rounded rectangles
	0:	java.lang.Character public static boolean isSpaceChar (int codePoint) Returns true if the given code point is a Unicode space character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are considered whitespace. Note also that line separators are not considered whitespace; see isWhitespace(char) for an alternative.
	1:	java.lang.Character public static boolean isWhitespace (int codePoint) Returns true if the given code point is a Unicode whitespace character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are not considered whitespace. Note also that line separators are considered whitespace; see isSpaceChar(char) for an alternative.
	2:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	3:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	4:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	5:	java.lang.Character public static boolean isJavaIdentifierStart (int codePoint) Indicates whether the specified code point is a valid first character for a Java identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid start of a Java identifier; false otherwise.
	6:	java.lang.Character public static byte getDirectionality (int codePoint) Gets the Unicode directionality of the specified character. Parameters codePoint the Unicode code point to get the directionality of. Returns the Unicode directionality of codePoint.
	7:	java.lang.Character public static byte getDirectionality (char c) Gets the Unicode directionality of the specified character. Parameters c the character to get the directionality of. Returns the Unicode directionality of c.
	8:	java.lang.Character public static int getType (char c) Gets the general Unicode category of the specified character. Parameters c the character to get the category of. Returns the Unicode category of c.
	9:	java.lang.Character public static int getType (int codePoint) Gets the general Unicode category of the specified code point. Parameters codePoint the Unicode code point to get the category of. Returns the Unicode category of codePoint.
getStrokeStyle
Gets the stroke style used for drawing operations
	0:	java.lang.Character public static byte getDirectionality (int codePoint) Gets the Unicode directionality of the specified character. Parameters codePoint the Unicode code point to get the directionality of. Returns the Unicode directionality of codePoint.
	1:	java.lang.Character public static byte getDirectionality (char c) Gets the Unicode directionality of the specified character. Parameters c the character to get the directionality of. Returns the Unicode directionality of c.
	2:	java.lang.Character public static int getType (char c) Gets the general Unicode category of the specified character. Parameters c the character to get the category of. Returns the Unicode category of c.
	3:	java.lang.Character public static int getType (int codePoint) Gets the general Unicode category of the specified code point. Parameters codePoint the Unicode code point to get the category of. Returns the Unicode category of codePoint.
	4:	java.lang.Character public static Character valueOf (char c) Returns a Character instance for the char value passed. If it is not necessary to get a new Character instance, it is recommended to use this method instead of the constructor, since it maintains a cache of instances which may result in better performance. Parameters c the char value for which to get a Character instance. Returns the Character instance for c.
	5:	java.lang.Character public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	6:	java.lang.Character public static boolean isSpaceChar (int codePoint) Returns true if the given code point is a Unicode space character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are considered whitespace. Note also that line separators are not considered whitespace; see isWhitespace(char) for an alternative.
	7:	java.lang.Character public static boolean isWhitespace (int codePoint) Returns true if the given code point is a Unicode whitespace character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are not considered whitespace. Note also that line separators are considered whitespace; see isSpaceChar(char) for an alternative.
	8:	java.lang.Character public static char toTitleCase (char c) Returns the title case equivalent for the specified character if it exists. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns the title case equivalent of c if it exists, otherwise c.
	9:	java.lang.Character public static int toTitleCase (int codePoint) Returns the title case equivalent for the specified code point if it exists. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns the title case equivalent of codePoint if it exists, otherwise codePoint.
setFont
Sets the font for all subsequent text rendering operations
	0:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock forName (String blockName) Returns the Unicode block for the given block name, or null if there is no such block. Block names may be one of the following: Canonical block name, as defined by the Unicode specification; case-insensitive. Canonical block name without any spaces, as defined by the Unicode specification; case-insensitive. A UnicodeBlock constant identifier. This is determined by converting the canonical name to uppercase and replacing all spaces and hyphens with underscores. Throws NullPointerException if blockName == null. IllegalArgumentException if blockName is not the name of any known block.
	1:	java.lang.Character public static char toLowerCase (char c) Returns the lower case equivalent for the specified character if the character is an upper case letter. Otherwise, the specified character is returned unchanged. Parameters c the character Returns if c is an upper case character then its lower case counterpart, otherwise just c.
	2:	java.lang.Character public static int toLowerCase (int codePoint) Returns the lower case equivalent for the specified code point if it is an upper case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to check. Returns if codePoint is an upper case character then its lower case counterpart, otherwise just codePoint.
	3:	java.lang.Character public static char toUpperCase (char c) Returns the upper case equivalent for the specified character if the character is a lower case letter. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns if c is a lower case character then its upper case counterpart, otherwise just c.
	4:	java.lang.Character public static int toUpperCase (int codePoint) Returns the upper case equivalent for the specified code point if the code point is a lower case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns if codePoint is a lower case character then its upper case counterpart, otherwise just codePoint.
	5:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	6:	java.lang.Character public static boolean isJavaIdentifierPart (int codePoint) Indicates whether the specified code point is a valid part of a Java identifier other than the first character. Parameters codePoint the code point to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	7:	java.lang.Character public static boolean isJavaIdentifierPart (char c) Indicates whether the specified character is a valid part of a Java identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	8:	java.lang.Character public static boolean isUnicodeIdentifierPart (int codePoint) Indicates whether the specified code point is valid as part of a Unicode identifier other than the first character. Parameters codePoint the code point to check. Returns true if codePoint is valid as part of a Unicode identifier; false otherwise.
	9:	java.lang.Character public static boolean isUnicodeIdentifierPart (char c) Indicates whether the specified character is valid as part of a Unicode identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Unicode identifier; false otherwise.
getClipX
Gets the X offset of the current clipping area, relative to the coordinate system origin of this graphics context
	0:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	1:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	2:	java.lang.Character public static char reverseBytes (char c) Reverses the order of the first and second byte in the specified character. Parameters c the character to reverse. Returns the character with reordered bytes.
	3:	java.lang.Character public static boolean isJavaIdentifierStart (char c) Indicates whether the specified character is a valid first character for a Java identifier. Parameters c the character to check. Returns true if c is a valid first character of a Java identifier; false otherwise.
	4:	java.lang.Character public static boolean isUnicodeIdentifierStart (char c) Indicates whether the specified character is a valid initial character for a Unicode identifier. Parameters c the character to check. Returns true if c is a valid first character for a Unicode identifier; false otherwise.
	5:	java.lang.Character public static boolean isJavaIdentifierPart (char c) Indicates whether the specified character is a valid part of a Java identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	6:	java.lang.Character public static boolean isUnicodeIdentifierPart (char c) Indicates whether the specified character is valid as part of a Unicode identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Unicode identifier; false otherwise.
	7:	java.lang.Character public static boolean isJavaIdentifierStart (int codePoint) Indicates whether the specified code point is a valid first character for a Java identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid start of a Java identifier; false otherwise.
	8:	java.lang.Character public static boolean isUnicodeIdentifierStart (int codePoint) Indicates whether the specified code point is a valid initial character for a Unicode identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid first character for a Unicode identifier; false otherwise.
	9:	java.lang.Character public static boolean isSpaceChar (int codePoint) Returns true if the given code point is a Unicode space character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are considered whitespace. Note also that line separators are not considered whitespace; see isWhitespace(char) for an alternative.
getClipY
Gets the Y offset of the current clipping area, relative to the coordinate system origin of this graphics context
	0:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	1:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	2:	java.lang.Character public static char reverseBytes (char c) Reverses the order of the first and second byte in the specified character. Parameters c the character to reverse. Returns the character with reordered bytes.
	3:	java.lang.Character public static boolean isJavaIdentifierStart (char c) Indicates whether the specified character is a valid first character for a Java identifier. Parameters c the character to check. Returns true if c is a valid first character of a Java identifier; false otherwise.
	4:	java.lang.Character public static boolean isUnicodeIdentifierStart (char c) Indicates whether the specified character is a valid initial character for a Unicode identifier. Parameters c the character to check. Returns true if c is a valid first character for a Unicode identifier; false otherwise.
	5:	java.lang.Character public static boolean isJavaIdentifierPart (char c) Indicates whether the specified character is a valid part of a Java identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	6:	java.lang.Character public static boolean isUnicodeIdentifierPart (char c) Indicates whether the specified character is valid as part of a Unicode identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Unicode identifier; false otherwise.
	7:	java.lang.Character public static boolean isJavaIdentifierStart (int codePoint) Indicates whether the specified code point is a valid first character for a Java identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid start of a Java identifier; false otherwise.
	8:	java.lang.Character public static boolean isUnicodeIdentifierStart (int codePoint) Indicates whether the specified code point is a valid initial character for a Unicode identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid first character for a Unicode identifier; false otherwise.
	9:	java.lang.Character public static boolean isSpaceChar (int codePoint) Returns true if the given code point is a Unicode space character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are considered whitespace. Note also that line separators are not considered whitespace; see isWhitespace(char) for an alternative.
getClipWidth
Gets the width of the current clipping area
	0:	java.lang.Character public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	1:	java.lang.Character public static int getNumericValue (int codePoint) Gets the numeric value of the specified Unicode code point. For example, the code point 'Ⅻ' stands for the Roman number XII, which has the numeric value 12. There are two points of divergence between this method and the Unicode specification. This method treats the letters a-z (in both upper and lower cases, and their full-width variants) as numbers from 10 to 35. The Unicode specification also supports the idea of code points with non-integer numeric values; this method does not (except to the extent of returning -2 for such code points). Parameters codePoint the code point Returns a non-negative numeric integer value if a numeric value for codePoint exists, -1 if there is no numeric value for codePoint, -2 if the numeric value can not be represented with an integer.
	2:	java.lang.Character public static boolean isSpaceChar (char c) See isSpaceChar(int).
	3:	java.lang.Character public static boolean isWhitespace (char c) See isWhitespace(int).
	4:	java.lang.Character public static char forDigit (int digit, int radix) Returns the character which represents the specified digit in the specified radix. The radix must be between MIN_RADIX and MAX_RADIX inclusive; digit must not be negative and smaller than radix. If any of these conditions does not hold, 0 is returned. Parameters digit the integer value. radix the radix. Returns the character which represents the digit in the radix.
	5:	java.lang.Character public static String getName (int codePoint) Returns a human-readable name for the given code point, or null if the code point is unassigned. As a fallback mechanism this method returns strings consisting of the Unicode block name (with underscores replaced by spaces), a single space, and the uppercase hex value of the code point, using as few digits as necessary. Examples: Character.getName(0) returns "NULL". Character.getName('e') returns "LATIN SMALL LETTER E". Character.getName('٦') returns "ARABIC-INDIC DIGIT SIX". Character.getName(0xe000) returns "PRIVATE USE AREA E000". Note that the exact strings returned will vary from release to release. Throws IllegalArgumentException if codePoint is not a valid code point.
	6:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	7:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	8:	java.lang.Character public static boolean isJavaIdentifierStart (int codePoint) Indicates whether the specified code point is a valid first character for a Java identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid start of a Java identifier; false otherwise.
	9:	java.lang.Character public static byte getDirectionality (int codePoint) Gets the Unicode directionality of the specified character. Parameters codePoint the Unicode code point to get the directionality of. Returns the Unicode directionality of codePoint.
getClipHeight
Gets the height of the current clipping area
	0:	java.lang.Character public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	1:	java.lang.Character public static boolean isSpaceChar (char c) See isSpaceChar(int).
	2:	java.lang.Character public static boolean isWhitespace (char c) See isWhitespace(int).
	3:	java.lang.Character public static char forDigit (int digit, int radix) Returns the character which represents the specified digit in the specified radix. The radix must be between MIN_RADIX and MAX_RADIX inclusive; digit must not be negative and smaller than radix. If any of these conditions does not hold, 0 is returned. Parameters digit the integer value. radix the radix. Returns the character which represents the digit in the radix.
	4:	java.lang.Character public static String getName (int codePoint) Returns a human-readable name for the given code point, or null if the code point is unassigned. As a fallback mechanism this method returns strings consisting of the Unicode block name (with underscores replaced by spaces), a single space, and the uppercase hex value of the code point, using as few digits as necessary. Examples: Character.getName(0) returns "NULL". Character.getName('e') returns "LATIN SMALL LETTER E". Character.getName('٦') returns "ARABIC-INDIC DIGIT SIX". Character.getName(0xe000) returns "PRIVATE USE AREA E000". Note that the exact strings returned will vary from release to release. Throws IllegalArgumentException if codePoint is not a valid code point.
	5:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	6:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	7:	java.lang.Character public static boolean isJavaIdentifierStart (int codePoint) Indicates whether the specified code point is a valid first character for a Java identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid start of a Java identifier; false otherwise.
	8:	java.lang.Character public static byte getDirectionality (int codePoint) Gets the Unicode directionality of the specified character. Parameters codePoint the Unicode code point to get the directionality of. Returns the Unicode directionality of codePoint.
	9:	java.lang.Character public static byte getDirectionality (char c) Gets the Unicode directionality of the specified character. Parameters c the character to get the directionality of. Returns the Unicode directionality of c.
clipRect
Intersects the current clip with the specified rectangle
	0:	java.lang.Character public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	1:	java.lang.Character public Character (char value) Constructs a new Character with the specified primitive char value. Parameters value the primitive char value to store in the new instance.
	2:	java.lang.Character public static int charCount (int codePoint) Calculates the number of char values required to represent the specified Unicode code point. This method checks if the codePoint is greater than or equal to 0x10000, in which case 2 is returned, otherwise 1. To test if the code point is valid, use the isValidCodePoint(int) method. Parameters codePoint the code point for which to calculate the number of required chars. Returns 2 if codePoint >= 0x10000; 1 otherwise. See Also isValidCodePoint(int) isSupplementaryCodePoint(int)
	3:	java.lang.Character public char charValue () Gets the primitive value of this character. Returns this object's primitive value.
	4:	java.lang.Character public static int codePointAt (char[] seq, int index) Returns the code point at index in the specified array of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the array and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	5:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	6:	java.lang.Character public static int codePointAt (CharSequence seq, int index) Returns the code point at index in the specified sequence of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the sequence and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source sequence of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	7:	java.lang.Character public static int codePointBefore (CharSequence seq, int index) Returns the code point that precedes index in the specified sequence of character units. If the unit at index - 1 is a low-surrogate unit, index - 2 is not negative and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source sequence of char units. index the position in seq following the code point that should be returned. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is less than 1 or greater than the length of seq.
	8:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	9:	java.lang.Character public static int codePointBefore (char[] seq, int index) Returns the code point that precedes index in the specified array of character units. If the unit at index - 1 is a low-surrogate unit, index - 2 is not negative and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is less than 1 or greater than the length of seq.
setClip
Sets the current clip to the rectangle specified by the given coordinates
	0:	java.lang.Character public static boolean isSpaceChar (int codePoint) Returns true if the given code point is a Unicode space character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are considered whitespace. Note also that line separators are not considered whitespace; see isWhitespace(char) for an alternative.
	1:	java.lang.Character public static boolean isWhitespace (int codePoint) Returns true if the given code point is a Unicode whitespace character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are not considered whitespace. Note also that line separators are considered whitespace; see isSpaceChar(char) for an alternative.
	2:	java.lang.Character public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	3:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock forName (String blockName) Returns the Unicode block for the given block name, or null if there is no such block. Block names may be one of the following: Canonical block name, as defined by the Unicode specification; case-insensitive. Canonical block name without any spaces, as defined by the Unicode specification; case-insensitive. A UnicodeBlock constant identifier. This is determined by converting the canonical name to uppercase and replacing all spaces and hyphens with underscores. Throws NullPointerException if blockName == null. IllegalArgumentException if blockName is not the name of any known block.
	4:	java.lang.Character public static char highSurrogate (int codePoint) Returns the high surrogate for the given code point. The result is meaningless if the given code point is not a supplementary character.
	5:	java.lang.Character public static char lowSurrogate (int codePoint) Returns the low surrogate for the given code point. The result is meaningless if the given code point is not a supplementary character.
	6:	java.lang.Character public static boolean isIdeographic (int codePoint) Returns true if the given code point is a CJKV ideographic character.
	7:	java.lang.Character public static boolean isSurrogate (char ch) Returns true if the given character is a high or low surrogate.
	8:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	9:	java.lang.Character public static boolean isAlphabetic (int codePoint) Returns true if the given code point is alphabetic. That is, if it is in any of the Lu, Ll, Lt, Lm, Lo, Nl, or Other_Alphabetic categories.
drawLine
Draws a line between the coordinates (x1,y1) and (x2,y2) using the current color and stroke style
	0:	java.lang.Character public static boolean isSpaceChar (int codePoint) Returns true if the given code point is a Unicode space character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are considered whitespace. Note also that line separators are not considered whitespace; see isWhitespace(char) for an alternative.
	1:	java.lang.Character public static boolean isWhitespace (int codePoint) Returns true if the given code point is a Unicode whitespace character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are not considered whitespace. Note also that line separators are considered whitespace; see isSpaceChar(char) for an alternative.
	2:	java.lang.Character public static int digit (char c, int radix) Convenience method to determine the value of the specified character c in the supplied radix. The value of radix must be between MIN_RADIX and MAX_RADIX. Parameters c the character to determine the value of. radix the radix. Returns the value of c in radix if radix lies between MIN_RADIX and MAX_RADIX; -1 otherwise.
	3:	java.lang.Character public static int digit (int codePoint, int radix) Convenience method to determine the value of the character codePoint in the supplied radix. The value of radix must be between MIN_RADIX and MAX_RADIX. Parameters codePoint the character, including supplementary characters. radix the radix. Returns if radix lies between MIN_RADIX and MAX_RADIX then the value of the character in the radix; -1 otherwise.
	4:	java.lang.Character public static char toTitleCase (char c) Returns the title case equivalent for the specified character if it exists. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns the title case equivalent of c if it exists, otherwise c.
	5:	java.lang.Character public static int toTitleCase (int codePoint) Returns the title case equivalent for the specified code point if it exists. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns the title case equivalent of codePoint if it exists, otherwise codePoint.
	6:	java.lang.Character public static char forDigit (int digit, int radix) Returns the character which represents the specified digit in the specified radix. The radix must be between MIN_RADIX and MAX_RADIX inclusive; digit must not be negative and smaller than radix. If any of these conditions does not hold, 0 is returned. Parameters digit the integer value. radix the radix. Returns the character which represents the digit in the radix.
	7:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	8:	java.lang.Character public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	9:	java.lang.Character public static String getName (int codePoint) Returns a human-readable name for the given code point, or null if the code point is unassigned. As a fallback mechanism this method returns strings consisting of the Unicode block name (with underscores replaced by spaces), a single space, and the uppercase hex value of the code point, using as few digits as necessary. Examples: Character.getName(0) returns "NULL". Character.getName('e') returns "LATIN SMALL LETTER E". Character.getName('٦') returns "ARABIC-INDIC DIGIT SIX". Character.getName(0xe000) returns "PRIVATE USE AREA E000". Note that the exact strings returned will vary from release to release. Throws IllegalArgumentException if codePoint is not a valid code point.
fillRect
Fills the specified rectangle with the current color
	0:	java.lang.Character public Character (char value) Constructs a new Character with the specified primitive char value. Parameters value the primitive char value to store in the new instance.
	1:	java.lang.Character public static int charCount (int codePoint) Calculates the number of char values required to represent the specified Unicode code point. This method checks if the codePoint is greater than or equal to 0x10000, in which case 2 is returned, otherwise 1. To test if the code point is valid, use the isValidCodePoint(int) method. Parameters codePoint the code point for which to calculate the number of required chars. Returns 2 if codePoint >= 0x10000; 1 otherwise. See Also isValidCodePoint(int) isSupplementaryCodePoint(int)
	2:	java.lang.Character public char charValue () Gets the primitive value of this character. Returns this object's primitive value.
	3:	java.lang.Character public static int codePointAt (char[] seq, int index) Returns the code point at index in the specified array of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the array and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	4:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	5:	java.lang.Character public static int codePointAt (CharSequence seq, int index) Returns the code point at index in the specified sequence of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the sequence and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source sequence of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	6:	java.lang.Character public static int codePointBefore (CharSequence seq, int index) Returns the code point that precedes index in the specified sequence of character units. If the unit at index - 1 is a low-surrogate unit, index - 2 is not negative and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source sequence of char units. index the position in seq following the code point that should be returned. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is less than 1 or greater than the length of seq.
	7:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	8:	java.lang.Character public static int codePointBefore (char[] seq, int index) Returns the code point that precedes index in the specified array of character units. If the unit at index - 1 is a low-surrogate unit, index - 2 is not negative and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is less than 1 or greater than the length of seq.
	9:	java.lang.Character public static int codePointCount (CharSequence seq, int beginIndex, int endIndex) Counts the number of Unicode code points in the subsequence of the specified character sequence, as delineated by beginIndex and endIndex. Any surrogate values with missing pair values will be counted as one code point. Parameters seq the CharSequence to look through. beginIndex the inclusive index to begin counting at. endIndex the exclusive index to stop counting at. Returns the number of Unicode code points. Throws NullPointerException if seq is null. IndexOutOfBoundsException if beginIndex < 0, beginIndex > endIndex or if endIndex is greater than the length of seq.
drawRect
Draws the outline of the specified rectangle using the current color and stroke style
	0:	java.lang.Character public static char toTitleCase (char c) Returns the title case equivalent for the specified character if it exists. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns the title case equivalent of c if it exists, otherwise c.
	1:	java.lang.Character public static int toTitleCase (int codePoint) Returns the title case equivalent for the specified code point if it exists. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns the title case equivalent of codePoint if it exists, otherwise codePoint.
	2:	java.lang.Character.Subset protected Character.Subset (String name) Constructs a new Subset.
	3:	java.lang.Character public static String toString (char value) Converts the specified character to its string representation. Parameters value the character to convert. Returns the character converted to a string.
	4:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock forName (String blockName) Returns the Unicode block for the given block name, or null if there is no such block. Block names may be one of the following: Canonical block name, as defined by the Unicode specification; case-insensitive. Canonical block name without any spaces, as defined by the Unicode specification; case-insensitive. A UnicodeBlock constant identifier. This is determined by converting the canonical name to uppercase and replacing all spaces and hyphens with underscores. Throws NullPointerException if blockName == null. IllegalArgumentException if blockName is not the name of any known block.
	5:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock of (char c) Returns the Unicode block containing the given code point, or null if the code point does not belong to any known block.
	6:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock of (int codePoint) Returns the Unicode block containing the given code point, or null if the code point does not belong to any known block.
	7:	java.lang.Character.Subset public final String toString () Returns this subset's name. Returns a printable representation of this object.
	8:	java.lang.Character public static byte getDirectionality (int codePoint) Gets the Unicode directionality of the specified character. Parameters codePoint the Unicode code point to get the directionality of. Returns the Unicode directionality of codePoint.
	9:	java.lang.Character public static byte getDirectionality (char c) Gets the Unicode directionality of the specified character. Parameters c the character to get the directionality of. Returns the Unicode directionality of c.
drawRoundRect
Draws the outline of the specified rounded corner rectangle using the current color and stroke style
	0:	java.lang.Character public static char toTitleCase (char c) Returns the title case equivalent for the specified character if it exists. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns the title case equivalent of c if it exists, otherwise c.
	1:	java.lang.Character public static int toTitleCase (int codePoint) Returns the title case equivalent for the specified code point if it exists. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns the title case equivalent of codePoint if it exists, otherwise codePoint.
	2:	java.lang.Character.Subset protected Character.Subset (String name) Constructs a new Subset.
	3:	java.lang.Character public static String toString (char value) Converts the specified character to its string representation. Parameters value the character to convert. Returns the character converted to a string.
	4:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock forName (String blockName) Returns the Unicode block for the given block name, or null if there is no such block. Block names may be one of the following: Canonical block name, as defined by the Unicode specification; case-insensitive. Canonical block name without any spaces, as defined by the Unicode specification; case-insensitive. A UnicodeBlock constant identifier. This is determined by converting the canonical name to uppercase and replacing all spaces and hyphens with underscores. Throws NullPointerException if blockName == null. IllegalArgumentException if blockName is not the name of any known block.
	5:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock of (char c) Returns the Unicode block containing the given code point, or null if the code point does not belong to any known block.
	6:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock of (int codePoint) Returns the Unicode block containing the given code point, or null if the code point does not belong to any known block.
	7:	java.lang.Character.Subset public final String toString () Returns this subset's name. Returns a printable representation of this object.
	8:	java.lang.Character public static byte getDirectionality (int codePoint) Gets the Unicode directionality of the specified character. Parameters codePoint the Unicode code point to get the directionality of. Returns the Unicode directionality of codePoint.
	9:	java.lang.Character public static byte getDirectionality (char c) Gets the Unicode directionality of the specified character. Parameters c the character to get the directionality of. Returns the Unicode directionality of c.
fillRoundRect
Fills the specified rounded corner rectangle with the current color
	0:	java.lang.Character public Character (char value) Constructs a new Character with the specified primitive char value. Parameters value the primitive char value to store in the new instance.
	1:	java.lang.Character public static int charCount (int codePoint) Calculates the number of char values required to represent the specified Unicode code point. This method checks if the codePoint is greater than or equal to 0x10000, in which case 2 is returned, otherwise 1. To test if the code point is valid, use the isValidCodePoint(int) method. Parameters codePoint the code point for which to calculate the number of required chars. Returns 2 if codePoint >= 0x10000; 1 otherwise. See Also isValidCodePoint(int) isSupplementaryCodePoint(int)
	2:	java.lang.Character public char charValue () Gets the primitive value of this character. Returns this object's primitive value.
	3:	java.lang.Character public static int codePointAt (char[] seq, int index) Returns the code point at index in the specified array of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the array and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	4:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	5:	java.lang.Character public static int codePointAt (CharSequence seq, int index) Returns the code point at index in the specified sequence of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the sequence and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source sequence of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	6:	java.lang.Character public static int codePointBefore (CharSequence seq, int index) Returns the code point that precedes index in the specified sequence of character units. If the unit at index - 1 is a low-surrogate unit, index - 2 is not negative and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source sequence of char units. index the position in seq following the code point that should be returned. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is less than 1 or greater than the length of seq.
	7:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	8:	java.lang.Character public static int codePointBefore (char[] seq, int index) Returns the code point that precedes index in the specified array of character units. If the unit at index - 1 is a low-surrogate unit, index - 2 is not negative and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is less than 1 or greater than the length of seq.
	9:	java.lang.Character public static int codePointCount (CharSequence seq, int beginIndex, int endIndex) Counts the number of Unicode code points in the subsequence of the specified character sequence, as delineated by beginIndex and endIndex. Any surrogate values with missing pair values will be counted as one code point. Parameters seq the CharSequence to look through. beginIndex the inclusive index to begin counting at. endIndex the exclusive index to stop counting at. Returns the number of Unicode code points. Throws NullPointerException if seq is null. IndexOutOfBoundsException if beginIndex < 0, beginIndex > endIndex or if endIndex is greater than the length of seq.
fillArc
Fills a circular or elliptical arc covering the specified rectangle
	0:	java.lang.Character public Character (char value) Constructs a new Character with the specified primitive char value. Parameters value the primitive char value to store in the new instance.
	1:	java.lang.Character public static int charCount (int codePoint) Calculates the number of char values required to represent the specified Unicode code point. This method checks if the codePoint is greater than or equal to 0x10000, in which case 2 is returned, otherwise 1. To test if the code point is valid, use the isValidCodePoint(int) method. Parameters codePoint the code point for which to calculate the number of required chars. Returns 2 if codePoint >= 0x10000; 1 otherwise. See Also isValidCodePoint(int) isSupplementaryCodePoint(int)
	2:	java.lang.Character public char charValue () Gets the primitive value of this character. Returns this object's primitive value.
	3:	java.lang.Character public static int codePointAt (char[] seq, int index) Returns the code point at index in the specified array of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the array and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	4:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	5:	java.lang.Character public static int codePointAt (CharSequence seq, int index) Returns the code point at index in the specified sequence of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the sequence and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source sequence of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	6:	java.lang.Character public static int codePointBefore (CharSequence seq, int index) Returns the code point that precedes index in the specified sequence of character units. If the unit at index - 1 is a low-surrogate unit, index - 2 is not negative and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source sequence of char units. index the position in seq following the code point that should be returned. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is less than 1 or greater than the length of seq.
	7:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	8:	java.lang.Character public static int codePointBefore (char[] seq, int index) Returns the code point that precedes index in the specified array of character units. If the unit at index - 1 is a low-surrogate unit, index - 2 is not negative and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is less than 1 or greater than the length of seq.
	9:	java.lang.Character public static int codePointCount (CharSequence seq, int beginIndex, int endIndex) Counts the number of Unicode code points in the subsequence of the specified character sequence, as delineated by beginIndex and endIndex. Any surrogate values with missing pair values will be counted as one code point. Parameters seq the CharSequence to look through. beginIndex the inclusive index to begin counting at. endIndex the exclusive index to stop counting at. Returns the number of Unicode code points. Throws NullPointerException if seq is null. IndexOutOfBoundsException if beginIndex < 0, beginIndex > endIndex or if endIndex is greater than the length of seq.
drawArc
Draws the outline of a circular or elliptical arc covering the specified rectangle, using the current color and stroke style
	0:	java.lang.Character public static char toTitleCase (char c) Returns the title case equivalent for the specified character if it exists. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns the title case equivalent of c if it exists, otherwise c.
	1:	java.lang.Character public static int toTitleCase (int codePoint) Returns the title case equivalent for the specified code point if it exists. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns the title case equivalent of codePoint if it exists, otherwise codePoint.
	2:	java.lang.Character.Subset protected Character.Subset (String name) Constructs a new Subset.
	3:	java.lang.Character public static String toString (char value) Converts the specified character to its string representation. Parameters value the character to convert. Returns the character converted to a string.
	4:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock forName (String blockName) Returns the Unicode block for the given block name, or null if there is no such block. Block names may be one of the following: Canonical block name, as defined by the Unicode specification; case-insensitive. Canonical block name without any spaces, as defined by the Unicode specification; case-insensitive. A UnicodeBlock constant identifier. This is determined by converting the canonical name to uppercase and replacing all spaces and hyphens with underscores. Throws NullPointerException if blockName == null. IllegalArgumentException if blockName is not the name of any known block.
	5:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock of (char c) Returns the Unicode block containing the given code point, or null if the code point does not belong to any known block.
	6:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock of (int codePoint) Returns the Unicode block containing the given code point, or null if the code point does not belong to any known block.
	7:	java.lang.Character.Subset public final String toString () Returns this subset's name. Returns a printable representation of this object.
	8:	java.lang.Character public static byte getDirectionality (int codePoint) Gets the Unicode directionality of the specified character. Parameters codePoint the Unicode code point to get the directionality of. Returns the Unicode directionality of codePoint.
	9:	java.lang.Character public static byte getDirectionality (char c) Gets the Unicode directionality of the specified character. Parameters c the character to get the directionality of. Returns the Unicode directionality of c.
drawString
Draws the specified String using the current font and color
	0:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock forName (String blockName) Returns the Unicode block for the given block name, or null if there is no such block. Block names may be one of the following: Canonical block name, as defined by the Unicode specification; case-insensitive. Canonical block name without any spaces, as defined by the Unicode specification; case-insensitive. A UnicodeBlock constant identifier. This is determined by converting the canonical name to uppercase and replacing all spaces and hyphens with underscores. Throws NullPointerException if blockName == null. IllegalArgumentException if blockName is not the name of any known block.
	1:	java.lang.Character.Subset protected Character.Subset (String name) Constructs a new Subset.
	2:	java.lang.Character public static String toString (char value) Converts the specified character to its string representation. Parameters value the character to convert. Returns the character converted to a string.
	3:	java.lang.Character.Subset public final String toString () Returns this subset's name. Returns a printable representation of this object.
	4:	java.lang.Character public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	5:	java.lang.Character public static char toLowerCase (char c) Returns the lower case equivalent for the specified character if the character is an upper case letter. Otherwise, the specified character is returned unchanged. Parameters c the character Returns if c is an upper case character then its lower case counterpart, otherwise just c.
	6:	java.lang.Character public static int toLowerCase (int codePoint) Returns the lower case equivalent for the specified code point if it is an upper case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to check. Returns if codePoint is an upper case character then its lower case counterpart, otherwise just codePoint.
	7:	java.lang.Character public static char toUpperCase (char c) Returns the upper case equivalent for the specified character if the character is a lower case letter. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns if c is a lower case character then its upper case counterpart, otherwise just c.
	8:	java.lang.Character public static int toUpperCase (int codePoint) Returns the upper case equivalent for the specified code point if the code point is a lower case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns if codePoint is a lower case character then its upper case counterpart, otherwise just codePoint.
	9:	java.lang.Character public static char toTitleCase (char c) Returns the title case equivalent for the specified character if it exists. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns the title case equivalent of c if it exists, otherwise c.
drawSubstring
Draws the specified String using the current font and color
	0:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock forName (String blockName) Returns the Unicode block for the given block name, or null if there is no such block. Block names may be one of the following: Canonical block name, as defined by the Unicode specification; case-insensitive. Canonical block name without any spaces, as defined by the Unicode specification; case-insensitive. A UnicodeBlock constant identifier. This is determined by converting the canonical name to uppercase and replacing all spaces and hyphens with underscores. Throws NullPointerException if blockName == null. IllegalArgumentException if blockName is not the name of any known block.
	1:	java.lang.Character.Subset protected Character.Subset (String name) Constructs a new Subset.
	2:	java.lang.Character public static String toString (char value) Converts the specified character to its string representation. Parameters value the character to convert. Returns the character converted to a string.
	3:	java.lang.Character.Subset public final String toString () Returns this subset's name. Returns a printable representation of this object.
	4:	java.lang.Character public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	5:	java.lang.Character public static char toLowerCase (char c) Returns the lower case equivalent for the specified character if the character is an upper case letter. Otherwise, the specified character is returned unchanged. Parameters c the character Returns if c is an upper case character then its lower case counterpart, otherwise just c.
	6:	java.lang.Character public static int toLowerCase (int codePoint) Returns the lower case equivalent for the specified code point if it is an upper case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to check. Returns if codePoint is an upper case character then its lower case counterpart, otherwise just codePoint.
	7:	java.lang.Character public static char toUpperCase (char c) Returns the upper case equivalent for the specified character if the character is a lower case letter. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns if c is a lower case character then its upper case counterpart, otherwise just c.
	8:	java.lang.Character public static int toUpperCase (int codePoint) Returns the upper case equivalent for the specified code point if the code point is a lower case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns if codePoint is a lower case character then its upper case counterpart, otherwise just codePoint.
	9:	java.lang.Character public static char toTitleCase (char c) Returns the title case equivalent for the specified character if it exists. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns the title case equivalent of c if it exists, otherwise c.
drawChar
Draws the specified character using the current font and color
	0:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock forName (String blockName) Returns the Unicode block for the given block name, or null if there is no such block. Block names may be one of the following: Canonical block name, as defined by the Unicode specification; case-insensitive. Canonical block name without any spaces, as defined by the Unicode specification; case-insensitive. A UnicodeBlock constant identifier. This is determined by converting the canonical name to uppercase and replacing all spaces and hyphens with underscores. Throws NullPointerException if blockName == null. IllegalArgumentException if blockName is not the name of any known block.
	1:	java.lang.Character public static char toLowerCase (char c) Returns the lower case equivalent for the specified character if the character is an upper case letter. Otherwise, the specified character is returned unchanged. Parameters c the character Returns if c is an upper case character then its lower case counterpart, otherwise just c.
	2:	java.lang.Character public static int toLowerCase (int codePoint) Returns the lower case equivalent for the specified code point if it is an upper case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to check. Returns if codePoint is an upper case character then its lower case counterpart, otherwise just codePoint.
	3:	java.lang.Character public static char toUpperCase (char c) Returns the upper case equivalent for the specified character if the character is a lower case letter. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns if c is a lower case character then its upper case counterpart, otherwise just c.
	4:	java.lang.Character public static int toUpperCase (int codePoint) Returns the upper case equivalent for the specified code point if the code point is a lower case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns if codePoint is a lower case character then its upper case counterpart, otherwise just codePoint.
	5:	java.lang.Character public static char toTitleCase (char c) Returns the title case equivalent for the specified character if it exists. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns the title case equivalent of c if it exists, otherwise c.
	6:	java.lang.Character public static int toTitleCase (int codePoint) Returns the title case equivalent for the specified code point if it exists. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns the title case equivalent of codePoint if it exists, otherwise codePoint.
	7:	java.lang.Character public static int charCount (int codePoint) Calculates the number of char values required to represent the specified Unicode code point. This method checks if the codePoint is greater than or equal to 0x10000, in which case 2 is returned, otherwise 1. To test if the code point is valid, use the isValidCodePoint(int) method. Parameters codePoint the code point for which to calculate the number of required chars. Returns 2 if codePoint >= 0x10000; 1 otherwise. See Also isValidCodePoint(int) isSupplementaryCodePoint(int)
	8:	java.lang.Character.Subset protected Character.Subset (String name) Constructs a new Subset.
	9:	java.lang.Character public static String toString (char value) Converts the specified character to its string representation. Parameters value the character to convert. Returns the character converted to a string.
drawChars
Draws the specified characters using the current font and color
	0:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock forName (String blockName) Returns the Unicode block for the given block name, or null if there is no such block. Block names may be one of the following: Canonical block name, as defined by the Unicode specification; case-insensitive. Canonical block name without any spaces, as defined by the Unicode specification; case-insensitive. A UnicodeBlock constant identifier. This is determined by converting the canonical name to uppercase and replacing all spaces and hyphens with underscores. Throws NullPointerException if blockName == null. IllegalArgumentException if blockName is not the name of any known block.
	1:	java.lang.Character public static char toLowerCase (char c) Returns the lower case equivalent for the specified character if the character is an upper case letter. Otherwise, the specified character is returned unchanged. Parameters c the character Returns if c is an upper case character then its lower case counterpart, otherwise just c.
	2:	java.lang.Character public static int toLowerCase (int codePoint) Returns the lower case equivalent for the specified code point if it is an upper case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to check. Returns if codePoint is an upper case character then its lower case counterpart, otherwise just codePoint.
	3:	java.lang.Character public static char toUpperCase (char c) Returns the upper case equivalent for the specified character if the character is a lower case letter. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns if c is a lower case character then its upper case counterpart, otherwise just c.
	4:	java.lang.Character public static int toUpperCase (int codePoint) Returns the upper case equivalent for the specified code point if the code point is a lower case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns if codePoint is a lower case character then its upper case counterpart, otherwise just codePoint.
	5:	java.lang.Character public static char toTitleCase (char c) Returns the title case equivalent for the specified character if it exists. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns the title case equivalent of c if it exists, otherwise c.
	6:	java.lang.Character public static int toTitleCase (int codePoint) Returns the title case equivalent for the specified code point if it exists. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns the title case equivalent of codePoint if it exists, otherwise codePoint.
	7:	java.lang.Character public static int charCount (int codePoint) Calculates the number of char values required to represent the specified Unicode code point. This method checks if the codePoint is greater than or equal to 0x10000, in which case 2 is returned, otherwise 1. To test if the code point is valid, use the isValidCodePoint(int) method. Parameters codePoint the code point for which to calculate the number of required chars. Returns 2 if codePoint >= 0x10000; 1 otherwise. See Also isValidCodePoint(int) isSupplementaryCodePoint(int)
	8:	java.lang.Character.Subset protected Character.Subset (String name) Constructs a new Subset.
	9:	java.lang.Character public static String toString (char value) Converts the specified character to its string representation. Parameters value the character to convert. Returns the character converted to a string.
drawImage
Draws the specified image by using the anchor point
	0:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock of (char c) Returns the Unicode block containing the given code point, or null if the code point does not belong to any known block.
	1:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock of (int codePoint) Returns the Unicode block containing the given code point, or null if the code point does not belong to any known block.
	2:	java.lang.Character public static int getType (int codePoint) Gets the general Unicode category of the specified code point. Parameters codePoint the Unicode code point to get the category of. Returns the Unicode category of codePoint.
	3:	java.lang.Character public static String getName (int codePoint) Returns a human-readable name for the given code point, or null if the code point is unassigned. As a fallback mechanism this method returns strings consisting of the Unicode block name (with underscores replaced by spaces), a single space, and the uppercase hex value of the code point, using as few digits as necessary. Examples: Character.getName(0) returns "NULL". Character.getName('e') returns "LATIN SMALL LETTER E". Character.getName('٦') returns "ARABIC-INDIC DIGIT SIX". Character.getName(0xe000) returns "PRIVATE USE AREA E000". Note that the exact strings returned will vary from release to release. Throws IllegalArgumentException if codePoint is not a valid code point.
	4:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	5:	java.lang.Character public static byte getDirectionality (int codePoint) Gets the Unicode directionality of the specified character. Parameters codePoint the Unicode code point to get the directionality of. Returns the Unicode directionality of codePoint.
	6:	java.lang.Character public static boolean isSpaceChar (int codePoint) Returns true if the given code point is a Unicode space character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are considered whitespace. Note also that line separators are not considered whitespace; see isWhitespace(char) for an alternative.
	7:	java.lang.Character public static boolean isWhitespace (int codePoint) Returns true if the given code point is a Unicode whitespace character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are not considered whitespace. Note also that line separators are considered whitespace; see isSpaceChar(char) for an alternative.
	8:	java.lang.Character public static boolean isSupplementaryCodePoint (int codePoint) Indicates whether codePoint is within the supplementary code point range. Parameters codePoint the code point to test. Returns true if codePoint is within the supplementary code point range; false otherwise.
	9:	java.lang.Character public static boolean isValidCodePoint (int codePoint) Indicates whether codePoint is a valid Unicode code point. Parameters codePoint the code point to test. Returns true if codePoint is a valid Unicode code point; false otherwise.
drawRegion
Copies a region of the specified source image to a location within the destination, possibly transforming (rotating and reflecting) the image data using the chosen transform function
	0:	java.lang.Character public static boolean isSupplementaryCodePoint (int codePoint) Indicates whether codePoint is within the supplementary code point range. Parameters codePoint the code point to test. Returns true if codePoint is within the supplementary code point range; false otherwise.
	1:	java.lang.Character public static boolean isJavaIdentifierPart (int codePoint) Indicates whether the specified code point is a valid part of a Java identifier other than the first character. Parameters codePoint the code point to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	2:	java.lang.Character public static boolean isJavaIdentifierPart (char c) Indicates whether the specified character is a valid part of a Java identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	3:	java.lang.Character public static boolean isUnicodeIdentifierPart (int codePoint) Indicates whether the specified code point is valid as part of a Unicode identifier other than the first character. Parameters codePoint the code point to check. Returns true if codePoint is valid as part of a Unicode identifier; false otherwise.
	4:	java.lang.Character public static boolean isUnicodeIdentifierPart (char c) Indicates whether the specified character is valid as part of a Unicode identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Unicode identifier; false otherwise.
	5:	java.lang.Character public static String getName (int codePoint) Returns a human-readable name for the given code point, or null if the code point is unassigned. As a fallback mechanism this method returns strings consisting of the Unicode block name (with underscores replaced by spaces), a single space, and the uppercase hex value of the code point, using as few digits as necessary. Examples: Character.getName(0) returns "NULL". Character.getName('e') returns "LATIN SMALL LETTER E". Character.getName('٦') returns "ARABIC-INDIC DIGIT SIX". Character.getName(0xe000) returns "PRIVATE USE AREA E000". Note that the exact strings returned will vary from release to release. Throws IllegalArgumentException if codePoint is not a valid code point.
	6:	java.lang.Character public static boolean isSpace (char c) This method was deprecated in API level 1. Use isWhitespace(char) instead. Use isWhitespace(char) instead.
	7:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	8:	java.lang.Character public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	9:	java.lang.Character public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
copyArea
Copies the contents of a rectangular area (x_src, y_src, width, height) to a destination area, whose anchor point identified by anchor is located at (x_dest, y_dest)
	0:	java.lang.Character public static String getName (int codePoint) Returns a human-readable name for the given code point, or null if the code point is unassigned. As a fallback mechanism this method returns strings consisting of the Unicode block name (with underscores replaced by spaces), a single space, and the uppercase hex value of the code point, using as few digits as necessary. Examples: Character.getName(0) returns "NULL". Character.getName('e') returns "LATIN SMALL LETTER E". Character.getName('٦') returns "ARABIC-INDIC DIGIT SIX". Character.getName(0xe000) returns "PRIVATE USE AREA E000". Note that the exact strings returned will vary from release to release. Throws IllegalArgumentException if codePoint is not a valid code point.
	1:	java.lang.Character public static int getNumericValue (int codePoint) Gets the numeric value of the specified Unicode code point. For example, the code point 'Ⅻ' stands for the Roman number XII, which has the numeric value 12. There are two points of divergence between this method and the Unicode specification. This method treats the letters a-z (in both upper and lower cases, and their full-width variants) as numbers from 10 to 35. The Unicode specification also supports the idea of code points with non-integer numeric values; this method does not (except to the extent of returning -2 for such code points). Parameters codePoint the code point Returns a non-negative numeric integer value if a numeric value for codePoint exists, -1 if there is no numeric value for codePoint, -2 if the numeric value can not be represented with an integer.
	2:	java.lang.Character public static char forDigit (int digit, int radix) Returns the character which represents the specified digit in the specified radix. The radix must be between MIN_RADIX and MAX_RADIX inclusive; digit must not be negative and smaller than radix. If any of these conditions does not hold, 0 is returned. Parameters digit the integer value. radix the radix. Returns the character which represents the digit in the radix.
	3:	java.lang.Character public static boolean isSupplementaryCodePoint (int codePoint) Indicates whether codePoint is within the supplementary code point range. Parameters codePoint the code point to test. Returns true if codePoint is within the supplementary code point range; false otherwise.
	4:	java.lang.Character public static boolean isValidCodePoint (int codePoint) Indicates whether codePoint is a valid Unicode code point. Parameters codePoint the code point to test. Returns true if codePoint is a valid Unicode code point; false otherwise.
	5:	java.lang.Character public static int toUpperCase (int codePoint) Returns the upper case equivalent for the specified code point if the code point is a lower case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns if codePoint is a lower case character then its upper case counterpart, otherwise just codePoint.
	6:	java.lang.Character public static int getType (int codePoint) Gets the general Unicode category of the specified code point. Parameters codePoint the Unicode code point to get the category of. Returns the Unicode category of codePoint.
	7:	java.lang.Character public static char highSurrogate (int codePoint) Returns the high surrogate for the given code point. The result is meaningless if the given code point is not a supplementary character.
	8:	java.lang.Character public static boolean isDigit (int codePoint) Indicates whether the specified code point is a digit. Parameters codePoint the code point to check. Returns true if codePoint is a digit; false otherwise.
	9:	java.lang.Character public static boolean isISOControl (int c) Indicates whether the specified code point is an ISO control character. Parameters c the code point to check. Returns true if c is an ISO control character; false otherwise.
fillTriangle
Fills the specified triangle will the current color
	0:	java.lang.Character public Character (char value) Constructs a new Character with the specified primitive char value. Parameters value the primitive char value to store in the new instance.
	1:	java.lang.Character public static int charCount (int codePoint) Calculates the number of char values required to represent the specified Unicode code point. This method checks if the codePoint is greater than or equal to 0x10000, in which case 2 is returned, otherwise 1. To test if the code point is valid, use the isValidCodePoint(int) method. Parameters codePoint the code point for which to calculate the number of required chars. Returns 2 if codePoint >= 0x10000; 1 otherwise. See Also isValidCodePoint(int) isSupplementaryCodePoint(int)
	2:	java.lang.Character public char charValue () Gets the primitive value of this character. Returns this object's primitive value.
	3:	java.lang.Character public static int codePointAt (char[] seq, int index) Returns the code point at index in the specified array of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the array and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	4:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	5:	java.lang.Character public static int codePointAt (CharSequence seq, int index) Returns the code point at index in the specified sequence of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the sequence and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source sequence of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	6:	java.lang.Character public static int codePointBefore (CharSequence seq, int index) Returns the code point that precedes index in the specified sequence of character units. If the unit at index - 1 is a low-surrogate unit, index - 2 is not negative and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source sequence of char units. index the position in seq following the code point that should be returned. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is less than 1 or greater than the length of seq.
	7:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	8:	java.lang.Character public static int codePointBefore (char[] seq, int index) Returns the code point that precedes index in the specified array of character units. If the unit at index - 1 is a low-surrogate unit, index - 2 is not negative and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is less than 1 or greater than the length of seq.
	9:	java.lang.Character public static int codePointCount (CharSequence seq, int beginIndex, int endIndex) Counts the number of Unicode code points in the subsequence of the specified character sequence, as delineated by beginIndex and endIndex. Any surrogate values with missing pair values will be counted as one code point. Parameters seq the CharSequence to look through. beginIndex the inclusive index to begin counting at. endIndex the exclusive index to stop counting at. Returns the number of Unicode code points. Throws NullPointerException if seq is null. IndexOutOfBoundsException if beginIndex < 0, beginIndex > endIndex or if endIndex is greater than the length of seq.
drawRGB
Renders a series of device-independent RGB+transparency values in a specified region
	0:	java.lang.Character public static boolean isJavaIdentifierPart (int codePoint) Indicates whether the specified code point is a valid part of a Java identifier other than the first character. Parameters codePoint the code point to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	1:	java.lang.Character public static boolean isJavaIdentifierPart (char c) Indicates whether the specified character is a valid part of a Java identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	2:	java.lang.Character public static boolean isUnicodeIdentifierPart (int codePoint) Indicates whether the specified code point is valid as part of a Unicode identifier other than the first character. Parameters codePoint the code point to check. Returns true if codePoint is valid as part of a Unicode identifier; false otherwise.
	3:	java.lang.Character public static boolean isUnicodeIdentifierPart (char c) Indicates whether the specified character is valid as part of a Unicode identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Unicode identifier; false otherwise.
	4:	java.lang.Character public static String getName (int codePoint) Returns a human-readable name for the given code point, or null if the code point is unassigned. As a fallback mechanism this method returns strings consisting of the Unicode block name (with underscores replaced by spaces), a single space, and the uppercase hex value of the code point, using as few digits as necessary. Examples: Character.getName(0) returns "NULL". Character.getName('e') returns "LATIN SMALL LETTER E". Character.getName('٦') returns "ARABIC-INDIC DIGIT SIX". Character.getName(0xe000) returns "PRIVATE USE AREA E000". Note that the exact strings returned will vary from release to release. Throws IllegalArgumentException if codePoint is not a valid code point.
	5:	java.lang.Character public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	6:	java.lang.Character public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	7:	java.lang.Character public Character (char value) Constructs a new Character with the specified primitive char value. Parameters value the primitive char value to store in the new instance.
	8:	java.lang.Character public static int charCount (int codePoint) Calculates the number of char values required to represent the specified Unicode code point. This method checks if the codePoint is greater than or equal to 0x10000, in which case 2 is returned, otherwise 1. To test if the code point is valid, use the isValidCodePoint(int) method. Parameters codePoint the code point for which to calculate the number of required chars. Returns 2 if codePoint >= 0x10000; 1 otherwise. See Also isValidCodePoint(int) isSupplementaryCodePoint(int)
	9:	java.lang.Character public char charValue () Gets the primitive value of this character. Returns this object's primitive value.
P

getDisplayColor
Gets the color that will be displayed if the specified color is requested
	0:	java.lang.Character public static boolean isSpaceChar (char c) See isSpaceChar(int).
	1:	java.lang.Character public static boolean isWhitespace (char c) See isWhitespace(int).
	2:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	3:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	4:	java.lang.Character public static boolean isJavaIdentifierStart (int codePoint) Indicates whether the specified code point is a valid first character for a Java identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid start of a Java identifier; false otherwise.
	5:	java.lang.Character public static byte getDirectionality (int codePoint) Gets the Unicode directionality of the specified character. Parameters codePoint the Unicode code point to get the directionality of. Returns the Unicode directionality of codePoint.
	6:	java.lang.Character public static byte getDirectionality (char c) Gets the Unicode directionality of the specified character. Parameters c the character to get the directionality of. Returns the Unicode directionality of c.
	7:	java.lang.Character public static int getType (char c) Gets the general Unicode category of the specified character. Parameters c the character to get the category of. Returns the Unicode category of c.
	8:	java.lang.Character public static int getType (int codePoint) Gets the general Unicode category of the specified code point. Parameters codePoint the Unicode code point to get the category of. Returns the Unicode category of codePoint.
	9:	java.lang.Character public static Character valueOf (char c) Returns a Character instance for the char value passed. If it is not necessary to get a new Character instance, it is recommended to use this method instead of the constructor, since it maintains a cache of instances which may result in better performance. Parameters c the char value for which to get a Character instance. Returns the Character instance for c.
setPosition
Sets this Layer's position such that its upper-left corner is located at (x,y) in the painter's coordinate system
	0:	java.util.logging.Level public final String toString () Returns the string representation of this Level object. In this case, it is the level's name. Returns the string representation of this level.
	1:	java.util.logging.Level protected Level (String name, int level) Constructs an instance of Level taking the supplied name and level value. Parameters name the name of the level. level an integer value indicating the level. Throws NullPointerException if name is null.
	2:	java.util.logging.Level protected Level (String name, int level, String resourceBundleName) Constructs an instance of Level taking the supplied name, level value and resource bundle name. Parameters name the name of the level. level an integer value indicating the level. resourceBundleName the name of the resource bundle to use. Throws NullPointerException if name is null.
	3:	java.util.logging.Level public String getLocalizedName () Gets the localized name of this level. The default locale is used. If no resource bundle is associated with this level then the original level name is returned. Returns the localized name of this level.
	4:	java.util.logging.Level public static Level parse (String name) Parses a level name into a Level object. Parameters name the name of the desired level, which cannot be null. Returns the level with the specified name. Throws NullPointerException if name is null. IllegalArgumentException if name is not valid.
	5:	java.util.logging.Level public String getName () Gets the name of this level. Returns this level's name.
	6:	java.util.logging.Level public int hashCode () Returns the hash code of this Level object. Returns this level's hash code.
	7:	java.util.logging.Level public final int intValue () Gets the integer value indicating this level. Returns this level's integer value.
	8:	java.util.logging.Level public boolean equals (Object o) Compares two Level objects for equality. They are considered to be equal if they have the same level value. Parameters o the other object to compare this level to. Returns true if this object equals to the supplied object, false otherwise.
	9:	java.util.logging.Level public String getResourceBundleName () Gets the name of the resource bundle associated with this level. Returns the name of this level's resource bundle.
move
Moves this Layer by the specified horizontal and vertical distances
	0:	java.util.logging.Level protected Level (String name, int level) Constructs an instance of Level taking the supplied name and level value. Parameters name the name of the level. level an integer value indicating the level. Throws NullPointerException if name is null.
	1:	java.util.logging.Level protected Level (String name, int level, String resourceBundleName) Constructs an instance of Level taking the supplied name, level value and resource bundle name. Parameters name the name of the level. level an integer value indicating the level. resourceBundleName the name of the resource bundle to use. Throws NullPointerException if name is null.
	2:	java.util.logging.Level public String getLocalizedName () Gets the localized name of this level. The default locale is used. If no resource bundle is associated with this level then the original level name is returned. Returns the localized name of this level.
	3:	java.util.logging.Level public static Level parse (String name) Parses a level name into a Level object. Parameters name the name of the desired level, which cannot be null. Returns the level with the specified name. Throws NullPointerException if name is null. IllegalArgumentException if name is not valid.
	4:	java.util.logging.Level public String getName () Gets the name of this level. Returns this level's name.
	5:	java.util.logging.Level public final String toString () Returns the string representation of this Level object. In this case, it is the level's name. Returns the string representation of this level.
	6:	java.util.logging.Level public int hashCode () Returns the hash code of this Level object. Returns this level's hash code.
	7:	java.util.logging.Level public final int intValue () Gets the integer value indicating this level. Returns this level's integer value.
	8:	java.util.logging.Level public boolean equals (Object o) Compares two Level objects for equality. They are considered to be equal if they have the same level value. Parameters o the other object to compare this level to. Returns true if this object equals to the supplied object, false otherwise.
	9:	java.util.logging.Level public String getResourceBundleName () Gets the name of the resource bundle associated with this level. Returns the name of this level's resource bundle.
getX
Gets the horizontal position of this Layer's upper-left corner in the painter's coordinate system
	0:	java.util.logging.Level public boolean equals (Object o) Compares two Level objects for equality. They are considered to be equal if they have the same level value. Parameters o the other object to compare this level to. Returns true if this object equals to the supplied object, false otherwise.
	1:	java.util.logging.Level protected Level (String name, int level) Constructs an instance of Level taking the supplied name and level value. Parameters name the name of the level. level an integer value indicating the level. Throws NullPointerException if name is null.
	2:	java.util.logging.Level protected Level (String name, int level, String resourceBundleName) Constructs an instance of Level taking the supplied name, level value and resource bundle name. Parameters name the name of the level. level an integer value indicating the level. resourceBundleName the name of the resource bundle to use. Throws NullPointerException if name is null.
	3:	java.util.logging.Level public String getLocalizedName () Gets the localized name of this level. The default locale is used. If no resource bundle is associated with this level then the original level name is returned. Returns the localized name of this level.
	4:	java.util.logging.Level public static Level parse (String name) Parses a level name into a Level object. Parameters name the name of the desired level, which cannot be null. Returns the level with the specified name. Throws NullPointerException if name is null. IllegalArgumentException if name is not valid.
	5:	java.util.logging.Level public String getName () Gets the name of this level. Returns this level's name.
	6:	java.util.logging.Level public final String toString () Returns the string representation of this Level object. In this case, it is the level's name. Returns the string representation of this level.
	7:	java.util.logging.Level public int hashCode () Returns the hash code of this Level object. Returns this level's hash code.
	8:	java.util.logging.Level public final int intValue () Gets the integer value indicating this level. Returns this level's integer value.
	9:	java.util.logging.Level public String getResourceBundleName () Gets the name of the resource bundle associated with this level. Returns the name of this level's resource bundle.
getY
Gets the vertical position of this Layer's upper-left corner in the painter's coordinate system
	0:	java.util.logging.Level public boolean equals (Object o) Compares two Level objects for equality. They are considered to be equal if they have the same level value. Parameters o the other object to compare this level to. Returns true if this object equals to the supplied object, false otherwise.
	1:	java.util.logging.Level protected Level (String name, int level) Constructs an instance of Level taking the supplied name and level value. Parameters name the name of the level. level an integer value indicating the level. Throws NullPointerException if name is null.
	2:	java.util.logging.Level protected Level (String name, int level, String resourceBundleName) Constructs an instance of Level taking the supplied name, level value and resource bundle name. Parameters name the name of the level. level an integer value indicating the level. resourceBundleName the name of the resource bundle to use. Throws NullPointerException if name is null.
	3:	java.util.logging.Level public String getLocalizedName () Gets the localized name of this level. The default locale is used. If no resource bundle is associated with this level then the original level name is returned. Returns the localized name of this level.
	4:	java.util.logging.Level public static Level parse (String name) Parses a level name into a Level object. Parameters name the name of the desired level, which cannot be null. Returns the level with the specified name. Throws NullPointerException if name is null. IllegalArgumentException if name is not valid.
	5:	java.util.logging.Level public String getName () Gets the name of this level. Returns this level's name.
	6:	java.util.logging.Level public final String toString () Returns the string representation of this Level object. In this case, it is the level's name. Returns the string representation of this level.
	7:	java.util.logging.Level public int hashCode () Returns the hash code of this Level object. Returns this level's hash code.
	8:	java.util.logging.Level public final int intValue () Gets the integer value indicating this level. Returns this level's integer value.
	9:	java.util.logging.Level public String getResourceBundleName () Gets the name of the resource bundle associated with this level. Returns the name of this level's resource bundle.
getWidth
Gets the current width of this layer, in pixels
	0:	java.util.logging.Level public boolean equals (Object o) Compares two Level objects for equality. They are considered to be equal if they have the same level value. Parameters o the other object to compare this level to. Returns true if this object equals to the supplied object, false otherwise.
	1:	java.util.logging.Level protected Level (String name, int level) Constructs an instance of Level taking the supplied name and level value. Parameters name the name of the level. level an integer value indicating the level. Throws NullPointerException if name is null.
	2:	java.util.logging.Level protected Level (String name, int level, String resourceBundleName) Constructs an instance of Level taking the supplied name, level value and resource bundle name. Parameters name the name of the level. level an integer value indicating the level. resourceBundleName the name of the resource bundle to use. Throws NullPointerException if name is null.
	3:	java.util.logging.Level public String getLocalizedName () Gets the localized name of this level. The default locale is used. If no resource bundle is associated with this level then the original level name is returned. Returns the localized name of this level.
	4:	java.util.logging.Level public static Level parse (String name) Parses a level name into a Level object. Parameters name the name of the desired level, which cannot be null. Returns the level with the specified name. Throws NullPointerException if name is null. IllegalArgumentException if name is not valid.
	5:	java.util.logging.Level public String getName () Gets the name of this level. Returns this level's name.
	6:	java.util.logging.Level public final String toString () Returns the string representation of this Level object. In this case, it is the level's name. Returns the string representation of this level.
	7:	java.util.logging.Level public int hashCode () Returns the hash code of this Level object. Returns this level's hash code.
	8:	java.util.logging.Level public final int intValue () Gets the integer value indicating this level. Returns this level's integer value.
	9:	java.util.logging.Level public String getResourceBundleName () Gets the name of the resource bundle associated with this level. Returns the name of this level's resource bundle.
getHeight
Gets the current height of this layer, in pixels
	0:	java.util.logging.Level public boolean equals (Object o) Compares two Level objects for equality. They are considered to be equal if they have the same level value. Parameters o the other object to compare this level to. Returns true if this object equals to the supplied object, false otherwise.
	1:	java.util.logging.Level protected Level (String name, int level) Constructs an instance of Level taking the supplied name and level value. Parameters name the name of the level. level an integer value indicating the level. Throws NullPointerException if name is null.
	2:	java.util.logging.Level protected Level (String name, int level, String resourceBundleName) Constructs an instance of Level taking the supplied name, level value and resource bundle name. Parameters name the name of the level. level an integer value indicating the level. resourceBundleName the name of the resource bundle to use. Throws NullPointerException if name is null.
	3:	java.util.logging.Level public String getLocalizedName () Gets the localized name of this level. The default locale is used. If no resource bundle is associated with this level then the original level name is returned. Returns the localized name of this level.
	4:	java.util.logging.Level public static Level parse (String name) Parses a level name into a Level object. Parameters name the name of the desired level, which cannot be null. Returns the level with the specified name. Throws NullPointerException if name is null. IllegalArgumentException if name is not valid.
	5:	java.util.logging.Level public String getName () Gets the name of this level. Returns this level's name.
	6:	java.util.logging.Level public final String toString () Returns the string representation of this Level object. In this case, it is the level's name. Returns the string representation of this level.
	7:	java.util.logging.Level public int hashCode () Returns the hash code of this Level object. Returns this level's hash code.
	8:	java.util.logging.Level public final int intValue () Gets the integer value indicating this level. Returns this level's integer value.
	9:	java.util.logging.Level public String getResourceBundleName () Gets the name of the resource bundle associated with this level. Returns the name of this level's resource bundle.
setVisible
Sets the visibility of this Layer
	0:	java.util.logging.Level protected Level (String name, int level) Constructs an instance of Level taking the supplied name and level value. Parameters name the name of the level. level an integer value indicating the level. Throws NullPointerException if name is null.
	1:	java.util.logging.Level protected Level (String name, int level, String resourceBundleName) Constructs an instance of Level taking the supplied name, level value and resource bundle name. Parameters name the name of the level. level an integer value indicating the level. resourceBundleName the name of the resource bundle to use. Throws NullPointerException if name is null.
	2:	java.util.logging.Level public String getLocalizedName () Gets the localized name of this level. The default locale is used. If no resource bundle is associated with this level then the original level name is returned. Returns the localized name of this level.
	3:	java.util.logging.Level public static Level parse (String name) Parses a level name into a Level object. Parameters name the name of the desired level, which cannot be null. Returns the level with the specified name. Throws NullPointerException if name is null. IllegalArgumentException if name is not valid.
	4:	java.util.logging.Level public String getName () Gets the name of this level. Returns this level's name.
	5:	java.util.logging.Level public final String toString () Returns the string representation of this Level object. In this case, it is the level's name. Returns the string representation of this level.
	6:	java.util.logging.Level public int hashCode () Returns the hash code of this Level object. Returns this level's hash code.
	7:	java.util.logging.Level public final int intValue () Gets the integer value indicating this level. Returns this level's integer value.
	8:	java.util.logging.Level public boolean equals (Object o) Compares two Level objects for equality. They are considered to be equal if they have the same level value. Parameters o the other object to compare this level to. Returns true if this object equals to the supplied object, false otherwise.
	9:	java.util.logging.Level public String getResourceBundleName () Gets the name of the resource bundle associated with this level. Returns the name of this level's resource bundle.
isVisible
Gets the visibility of this Layer
	0:	java.util.logging.Level public boolean equals (Object o) Compares two Level objects for equality. They are considered to be equal if they have the same level value. Parameters o the other object to compare this level to. Returns true if this object equals to the supplied object, false otherwise.
	1:	java.util.logging.Level protected Level (String name, int level) Constructs an instance of Level taking the supplied name and level value. Parameters name the name of the level. level an integer value indicating the level. Throws NullPointerException if name is null.
	2:	java.util.logging.Level protected Level (String name, int level, String resourceBundleName) Constructs an instance of Level taking the supplied name, level value and resource bundle name. Parameters name the name of the level. level an integer value indicating the level. resourceBundleName the name of the resource bundle to use. Throws NullPointerException if name is null.
	3:	java.util.logging.Level public String getLocalizedName () Gets the localized name of this level. The default locale is used. If no resource bundle is associated with this level then the original level name is returned. Returns the localized name of this level.
	4:	java.util.logging.Level public static Level parse (String name) Parses a level name into a Level object. Parameters name the name of the desired level, which cannot be null. Returns the level with the specified name. Throws NullPointerException if name is null. IllegalArgumentException if name is not valid.
	5:	java.util.logging.Level public String getName () Gets the name of this level. Returns this level's name.
	6:	java.util.logging.Level public final String toString () Returns the string representation of this Level object. In this case, it is the level's name. Returns the string representation of this level.
	7:	java.util.logging.Level public int hashCode () Returns the hash code of this Level object. Returns this level's hash code.
	8:	java.util.logging.Level public final int intValue () Gets the integer value indicating this level. Returns this level's integer value.
	9:	java.util.logging.Level public String getResourceBundleName () Gets the name of the resource bundle associated with this level. Returns the name of this level's resource bundle.
paint
Paints this Layer if it is visible
	0:	java.util.logging.Level protected Level (String name, int level) Constructs an instance of Level taking the supplied name and level value. Parameters name the name of the level. level an integer value indicating the level. Throws NullPointerException if name is null.
	1:	java.util.logging.Level protected Level (String name, int level, String resourceBundleName) Constructs an instance of Level taking the supplied name, level value and resource bundle name. Parameters name the name of the level. level an integer value indicating the level. resourceBundleName the name of the resource bundle to use. Throws NullPointerException if name is null.
	2:	java.util.logging.Level public String getLocalizedName () Gets the localized name of this level. The default locale is used. If no resource bundle is associated with this level then the original level name is returned. Returns the localized name of this level.
	3:	java.util.logging.Level public static Level parse (String name) Parses a level name into a Level object. Parameters name the name of the desired level, which cannot be null. Returns the level with the specified name. Throws NullPointerException if name is null. IllegalArgumentException if name is not valid.
	4:	java.util.logging.Level public String getName () Gets the name of this level. Returns this level's name.
	5:	java.util.logging.Level public final String toString () Returns the string representation of this Level object. In this case, it is the level's name. Returns the string representation of this level.
	6:	java.util.logging.Level public int hashCode () Returns the hash code of this Level object. Returns this level's hash code.
	7:	java.util.logging.Level public final int intValue () Gets the integer value indicating this level. Returns this level's integer value.
	8:	java.util.logging.Level public boolean equals (Object o) Compares two Level objects for equality. They are considered to be equal if they have the same level value. Parameters o the other object to compare this level to. Returns true if this object equals to the supplied object, false otherwise.
	9:	java.util.logging.Level public String getResourceBundleName () Gets the name of the resource bundle associated with this level. Returns the name of this level's resource bundle.
Sprite
Creates a new non-animated Sprite using the provided Image
	0:	java.util.Locale public String getDisplayName (Locale locale) Returns this locale's language name, country name, and variant, localized to locale. The exact output form depends on whether this locale corresponds to a specific language, country and variant. For example: new Locale("en").getDisplayName(Locale.US) -> English new Locale("en", "US").getDisplayName(Locale.US) -> English (United States) new Locale("en", "US", "POSIX").getDisplayName(Locale.US) -> English (United States,Computer) new Locale("en").getDisplayName(Locale.FRANCE) -> anglais new Locale("en", "US").getDisplayName(Locale.FRANCE) -> anglais (États-Unis) new Locale("en", "US", "POSIX").getDisplayName(Locale.FRANCE) -> anglais (États-Unis,informatique).
	1:	java.util.Currency public String getSymbol (Locale locale) Returns the localized currency symbol for this currency in locale. That is, given "USD" and Locale.US, you'd get "$", but given "USD" and a non-US locale, you'd get "US$". If the locale only specifies a language rather than a language and a country (such as Locale.JAPANESE or {new Locale("en", "")} rather than Locale.JAPAN or {new Locale("en", "US")}), the ISO 4217 currency code is returned. If there is no locale-specific currency symbol, the ISO 4217 currency code is returned.
	2:	android.os.Message public static Message obtain () Return a new Message instance from the global pool. Allows us to avoid allocating new objects in many cases.
	3:	android.support.v4.text.ICUCompat public static String addLikelySubtags (String locale) Add the likely subtags for a provided locale ID, per the algorithm described in the following CLDR technical report: http://www.unicode.org/reports/tr35/#Likely_Subtags If locale is already in the maximal form, or there is no data available for maximization, it will be just returned. For example, "und-Zzzz" cannot be maximized, since there is no reasonable maximization. Examples: "en" maximizes to "en_Latn_US" "de" maximizes to "de_Latn_US" "sr" maximizes to "sr_Cyrl_RS" "sh" maximizes to "sr_Latn_RS" (Note this will not reverse.) "zh_Hani" maximizes to "zh_Hans_CN" (Note this will not reverse.) Parameters locale The locale to maximize Returns the maximized locale
	4:	org.apache.http.message.BasicTokenIterator protected boolean isTokenChar (char ch) Checks whether a character is a valid token character. Whitespace, control characters, and HTTP separators are not valid token characters. The HTTP specification (RFC 2616, section 2.2) defines tokens only for the US-ASCII character set, this method extends the definition to other character sets. Parameters ch the character to check Returns true if the character is a valid token start, false otherwise
	5:	android.provider.MediaStore.Audio public static String keyFor (String name) Converts a name to a "key" that can be used for grouping, sorting and searching. The rules that govern this conversion are: - remove 'special' characters like ()[]'!?., - remove leading/trailing spaces - convert everything to lowercase - remove leading "the ", "an " and "a " - remove trailing ", the|an|a" - remove accents. This step leaves us with CollationKey data, which is not human readable Parameters name The artist or album name to convert Returns The "key" for the given name.
	6:	android.text.format.DateUtils public static String formatElapsedTime (long elapsedSeconds) Formats an elapsed time in the form "MM:SS" or "H:MM:SS" for display on the call-in-progress screen. Parameters elapsedSeconds the elapsed time in seconds.
	7:	android.widget.Chronometer public void setFormat (String format) Sets the format string used for display. The Chronometer will display this string, with the first "%s" replaced by the current timer value in "MM:SS" or "H:MM:SS" form. If the format string is null, or if you never call setFormat(), the Chronometer will simply display the timer value in "MM:SS" or "H:MM:SS" form. Parameters format the format string.
	8:	java.util.Currency public int getDefaultFractionDigits () Returns the default number of fraction digits for this currency. For instance, the default number of fraction digits for the US dollar is 2 because there are 100 US cents in a US dollar. For the Japanese Yen, the number is 0 because coins smaller than 1 Yen became invalid in 1953. In the case of pseudo-currencies, such as IMF Special Drawing Rights, -1 is returned.
	9:	android.location.Address public String getCountryCode () Returns the country code of the address, for example "US", or null if it is unknown.
Sprite
Creates a new animated Sprite using frames contained in the provided Image
	0:	java.util.Locale public String getDisplayName (Locale locale) Returns this locale's language name, country name, and variant, localized to locale. The exact output form depends on whether this locale corresponds to a specific language, country and variant. For example: new Locale("en").getDisplayName(Locale.US) -> English new Locale("en", "US").getDisplayName(Locale.US) -> English (United States) new Locale("en", "US", "POSIX").getDisplayName(Locale.US) -> English (United States,Computer) new Locale("en").getDisplayName(Locale.FRANCE) -> anglais new Locale("en", "US").getDisplayName(Locale.FRANCE) -> anglais (États-Unis) new Locale("en", "US", "POSIX").getDisplayName(Locale.FRANCE) -> anglais (États-Unis,informatique).
	1:	android.text.format.DateUtils public static String formatElapsedTime (long elapsedSeconds) Formats an elapsed time in the form "MM:SS" or "H:MM:SS" for display on the call-in-progress screen. Parameters elapsedSeconds the elapsed time in seconds.
	2:	android.widget.Chronometer public void setFormat (String format) Sets the format string used for display. The Chronometer will display this string, with the first "%s" replaced by the current timer value in "MM:SS" or "H:MM:SS" form. If the format string is null, or if you never call setFormat(), the Chronometer will simply display the timer value in "MM:SS" or "H:MM:SS" form. Parameters format the format string.
	3:	android.os.Message public static Message obtain () Return a new Message instance from the global pool. Allows us to avoid allocating new objects in many cases.
	4:	android.text.format.DateUtils public static String formatElapsedTime (StringBuilder recycle, long elapsedSeconds) Formats an elapsed time in a format like "MM:SS" or "H:MM:SS" (using a form suited to the current locale), similar to that used on the call-in-progress screen. Parameters recycle StringBuilder to recycle, or null to use a temporary one. elapsedSeconds the elapsed time in seconds.
	5:	android.view.Choreographer.FrameCallback public abstract void doFrame (long frameTimeNanos) Called when a new display frame is being rendered. This method provides the time in nanoseconds when the frame started being rendered. The frame time provides a stable time base for synchronizing animations and drawing. It should be used instead of uptimeMillis() or nanoTime() for animations and drawing in the UI. Using the frame time helps to reduce inter-frame jitter because the frame time is fixed at the time the frame was scheduled to start, regardless of when the animations or drawing callback actually runs. All callbacks that run as part of rendering a frame will observe the same frame time so using the frame time also helps to synchronize effects that are performed by different callbacks. Please note that the framework already takes care to process animations and drawing using the frame time as a stable time base. Most applications should not need to use the frame time information directly. Parameters frameTimeNanos The time in nanoseconds when the frame started being rendered, in the nanoTime() timebase. Divide this value by 1000000 to convert it to the uptimeMillis() time base.
	6:	java.util.Currency public String getSymbol (Locale locale) Returns the localized currency symbol for this currency in locale. That is, given "USD" and Locale.US, you'd get "$", but given "USD" and a non-US locale, you'd get "US$". If the locale only specifies a language rather than a language and a country (such as Locale.JAPANESE or {new Locale("en", "")} rather than Locale.JAPAN or {new Locale("en", "US")}), the ISO 4217 currency code is returned. If there is no locale-specific currency symbol, the ISO 4217 currency code is returned.
	7:	android.animation.AnimatorSet public AnimatorSet.Builder play (Animator anim) This method creates a Builder object, which is used to set up playing constraints. This initial play() method tells the Builder the animation that is the dependency for the succeeding commands to the Builder. For example, calling play(a1).with(a2) sets up the AnimatorSet to play a1 and a2 at the same time, play(a1).before(a2) sets up the AnimatorSet to play a1 first, followed by a2, and play(a1).after(a2) sets up the AnimatorSet to play a2 first, followed by a1. Note that play() is the only way to tell the Builder the animation upon which the dependency is created, so successive calls to the various functions in Builder will all refer to the initial parameter supplied in play() as the dependency of the other animations. For example, calling play(a1).before(a2).before(a3) will play both a2 and a3 when a1 ends; it does not set up a dependency between a2 and a3. Parameters anim The animation that is the dependency used in later calls to the methods in the returned Builder object. A null parameter will result in a null Builder return value. Returns Builder The object that constructs the AnimatorSet based on the dependencies outlined in the calls to play and the other methods in the Builder
	8:	java.text.Normalizer public static boolean isNormalized (CharSequence src, Normalizer.Form form) Check whether the given character sequence src is normalized according to the normalization method form. Parameters src character sequence to check form normalization form to check against Returns true if normalized according to form
	9:	android.content.ContentProvider public Cursor query (Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder, CancellationSignal cancellationSignal) Implement this to handle query requests from clients with support for cancellation. This method can be called from multiple threads, as described in Processes and Threads. Example client call: // Request a specific record. Cursor managedCursor = managedQuery( ContentUris.withAppendedId(Contacts.People.CONTENT_URI, 2), projection, // Which columns to return. null, // WHERE clause. null, // WHERE clause value substitution People.NAME + " ASC"); // Sort order. Example implementation: // SQLiteQueryBuilder is a helper class that creates the // proper SQL syntax for us. SQLiteQueryBuilder qBuilder = new SQLiteQueryBuilder(); // Set the table we're querying. qBuilder.setTables(DATABASE_TABLE_NAME); // If the query ends in a specific record number, we're // being asked for a specific record, so set the // WHERE clause in our query. if((URI_MATCHER.match(uri)) == SPECIFIC_MESSAGE){ qBuilder.appendWhere("_id=" + uri.getPathLeafId()); } // Make the query. Cursor c = qBuilder.query(mDb, projection, selection, selectionArgs, groupBy, having, sortOrder); c.setNotificationUri(getContext().getContentResolver(), uri); return c; If you implement this method then you must also implement the version of query(Uri, String[], String, String[], String) that does not take a cancellation signal to ensure correct operation on older versions of the Android Framework in which the cancellation signal overload was not available. Parameters uri The URI to query. This will be the full URI sent by the client; if the client is requesting a specific record, the URI will end in a record number that the implementation should parse and add to a WHERE or HAVING clause, specifying that _id value. projection The list of columns to put into the cursor. If null all columns are included. selection A selection criteria to apply when filtering rows. If null then all rows are included. selectionArgs You may include ?s in selection, which will be replaced by the values from selectionArgs, in order that they appear in the selection. The values will be bound as Strings. sortOrder How the rows in the cursor should be sorted. If null then the provider is free to define the sort order. cancellationSignal A signal to cancel the operation in progress, or null if none. If the operation is canceled, then OperationCanceledException will be thrown when the query is executed. Returns a Cursor or null.
Sprite
Creates a new Sprite from another Sprite
	0:	android.os.MemoryFile public InputStream getInputStream () Creates a new InputStream for reading from the memory file. Returns InputStream
	1:	android.os.Parcel public static Parcel obtain () Retrieve a new Parcel object from the pool.
	2:	android.os.Message public static Message obtain () Return a new Message instance from the global pool. Allows us to avoid allocating new objects in many cases.
	3:	java.util.jar.JarEntry public JarEntry (ZipEntry entry) Creates a new JarEntry using the values obtained from entry. Parameters entry The ZipEntry to obtain values from.
	4:	java.util.jar.JarEntry public JarEntry (JarEntry je) Create a new JarEntry using the values obtained from the argument. Parameters je The JarEntry to obtain values from.
	5:	android.app.Notification.Action.Builder public Notification.Action.Builder (Notification.Action action) Construct a new builder for Notification.Action object using the fields from an Notification.Action. Parameters action the action to read fields from.
	6:	android.support.v4.app.NotificationCompat.Action.Builder public NotificationCompat.Action.Builder (NotificationCompat.Action action) Construct a new builder for NotificationCompat.Action object using the fields from an NotificationCompat.Action. Parameters action the action to read fields from.
	7:	java.security.KeyPairGenerator public final KeyPair genKeyPair () Computes and returns a new unique KeyPair each time this method is called. This does exactly the same as generateKeyPair(). Returns a new unique KeyPair each time this method is called
	8:	java.security.KeyPairGenerator public KeyPair generateKeyPair () Computes and returns a new unique KeyPair each time this method is called. This does exactly the same as genKeyPair(). Returns a new unique KeyPair each time this method is called
	9:	java.security.KeyPairGeneratorSpi public abstract KeyPair generateKeyPair () Computes and returns a new unique KeyPair each time this method is called. Returns a new unique KeyPair each time this method is called.
defineReferencePixel
Defines the reference pixel for this Sprite
	0:	android.hardware.Camera.Parameters public void setPictureFormat (int pixel_format) Sets the image format for pictures. Parameters pixel_format the desired picture format (ImageFormat.NV21, ImageFormat.RGB_565, or ImageFormat.JPEG) See Also ImageFormat
	1:	android.media.Image.Plane public abstract int getPixelStride () The distance between adjacent pixel samples, in bytes. This is the distance between two consecutive pixel values in a row of pixels. It may be larger than the size of a single pixel to account for interleaved image data or padded formats. The pixel stride is always greater than 0.
	2:	android.hardware.Camera.PreviewCallback public abstract void onPreviewFrame (byte[] data, Camera camera) Called as preview frames are displayed. This callback is invoked on the event thread open(int) was called from. If using the YV12 format, refer to the equations in setPreviewFormat(int) for the arrangement of the pixel data in the preview callback buffers. Parameters data the contents of the preview frame in the format defined by ImageFormat, which can be queried with getPreviewFormat(). If setPreviewFormat(int) is never called, the default will be the YCbCr_420_SP (NV21) format. camera the Camera service object.
	3:	android.graphics.ImageFormat public static int getBitsPerPixel (int format) Use this function to retrieve the number of bits per pixel of an ImageFormat. Returns the number of bits per pixel of the given format or -1 if the format doesn't exist or is not supported.
	4:	android.opengl.ETC1 public static void encodeBlock (Buffer in, int validPixelMask, Buffer out) Encode a block of pixels. Parameters in a native order direct buffer of size DECODED_BLOCK_SIZE that represent a 4 x 4 square of 3-byte pixels in form R, G, B. Byte (3 * (x + 4 * y) is the R value of pixel (x, y). validPixelMask is a 16-bit mask where bit (1 << (x + y * 4)) indicates whether the corresponding (x,y) pixel is valid. Invalid pixel color values are ignored when compressing. out a native order direct buffer of size ENCODED_BLOCK_SIZE that receives the ETC1 compressed version of the data.
	5:	android.graphics.Bitmap public boolean sameAs (Bitmap other) Given another bitmap, return true if it has the same dimensions, config, and pixel data as this bitmap. If any of those differ, return false. If other is null, return false.
	6:	android.graphics.Canvas public boolean isOpaque () Return true if the device that the current layer draws into is opaque (i.e. does not support per-pixel alpha). Returns true if the device that the current layer draws into is opaque
	7:	android.view.Display public int getPixelFormat () This method was deprecated in API level 17. This method is no longer supported. The result is always RGBA_8888. Gets the pixel format of the display. Returns One of the constants defined in PixelFormat.
	8:	android.media.Image public abstract int getFormat () Get the format for this image. This format determines the number of ByteBuffers needed to represent the image, and the general layout of the pixel data in each in ByteBuffer. The format is one of the values from ImageFormat. The mapping between the formats and the planes is as follows: Format Plane count Layout details JPEG 1 Compressed data, so row and pixel strides are 0. To uncompress, use BitmapFactory#decodeByteArray. YUV_420_888 3 A luminance plane followed by the Cb and Cr chroma planes. The chroma planes have half the width and height of the luminance plane (4:2:0 subsampling). Each pixel sample in each plane has 8 bits. Each plane has its own row stride and pixel stride. See Also ImageFormat
	9:	android.media.Image public abstract Plane[] getPlanes () Get the array of pixel planes for this Image. The number of planes is determined by the format of the Image.
setRefPixelPosition
Sets this Sprite's position such that its reference pixel is located at (x,y) in the painter's coordinate system
	0:	android.opengl.ETC1 public static void encodeBlock (Buffer in, int validPixelMask, Buffer out) Encode a block of pixels. Parameters in a native order direct buffer of size DECODED_BLOCK_SIZE that represent a 4 x 4 square of 3-byte pixels in form R, G, B. Byte (3 * (x + 4 * y) is the R value of pixel (x, y). validPixelMask is a 16-bit mask where bit (1 << (x + y * 4)) indicates whether the corresponding (x,y) pixel is valid. Invalid pixel color values are ignored when compressing. out a native order direct buffer of size ENCODED_BLOCK_SIZE that receives the ETC1 compressed version of the data.
	1:	android.opengl.ETC1 public static void decodeBlock (Buffer in, Buffer out) Decode a block of pixels. Parameters in a native order direct buffer of size ENCODED_BLOCK_SIZE that contains the ETC1 compressed version of the data. out a native order direct buffer of size DECODED_BLOCK_SIZE that will receive the decoded data. The data represents a 4 x 4 square of 3-byte pixels in form R, G, B. Byte (3 * (x + 4 * y) is the R value of pixel (x, y).
	2:	android.graphics.Bitmap public void setPixel (int x, int y, int color) Write the specified Color into the bitmap (assuming it is mutable) at the x,y coordinate. The color must be a non-premultiplied ARGB value. Parameters x The x coordinate of the pixel to replace (0...width-1) y The y coordinate of the pixel to replace (0...height-1) color The ARGB color to write into the bitmap Throws IllegalStateException if the bitmap is not mutable IllegalArgumentException if x, y are outside of the bitmap's bounds.
	3:	android.graphics.Bitmap public void getPixels (int[] pixels, int offset, int stride, int x, int y, int width, int height) Returns in pixels[] a copy of the data in the bitmap. Each value is a packed int representing a Color. The stride parameter allows the caller to allow for gaps in the returned pixels array between rows. For normal packed results, just pass width for the stride value. The returned colors are non-premultiplied ARGB values. Parameters pixels The array to receive the bitmap's colors offset The first index to write into pixels[] stride The number of entries in pixels[] to skip between rows (must be >= bitmap's width). Can be negative. x The x coordinate of the first pixel to read from the bitmap y The y coordinate of the first pixel to read from the bitmap width The number of pixels to read from each row height The number of rows to read Throws IllegalArgumentException if x, y, width, height exceed the bounds of the bitmap, or if abs(stride) < width. ArrayIndexOutOfBoundsException if the pixels array is too small to receive the specified number of pixels.
	4:	android.graphics.Bitmap public void setPixels (int[] pixels, int offset, int stride, int x, int y, int width, int height) Replace pixels in the bitmap with the colors in the array. Each element in the array is a packed int prepresenting a non-premultiplied ARGB Color. Parameters pixels The colors to write to the bitmap offset The index of the first color to read from pixels[] stride The number of colors in pixels[] to skip between rows. Normally this value will be the same as the width of the bitmap, but it can be larger (or negative). x The x coordinate of the first pixel to write to in the bitmap. y The y coordinate of the first pixel to write to in the bitmap. width The number of colors to copy from pixels[] per row height The number of rows to write to the bitmap Throws IllegalStateException if the bitmap is not mutable IllegalArgumentException if x, y, width, height are outside of the bitmap's bounds. ArrayIndexOutOfBoundsException if the pixels array is too small to receive the specified number of pixels.
	5:	android.view.MotionEvent public final void addBatch (long eventTime, float x, float y, float pressure, float size, int metaState) Add a new movement to the batch of movements in this event. The event's current location, position and size is updated to the new values. The current values in the event are added to a list of historical values. Only applies to ACTION_MOVE or ACTION_HOVER_MOVE events. Parameters eventTime The time stamp (in ms) for this data. x The new X position. y The new Y position. pressure The new pressure. size The new size. metaState Meta key state.
	6:	android.hardware.Camera.Parameters public void setPreviewFormat (int pixel_format) Sets the image format for preview pictures. If this is never called, the default format will be NV21, which uses the NV21 encoding format. Use getSupportedPreviewFormats() to get a list of the available preview formats. It is strongly recommended that either NV21 or YV12 is used, since they are supported by all camera devices. For YV12, the image buffer that is received is not necessarily tightly packed, as there may be padding at the end of each row of pixel data, as described in YV12. For camera callback data, it can be assumed that the stride of the Y and UV data is the smallest possible that meets the alignment requirements. That is, if the preview size is width x height, then the following equations describe the buffer index for the beginning of row y for the Y plane and row c for the U and V planes: yStride = (int) ceil(width / 16.0) * 16; uvStride = (int) ceil( (yStride / 2) / 16.0) * 16; ySize = yStride * height; uvSize = uvStride * height / 2; yRowIndex = yStride * y; uRowIndex = ySize + uvSize + uvStride * c; vRowIndex = ySize + uvStride * c; size = ySize + uvSize * 2; Parameters pixel_format the desired preview picture format, defined by one of the ImageFormat constants. (E.g., ImageFormat.NV21 (default), or ImageFormat.YV12) See Also ImageFormat getSupportedPreviewFormats()
	7:	android.graphics.Canvas public void drawBitmap (int[] colors, int offset, int stride, float x, float y, int width, int height, boolean hasAlpha, Paint paint) Treat the specified array of colors as a bitmap, and draw it. This gives the same result as first creating a bitmap from the array, and then drawing it, but this method avoids explicitly creating a bitmap object which can be more efficient if the colors are changing often. Parameters colors Array of colors representing the pixels of the bitmap offset Offset into the array of colors for the first pixel stride The number of colors in the array between rows (must be >= width or <= -width). x The X coordinate for where to draw the bitmap y The Y coordinate for where to draw the bitmap width The width of the bitmap height The height of the bitmap hasAlpha True if the alpha channel of the colors contains valid values. If false, the alpha byte is ignored (assumed to be 0xFF for every pixel). paint May be null. The paint used to draw the bitmap
	8:	android.view.MotionEvent public static MotionEvent obtain (long downTime, long eventTime, int action, float x, float y, int metaState) Create a new MotionEvent, filling in a subset of the basic motion values. Those not specified here are: device id (always 0), pressure and size (always 1), x and y precision (always 1), and edgeFlags (always 0). Parameters downTime The time (in ms) when the user originally pressed down to start a stream of position events. This must be obtained from uptimeMillis(). eventTime The the time (in ms) when this specific event was generated. This must be obtained from uptimeMillis(). action The kind of action being performed, such as ACTION_DOWN. x The X coordinate of this event. y The Y coordinate of this event. metaState The state of any meta / modifier keys that were in effect when the event was generated.
	9:	android.graphics.Point public void set (int x, int y) Set the point's x and y coordinates
getRefPixelX
Gets the horizontal position of this Sprite's reference pixel in the painter's coordinate system
	0:	org.apache.http.conn.scheme.SchemeRegistry public final synchronized Scheme get (String name) Obtains a scheme by name, if registered. Parameters name the name of the scheme to look up (in lowercase) Returns the scheme, or null if there is none by this name
	1:	android.hardware.Camera.Parameters public void setPictureFormat (int pixel_format) Sets the image format for pictures. Parameters pixel_format the desired picture format (ImageFormat.NV21, ImageFormat.RGB_565, or ImageFormat.JPEG) See Also ImageFormat
	2:	android.location.Location public void setElapsedRealtimeNanos (long time) Set the time of this fix, in elapsed real-time since system boot. Parameters time elapsed real-time of fix, in nanoseconds since system boot.
	3:	android.test.mock.MockPackageManager public void setApplicationEnabledSetting (String packageName, int newState, int flags) Set the enabled setting for an application This setting will override any enabled state which may have been set by the application in its manifest. It also overrides the enabled state set in the manifest for any of the application's components. It does not override any enabled state set by setComponentEnabledSetting(ComponentName, int, int) for any of the application's components. Parameters packageName The package name of the application to enable newState The new enabled state for the component. The legal values for this state are: COMPONENT_ENABLED_STATE_ENABLED, COMPONENT_ENABLED_STATE_DISABLED and COMPONENT_ENABLED_STATE_DEFAULT The last one removes the setting, thereby restoring the applications's state to whatever was set in its manifest (or enabled, by default). flags Optional behavior flags: DONT_KILL_APP or 0.
	4:	android.content.pm.PackageManager public abstract void setApplicationEnabledSetting (String packageName, int newState, int flags) Set the enabled setting for an application This setting will override any enabled state which may have been set by the application in its manifest. It also overrides the enabled state set in the manifest for any of the application's components. It does not override any enabled state set by setComponentEnabledSetting(ComponentName, int, int) for any of the application's components. Parameters packageName The package name of the application to enable newState The new enabled state for the component. The legal values for this state are: COMPONENT_ENABLED_STATE_ENABLED, COMPONENT_ENABLED_STATE_DISABLED and COMPONENT_ENABLED_STATE_DEFAULT The last one removes the setting, thereby restoring the applications's state to whatever was set in its manifest (or enabled, by default). flags Optional behavior flags: DONT_KILL_APP or 0.
	5:	android.app.ActivityManager public void dumpPackageState (FileDescriptor fd, String packageName) Perform a system dump of various state associated with the given application package name. This call blocks while the dump is being performed, so should not be done on a UI thread. The data will be written to the given file descriptor as text. An application must hold the DUMP permission to make this call. Parameters fd The file descriptor that the dump should be written to. The file descriptor is not closed by this function; the caller continues to own it. packageName The name of the package that is to be dumped.
	6:	android.content.Context public abstract Context createPackageContext (String packageName, int flags) Return a new Context object for the given application name. This Context is the same as what the named application gets when it is launched, containing the same resources and class loader. Each call to this method returns a new instance of a Context object; Context objects are not shared, however they share common state (Resources, ClassLoader, etc) so the Context instance itself is fairly lightweight. Throws PackageManager.NameNotFoundException if there is no application with the given package name. Throws SecurityException if the Context requested can not be loaded into the caller's process for security reasons (see CONTEXT_INCLUDE_CODE for more information}. Parameters packageName Name of the application's package. flags Option flags, one of CONTEXT_INCLUDE_CODE or CONTEXT_IGNORE_SECURITY. Returns A Context for the application. Throws SecurityException if there is no application with the given package name. PackageManager.NameNotFoundException
	7:	java.lang.ClassLoader protected Package getPackage (String name) Returns the package with the specified name. Package information is searched in this class loader. Parameters name the name of the package to find. Returns the package with the requested name; null if the package can not be found.
	8:	android.location.GpsSatellite public boolean usedInFix () Returns true if the satellite was used by the GPS engine when calculating the most recent GPS fix. Returns true if the satellite was used to compute the most recent fix.
	9:	android.os.PowerManager public boolean isInteractive () Returns true if the device is in an interactive state. When this method returns true, the device is awake and ready to interact with the user (although this is not a guarantee that the user is actively interacting with the device just this moment). The main screen is usually turned on while in this state. Certain features, such as the proximity sensor, may temporarily turn off the screen while still leaving the device in an interactive state. Note in particular that the device is still considered to be interactive while dreaming (since dreams can be interactive) but not when it is dozing or asleep. When this method returns false, the device is dozing or asleep and must be awoken before it will become ready to interact with the user again. The main screen is usually turned off while in this state. Certain features, such as "ambient mode" may cause the main screen to remain on (albeit in a low power state) to display system-provided content while the device dozes. The system will send a screen on or screen off broadcast whenever the interactive state of the device changes. For historical reasons, the names of these broadcasts refer to the power state of the screen but they are actually sent in response to changes in the overall interactive state of the device, as described by this method. Services may use the non-interactive state as a hint to conserve power since the user is not present. Returns True if the device is in an interactive state. See Also ACTION_SCREEN_ON ACTION_SCREEN_OFF
getRefPixelY
Gets the vertical position of this Sprite's reference pixel in the painter's coordinate system
	0:	org.apache.http.conn.scheme.SchemeRegistry public final synchronized Scheme get (String name) Obtains a scheme by name, if registered. Parameters name the name of the scheme to look up (in lowercase) Returns the scheme, or null if there is none by this name
	1:	android.hardware.Camera.Parameters public void setPictureFormat (int pixel_format) Sets the image format for pictures. Parameters pixel_format the desired picture format (ImageFormat.NV21, ImageFormat.RGB_565, or ImageFormat.JPEG) See Also ImageFormat
	2:	android.location.Location public void setElapsedRealtimeNanos (long time) Set the time of this fix, in elapsed real-time since system boot. Parameters time elapsed real-time of fix, in nanoseconds since system boot.
	3:	android.test.mock.MockPackageManager public void setApplicationEnabledSetting (String packageName, int newState, int flags) Set the enabled setting for an application This setting will override any enabled state which may have been set by the application in its manifest. It also overrides the enabled state set in the manifest for any of the application's components. It does not override any enabled state set by setComponentEnabledSetting(ComponentName, int, int) for any of the application's components. Parameters packageName The package name of the application to enable newState The new enabled state for the component. The legal values for this state are: COMPONENT_ENABLED_STATE_ENABLED, COMPONENT_ENABLED_STATE_DISABLED and COMPONENT_ENABLED_STATE_DEFAULT The last one removes the setting, thereby restoring the applications's state to whatever was set in its manifest (or enabled, by default). flags Optional behavior flags: DONT_KILL_APP or 0.
	4:	android.content.pm.PackageManager public abstract void setApplicationEnabledSetting (String packageName, int newState, int flags) Set the enabled setting for an application This setting will override any enabled state which may have been set by the application in its manifest. It also overrides the enabled state set in the manifest for any of the application's components. It does not override any enabled state set by setComponentEnabledSetting(ComponentName, int, int) for any of the application's components. Parameters packageName The package name of the application to enable newState The new enabled state for the component. The legal values for this state are: COMPONENT_ENABLED_STATE_ENABLED, COMPONENT_ENABLED_STATE_DISABLED and COMPONENT_ENABLED_STATE_DEFAULT The last one removes the setting, thereby restoring the applications's state to whatever was set in its manifest (or enabled, by default). flags Optional behavior flags: DONT_KILL_APP or 0.
	5:	android.app.ActivityManager public void dumpPackageState (FileDescriptor fd, String packageName) Perform a system dump of various state associated with the given application package name. This call blocks while the dump is being performed, so should not be done on a UI thread. The data will be written to the given file descriptor as text. An application must hold the DUMP permission to make this call. Parameters fd The file descriptor that the dump should be written to. The file descriptor is not closed by this function; the caller continues to own it. packageName The name of the package that is to be dumped.
	6:	android.content.Context public abstract Context createPackageContext (String packageName, int flags) Return a new Context object for the given application name. This Context is the same as what the named application gets when it is launched, containing the same resources and class loader. Each call to this method returns a new instance of a Context object; Context objects are not shared, however they share common state (Resources, ClassLoader, etc) so the Context instance itself is fairly lightweight. Throws PackageManager.NameNotFoundException if there is no application with the given package name. Throws SecurityException if the Context requested can not be loaded into the caller's process for security reasons (see CONTEXT_INCLUDE_CODE for more information}. Parameters packageName Name of the application's package. flags Option flags, one of CONTEXT_INCLUDE_CODE or CONTEXT_IGNORE_SECURITY. Returns A Context for the application. Throws SecurityException if there is no application with the given package name. PackageManager.NameNotFoundException
	7:	java.lang.ClassLoader protected Package getPackage (String name) Returns the package with the specified name. Package information is searched in this class loader. Parameters name the name of the package to find. Returns the package with the requested name; null if the package can not be found.
	8:	android.location.GpsSatellite public boolean usedInFix () Returns true if the satellite was used by the GPS engine when calculating the most recent GPS fix. Returns true if the satellite was used to compute the most recent fix.
	9:	android.os.PowerManager public boolean isInteractive () Returns true if the device is in an interactive state. When this method returns true, the device is awake and ready to interact with the user (although this is not a guarantee that the user is actively interacting with the device just this moment). The main screen is usually turned on while in this state. Certain features, such as the proximity sensor, may temporarily turn off the screen while still leaving the device in an interactive state. Note in particular that the device is still considered to be interactive while dreaming (since dreams can be interactive) but not when it is dozing or asleep. When this method returns false, the device is dozing or asleep and must be awoken before it will become ready to interact with the user again. The main screen is usually turned off while in this state. Certain features, such as "ambient mode" may cause the main screen to remain on (albeit in a low power state) to display system-provided content while the device dozes. The system will send a screen on or screen off broadcast whenever the interactive state of the device changes. For historical reasons, the names of these broadcasts refer to the power state of the screen but they are actually sent in response to changes in the overall interactive state of the device, as described by this method. Services may use the non-interactive state as a hint to conserve power since the user is not present. Returns True if the device is in an interactive state. See Also ACTION_SCREEN_ON ACTION_SCREEN_OFF
setFrame
Selects the current frame in the frame sequence
	0:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	1:	android.media.AudioTrack protected int getNativeFrameCount () This method was deprecated in API level 19. Only accessible by subclasses, which are not recommended for AudioTrack. See getProperty(String) for key PROPERTY_OUTPUT_FRAMES_PER_BUFFER. Returns the "native frame count", derived from the bufferSizeInBytes specified at creation time and converted to frame units. If track's creation mode is MODE_STATIC, it is equal to the specified bufferSizeInBytes converted to frame units. If track's creation mode is MODE_STREAM, it is typically greater than or equal to the specified bufferSizeInBytes converted to frame units; it may be rounded up to a larger value if needed by the target device implementation.
	2:	android.hardware.Camera.Parameters public List<Integer> getSupportedPreviewFrameRates () This method was deprecated in API level 9. replaced by getSupportedPreviewFpsRange() Gets the supported preview frame rates. Returns a list of supported preview frame rates. null if preview frame rate setting is not supported.
	3:	android.opengl.GLSurfaceView.Renderer public abstract void onDrawFrame (GL10 gl) Called to draw the current frame. This method is responsible for drawing the current frame. The implementation of this method typically looks like this: void onDrawFrame(GL10 gl) { gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT); //... other gl calls to render the scene ... } Parameters gl the GL interface. Use instanceof to test if the interface supports GL11 or higher interfaces.
	4:	android.view.Choreographer public void removeFrameCallback (Choreographer.FrameCallback callback) Removes a previously posted frame callback. Parameters callback The frame callback to remove. See Also postFrameCallback(Choreographer.FrameCallback) postFrameCallbackDelayed(Choreographer.FrameCallback, long)
	5:	android.graphics.drawable.AnimationDrawable public Drawable getFrame (int index) Returns The Drawable at the specified frame index
	6:	android.view.Choreographer public void postFrameCallback (Choreographer.FrameCallback callback) Posts a frame callback to run on the next frame. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. See Also postFrameCallbackDelayed(Choreographer.FrameCallback, long) removeFrameCallback(Choreographer.FrameCallback)
	7:	android.view.Choreographer public void postFrameCallbackDelayed (Choreographer.FrameCallback callback, long delayMillis) Posts a frame callback to run on the next frame after the specified delay. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. delayMillis The delay time in milliseconds. See Also postFrameCallback(Choreographer.FrameCallback) removeFrameCallback(Choreographer.FrameCallback)
	8:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	9:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs) Call this method after setDataSource(). This method finds a representative frame close to the given time position if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source. Call this method if one does not care how the frame is found as long as it is close to the given time; otherwise, please call getFrameAtTime(long, int). Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarentee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved. See Also getFrameAtTime(long, int)
getFrame
Gets the current index in the frame sequence
	0:	android.graphics.drawable.AnimationDrawable public Drawable getFrame (int index) Returns The Drawable at the specified frame index
	1:	java.util.BitSet public boolean get (int index) Returns the bit at index index. Indexes greater than the current length return false. Throws IndexOutOfBoundsException if index < 0.
	2:	android.hardware.Camera.Parameters public List<int[]> getSupportedPreviewFpsRange () Gets the supported preview fps (frame-per-second) ranges. Each range contains a minimum fps and maximum fps. If minimum fps equals to maximum fps, the camera outputs frames in fixed frame rate. If not, the camera outputs frames in auto frame rate. The actual frame rate fluctuates between the minimum and the maximum. The values are multiplied by 1000 and represented in integers. For example, if frame rate is 26.623 frames per second, the value is 26623. Returns a list of supported preview fps ranges. This method returns a list with at least one element. Every element is an int array of two values - minimum fps and maximum fps. The list is sorted from small to large (first by maximum fps and then minimum fps). See Also PREVIEW_FPS_MIN_INDEX PREVIEW_FPS_MAX_INDEX
	3:	android.media.MediaCodec public final void queueSecureInputBuffer (int index, int offset, MediaCodec.CryptoInfo info, long presentationTimeUs, int flags) Similar to queueInputBuffer(int, int, int, long, int) but submits a buffer that is potentially encrypted. Parameters index The index of a client-owned input buffer previously returned in a call to dequeueInputBuffer(long). offset The byte offset into the input buffer at which the data starts. info Metadata required to facilitate decryption, the object can be reused immediately after this call returns. presentationTimeUs The time at which this buffer should be rendered. flags A bitmask of flags BUFFER_FLAG_SYNC_FRAME, BUFFER_FLAG_CODEC_CONFIG or BUFFER_FLAG_END_OF_STREAM. Throws MediaCodec.CryptoException if an error occurs while attempting to decrypt the buffer. An error code associated with the exception helps identify the reason for the failure.
	4:	java.text.CharacterIterator public abstract char previous () Decrements the current index and returns the character at the new index. Returns the character at the previous index, or DONE if the previous index would be past the beginning.
	5:	android.media.MediaCodec public final void queueInputBuffer (int index, int offset, int size, long presentationTimeUs, int flags) After filling a range of the input buffer at the specified index submit it to the component. Many decoders require the actual compressed data stream to be preceded by "codec specific data", i.e. setup data used to initialize the codec such as PPS/SPS in the case of AVC video or code tables in the case of vorbis audio. The class MediaExtractor provides codec specific data as part of the returned track format in entries named "csd-0", "csd-1" ... These buffers should be submitted using the flag BUFFER_FLAG_CODEC_CONFIG. To indicate that this is the final piece of input data (or rather that no more input data follows unless the decoder is subsequently flushed) specify the flag BUFFER_FLAG_END_OF_STREAM. Parameters index The index of a client-owned input buffer previously returned in a call to dequeueInputBuffer(long). offset The byte offset into the input buffer at which the data starts. size The number of bytes of valid input data. presentationTimeUs The time at which this buffer should be rendered. flags A bitmask of flags BUFFER_FLAG_SYNC_FRAME, BUFFER_FLAG_CODEC_CONFIG or BUFFER_FLAG_END_OF_STREAM. Throws MediaCodec.CryptoException if a crypto object has been specified in configure(MediaFormat, Surface, MediaCrypto, int)
	6:	android.media.AudioManager public int getStreamMaxVolume (int streamType) Returns the maximum volume index for a particular stream. Parameters streamType The stream type whose maximum volume index is returned. Returns The maximum valid volume index for the stream. See Also getStreamVolume(int)
	7:	java.text.CharacterIterator public abstract char current () Returns the character at the current index. Returns the current character, or DONE if the current index is past the beginning or end of the sequence.
	8:	android.graphics.drawable.AnimationDrawable public int getDuration (int i) Returns The duration in milliseconds of the frame at the specified index
	9:	android.media.AudioTrack protected int getNativeFrameCount () This method was deprecated in API level 19. Only accessible by subclasses, which are not recommended for AudioTrack. See getProperty(String) for key PROPERTY_OUTPUT_FRAMES_PER_BUFFER. Returns the "native frame count", derived from the bufferSizeInBytes specified at creation time and converted to frame units. If track's creation mode is MODE_STATIC, it is equal to the specified bufferSizeInBytes converted to frame units. If track's creation mode is MODE_STREAM, it is typically greater than or equal to the specified bufferSizeInBytes converted to frame units; it may be rounded up to a larger value if needed by the target device implementation.
getRawFrameCount
Gets the number of raw frames for this Sprite
	0:	android.view.Choreographer.FrameCallback public abstract void doFrame (long frameTimeNanos) Called when a new display frame is being rendered. This method provides the time in nanoseconds when the frame started being rendered. The frame time provides a stable time base for synchronizing animations and drawing. It should be used instead of uptimeMillis() or nanoTime() for animations and drawing in the UI. Using the frame time helps to reduce inter-frame jitter because the frame time is fixed at the time the frame was scheduled to start, regardless of when the animations or drawing callback actually runs. All callbacks that run as part of rendering a frame will observe the same frame time so using the frame time also helps to synchronize effects that are performed by different callbacks. Please note that the framework already takes care to process animations and drawing using the frame time as a stable time base. Most applications should not need to use the frame time information directly. Parameters frameTimeNanos The time in nanoseconds when the frame started being rendered, in the nanoTime() timebase. Divide this value by 1000000 to convert it to the uptimeMillis() time base.
	1:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	2:	android.view.Choreographer public void postFrameCallbackDelayed (Choreographer.FrameCallback callback, long delayMillis) Posts a frame callback to run on the next frame after the specified delay. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. delayMillis The delay time in milliseconds. See Also postFrameCallback(Choreographer.FrameCallback) removeFrameCallback(Choreographer.FrameCallback)
	3:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs) Call this method after setDataSource(). This method finds a representative frame close to the given time position if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source. Call this method if one does not care how the frame is found as long as it is close to the given time; otherwise, please call getFrameAtTime(long, int). Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarentee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved. See Also getFrameAtTime(long, int)
	4:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	5:	android.view.animation.Animation public long getStartTime () When this animation should start. If the animation has not startet yet, this method might return START_ON_FIRST_FRAME. Returns the time in milliseconds when the animation should start or START_ON_FIRST_FRAME
	6:	android.view.animation.AnimationSet public long getStartTime () When this animation should start. If the animation has not startet yet, this method might return START_ON_FIRST_FRAME. Returns the time in milliseconds when the animation should start or START_ON_FIRST_FRAME
	7:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs, int option) Call this method after setDataSource(). This method finds a representative frame close to the given time position by considering the given option if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source or just obtain and display a frame at the given time position. Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarantee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. option a hint on how the frame is found. Use OPTION_PREVIOUS_SYNC if one wants to retrieve a sync frame that has a timestamp earlier than or the same as timeUs. Use OPTION_NEXT_SYNC if one wants to retrieve a sync frame that has a timestamp later than or the same as timeUs. Use OPTION_CLOSEST_SYNC if one wants to retrieve a sync frame that has a timestamp closest to or the same as timeUs. Use OPTION_CLOSEST if one wants to retrieve a frame that may or may not be a sync frame but is closest to or the same as timeUs. OPTION_CLOSEST often has larger performance overhead compared to the other options if there is no sync frame located at timeUs. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved.
	8:	android.nfc.tech.IsoDep public byte[] transceive (byte[] data) Send raw ISO-DEP data to the tag and receive the response. Applications must only send the INF payload, and not the start of frame and end of frame indicators. Applications do not need to fragment the payload, it will be automatically fragmented and defragmented by transceive(byte[]) if it exceeds FSD/FSC limits. Use getMaxTransceiveLength() to retrieve the maximum number of bytes that can be sent with transceive(byte[]). This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with IOException if close() is called from another thread. Requires the NFC permission. Parameters data command bytes to send, must not be null Returns response bytes received, will not be null Throws if the tag leaves the field IOException if there is an I/O failure, or this operation is canceled
	9:	android.media.ImageReader public Image acquireNextImage () Acquire the next Image from the ImageReader's queue. Returns null if no new image is available. Warning: Consider using acquireLatestImage() instead, as it will automatically release older images, and allow slower-running processing routines to catch up to the newest frame. Usage of acquireNextImage() is recommended for batch/background processing. Incorrectly using this function can cause images to appear with an ever-increasing delay, followed by a complete stall where no new images seem to appear. This operation will fail by throwing an IllegalStateException if maxImages have been acquired with acquireNextImage() or acquireLatestImage(). In particular a sequence of acquireNextImage() or acquireLatestImage() calls greater than maxImages without calling close() in-between will exhaust the underlying queue. At such a time, IllegalStateException will be thrown until more images are released with close(). Returns a new frame of image data, or null if no image data is available. Throws IllegalStateException if maxImages images are currently acquired See Also acquireLatestImage()
getFrameSequenceLength
Gets the number of elements in the frame sequence
	0:	android.hardware.Camera.Parameters public List<int[]> getSupportedPreviewFpsRange () Gets the supported preview fps (frame-per-second) ranges. Each range contains a minimum fps and maximum fps. If minimum fps equals to maximum fps, the camera outputs frames in fixed frame rate. If not, the camera outputs frames in auto frame rate. The actual frame rate fluctuates between the minimum and the maximum. The values are multiplied by 1000 and represented in integers. For example, if frame rate is 26.623 frames per second, the value is 26623. Returns a list of supported preview fps ranges. This method returns a list with at least one element. Every element is an int array of two values - minimum fps and maximum fps. The list is sorted from small to large (first by maximum fps and then minimum fps). See Also PREVIEW_FPS_MIN_INDEX PREVIEW_FPS_MAX_INDEX
	1:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	2:	android.view.Choreographer public void postFrameCallbackDelayed (Choreographer.FrameCallback callback, long delayMillis) Posts a frame callback to run on the next frame after the specified delay. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. delayMillis The delay time in milliseconds. See Also postFrameCallback(Choreographer.FrameCallback) removeFrameCallback(Choreographer.FrameCallback)
	3:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs) Call this method after setDataSource(). This method finds a representative frame close to the given time position if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source. Call this method if one does not care how the frame is found as long as it is close to the given time; otherwise, please call getFrameAtTime(long, int). Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarentee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved. See Also getFrameAtTime(long, int)
	4:	android.view.Choreographer.FrameCallback public abstract void doFrame (long frameTimeNanos) Called when a new display frame is being rendered. This method provides the time in nanoseconds when the frame started being rendered. The frame time provides a stable time base for synchronizing animations and drawing. It should be used instead of uptimeMillis() or nanoTime() for animations and drawing in the UI. Using the frame time helps to reduce inter-frame jitter because the frame time is fixed at the time the frame was scheduled to start, regardless of when the animations or drawing callback actually runs. All callbacks that run as part of rendering a frame will observe the same frame time so using the frame time also helps to synchronize effects that are performed by different callbacks. Please note that the framework already takes care to process animations and drawing using the frame time as a stable time base. Most applications should not need to use the frame time information directly. Parameters frameTimeNanos The time in nanoseconds when the frame started being rendered, in the nanoTime() timebase. Divide this value by 1000000 to convert it to the uptimeMillis() time base.
	5:	android.widget.EdgeEffect public boolean draw (Canvas canvas) Draw into the provided canvas. Assumes that the canvas has been rotated accordingly and the size has been set. The effect will be drawn the full width of X=0 to X=width, beginning from Y=0 and extending to some factor < 1.f of height. Parameters canvas Canvas to draw into Returns true if drawing should continue beyond this frame to continue the animation
	6:	android.support.v4.widget.EdgeEffectCompat public boolean draw (Canvas canvas) Draw into the provided canvas. Assumes that the canvas has been rotated accordingly and the size has been set. The effect will be drawn the full width of X=0 to X=width, beginning from Y=0 and extending to some factor < 1.f of height. Parameters canvas Canvas to draw into Returns true if drawing should continue beyond this frame to continue the animation
	7:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	8:	android.view.animation.Animation public long getStartTime () When this animation should start. If the animation has not startet yet, this method might return START_ON_FIRST_FRAME. Returns the time in milliseconds when the animation should start or START_ON_FIRST_FRAME
	9:	android.view.animation.AnimationSet public long getStartTime () When this animation should start. If the animation has not startet yet, this method might return START_ON_FIRST_FRAME. Returns the time in milliseconds when the animation should start or START_ON_FIRST_FRAME
nextFrame
Selects the next frame in the frame sequence
	0:	android.view.Choreographer public void postFrameCallback (Choreographer.FrameCallback callback) Posts a frame callback to run on the next frame. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. See Also postFrameCallbackDelayed(Choreographer.FrameCallback, long) removeFrameCallback(Choreographer.FrameCallback)
	1:	android.view.Choreographer public void postFrameCallbackDelayed (Choreographer.FrameCallback callback, long delayMillis) Posts a frame callback to run on the next frame after the specified delay. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. delayMillis The delay time in milliseconds. See Also postFrameCallback(Choreographer.FrameCallback) removeFrameCallback(Choreographer.FrameCallback)
	2:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	3:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs, int option) Call this method after setDataSource(). This method finds a representative frame close to the given time position by considering the given option if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source or just obtain and display a frame at the given time position. Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarantee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. option a hint on how the frame is found. Use OPTION_PREVIOUS_SYNC if one wants to retrieve a sync frame that has a timestamp earlier than or the same as timeUs. Use OPTION_NEXT_SYNC if one wants to retrieve a sync frame that has a timestamp later than or the same as timeUs. Use OPTION_CLOSEST_SYNC if one wants to retrieve a sync frame that has a timestamp closest to or the same as timeUs. Use OPTION_CLOSEST if one wants to retrieve a frame that may or may not be a sync frame but is closest to or the same as timeUs. OPTION_CLOSEST often has larger performance overhead compared to the other options if there is no sync frame located at timeUs. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved.
	4:	android.graphics.Interpolator public void setKeyFrame (int index, int msec, float[] values) Assign the keyFrame (specified by index) a time value and an array of key values (with an implicity blend array of [0, 0, 1, 1] giving linear transition to the next set of key values). Parameters index The index of the key frame to assign msec The time (in mililiseconds) for this key frame. Based on the SystemClock.uptimeMillis() clock values Array of values associated with theis key frame
	5:	android.hardware.Camera.Parameters public List<Integer> getSupportedPreviewFrameRates () This method was deprecated in API level 9. replaced by getSupportedPreviewFpsRange() Gets the supported preview frame rates. Returns a list of supported preview frame rates. null if preview frame rate setting is not supported.
	6:	android.view.Choreographer public void removeFrameCallback (Choreographer.FrameCallback callback) Removes a previously posted frame callback. Parameters callback The frame callback to remove. See Also postFrameCallback(Choreographer.FrameCallback) postFrameCallbackDelayed(Choreographer.FrameCallback, long)
	7:	android.graphics.drawable.AnimationDrawable public Drawable getFrame (int index) Returns The Drawable at the specified frame index
	8:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	9:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs) Call this method after setDataSource(). This method finds a representative frame close to the given time position if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source. Call this method if one does not care how the frame is found as long as it is close to the given time; otherwise, please call getFrameAtTime(long, int). Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarentee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved. See Also getFrameAtTime(long, int)
prevFrame
Selects the previous frame in the frame sequence
	0:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	1:	android.hardware.Camera.Parameters public List<Integer> getSupportedPreviewFrameRates () This method was deprecated in API level 9. replaced by getSupportedPreviewFpsRange() Gets the supported preview frame rates. Returns a list of supported preview frame rates. null if preview frame rate setting is not supported.
	2:	android.view.Choreographer public void removeFrameCallback (Choreographer.FrameCallback callback) Removes a previously posted frame callback. Parameters callback The frame callback to remove. See Also postFrameCallback(Choreographer.FrameCallback) postFrameCallbackDelayed(Choreographer.FrameCallback, long)
	3:	android.graphics.drawable.AnimationDrawable public Drawable getFrame (int index) Returns The Drawable at the specified frame index
	4:	android.view.Choreographer public void postFrameCallback (Choreographer.FrameCallback callback) Posts a frame callback to run on the next frame. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. See Also postFrameCallbackDelayed(Choreographer.FrameCallback, long) removeFrameCallback(Choreographer.FrameCallback)
	5:	android.view.Choreographer public void postFrameCallbackDelayed (Choreographer.FrameCallback callback, long delayMillis) Posts a frame callback to run on the next frame after the specified delay. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. delayMillis The delay time in milliseconds. See Also postFrameCallback(Choreographer.FrameCallback) removeFrameCallback(Choreographer.FrameCallback)
	6:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	7:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs) Call this method after setDataSource(). This method finds a representative frame close to the given time position if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source. Call this method if one does not care how the frame is found as long as it is close to the given time; otherwise, please call getFrameAtTime(long, int). Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarentee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved. See Also getFrameAtTime(long, int)
	8:	android.view.Choreographer.FrameCallback public abstract void doFrame (long frameTimeNanos) Called when a new display frame is being rendered. This method provides the time in nanoseconds when the frame started being rendered. The frame time provides a stable time base for synchronizing animations and drawing. It should be used instead of uptimeMillis() or nanoTime() for animations and drawing in the UI. Using the frame time helps to reduce inter-frame jitter because the frame time is fixed at the time the frame was scheduled to start, regardless of when the animations or drawing callback actually runs. All callbacks that run as part of rendering a frame will observe the same frame time so using the frame time also helps to synchronize effects that are performed by different callbacks. Please note that the framework already takes care to process animations and drawing using the frame time as a stable time base. Most applications should not need to use the frame time information directly. Parameters frameTimeNanos The time in nanoseconds when the frame started being rendered, in the nanoTime() timebase. Divide this value by 1000000 to convert it to the uptimeMillis() time base.
	9:	android.os.Build public Build () 
paint
Draws the Sprite
	0:	android.graphics.Canvas public void drawPaint (Paint paint) Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint. Parameters paint The paint used to draw onto the canvas
	1:	android.graphics.Canvas public void drawPoints (float[] pts, Paint paint) Helper for drawPoints() that assumes you want to draw the entire array
	2:	android.graphics.NinePatch public Paint getPaint () Returns the paint used to draw this NinePatch. The paint can be null. See Also setPaint(Paint) draw(Canvas, Rect) draw(Canvas, RectF)
	3:	android.graphics.Paint public Paint (Paint paint) Create a new paint, initialized with the attributes in the specified paint parameter. Parameters paint Existing paint used to initialized the attributes of the new paint.
	4:	android.graphics.drawable.shapes.ArcShape public void draw (Canvas canvas, Paint paint) Draw this shape into the provided Canvas, with the provided Paint. Before calling this, you must call resize(float, float). Parameters canvas the Canvas within which this shape should be drawn paint the Paint object that defines this shape's characteristics
	5:	android.graphics.Canvas public void drawPath (Path path, Paint paint) Draw the specified path using the specified paint. The path will be filled or framed based on the Style in the paint. Parameters path The path to be drawn paint The paint used to draw the path
	6:	android.graphics.Canvas public void drawRect (RectF rect, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters rect The rect to be drawn paint The paint used to draw the rect
	7:	android.graphics.Canvas public void drawRect (Rect r, Paint paint) Draw the specified Rect using the specified Paint. The rectangle will be filled or framed based on the Style in the paint. Parameters r The rectangle to be drawn. paint The paint used to draw the rectangle
	8:	android.graphics.drawable.shapes.OvalShape public void draw (Canvas canvas, Paint paint) Draw this shape into the provided Canvas, with the provided Paint. Before calling this, you must call resize(float, float). Parameters canvas the Canvas within which this shape should be drawn paint the Paint object that defines this shape's characteristics
	9:	android.graphics.drawable.shapes.PathShape public void draw (Canvas canvas, Paint paint) Draw this shape into the provided Canvas, with the provided Paint. Before calling this, you must call resize(float, float). Parameters canvas the Canvas within which this shape should be drawn paint the Paint object that defines this shape's characteristics
setFrameSequence
Set the frame sequence for this Sprite
	0:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	1:	android.hardware.Camera.Parameters public List<Integer> getSupportedPreviewFrameRates () This method was deprecated in API level 9. replaced by getSupportedPreviewFpsRange() Gets the supported preview frame rates. Returns a list of supported preview frame rates. null if preview frame rate setting is not supported.
	2:	android.view.Choreographer public void removeFrameCallback (Choreographer.FrameCallback callback) Removes a previously posted frame callback. Parameters callback The frame callback to remove. See Also postFrameCallback(Choreographer.FrameCallback) postFrameCallbackDelayed(Choreographer.FrameCallback, long)
	3:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	4:	android.graphics.drawable.AnimationDrawable public Drawable getFrame (int index) Returns The Drawable at the specified frame index
	5:	android.view.Choreographer public void postFrameCallback (Choreographer.FrameCallback callback) Posts a frame callback to run on the next frame. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. See Also postFrameCallbackDelayed(Choreographer.FrameCallback, long) removeFrameCallback(Choreographer.FrameCallback)
	6:	android.view.Choreographer public void postFrameCallbackDelayed (Choreographer.FrameCallback callback, long delayMillis) Posts a frame callback to run on the next frame after the specified delay. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. delayMillis The delay time in milliseconds. See Also postFrameCallback(Choreographer.FrameCallback) removeFrameCallback(Choreographer.FrameCallback)
	7:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs) Call this method after setDataSource(). This method finds a representative frame close to the given time position if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source. Call this method if one does not care how the frame is found as long as it is close to the given time; otherwise, please call getFrameAtTime(long, int). Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarentee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved. See Also getFrameAtTime(long, int)
	8:	android.view.Choreographer.FrameCallback public abstract void doFrame (long frameTimeNanos) Called when a new display frame is being rendered. This method provides the time in nanoseconds when the frame started being rendered. The frame time provides a stable time base for synchronizing animations and drawing. It should be used instead of uptimeMillis() or nanoTime() for animations and drawing in the UI. Using the frame time helps to reduce inter-frame jitter because the frame time is fixed at the time the frame was scheduled to start, regardless of when the animations or drawing callback actually runs. All callbacks that run as part of rendering a frame will observe the same frame time so using the frame time also helps to synchronize effects that are performed by different callbacks. Please note that the framework already takes care to process animations and drawing using the frame time as a stable time base. Most applications should not need to use the frame time information directly. Parameters frameTimeNanos The time in nanoseconds when the frame started being rendered, in the nanoTime() timebase. Divide this value by 1000000 to convert it to the uptimeMillis() time base.
	9:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs, int option) Call this method after setDataSource(). This method finds a representative frame close to the given time position by considering the given option if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source or just obtain and display a frame at the given time position. Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarantee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. option a hint on how the frame is found. Use OPTION_PREVIOUS_SYNC if one wants to retrieve a sync frame that has a timestamp earlier than or the same as timeUs. Use OPTION_NEXT_SYNC if one wants to retrieve a sync frame that has a timestamp later than or the same as timeUs. Use OPTION_CLOSEST_SYNC if one wants to retrieve a sync frame that has a timestamp closest to or the same as timeUs. Use OPTION_CLOSEST if one wants to retrieve a frame that may or may not be a sync frame but is closest to or the same as timeUs. OPTION_CLOSEST often has larger performance overhead compared to the other options if there is no sync frame located at timeUs. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved.
setImage
Changes the Image containing the Sprite's frames
	0:	java.text.Normalizer public static boolean isNormalized (CharSequence src, Normalizer.Form form) Check whether the given character sequence src is normalized according to the normalization method form. Parameters src character sequence to check form normalization form to check against Returns true if normalized according to form
	1:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	2:	android.view.Gravity public static void apply (int gravity, int w, int h, Rect container, Rect outRect) Apply a gravity constant to an object. This supposes that the layout direction is LTR. Parameters gravity The desired placement of the object, as defined by the constants in this class. w The horizontal size of the object. h The vertical size of the object. container The frame of the containing space, in which the object will be placed. Should be large enough to contain the width and height of the object. outRect Receives the computed frame of the object in its container.
	3:	android.hardware.Camera public final void setOneShotPreviewCallback (Camera.PreviewCallback cb) Installs a callback to be invoked for the next preview frame in addition to displaying it on the screen. After one invocation, the callback is cleared. This method can be called any time, even when preview is live. Any other preview callbacks are overridden. If you are using the preview data to create video or still images, strongly consider using MediaActionSound to properly indicate image capture or recording start/stop to the user. Parameters cb a callback object that receives a copy of the next preview frame, or null to stop receiving callbacks. See Also MediaActionSound
	4:	android.hardware.Camera public final void setPreviewCallback (Camera.PreviewCallback cb) Installs a callback to be invoked for every preview frame in addition to displaying them on the screen. The callback will be repeatedly called for as long as preview is active. This method can be called at any time, even while preview is live. Any other preview callbacks are overridden. If you are using the preview data to create video or still images, strongly consider using MediaActionSound to properly indicate image capture or recording start/stop to the user. Parameters cb a callback object that receives a copy of each preview frame, or null to stop receiving callbacks. See Also MediaActionSound
	5:	android.hardware.Camera public final void setPreviewCallbackWithBuffer (Camera.PreviewCallback cb) Installs a callback to be invoked for every preview frame, using buffers supplied with addCallbackBuffer(byte[]), in addition to displaying them on the screen. The callback will be repeatedly called for as long as preview is active and buffers are available. Any other preview callbacks are overridden. The purpose of this method is to improve preview efficiency and frame rate by allowing preview frame memory reuse. You must call addCallbackBuffer(byte[]) at some point -- before or after calling this method -- or no callbacks will received. The buffer queue will be cleared if this method is called with a null callback, setPreviewCallback(Camera.PreviewCallback) is called, or setOneShotPreviewCallback(Camera.PreviewCallback) is called. If you are using the preview data to create video or still images, strongly consider using MediaActionSound to properly indicate image capture or recording start/stop to the user. Parameters cb a callback object that receives a copy of the preview frame, or null to stop receiving callbacks and clear the buffer queue. See Also addCallbackBuffer(byte[]) MediaActionSound
	6:	android.webkit.CookieSyncManager public void stopSync () stopSync() requests sync manager to stop sync. remove any SYNC_MESSAGE in the queue to break the sync loop
	7:	android.hardware.Camera public final void addCallbackBuffer (byte[] callbackBuffer) Adds a pre-allocated buffer to the preview callback buffer queue. Applications can add one or more buffers to the queue. When a preview frame arrives and there is still at least one available buffer, the buffer will be used and removed from the queue. Then preview callback is invoked with the buffer. If a frame arrives and there is no buffer left, the frame is discarded. Applications should add buffers back when they finish processing the data in them. For formats besides YV12, the size of the buffer is determined by multiplying the preview image width, height, and bytes per pixel. The width and height can be read from getPreviewSize(). Bytes per pixel can be computed from getBitsPerPixel(int) / 8, using the image format from getPreviewFormat(). If using the YV12 format, the size can be calculated using the equations listed in setPreviewFormat(int). This method is only necessary when setPreviewCallbackWithBuffer(PreviewCallback) is used. When setPreviewCallback(PreviewCallback) or setOneShotPreviewCallback(PreviewCallback) are used, buffers are automatically allocated. When a supplied buffer is too small to hold the preview frame data, preview callback will return null and the buffer will be removed from the buffer queue. Parameters callbackBuffer the buffer to add to the queue. The size of the buffer must match the values described above. See Also setPreviewCallbackWithBuffer(PreviewCallback)
	8:	android.preference.Preference public void setLayoutResource (int layoutResId) Sets the layout resource that is inflated as the View to be shown for this Preference. In most cases, the default layout is sufficient for custom Preference objects and only the widget layout needs to be changed. This layout should contain a ViewGroup with ID widget_frame to be the parent of the specific widget for this Preference. It should similarly contain title and summary. Parameters layoutResId The layout resource ID to be inflated and returned as a View. See Also setWidgetLayoutResource(int)
	9:	android.view.Gravity public static void apply (int gravity, int w, int h, Rect container, Rect outRect, int layoutDirection) Apply a gravity constant to an object and take care if layout direction is RTL or not. Parameters gravity The desired placement of the object, as defined by the constants in this class. w The horizontal size of the object. h The vertical size of the object. container The frame of the containing space, in which the object will be placed. Should be large enough to contain the width and height of the object. outRect Receives the computed frame of the object in its container. layoutDirection The layout direction. See Also LAYOUT_DIRECTION_LTR LAYOUT_DIRECTION_RTL
defineCollisionRectangle
Defines the Sprite's bounding rectangle that is used for collision detection purposes
	0:	org.apache.http.message.BasicTokenIterator protected boolean isHttpSeparator (char ch) Checks whether a character is an HTTP separator. The implementation in this class checks only for the HTTP separators defined in RFC 2616, section 2.2. If you need to detect other separators beyond the US-ASCII character set, override this method. Parameters ch the character to check Returns true if the character is an HTTP separator
	1:	android.appwidget.AppWidgetManager public int[] getAppWidgetIds (ComponentName provider) Get the list of appWidgetIds that have been bound to the given AppWidget provider. Parameters provider The BroadcastReceiver that is the AppWidget provider to find appWidgetIds for.
	2:	java.util.Locale public String getDisplayName (Locale locale) Returns this locale's language name, country name, and variant, localized to locale. The exact output form depends on whether this locale corresponds to a specific language, country and variant. For example: new Locale("en").getDisplayName(Locale.US) -> English new Locale("en", "US").getDisplayName(Locale.US) -> English (United States) new Locale("en", "US", "POSIX").getDisplayName(Locale.US) -> English (United States,Computer) new Locale("en").getDisplayName(Locale.FRANCE) -> anglais new Locale("en", "US").getDisplayName(Locale.FRANCE) -> anglais (États-Unis) new Locale("en", "US", "POSIX").getDisplayName(Locale.FRANCE) -> anglais (États-Unis,informatique).
	3:	java.util.Scanner public String findWithinHorizon (String pattern, int horizon) Tries to find the pattern in the input between the current position and the specified horizon. Delimiters are ignored. This call is the same as invoking findWithinHorizon(Pattern.compile(pattern)). Parameters pattern the pattern used to scan. horizon the search limit. Returns the matched string, or null if the pattern is not found within the specified horizon. Throws IllegalStateException if the Scanner is closed. IllegalArgumentException if horizon is less than zero. See Also findWithinHorizon(Pattern, int)
	4:	android.text.format.DateUtils public static String formatElapsedTime (long elapsedSeconds) Formats an elapsed time in the form "MM:SS" or "H:MM:SS" for display on the call-in-progress screen. Parameters elapsedSeconds the elapsed time in seconds.
	5:	android.widget.Chronometer public void setFormat (String format) Sets the format string used for display. The Chronometer will display this string, with the first "%s" replaced by the current timer value in "MM:SS" or "H:MM:SS" form. If the format string is null, or if you never call setFormat(), the Chronometer will simply display the timer value in "MM:SS" or "H:MM:SS" form. Parameters format the format string.
	6:	android.view.FocusFinder public View findNearestTouchable (ViewGroup root, int x, int y, int direction, int[] deltas) Find the nearest touchable view to the specified view. Parameters root The root of the tree in which to search x X coordinate from which to start the search y Y coordinate from which to start the search direction Direction to look deltas Offset from the to the edge of the nearest view. Note that this array may already be populated with values. Returns The nearest touchable view, or null if none exists.
	7:	java.util.Currency public int getDefaultFractionDigits () Returns the default number of fraction digits for this currency. For instance, the default number of fraction digits for the US dollar is 2 because there are 100 US cents in a US dollar. For the Japanese Yen, the number is 0 because coins smaller than 1 Yen became invalid in 1953. In the case of pseudo-currencies, such as IMF Special Drawing Rights, -1 is returned.
	8:	android.location.Address public String getCountryCode () Returns the country code of the address, for example "US", or null if it is unknown.
	9:	android.os.Message public static Message obtain () Return a new Message instance from the global pool. Allows us to avoid allocating new objects in many cases.
setTransform
Sets the transform for this Sprite
	0:	android.graphics.Matrix public void setTranslate (float dx, float dy) Set the matrix to translate by (dx, dy).
	1:	android.graphics.Region public void translate (int dx, int dy, Region dst) Set the dst region to the result of translating this region by [dx, dy]. If this region is empty, then dst will be set to empty.
	2:	android.graphics.Camera public void applyToCanvas (Canvas canvas) Computes the matrix corresponding to the current transformation and applies it to the specified Canvas. Parameters canvas The Canvas to set the transform matrix onto
	3:	javax.xml.transform.dom.DOMSource public DOMSource () Zero-argument default constructor. If this constructor is used, and no DOM source is set using setNode(Node) , then the Transformer will create an empty source Document using newDocument(). See Also transform(Source, Result)
	4:	javax.xml.transform.sax.SAXSource public SAXSource () Zero-argument default constructor. If this constructor is used, and no SAX source is set using setInputSource(InputSource) , then the Transformer will create an empty source InputSource using new InputSource(). See Also transform(Source, Result)
	5:	android.graphics.Matrix public void mapPoints (float[] pts) Apply this matrix to the array of 2D points, and write the transformed points back into the array Parameters pts The array [x0, y0, x1, y1, ...] of points to transform.
	6:	android.bluetooth.BluetoothGattCharacteristic public boolean setValue (int value, int formatType, int offset) Set the locally stored value of this characteristic. See setValue(byte[]) for details. Parameters value New value for this characteristic formatType Integer format type used to transform the value parameter offset Offset at which the value should be placed Returns true if the locally stored value has been set
	7:	android.widget.Gallery protected boolean getChildStaticTransformation (View child, Transformation t) Sets t to be the static transformation of the child, if set, returning a boolean to indicate whether a static transform was set. The default implementation simply returns false; subclasses may override this method for different behavior. setStaticTransformationsEnabled(boolean) must be set to true for this method to be called. Parameters child The child view whose static transform is being requested t The Transformation which will hold the result Returns true if the transformation was set, false otherwise
	8:	javax.crypto.Cipher public final byte[] update (byte[] input, int inputOffset, int inputLen) Continues a multi-part transformation (encryption or decryption). The transformed bytes are returned. Parameters input the input bytes to transform. inputOffset the offset in the input to start. inputLen the length of the input to transform. Returns the transformed bytes in a new buffer, or null if the input has zero length. Throws IllegalStateException if this cipher instance is not initialized for encryption or decryption. IllegalArgumentException if input is null, or if inputOffset and inputLen do not specify a valid chunk in the input buffer.
	9:	javax.crypto.CipherSpi protected abstract byte[] engineUpdate (byte[] input, int inputOffset, int inputLen) Continues a multi-part transformation (encryption or decryption). The transformed bytes are returned. Parameters input the input bytes to transform. inputOffset the offset in the input to start. inputLen the length of the input to transform. Returns the transformed bytes in a new buffer, or null if the input has zero length. Throws IllegalStateException if this cipher instance is not initialized for encryption or decryption. IllegalArgumentException if the input is null, or if inputOffset and inputLen do not specify a valid chunk in the input buffer.
collidesWith
Checks for a collision between this Sprite and the specified Sprite
	0:	android.os.Debug public static int getGlobalClassInitTime () Returns the time spent successfully initializing classes between a start and stop.
	1:	android.os.Debug public static int getGlobalGcInvocationCount () Returns the number of non-concurrent GC invocations between a start and stop.
	2:	android.widget.GridView public int getVerticalSpacing () Returns the amount of vertical spacing between each item in the grid. Related XML Attributes android:verticalSpacing Returns The vertical spacing between items in pixels See Also setVerticalSpacing(int)
	3:	android.widget.GridView public void setVerticalSpacing (int verticalSpacing) Set the amount of vertical (y) spacing to place between each item in the grid. Related XML Attributes android:verticalSpacing Parameters verticalSpacing The amount of vertical space between items, in pixels. See Also getVerticalSpacing()
	4:	junit.framework.ComparisonFailure public String getMessage () Returns "..." in place of common prefix and "..." in place of common suffix between expected and actual. See Also getMessage()
	5:	android.os.Debug public static int getGlobalAllocCount () Returns the global count of objects allocated by the runtime between a start and stop.
	6:	android.os.Debug public static int getGlobalAllocSize () Returns the global size, in bytes, of objects allocated by the runtime between a start and stop.
	7:	android.os.Debug public static int getGlobalClassInitCount () Returns the number of classes successfully initialized (ie those that executed without throwing an exception) between a start and stop.
	8:	android.os.Debug public static int getGlobalFreedCount () Returns the global count of objects freed by the runtime between a start and stop.
	9:	android.os.Debug public static int getGlobalFreedSize () Returns the global size, in bytes, of objects freed by the runtime between a start and stop.
collidesWith
Checks for a collision between this Sprite and the specified TiledLayer
	0:	android.os.Debug public static int getGlobalClassInitTime () Returns the time spent successfully initializing classes between a start and stop.
	1:	android.os.Debug public static int getGlobalGcInvocationCount () Returns the number of non-concurrent GC invocations between a start and stop.
	2:	android.widget.GridView public int getVerticalSpacing () Returns the amount of vertical spacing between each item in the grid. Related XML Attributes android:verticalSpacing Returns The vertical spacing between items in pixels See Also setVerticalSpacing(int)
	3:	android.widget.GridView public void setVerticalSpacing (int verticalSpacing) Set the amount of vertical (y) spacing to place between each item in the grid. Related XML Attributes android:verticalSpacing Parameters verticalSpacing The amount of vertical space between items, in pixels. See Also getVerticalSpacing()
	4:	junit.framework.ComparisonFailure public String getMessage () Returns "..." in place of common prefix and "..." in place of common suffix between expected and actual. See Also getMessage()
	5:	android.os.Debug public static int getGlobalAllocCount () Returns the global count of objects allocated by the runtime between a start and stop.
	6:	android.os.Debug public static int getGlobalAllocSize () Returns the global size, in bytes, of objects allocated by the runtime between a start and stop.
	7:	android.os.Debug public static int getGlobalClassInitCount () Returns the number of classes successfully initialized (ie those that executed without throwing an exception) between a start and stop.
	8:	android.os.Debug public static int getGlobalFreedCount () Returns the global count of objects freed by the runtime between a start and stop.
	9:	android.os.Debug public static int getGlobalFreedSize () Returns the global size, in bytes, of objects freed by the runtime between a start and stop.
collidesWith
Checks for a collision between this Sprite and the specified Image with its upper left corner at the specified location
	0:	android.widget.PopupWindow public void showAsDropDown (View anchor) Display the content view in a popup window anchored to the bottom-left corner of the anchor view. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled, the bottom-left corner of the popup is pinned at the top left corner of the anchor view. Parameters anchor the view on which to pin the popup window See Also dismiss()
	1:	android.graphics.drawable.GradientDrawable public void setCornerRadii (float[] radii) Specify radii for each of the 4 corners. For each corner, the array contains 2 values, [X_radius, Y_radius]. The corners are ordered top-left, top-right, bottom-right, bottom-left. This property is honored only when the shape is of type RECTANGLE. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters radii 4 pairs of X and Y radius for each corner, specified in pixels. The length of this array must be >= 8 See Also mutate() setCornerRadii(float[]) setShape(int)
	2:	android.widget.PopupWindow public void showAsDropDown (View anchor, int xoff, int yoff, int gravity) Display the content view in a popup window anchored to the bottom-left corner of the anchor view offset by the specified x and y coordinates. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled, the bottom-left corner of the popup is pinned at the top left corner of the anchor view. If the view later scrolls to move anchor to a different location, the popup will be moved correspondingly. Parameters anchor the view on which to pin the popup window xoff A horizontal offset from the anchor in pixels yoff A vertical offset from the anchor in pixels gravity Alignment of the popup relative to the anchor See Also dismiss()
	3:	android.widget.PopupWindow public void showAsDropDown (View anchor, int xoff, int yoff) Display the content view in a popup window anchored to the bottom-left corner of the anchor view offset by the specified x and y coordinates. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled, the bottom-left corner of the popup is pinned at the top left corner of the anchor view. If the view later scrolls to move anchor to a different location, the popup will be moved correspondingly. Parameters anchor the view on which to pin the popup window xoff A horizontal offset from the anchor in pixels yoff A vertical offset from the anchor in pixels See Also dismiss()
	4:	android.graphics.drawable.shapes.RoundRectShape public RoundRectShape (float[] outerRadii, RectF inset, float[] innerRadii) RoundRectShape constructor. Specifies an outer (round)rect and an optional inner (round)rect. Parameters outerRadii An array of 8 radius values, for the outer roundrect. The first two floats are for the top-left corner (remaining pairs correspond clockwise). For no rounded corners on the outer rectangle, pass null. inset A RectF that specifies the distance from the inner rect to each side of the outer rect. For no inner, pass null. innerRadii An array of 8 radius values, for the inner roundrect. The first two floats are for the top-left corner (remaining pairs correspond clockwise). For no rounded corners on the inner rectangle, pass null. If inset parameter is null, this parameter is ignored.
	5:	android.graphics.Rect public Rect (int left, int top, int right, int bottom) Create a new rectangle with the specified coordinates. Note: no range checking is performed, so the caller must ensure that left <= right and top <= bottom. Parameters left The X coordinate of the left side of the rectangle top The Y coordinate of the top of the rectangle right The X coordinate of the right side of the rectangle bottom The Y coordinate of the bottom of the rectangle
	6:	android.graphics.RectF public RectF (float left, float top, float right, float bottom) Create a new rectangle with the specified coordinates. Note: no range checking is performed, so the caller must ensure that left <= right and top <= bottom. Parameters left The X coordinate of the left side of the rectangle top The Y coordinate of the top of the rectangle right The X coordinate of the right side of the rectangle bottom The Y coordinate of the bottom of the rectangle
	7:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, float left, float top, Paint paint) Draw the specified bitmap, with its top/left corner at (x,y), using the specified paint, transformed by the current matrix. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. If the bitmap and canvas have different densities, this function will take care of automatically scaling the bitmap to draw at the same density as the canvas. Parameters bitmap The bitmap to be drawn left The position of the left side of the bitmap being drawn top The position of the top side of the bitmap being drawn paint The paint used to draw the bitmap (may be null)
	8:	android.location.Geocoder public List<Address> getFromLocationName (String locationName, int maxResults, double lowerLeftLatitude, double lowerLeftLongitude, double upperRightLatitude, double upperRightLongitude) Returns an array of Addresses that are known to describe the named location, which may be a place name such as "Dalvik, Iceland", an address such as "1600 Amphitheatre Parkway, Mountain View, CA", an airport code such as "SFO", etc.. The returned addresses will be localized for the locale provided to this class's constructor. You may specify a bounding box for the search results by including the Latitude and Longitude of the Lower Left point and Upper Right point of the box. The query will block and returned values will be obtained by means of a network lookup. The results are a best guess and are not guaranteed to be meaningful or correct. It may be useful to call this method from a thread separate from your primary UI thread. Parameters locationName a user-supplied description of a location maxResults max number of addresses to return. Smaller numbers (1 to 5) are recommended lowerLeftLatitude the latitude of the lower left corner of the bounding box lowerLeftLongitude the longitude of the lower left corner of the bounding box upperRightLatitude the latitude of the upper right corner of the bounding box upperRightLongitude the longitude of the upper right corner of the bounding box Returns a list of Address objects. Returns null or empty list if no matches were found or there is no backend service available. Throws IllegalArgumentException if locationName is null IllegalArgumentException if any latitude is less than -90 or greater than 90 IllegalArgumentException if any longitude is less than -180 or greater than 180 IOException if the network is unavailable or any other I/O problem occurs
	9:	android.view.animation.GridLayoutAnimationController public void setDirection (int direction) Sets the direction of the animation. The direction is expressed as an integer containing a horizontal and vertical component. For instance, DIRECTION_BOTTOM_TO_TOP | DIRECTION_RIGHT_TO_LEFT. Parameters direction the direction of the animation See Also getDirection() DIRECTION_BOTTOM_TO_TOP DIRECTION_TOP_TO_BOTTOM DIRECTION_LEFT_TO_RIGHT DIRECTION_RIGHT_TO_LEFT DIRECTION_HORIZONTAL_MASK DIRECTION_VERTICAL_MASK
