Command
Creates a new command object with the given short label, type, and priority
	0:	java.lang.ProcessBuilder public ProcessBuilder command (String... command) Changes the program and arguments of this process builder. Parameters command the new operating system program and its arguments. Returns this process builder instance.
	1:	java.lang.ProcessBuilder public ProcessBuilder command (List<String> command) Changes the program and arguments of this process builder. Note that the list passed to this method is not copied, so any subsequent updates to it are reflected in this instance's state. Parameters command the new operating system program and its arguments. Returns this process builder instance. Throws NullPointerException if command is null.
	2:	java.lang.ProcessBuilder public ProcessBuilder (String... command) Constructs a new ProcessBuilder instance with the specified operating system program and its arguments. Parameters command the requested operating system program and its arguments.
	3:	java.lang.ProcessBuilder public List<String> command () Returns this process builder's current program and arguments. Note that the returned list is not a copy and modifications to it will change the state of this instance. Returns this process builder's program and arguments.
	4:	java.lang.ProcessBuilder public ProcessBuilder (List<String> command) Constructs a new ProcessBuilder instance with the specified operating system program and its arguments. Note that the list passed to this constructor is not copied, so any subsequent updates to it are reflected in this instance's state. Parameters command the requested operating system program and its arguments. Throws NullPointerException if command is null.
	5:	java.util.concurrent.ScheduledThreadPoolExecutor public void execute (Runnable command) Executes command with zero required delay. This has effect equivalent to schedule(command, 0, anyUnit). Note that inspections of the queue and of the list returned by shutdownNow will access the zero-delayed ScheduledFuture, not the command itself. A consequence of the use of ScheduledFuture objects is that afterExecute is always called with a null second Throwable argument, even if the command terminated abruptly. Instead, the Throwable thrown by such a task can be obtained via get(). Parameters command the task to execute Throws RejectedExecutionException at discretion of RejectedExecutionHandler, if the task cannot be accepted for execution because the executor has been shut down NullPointerException
	6:	java.util.concurrent.Executor public abstract void execute (Runnable command) Executes the given command at some time in the future. The command may execute in a new thread, in a pooled thread, or in the calling thread, at the discretion of the Executor implementation. Parameters command the runnable task Throws RejectedExecutionException if this task cannot be accepted for execution NullPointerException if command is null
	7:	java.lang.Compiler public static Object command (Object cmd) Executes an operation according to the specified command object. This method is the low-level interface to the JIT compiler. It may return any object or null if no JIT compiler is available. Returns null on Android, whether or not the system has a JIT. Parameters cmd the command object for the JIT compiler. Returns the result of executing command or null.
	8:	java.util.concurrent.ScheduledExecutorService public abstract ScheduledFuture<?> schedule (Runnable command, long delay, TimeUnit unit) Creates and executes a one-shot action that becomes enabled after the given delay. Parameters command the task to execute delay the time from now to delay execution unit the time unit of the delay parameter Returns a ScheduledFuture representing pending completion of the task and whose get() method will return null upon completion Throws RejectedExecutionException if the task cannot be scheduled for execution NullPointerException if command is null
	9:	java.util.concurrent.ScheduledThreadPoolExecutor public ScheduledFuture<?> schedule (Runnable command, long delay, TimeUnit unit) Creates and executes a one-shot action that becomes enabled after the given delay. Parameters command the task to execute delay the time from now to delay execution unit the time unit of the delay parameter Returns a ScheduledFuture representing pending completion of the task and whose get() method will return null upon completion Throws RejectedExecutionException NullPointerException
Command
Creates a new command object with the given labels, type, and priority
	0:	java.lang.ProcessBuilder public ProcessBuilder command (String... command) Changes the program and arguments of this process builder. Parameters command the new operating system program and its arguments. Returns this process builder instance.
	1:	java.lang.ProcessBuilder public ProcessBuilder command (List<String> command) Changes the program and arguments of this process builder. Note that the list passed to this method is not copied, so any subsequent updates to it are reflected in this instance's state. Parameters command the new operating system program and its arguments. Returns this process builder instance. Throws NullPointerException if command is null.
	2:	java.lang.ProcessBuilder public ProcessBuilder (String... command) Constructs a new ProcessBuilder instance with the specified operating system program and its arguments. Parameters command the requested operating system program and its arguments.
	3:	java.lang.ProcessBuilder public List<String> command () Returns this process builder's current program and arguments. Note that the returned list is not a copy and modifications to it will change the state of this instance. Returns this process builder's program and arguments.
	4:	java.lang.ProcessBuilder public ProcessBuilder (List<String> command) Constructs a new ProcessBuilder instance with the specified operating system program and its arguments. Note that the list passed to this constructor is not copied, so any subsequent updates to it are reflected in this instance's state. Parameters command the requested operating system program and its arguments. Throws NullPointerException if command is null.
	5:	java.util.concurrent.ScheduledThreadPoolExecutor public void execute (Runnable command) Executes command with zero required delay. This has effect equivalent to schedule(command, 0, anyUnit). Note that inspections of the queue and of the list returned by shutdownNow will access the zero-delayed ScheduledFuture, not the command itself. A consequence of the use of ScheduledFuture objects is that afterExecute is always called with a null second Throwable argument, even if the command terminated abruptly. Instead, the Throwable thrown by such a task can be obtained via get(). Parameters command the task to execute Throws RejectedExecutionException at discretion of RejectedExecutionHandler, if the task cannot be accepted for execution because the executor has been shut down NullPointerException
	6:	java.util.concurrent.Executor public abstract void execute (Runnable command) Executes the given command at some time in the future. The command may execute in a new thread, in a pooled thread, or in the calling thread, at the discretion of the Executor implementation. Parameters command the runnable task Throws RejectedExecutionException if this task cannot be accepted for execution NullPointerException if command is null
	7:	java.lang.Compiler public static Object command (Object cmd) Executes an operation according to the specified command object. This method is the low-level interface to the JIT compiler. It may return any object or null if no JIT compiler is available. Returns null on Android, whether or not the system has a JIT. Parameters cmd the command object for the JIT compiler. Returns the result of executing command or null.
	8:	java.util.concurrent.ScheduledExecutorService public abstract ScheduledFuture<?> schedule (Runnable command, long delay, TimeUnit unit) Creates and executes a one-shot action that becomes enabled after the given delay. Parameters command the task to execute delay the time from now to delay execution unit the time unit of the delay parameter Returns a ScheduledFuture representing pending completion of the task and whose get() method will return null upon completion Throws RejectedExecutionException if the task cannot be scheduled for execution NullPointerException if command is null
	9:	java.util.concurrent.ScheduledThreadPoolExecutor public ScheduledFuture<?> schedule (Runnable command, long delay, TimeUnit unit) Creates and executes a one-shot action that becomes enabled after the given delay. Parameters command the task to execute delay the time from now to delay execution unit the time unit of the delay parameter Returns a ScheduledFuture representing pending completion of the task and whose get() method will return null upon completion Throws RejectedExecutionException NullPointerException
getLabel
Gets the short label of the command
	0:	android.print.PrintAttributes.Resolution public String getLabel () Gets the resolution human readable label. Returns The human readable label.
	1:	android.print.PrintJobInfo public String getLabel () Gets the human readable job label. Returns The label.
	2:	android.app.RemoteInput public CharSequence getLabel () Get the label to display to users when collecting this input.
	3:	android.support.v4.app.RemoteInput public CharSequence getLabel () Get the label to display to users when collecting this input.
	4:	android.content.ClipDescription public CharSequence getLabel () Return the label for this clip.
	5:	android.print.PrintAttributes.MediaSize public String getLabel (PackageManager packageManager) Gets the human readable media size label. Parameters packageManager The package manager for loading the label. Returns The human readable label.
	6:	android.view.inputmethod.CompletionInfo public CharSequence getLabel () Return the user-visible label for the completion, or null if the plain text should be shown. If non-null, this will be what the user sees as the completion option instead of the actual text.
	7:	android.webkit.DateSorter public String getLabel (int index) Parameters index date bin index as returned by getIndex() Returns string label suitable for display to user
	8:	android.test.mock.MockPackageManager public CharSequence getApplicationLabel (ApplicationInfo info) Return the label to use for this application. Parameters info The application to get the label of. Returns Returns the label associated with this application, or null if it could not be found for any reason.
	9:	android.content.pm.PackageManager public abstract CharSequence getApplicationLabel (ApplicationInfo info) Return the label to use for this application. Parameters info The application to get the label of. Returns Returns the label associated with this application, or null if it could not be found for any reason.
getLongLabel
Gets the long label of the command
	0:	android.view.inputmethod.CompletionInfo public CompletionInfo (long id, int index, CharSequence text, CharSequence label) Create a full completion with both text and label. The text is what will get inserted into the editor, while the label is what the IME should display. If they are the same, use the version of the constructor without a `label' argument. Parameters id An id that get passed as is (to the editor's discretion) index An index that get passed as is. Typically this is the index in the list of completions inside the editor. text The text that should be inserted into the editor when this completion is chosen. label The text that the IME should be showing among the completions list.
	1:	android.print.PrintAttributes.Resolution public String getLabel () Gets the resolution human readable label. Returns The human readable label.
	2:	android.print.PrintJobInfo public String getLabel () Gets the human readable job label. Returns The label.
	3:	android.view.inputmethod.CompletionInfo public CompletionInfo (long id, int index, CharSequence text) Create a simple completion with just text, no label. Parameters id An id that get passed as is (to the editor's discretion) index An index that get passed as is. Typically this is the index in the list of completions inside the editor. text The text that should be inserted into the editor when this completion is chosen.
	4:	java.util.concurrent.ScheduledExecutorService public abstract ScheduledFuture<?> schedule (Runnable command, long delay, TimeUnit unit) Creates and executes a one-shot action that becomes enabled after the given delay. Parameters command the task to execute delay the time from now to delay execution unit the time unit of the delay parameter Returns a ScheduledFuture representing pending completion of the task and whose get() method will return null upon completion Throws RejectedExecutionException if the task cannot be scheduled for execution NullPointerException if command is null
	5:	android.test.mock.MockPackageManager public CharSequence getApplicationLabel (ApplicationInfo info) Return the label to use for this application. Parameters info The application to get the label of. Returns Returns the label associated with this application, or null if it could not be found for any reason.
	6:	android.content.pm.PackageManager public abstract CharSequence getApplicationLabel (ApplicationInfo info) Return the label to use for this application. Parameters info The application to get the label of. Returns Returns the label associated with this application, or null if it could not be found for any reason.
	7:	android.print.PrintAttributes.MediaSize public String getLabel (PackageManager packageManager) Gets the human readable media size label. Parameters packageManager The package manager for loading the label. Returns The human readable label.
	8:	java.util.concurrent.ScheduledThreadPoolExecutor public ScheduledFuture<?> schedule (Runnable command, long delay, TimeUnit unit) Creates and executes a one-shot action that becomes enabled after the given delay. Parameters command the task to execute delay the time from now to delay execution unit the time unit of the delay parameter Returns a ScheduledFuture representing pending completion of the task and whose get() method will return null upon completion Throws RejectedExecutionException NullPointerException
	9:	javax.sql.RowSet public abstract String getCommand () Gets the RowSet's command property. Returns a string containing the RowSet's command property. A command is a SQL statement which is executed to fetch required data into the RowSet.
getCommandType
Gets the type of the command
	0:	javax.sql.RowSet public abstract String getCommand () Gets the RowSet's command property. Returns a string containing the RowSet's command property. A command is a SQL statement which is executed to fetch required data into the RowSet.
	1:	android.renderscript.Allocation public Type getType () Get the Type of the Allocation. Returns Type
	2:	android.support.v8.renderscript.Allocation public Type getType () Get the Type of the Allocation. Returns Type
	3:	java.sql.BatchUpdateException public int[] getUpdateCounts () Gets the update count array giving status information for every command that was attempted in the batch. If a batch update command fails and a BatchUpdateException is thrown, the JDBC driver may continue processing the remaining commands in the batch. If the driver does so, the array returned by BatchUpdateException.getUpdateCounts has an element for every command in the batch, not only those that executed successfully. In this case, the array element for any command which encountered a problem is set to Statement.EXECUTE_FAILED. Returns an array that contains the successful update counts, before this exception was thrown. Alternatively, if the driver continues to process commands following an error, for each successive command there is a corresponding element in the array giving one of the following status values: the number of successful updates Statement.SUCCESS_NO_INFO indicating that the command completed successfully, but the amount of altered rows is unknown. Statement.EXECUTE_FAILED indicating that the command was unsuccessful.
	4:	java.util.concurrent.ScheduledThreadPoolExecutor public void execute (Runnable command) Executes command with zero required delay. This has effect equivalent to schedule(command, 0, anyUnit). Note that inspections of the queue and of the list returned by shutdownNow will access the zero-delayed ScheduledFuture, not the command itself. A consequence of the use of ScheduledFuture objects is that afterExecute is always called with a null second Throwable argument, even if the command terminated abruptly. Instead, the Throwable thrown by such a task can be obtained via get(). Parameters command the task to execute Throws RejectedExecutionException at discretion of RejectedExecutionHandler, if the task cannot be accepted for execution because the executor has been shut down NullPointerException
	5:	android.view.accessibility.AccessibilityEvent public int getEventType () Gets the event type. Returns The event type.
	6:	android.view.InputDevice public int getKeyboardType () Gets the keyboard type. Returns The keyboard type.
	7:	android.net.nsd.NsdServiceInfo public String getServiceType () Get the service type
	8:	android.view.inputmethod.InputConnection public abstract boolean performPrivateCommand (String action, Bundle data) API to send private commands from an input method to its connected editor. This can be used to provide domain-specific features that are only known between certain input methods and their clients. Note that because the InputConnection protocol is asynchronous, you have no way to get a result back or know if the client understood the command; you can use the information in EditorInfo to determine if a client supports a particular command. Parameters action Name of the command to be performed. This must be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting commands. data Any data to include with the command. Returns true if the command was sent (whether or not the associated editor understood it), false if the input connection is no longer valid.
	9:	android.view.inputmethod.InputConnectionWrapper public boolean performPrivateCommand (String action, Bundle data) API to send private commands from an input method to its connected editor. This can be used to provide domain-specific features that are only known between certain input methods and their clients. Note that because the InputConnection protocol is asynchronous, you have no way to get a result back or know if the client understood the command; you can use the information in EditorInfo to determine if a client supports a particular command. Parameters action Name of the command to be performed. This must be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting commands. data Any data to include with the command. Returns true if the command was sent (whether or not the associated editor understood it), false if the input connection is no longer valid.
getPriority
Gets the priority of the command
	0:	android.content.IntentFilter public final int getPriority () Return the priority of this filter. Returns The priority of the filter. See Also setPriority(int)
	1:	android.view.accessibility.AccessibilityRecord public List<CharSequence> getText () Gets the text of the event. The index in the list represents the priority of the text. Specifically, the lower the index the higher the priority. Returns The text.
	2:	android.support.v4.view.accessibility.AccessibilityRecordCompat public List<CharSequence> getText () Gets the text of the event. The index in the list represents the priority of the text. Specifically, the lower the index the higher the priority. Returns The text.
	3:	javax.sql.RowSet public abstract String getCommand () Gets the RowSet's command property. Returns a string containing the RowSet's command property. A command is a SQL statement which is executed to fetch required data into the RowSet.
	4:	java.sql.BatchUpdateException public int[] getUpdateCounts () Gets the update count array giving status information for every command that was attempted in the batch. If a batch update command fails and a BatchUpdateException is thrown, the JDBC driver may continue processing the remaining commands in the batch. If the driver does so, the array returned by BatchUpdateException.getUpdateCounts has an element for every command in the batch, not only those that executed successfully. In this case, the array element for any command which encountered a problem is set to Statement.EXECUTE_FAILED. Returns an array that contains the successful update counts, before this exception was thrown. Alternatively, if the driver continues to process commands following an error, for each successive command there is a corresponding element in the array giving one of the following status values: the number of successful updates Statement.SUCCESS_NO_INFO indicating that the command completed successfully, but the amount of altered rows is unknown. Statement.EXECUTE_FAILED indicating that the command was unsuccessful.
	5:	java.util.concurrent.ScheduledThreadPoolExecutor public void execute (Runnable command) Executes command with zero required delay. This has effect equivalent to schedule(command, 0, anyUnit). Note that inspections of the queue and of the list returned by shutdownNow will access the zero-delayed ScheduledFuture, not the command itself. A consequence of the use of ScheduledFuture objects is that afterExecute is always called with a null second Throwable argument, even if the command terminated abruptly. Instead, the Throwable thrown by such a task can be obtained via get(). Parameters command the task to execute Throws RejectedExecutionException at discretion of RejectedExecutionHandler, if the task cannot be accepted for execution because the executor has been shut down NullPointerException
	6:	android.view.inputmethod.InputConnection public abstract boolean performPrivateCommand (String action, Bundle data) API to send private commands from an input method to its connected editor. This can be used to provide domain-specific features that are only known between certain input methods and their clients. Note that because the InputConnection protocol is asynchronous, you have no way to get a result back or know if the client understood the command; you can use the information in EditorInfo to determine if a client supports a particular command. Parameters action Name of the command to be performed. This must be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting commands. data Any data to include with the command. Returns true if the command was sent (whether or not the associated editor understood it), false if the input connection is no longer valid.
	7:	android.view.inputmethod.InputConnectionWrapper public boolean performPrivateCommand (String action, Bundle data) API to send private commands from an input method to its connected editor. This can be used to provide domain-specific features that are only known between certain input methods and their clients. Note that because the InputConnection protocol is asynchronous, you have no way to get a result back or know if the client understood the command; you can use the information in EditorInfo to determine if a client supports a particular command. Parameters action Name of the command to be performed. This must be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting commands. data Any data to include with the command. Returns true if the command was sent (whether or not the associated editor understood it), false if the input connection is no longer valid.
	8:	android.renderscript.RenderScript.Priority public static final Priority[] values () 
	9:	android.support.v8.renderscript.RenderScript.Priority public static final Priority[] values () 
