Sprite
Creates a new non-animated Sprite using the provided Image
	0:	android.view.animation.GridLayoutAnimationController public GridLayoutAnimationController (Animation animation) Creates a new layout animation controller with a delay of 50% for both rows and columns and the specified animation. Parameters animation the animation to use on each child of the view group
	1:	android.view.animation.LayoutAnimationController public LayoutAnimationController (Animation animation) Creates a new layout animation controller with a delay of 50% and the specified animation. Parameters animation the animation to use on each child of the view group
	2:	android.provider.MediaStore.Images.Media public static final String insertImage (ContentResolver cr, String imagePath, String name, String description) Insert an image and create a thumbnail for it. Parameters cr The content resolver to use imagePath The path to the image to insert name The name of the image description The description of the image Returns The URL to the newly created image Throws FileNotFoundException
	3:	android.media.ImageReader public static ImageReader newInstance (int width, int height, int format, int maxImages) Create a new reader for images of the desired size and format. The maxImages parameter determines the maximum number of Image objects that can be be acquired from the ImageReader simultaneously. Requesting more buffers will use up more memory, so it is important to use only the minimum number necessary for the use case. The valid sizes and formats depend on the source of the image data. Parameters width The width in pixels of the Images that this reader will produce. height The height in pixels of the Images that this reader will produce. format The format of the Image that this reader will produce. This must be one of the ImageFormat or PixelFormat constants. Note that not all formats is supported, like ImageFormat.NV21. maxImages The maximum number of images the user will want to access simultaneously. This should be as small as possible to limit memory use. Once maxImages Images are obtained by the user, one of them has to be released before a new Image will become available for access through acquireLatestImage() or acquireNextImage(). Must be greater than 0. See Also Image
	4:	android.widget.PopupWindow public PopupWindow (Context context) Create a new empty, non focusable popup window of dimension (0,0). The popup does provide a background.
	5:	android.widget.PopupWindow public PopupWindow (Context context, AttributeSet attrs) Create a new empty, non focusable popup window of dimension (0,0). The popup does provide a background.
	6:	android.hardware.Camera public final void setPreviewTexture (SurfaceTexture surfaceTexture) Sets the SurfaceTexture to be used for live preview. Either a surface or surface texture is necessary for preview, and preview is necessary to take pictures. The same surface texture can be re-set without harm. Setting a preview surface texture will un-set any preview surface that was set via setPreviewDisplay(SurfaceHolder). This method must be called before startPreview(). The one exception is that if the preview surface texture is not set (or set to null) before startPreview() is called, then this method may be called once with a non-null parameter to set the preview surface. (This allows camera setup and surface creation to happen in parallel, saving time.) The preview surface texture may not otherwise change while preview is running. The timestamps provided by getTimestamp() for a SurfaceTexture set as the preview texture have an unspecified zero point, and cannot be directly compared between different cameras or different instances of the same camera, or across multiple runs of the same program. If you are using the preview data to create video or still images, strongly consider using MediaActionSound to properly indicate image capture or recording start/stop to the user. Parameters surfaceTexture the SurfaceTexture to which the preview images are to be sent or null to remove the current preview surface texture Throws IOException if the method fails (for example, if the surface texture is unavailable or unsuitable). See Also MediaActionSound SurfaceTexture TextureView
	7:	java.security.KeyStore.Builder public static KeyStore.Builder newInstance (String type, Provider provider, KeyStore.ProtectionParameter protectionParameter) Returns a new Builder that creates a new KeyStore based on the provided arguments. If provider is null, all installed providers are searched, otherwise the key store from the specified provider is used. Parameters type the type of the KeyStore to be constructed. provider the provider of the KeyStore to be constructed, maybe null. protectionParameter the ProtectionParameter used to protect the stored keys. Returns a new Builder that creates a new KeyStore based on the provided arguments. Throws NullPointerException if type or protectionParameter is null. IllegalArgumentException protectionParameter not an instance of either PasswordProtection or CallbackHandlerProtection, file is not a file or does not exist at all.
	8:	java.security.KeyStore.Builder public static KeyStore.Builder newInstance (String type, Provider provider, File file, KeyStore.ProtectionParameter protectionParameter) Returns a new Builder that creates a new KeyStore based on the provided arguments. If provider is null, all installed providers are searched, otherwise the key store from the specified provider is used. Parameters type the type of the KeyStore to be constructed. provider the provider of the KeyStore to be constructed, maybe null. file the File that contains the data for the KeyStore. protectionParameter the ProtectionParameter used to protect the stored keys. Returns a new Builder that creates a new KeyStore based on the provided arguments. Throws NullPointerException if type, protectionParameter or file is null. IllegalArgumentException protectionParameter not an instance of either PasswordProtection or CallbackHandlerProtection, file is not a file or does not exist at all.
	9:	javax.crypto.Cipher public static final Cipher getInstance (String transformation) Creates a new Cipher for the specified transformation. The installed providers are searched in order for an implementation of the specified transformation. The first found provider providing the transformation is used to create the cipher. If no provider is found an exception is thrown. Parameters transformation the name of the transformation to create a cipher for. Returns a cipher for the requested transformation. Throws NoSuchAlgorithmException if no installed provider can provide the transformation, or it is null, empty or in an invalid format. NoSuchPaddingException if no installed provider can provide the padding scheme in the transformation.
Sprite
Creates a new animated Sprite using frames contained in the provided Image
	0:	android.view.Choreographer.FrameCallback public abstract void doFrame (long frameTimeNanos) Called when a new display frame is being rendered. This method provides the time in nanoseconds when the frame started being rendered. The frame time provides a stable time base for synchronizing animations and drawing. It should be used instead of uptimeMillis() or nanoTime() for animations and drawing in the UI. Using the frame time helps to reduce inter-frame jitter because the frame time is fixed at the time the frame was scheduled to start, regardless of when the animations or drawing callback actually runs. All callbacks that run as part of rendering a frame will observe the same frame time so using the frame time also helps to synchronize effects that are performed by different callbacks. Please note that the framework already takes care to process animations and drawing using the frame time as a stable time base. Most applications should not need to use the frame time information directly. Parameters frameTimeNanos The time in nanoseconds when the frame started being rendered, in the nanoTime() timebase. Divide this value by 1000000 to convert it to the uptimeMillis() time base.
	1:	android.view.animation.GridLayoutAnimationController public GridLayoutAnimationController (Animation animation) Creates a new layout animation controller with a delay of 50% for both rows and columns and the specified animation. Parameters animation the animation to use on each child of the view group
	2:	android.view.animation.LayoutAnimationController public LayoutAnimationController (Animation animation) Creates a new layout animation controller with a delay of 50% and the specified animation. Parameters animation the animation to use on each child of the view group
	3:	android.media.ImageReader public Image acquireNextImage () Acquire the next Image from the ImageReader's queue. Returns null if no new image is available. Warning: Consider using acquireLatestImage() instead, as it will automatically release older images, and allow slower-running processing routines to catch up to the newest frame. Usage of acquireNextImage() is recommended for batch/background processing. Incorrectly using this function can cause images to appear with an ever-increasing delay, followed by a complete stall where no new images seem to appear. This operation will fail by throwing an IllegalStateException if maxImages have been acquired with acquireNextImage() or acquireLatestImage(). In particular a sequence of acquireNextImage() or acquireLatestImage() calls greater than maxImages without calling close() in-between will exhaust the underlying queue. At such a time, IllegalStateException will be thrown until more images are released with close(). Returns a new frame of image data, or null if no image data is available. Throws IllegalStateException if maxImages images are currently acquired See Also acquireLatestImage()
	4:	android.view.animation.LayoutAnimationController public LayoutAnimationController (Animation animation, float delay) Creates a new layout animation controller with the specified delay and the specified animation. Parameters animation the animation to use on each child of the view group delay the delay by which each child's animation must be offset
	5:	java.security.KeyStore.Builder public static KeyStore.Builder newInstance (String type, Provider provider, File file, KeyStore.ProtectionParameter protectionParameter) Returns a new Builder that creates a new KeyStore based on the provided arguments. If provider is null, all installed providers are searched, otherwise the key store from the specified provider is used. Parameters type the type of the KeyStore to be constructed. provider the provider of the KeyStore to be constructed, maybe null. file the File that contains the data for the KeyStore. protectionParameter the ProtectionParameter used to protect the stored keys. Returns a new Builder that creates a new KeyStore based on the provided arguments. Throws NullPointerException if type, protectionParameter or file is null. IllegalArgumentException protectionParameter not an instance of either PasswordProtection or CallbackHandlerProtection, file is not a file or does not exist at all.
	6:	android.hardware.Camera public final void setPreviewCallbackWithBuffer (Camera.PreviewCallback cb) Installs a callback to be invoked for every preview frame, using buffers supplied with addCallbackBuffer(byte[]), in addition to displaying them on the screen. The callback will be repeatedly called for as long as preview is active and buffers are available. Any other preview callbacks are overridden. The purpose of this method is to improve preview efficiency and frame rate by allowing preview frame memory reuse. You must call addCallbackBuffer(byte[]) at some point -- before or after calling this method -- or no callbacks will received. The buffer queue will be cleared if this method is called with a null callback, setPreviewCallback(Camera.PreviewCallback) is called, or setOneShotPreviewCallback(Camera.PreviewCallback) is called. If you are using the preview data to create video or still images, strongly consider using MediaActionSound to properly indicate image capture or recording start/stop to the user. Parameters cb a callback object that receives a copy of the preview frame, or null to stop receiving callbacks and clear the buffer queue. See Also addCallbackBuffer(byte[]) MediaActionSound
	7:	android.media.ImageReader public Image acquireLatestImage () Acquire the latest Image from the ImageReader's queue, dropping older images. Returns null if no new image is available. This operation will acquire all the images possible from the ImageReader, but close() all images that aren't the latest. This function is recommended to use over acquireNextImage() for most use-cases, as it's more suited for real-time processing. Note that maxImages should be at least 2 for acquireLatestImage() to be any different than acquireNextImage() - discarding all-but-the-newest Image requires temporarily acquiring two Images at once. Or more generally, calling acquireLatestImage() with less than two images of margin, that is (maxImages - currentAcquiredImages < 2) will not discard as expected. This operation will fail by throwing an IllegalStateException if maxImages have been acquired with acquireLatestImage() or acquireNextImage(). In particular a sequence of acquireLatestImage() calls greater than getMaxImages() without calling close() in-between will exhaust the underlying queue. At such a time, IllegalStateException will be thrown until more images are released with close(). Returns latest frame of image data, or null if no image data is available. Throws IllegalStateException if too many images are currently acquired
	8:	android.hardware.Camera public final void setOneShotPreviewCallback (Camera.PreviewCallback cb) Installs a callback to be invoked for the next preview frame in addition to displaying it on the screen. After one invocation, the callback is cleared. This method can be called any time, even when preview is live. Any other preview callbacks are overridden. If you are using the preview data to create video or still images, strongly consider using MediaActionSound to properly indicate image capture or recording start/stop to the user. Parameters cb a callback object that receives a copy of the next preview frame, or null to stop receiving callbacks. See Also MediaActionSound
	9:	android.hardware.Camera public final void setPreviewCallback (Camera.PreviewCallback cb) Installs a callback to be invoked for every preview frame in addition to displaying them on the screen. The callback will be repeatedly called for as long as preview is active. This method can be called at any time, even while preview is live. Any other preview callbacks are overridden. If you are using the preview data to create video or still images, strongly consider using MediaActionSound to properly indicate image capture or recording start/stop to the user. Parameters cb a callback object that receives a copy of each preview frame, or null to stop receiving callbacks. See Also MediaActionSound
Sprite
Creates a new Sprite from another Sprite
	0:	android.os.ParcelFileDescriptor public ParcelFileDescriptor (ParcelFileDescriptor wrapped) Create a new ParcelFileDescriptor wrapped around another descriptor. By default all method calls are delegated to the wrapped descriptor.
	1:	android.content.ClipData public ClipData (ClipData other) Create a new clip that is a copy of another clip. This does a deep-copy of all items in the clip. Parameters other The existing ClipData that is to be copied.
	2:	org.w3c.dom.Element public abstract Attr setAttributeNode (Attr newAttr) Adds a new attribute node. If an attribute with that name ( nodeName) is already present in the element, it is replaced by the new one. Replacing an attribute node by itself has no effect. To add a new attribute node with a qualified name and namespace URI, use the setAttributeNodeNS method. Parameters newAttr The Attr node to add to the attribute list. Returns If the newAttr attribute replaces an existing attribute, the replaced Attr node is returned, otherwise null is returned. Throws DOMException WRONG_DOCUMENT_ERR: Raised if newAttr was created from a different document than the one that created the element. NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. INUSE_ATTRIBUTE_ERR: Raised if newAttr is already an attribute of another Element object. The DOM user must explicitly clone Attr nodes to re-use them in other elements.
	3:	android.media.MediaRouter public MediaRouter.RouteCategory createRouteCategory (CharSequence name, boolean isGroupable) Create a new route category. Each route must belong to a category. Parameters name Name of the new category isGroupable true if routes in this category may be grouped with one another Returns the new RouteCategory
	4:	android.media.MediaRouter public MediaRouter.RouteCategory createRouteCategory (int nameResId, boolean isGroupable) Create a new route category. Each route must belong to a category. Parameters nameResId Resource ID of the name of the new category isGroupable true if routes in this category may be grouped with one another Returns the new RouteCategory
	5:	android.bluetooth.BluetoothSocket public void connect () Attempt to connect to a remote device. This method will block until a connection is made or the connection fails. If this method returns without an exception then this socket is now connected. Creating new connections to remote Bluetooth devices should not be attempted while device discovery is in progress. Device discovery is a heavyweight procedure on the Bluetooth adapter and will significantly slow a device connection. Use cancelDiscovery() to cancel an ongoing discovery. Discovery is not managed by the Activity, but is run as a system service, so an application should always call cancelDiscovery() even if it did not directly request a discovery, just to be sure. close() can be used to abort this call from another thread. Throws IOException on error, for example connection failure
	6:	android.os.ParcelFileDescriptor public static ParcelFileDescriptor fromDatagramSocket (DatagramSocket datagramSocket) Create a new ParcelFileDescriptor from the specified DatagramSocket. Parameters datagramSocket The DatagramSocket whose FileDescriptor is used to create a new ParcelFileDescriptor. Returns A new ParcelFileDescriptor with the FileDescriptor of the specified DatagramSocket.
	7:	org.xml.sax.Parser public abstract void parse (InputSource source) Parse an XML document. The application can use this method to instruct the SAX parser to begin parsing an XML document from any valid input source (a character stream, a byte stream, or a URI). Applications may not invoke this method while a parse is in progress (they should create a new Parser instead for each additional XML document). Once a parse is complete, an application may reuse the same Parser object, possibly with a different input source. Parameters source The input source for the top-level of the XML document. Throws SAXException Any SAX exception, possibly wrapping another exception. IOException An IO exception from the parser, possibly from a byte stream or character stream supplied by the application. See Also InputSource parse(java.lang.String) setEntityResolver(EntityResolver) setDTDHandler(DTDHandler) setDocumentHandler(DocumentHandler) setErrorHandler(ErrorHandler)
	8:	org.json.JSONArray public JSONArray (Object array) Creates a new JSONArray with values from the given primitive array. Throws JSONException
	9:	android.util.JsonReader public JsonReader (Reader in) Creates a new instance that reads a JSON-encoded stream from in.
defineReferencePixel
Defines the reference pixel for this Sprite
	0:	android.hardware.Camera.PreviewCallback public abstract void onPreviewFrame (byte[] data, Camera camera) Called as preview frames are displayed. This callback is invoked on the event thread open(int) was called from. If using the YV12 format, refer to the equations in setPreviewFormat(int) for the arrangement of the pixel data in the preview callback buffers. Parameters data the contents of the preview frame in the format defined by ImageFormat, which can be queried with getPreviewFormat(). If setPreviewFormat(int) is never called, the default will be the YCbCr_420_SP (NV21) format. camera the Camera service object.
	1:	android.graphics.Bitmap public final int getRowBytes () Return the number of bytes between rows in the bitmap's pixels. Note that this refers to the pixels as stored natively by the bitmap. If you call getPixels() or setPixels(), then the pixels are uniformly treated as 32bit values, packed according to the Color class. As of KITKAT, this method should not be used to calculate the memory usage of the bitmap. Instead, see getAllocationByteCount(). Returns number of bytes between rows of the native bitmap pixels.
	2:	android.graphics.Bitmap public void recycle () Free the native object associated with this bitmap, and clear the reference to the pixel data. This will not free the pixel data synchronously; it simply allows it to be garbage collected if there are no other references. The bitmap is marked as "dead", meaning it will throw an exception if getPixels() or setPixels() is called, and will draw nothing. This operation cannot be reversed, so it should only be called if you are sure there are no further uses for the bitmap. This is an advanced call, and normally need not be called, since the normal GC process will free up this memory when there are no more references to this bitmap.
	3:	android.hardware.Camera.Parameters public void setPictureSize (int width, int height) Sets the dimensions for pictures. Applications need to consider the display orientation. See setPreviewSize(int, int) for reference. Parameters width the width for pictures, in pixels height the height for pictures, in pixels See Also setPreviewSize(int, int)
	4:	android.view.Display public int getPixelFormat () This method was deprecated in API level 17. This method is no longer supported. The result is always RGBA_8888. Gets the pixel format of the display. Returns One of the constants defined in PixelFormat.
	5:	android.hardware.Camera.Parameters public void setJpegThumbnailSize (int width, int height) Sets the dimensions for EXIF thumbnail in Jpeg picture. If applications set both width and height to 0, EXIF will not contain thumbnail. Applications need to consider the display orientation. See setPreviewSize(int, int) for reference. Parameters width the width of the thumbnail, in pixels height the height of the thumbnail, in pixels See Also setPreviewSize(int, int)
	6:	java.sql.CallableStatement public abstract void setNull (String parameterName, int sqlType, String typeName) Sets the value of a specified parameter to be SQL NULL where the parameter type is either REF or user defined (e.g. STRUCT , JAVA_OBJECT etc). For reasons of portability, the caller is expected to supply both the SQL type code and type name (which is just the parameter name if the type is user defined, referred to as a UDT, or the name of the referenced type in case of a REF type). Parameters parameterName the parameter name. sqlType a JDBC type expressed as a constant from Types. typeName if the target parameter is a user defined type then this should contain the full type name. The fully qualified name of a UDT or REF type is ignored if the parameter is not a UDT. Throws SQLException if a database error occurs. See Also Types
	7:	android.widget.RelativeLayout.LayoutParams public void addRule (int verb) Adds a layout rule to be interpreted by the RelativeLayout. This method should only be used for constraints that don't refer to another sibling (e.g., CENTER_IN_PARENT) or take a boolean value (TRUE for true or 0 for false). To specify a verb that takes a subject, use addRule(int, int) instead. Parameters verb One of the verbs defined by RelativeLayout, such as ALIGN_WITH_PARENT_LEFT. See Also addRule(int, int)
	8:	android.widget.RelativeLayout.LayoutParams public void addRule (int verb, int anchor) Adds a layout rule to be interpreted by the RelativeLayout. Use this for verbs that take a target, such as a sibling (ALIGN_RIGHT) or a boolean value (VISIBLE). Parameters verb One of the verbs defined by RelativeLayout, such as ALIGN_WITH_PARENT_LEFT. anchor The id of another view to use as an anchor, or a boolean value(represented as TRUE) for true or 0 for false). For verbs that don't refer to another sibling (for example, ALIGN_WITH_PARENT_BOTTOM) just use -1. See Also addRule(int)
	9:	javax.xml.transform.sax.SAXTransformerFactory public abstract TransformerHandler newTransformerHandler () Get a TransformerHandler object that can process SAX ContentHandler events into a Result. The transformation is defined as an identity (or copy) transformation, for example to copy a series of SAX parse events into a DOM tree. Returns A non-null reference to a TransformerHandler, that may be used as a ContentHandler for SAX parse events. Throws TransformerConfigurationException If for some reason the TransformerHandler cannot be created.
setRefPixelPosition
Sets this Sprite's position such that its reference pixel is located at (x,y) in the painter's coordinate system
	0:	android.graphics.Bitmap public int getPixel (int x, int y) Returns the Color at the specified location. Throws an exception if x or y are out of bounds (negative or >= to the width or height respectively). The returned color is a non-premultiplied ARGB value. Parameters x The x coordinate (0...width-1) of the pixel to return y The y coordinate (0...height-1) of the pixel to return Returns The argb Color at the specified coordinate Throws IllegalArgumentException if x, y exceed the bitmap's bounds
	1:	android.app.ActivityOptions public static ActivityOptions makeThumbnailScaleUpAnimation (View source, Bitmap thumbnail, int startX, int startY) Create an ActivityOptions specifying an animation where a thumbnail is scaled from a given position to the new activity window that is being started. If the Intent this is being used with has not set its Intent.setSourceBounds, those bounds will be filled in for you based on the initial thumbnail location and size provided here. Parameters source The View that this thumbnail is animating from. This defines the coordinate space for startX and startY. thumbnail The bitmap that will be shown as the initial thumbnail of the animation. startX The x starting location of the bitmap, relative to source. startY The y starting location of the bitmap, relative to source. Returns Returns a new ActivityOptions object that you can use to supply these options as the options Bundle when starting an activity.
	2:	android.support.v4.app.ActivityOptionsCompat public static ActivityOptionsCompat makeThumbnailScaleUpAnimation (View source, Bitmap thumbnail, int startX, int startY) Create an ActivityOptions specifying an animation where a thumbnail is scaled from a given position to the new activity window that is being started. If the Intent this is being used with has not set its setSourceBounds(android.graphics.Rect), those bounds will be filled in for you based on the initial thumbnail location and size provided here. Parameters source The View that this thumbnail is animating from. This defines the coordinate space for startX and startY. thumbnail The bitmap that will be shown as the initial thumbnail of the animation. startX The x starting location of the bitmap, relative to source. startY The y starting location of the bitmap, relative to source. Returns Returns a new ActivityOptions object that you can use to supply these options as the options Bundle when starting an activity.
	3:	android.widget.AbsoluteLayout.LayoutParams public AbsoluteLayout.LayoutParams (int width, int height, int x, int y) Creates a new set of layout parameters with the specified width, height and location. Parameters width the width, either MATCH_PARENT, WRAP_CONTENT or a fixed size in pixels height the height, either MATCH_PARENT, WRAP_CONTENT or a fixed size in pixels x the X location of the child y the Y location of the child
	4:	android.graphics.Path public void moveTo (float x, float y) Set the beginning of the next contour to the point (x,y). Parameters x The x-coordinate of the start of a new contour y The y-coordinate of the start of a new contour
	5:	android.graphics.drawable.GradientDrawable public void setGradientCenter (float x, float y) Sets the center location of the gradient. The radius is honored only when the gradient type is set to RADIAL_GRADIENT or SWEEP_GRADIENT. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters x The x coordinate of the gradient's center y The y coordinate of the gradient's center See Also mutate() setGradientType(int)
	6:	android.graphics.Point public void set (int x, int y) Set the point's x and y coordinates
	7:	android.graphics.PointF public final void set (float x, float y) Set the point's x and y coordinates
	8:	android.view.OrientationListener public void onSensorChanged (int sensor, float[] values) Called when sensor values have changed. The length and contents of the values array vary depending on which sensor is being monitored. See SensorManager for details on possible sensor types. Definition of the coordinate system used below. The X axis refers to the screen's horizontal axis (the small edge in portrait mode, the long edge in landscape mode) and points to the right. The Y axis refers to the screen's vertical axis and points towards the top of the screen (the origin is in the lower-left corner). The Z axis points toward the sky when the device is lying on its back on a table. IMPORTANT NOTE: The axis are swapped when the device's screen orientation changes. To access the unswapped values, use indices 3, 4 and 5 in values[]. SENSOR_ORIENTATION, SENSOR_ORIENTATION_RAW: All values are angles in degrees. values[0]: Azimuth, rotation around the Z axis (0<=azimuth<360). 0 = North, 90 = East, 180 = South, 270 = West values[1]: Pitch, rotation around X axis (-180<=pitch<=180), with positive values when the z-axis moves toward the y-axis. values[2]: Roll, rotation around Y axis (-90<=roll<=90), with positive values when the z-axis moves toward the x-axis. Note that this definition of yaw, pitch and roll is different from the traditional definition used in aviation where the X axis is along the long side of the plane (tail to nose). SENSOR_ACCELEROMETER: All values are in SI units (m/s^2) and measure contact forces. values[0]: force applied by the device on the x-axis values[1]: force applied by the device on the y-axis values[2]: force applied by the device on the z-axis Examples: When the device is pushed on its left side toward the right, the x acceleration value is negative (the device applies a reaction force to the push toward the left) When the device lies flat on a table, the acceleration value is -STANDARD_GRAVITY, which correspond to the force the device applies on the table in reaction to gravity. SENSOR_MAGNETIC_FIELD: All values are in micro-Tesla (uT) and measure the ambient magnetic field in the X, Y and -Z axis. Note: the magnetic field's Z axis is inverted. Parameters sensor The ID of the sensor being monitored values The new values for the sensor.
	9:	android.graphics.PointF public final void set (PointF p) Set the point's x and y coordinates to the coordinates of p
getRefPixelX
Gets the horizontal position of this Sprite's reference pixel in the painter's coordinate system
	0:	android.text.Layout public float getLineLeft (int line) Get the leftmost position that should be exposed for horizontal scrolling on the specified line.
	1:	android.text.Layout public float getLineRight (int line) Get the rightmost position that should be exposed for horizontal scrolling on the specified line.
	2:	android.text.Layout public int getOffsetForHorizontal (int line, float horiz) Get the character offset on the specified line whose position is closest to the specified horizontal position.
	3:	android.widget.NumberPicker public void scrollBy (int x, int y) Move the scrolled position of your view. This will cause a call to onScrollChanged(int, int, int, int) and the view will be invalidated. Parameters x the amount of pixels to scroll by horizontally y the amount of pixels to scroll by vertically
	4:	android.widget.OverScroller public void startScroll (int startX, int startY, int dx, int dy) Start scrolling by providing a starting point and the distance to travel. The scroll will use the default value of 250 milliseconds for the duration. Parameters startX Starting horizontal scroll offset in pixels. Positive numbers will scroll the content to the left. startY Starting vertical scroll offset in pixels. Positive numbers will scroll the content up. dx Horizontal distance to travel. Positive numbers will scroll the content to the left. dy Vertical distance to travel. Positive numbers will scroll the content up.
	5:	android.widget.OverScroller public void startScroll (int startX, int startY, int dx, int dy, int duration) Start scrolling by providing a starting point and the distance to travel. Parameters startX Starting horizontal scroll offset in pixels. Positive numbers will scroll the content to the left. startY Starting vertical scroll offset in pixels. Positive numbers will scroll the content up. dx Horizontal distance to travel. Positive numbers will scroll the content to the left. dy Vertical distance to travel. Positive numbers will scroll the content up. duration Duration of the scroll in milliseconds.
	6:	android.view.ScaleGestureDetector public float getFocusX () Get the X coordinate of the current gesture's focal point. If a gesture is in progress, the focal point is between each of the pointers forming the gesture. If isInProgress() would return false, the result of this function is undefined. Returns X coordinate of the focal point in pixels.
	7:	android.view.ScaleGestureDetector public float getFocusY () Get the Y coordinate of the current gesture's focal point. If a gesture is in progress, the focal point is between each of the pointers forming the gesture. If isInProgress() would return false, the result of this function is undefined. Returns Y coordinate of the focal point in pixels.
	8:	android.view.OrientationListener public void onSensorChanged (int sensor, float[] values) Called when sensor values have changed. The length and contents of the values array vary depending on which sensor is being monitored. See SensorManager for details on possible sensor types. Definition of the coordinate system used below. The X axis refers to the screen's horizontal axis (the small edge in portrait mode, the long edge in landscape mode) and points to the right. The Y axis refers to the screen's vertical axis and points towards the top of the screen (the origin is in the lower-left corner). The Z axis points toward the sky when the device is lying on its back on a table. IMPORTANT NOTE: The axis are swapped when the device's screen orientation changes. To access the unswapped values, use indices 3, 4 and 5 in values[]. SENSOR_ORIENTATION, SENSOR_ORIENTATION_RAW: All values are angles in degrees. values[0]: Azimuth, rotation around the Z axis (0<=azimuth<360). 0 = North, 90 = East, 180 = South, 270 = West values[1]: Pitch, rotation around X axis (-180<=pitch<=180), with positive values when the z-axis moves toward the y-axis. values[2]: Roll, rotation around Y axis (-90<=roll<=90), with positive values when the z-axis moves toward the x-axis. Note that this definition of yaw, pitch and roll is different from the traditional definition used in aviation where the X axis is along the long side of the plane (tail to nose). SENSOR_ACCELEROMETER: All values are in SI units (m/s^2) and measure contact forces. values[0]: force applied by the device on the x-axis values[1]: force applied by the device on the y-axis values[2]: force applied by the device on the z-axis Examples: When the device is pushed on its left side toward the right, the x acceleration value is negative (the device applies a reaction force to the push toward the left) When the device lies flat on a table, the acceleration value is -STANDARD_GRAVITY, which correspond to the force the device applies on the table in reaction to gravity. SENSOR_MAGNETIC_FIELD: All values are in micro-Tesla (uT) and measure the ambient magnetic field in the X, Y and -Z axis. Note: the magnetic field's Z axis is inverted. Parameters sensor The ID of the sensor being monitored values The new values for the sensor.
	9:	android.widget.GridView public int getHorizontalSpacing () Returns the amount of horizontal spacing currently used between each item in the grid. This is only accurate for the current layout. If setHorizontalSpacing(int) has been called but layout is not yet complete, this method may return a stale value. To get the horizontal spacing that was explicitly requested use getRequestedHorizontalSpacing(). Related XML Attributes android:horizontalSpacing Returns Current horizontal spacing between each item in pixels See Also setHorizontalSpacing(int) getRequestedHorizontalSpacing()
getRefPixelY
Gets the vertical position of this Sprite's reference pixel in the painter's coordinate system
	0:	android.text.Layout public int getLineForVertical (int vertical) Get the line number corresponding to the specified vertical position. If you ask for a position above 0, you get 0; if you ask for a position below the bottom of the text, you get the last line.
	1:	android.widget.AbsListView public int getVerticalScrollbarWidth () Returns the width of the vertical scrollbar. Returns The width in pixels of the vertical scrollbar or 0 if there is no vertical scrollbar.
	2:	android.graphics.Canvas public void drawVertices (Canvas.VertexMode mode, int vertexCount, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, Paint paint) Draw the array of vertices, interpreted as triangles (based on mode). The verts array is required, and specifies the x,y pairs for each vertex. If texs is non-null, then it is used to specify the coordinate in shader coordinates to use at each vertex (the paint must have a shader in this case). If there is no texs array, but there is a color array, then each color is interpolated across its corresponding triangle in a gradient. If both texs and colors arrays are present, then they behave as before, but the resulting color at each pixels is the result of multiplying the colors from the shader and the color-gradient together. The indices array is optional, but if it is present, then it is used to specify the index of each triangle, rather than just walking through the arrays in order. Parameters mode How to interpret the array of vertices vertexCount The number of values in the vertices array (and corresponding texs and colors arrays if non-null). Each logical vertex is two values (x, y), vertexCount must be a multiple of 2. verts Array of vertices for the mesh vertOffset Number of values in the verts to skip before drawing. texs May be null. If not null, specifies the coordinates to sample into the current shader (e.g. bitmap tile or gradient) texOffset Number of values in texs to skip before drawing. colors May be null. If not null, specifies a color for each vertex, to be interpolated across the triangle. colorOffset Number of values in colors to skip before drawing. indices If not null, array of indices to reference into the vertex (texs, colors) array. indexCount number of entries in the indices array (if not null). paint Specifies the shader to use if the texs array is non-null.
	3:	android.widget.NumberPicker public void scrollBy (int x, int y) Move the scrolled position of your view. This will cause a call to onScrollChanged(int, int, int, int) and the view will be invalidated. Parameters x the amount of pixels to scroll by horizontally y the amount of pixels to scroll by vertically
	4:	android.widget.OverScroller public void startScroll (int startX, int startY, int dx, int dy) Start scrolling by providing a starting point and the distance to travel. The scroll will use the default value of 250 milliseconds for the duration. Parameters startX Starting horizontal scroll offset in pixels. Positive numbers will scroll the content to the left. startY Starting vertical scroll offset in pixels. Positive numbers will scroll the content up. dx Horizontal distance to travel. Positive numbers will scroll the content to the left. dy Vertical distance to travel. Positive numbers will scroll the content up.
	5:	android.widget.OverScroller public void startScroll (int startX, int startY, int dx, int dy, int duration) Start scrolling by providing a starting point and the distance to travel. Parameters startX Starting horizontal scroll offset in pixels. Positive numbers will scroll the content to the left. startY Starting vertical scroll offset in pixels. Positive numbers will scroll the content up. dx Horizontal distance to travel. Positive numbers will scroll the content to the left. dy Vertical distance to travel. Positive numbers will scroll the content up. duration Duration of the scroll in milliseconds.
	6:	android.view.ScaleGestureDetector public float getFocusX () Get the X coordinate of the current gesture's focal point. If a gesture is in progress, the focal point is between each of the pointers forming the gesture. If isInProgress() would return false, the result of this function is undefined. Returns X coordinate of the focal point in pixels.
	7:	android.view.ScaleGestureDetector public float getFocusY () Get the Y coordinate of the current gesture's focal point. If a gesture is in progress, the focal point is between each of the pointers forming the gesture. If isInProgress() would return false, the result of this function is undefined. Returns Y coordinate of the focal point in pixels.
	8:	android.view.OrientationListener public void onSensorChanged (int sensor, float[] values) Called when sensor values have changed. The length and contents of the values array vary depending on which sensor is being monitored. See SensorManager for details on possible sensor types. Definition of the coordinate system used below. The X axis refers to the screen's horizontal axis (the small edge in portrait mode, the long edge in landscape mode) and points to the right. The Y axis refers to the screen's vertical axis and points towards the top of the screen (the origin is in the lower-left corner). The Z axis points toward the sky when the device is lying on its back on a table. IMPORTANT NOTE: The axis are swapped when the device's screen orientation changes. To access the unswapped values, use indices 3, 4 and 5 in values[]. SENSOR_ORIENTATION, SENSOR_ORIENTATION_RAW: All values are angles in degrees. values[0]: Azimuth, rotation around the Z axis (0<=azimuth<360). 0 = North, 90 = East, 180 = South, 270 = West values[1]: Pitch, rotation around X axis (-180<=pitch<=180), with positive values when the z-axis moves toward the y-axis. values[2]: Roll, rotation around Y axis (-90<=roll<=90), with positive values when the z-axis moves toward the x-axis. Note that this definition of yaw, pitch and roll is different from the traditional definition used in aviation where the X axis is along the long side of the plane (tail to nose). SENSOR_ACCELEROMETER: All values are in SI units (m/s^2) and measure contact forces. values[0]: force applied by the device on the x-axis values[1]: force applied by the device on the y-axis values[2]: force applied by the device on the z-axis Examples: When the device is pushed on its left side toward the right, the x acceleration value is negative (the device applies a reaction force to the push toward the left) When the device lies flat on a table, the acceleration value is -STANDARD_GRAVITY, which correspond to the force the device applies on the table in reaction to gravity. SENSOR_MAGNETIC_FIELD: All values are in micro-Tesla (uT) and measure the ambient magnetic field in the X, Y and -Z axis. Note: the magnetic field's Z axis is inverted. Parameters sensor The ID of the sensor being monitored values The new values for the sensor.
	9:	org.w3c.dom.Node public abstract short compareDocumentPosition (Node other) Compares the reference node, i.e. the node on which this method is being called, with a node, i.e. the one passed as a parameter, with regard to their position in the document and according to the document order. Parameters other The node to compare against the reference node. Returns Returns how the node is positioned relatively to the reference node. Throws DOMException NOT_SUPPORTED_ERR: when the compared nodes are from different DOM implementations that do not coordinate to return consistent implementation-specific results.
setFrame
Selects the current frame in the frame sequence
	0:	android.widget.AutoCompleteTextView protected boolean setFrame (int l, int t, int r, int b) Assign a size and position to this view. This is called from layout. Parameters l Left position, relative to parent t Top position, relative to parent r Right position, relative to parent b Bottom position, relative to parent Returns true if the new size and position are different than the previous ones
	1:	android.widget.ImageView protected boolean setFrame (int l, int t, int r, int b) Assign a size and position to this view. This is called from layout. Parameters l Left position, relative to parent t Top position, relative to parent r Right position, relative to parent b Bottom position, relative to parent Returns true if the new size and position are different than the previous ones
	2:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	3:	android.media.ImageReader public Image acquireNextImage () Acquire the next Image from the ImageReader's queue. Returns null if no new image is available. Warning: Consider using acquireLatestImage() instead, as it will automatically release older images, and allow slower-running processing routines to catch up to the newest frame. Usage of acquireNextImage() is recommended for batch/background processing. Incorrectly using this function can cause images to appear with an ever-increasing delay, followed by a complete stall where no new images seem to appear. This operation will fail by throwing an IllegalStateException if maxImages have been acquired with acquireNextImage() or acquireLatestImage(). In particular a sequence of acquireNextImage() or acquireLatestImage() calls greater than maxImages without calling close() in-between will exhaust the underlying queue. At such a time, IllegalStateException will be thrown until more images are released with close(). Returns a new frame of image data, or null if no image data is available. Throws IllegalStateException if maxImages images are currently acquired See Also acquireLatestImage()
	4:	android.hardware.Camera.Parameters public int getPreviewFrameRate () This method was deprecated in API level 9. replaced by getPreviewFpsRange(int[]) Returns the setting for the rate at which preview frames are received. This is the target frame rate. The actual frame rate depends on the driver. Returns the frame rate setting (frames per second)
	5:	android.hardware.Camera.Parameters public void setPreviewFrameRate (int fps) This method was deprecated in API level 9. replaced by setPreviewFpsRange(int, int) Sets the rate at which preview frames are received. This is the target frame rate. The actual frame rate depends on the driver. Parameters fps the frame rate (frames per second)
	6:	android.graphics.drawable.AnimationDrawable public int getNumberOfFrames () Returns The number of frames in the animation
	7:	android.media.AudioRecord public int getNotificationMarkerPosition () Returns the notification marker position expressed in frames.
	8:	android.media.AudioRecord public int getPositionNotificationPeriod () Returns the notification update period expressed in frames.
	9:	android.view.Choreographer public void postFrameCallback (Choreographer.FrameCallback callback) Posts a frame callback to run on the next frame. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. See Also postFrameCallbackDelayed(Choreographer.FrameCallback, long) removeFrameCallback(Choreographer.FrameCallback)
getFrame
Gets the current index in the frame sequence
	0:	android.graphics.drawable.AnimationDrawable public Drawable getFrame (int index) Returns The Drawable at the specified frame index
	1:	java.text.CharacterIterator public abstract char current () Returns the character at the current index. Returns the current character, or DONE if the current index is past the beginning or end of the sequence.
	2:	android.view.accessibility.AccessibilityRecord public int getFromIndex () Gets the index of the first character of the changed sequence, or the beginning of a text selection or the index of the first visible item when scrolling. Returns The index of the first character or selection start or the first visible item.
	3:	java.util.logging.LogRecord public long getSequenceNumber () Gets the sequence number. Returns the sequence number.
	4:	android.view.accessibility.AccessibilityRecord public int getCurrentItemIndex () Gets the index of the source in the list of items the can be visited. Returns The current item index.
	5:	android.support.v4.view.accessibility.AccessibilityRecordCompat public int getCurrentItemIndex () Gets the index of the source in the list of items the can be visited. Returns The current item index.
	6:	android.support.v4.view.accessibility.AccessibilityRecordCompat public int getFromIndex () Gets the index of the first character of the changed sequence, or the beginning of a text selection or the index of the first visible item when scrolling. Returns The index of the first character or selection start or the first visible item.
	7:	java.util.BitSet public boolean get (int index) Returns the bit at index index. Indexes greater than the current length return false. Throws IndexOutOfBoundsException if index < 0.
	8:	java.util.concurrent.atomic.AtomicIntegerArray public final int get (int i) Gets the current value at position i. Parameters i the index Returns the current value
	9:	java.util.concurrent.atomic.AtomicLongArray public final long get (int i) Gets the current value at position i. Parameters i the index Returns the current value
getRawFrameCount
Gets the number of raw frames for this Sprite
	0:	android.graphics.drawable.AnimationDrawable public int getNumberOfFrames () Returns The number of frames in the animation
	1:	java.util.logging.LogRecord public String getMessage () Gets the raw message. Returns the raw message, may be null.
	2:	android.nfc.tech.IsoDep public byte[] transceive (byte[] data) Send raw ISO-DEP data to the tag and receive the response. Applications must only send the INF payload, and not the start of frame and end of frame indicators. Applications do not need to fragment the payload, it will be automatically fragmented and defragmented by transceive(byte[]) if it exceeds FSD/FSC limits. Use getMaxTransceiveLength() to retrieve the maximum number of bytes that can be sent with transceive(byte[]). This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with IOException if close() is called from another thread. Requires the NFC permission. Parameters data command bytes to send, must not be null Returns response bytes received, will not be null Throws if the tag leaves the field IOException if there is an I/O failure, or this operation is canceled
	3:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	4:	android.view.Display public float getRefreshRate () Gets the refresh rate of this display in frames per second.
	5:	android.hardware.Camera.Parameters public List<Integer> getSupportedPreviewFrameRates () This method was deprecated in API level 9. replaced by getSupportedPreviewFpsRange() Gets the supported preview frame rates. Returns a list of supported preview frame rates. null if preview frame rate setting is not supported.
	6:	android.hardware.Camera.Parameters public List<int[]> getSupportedPreviewFpsRange () Gets the supported preview fps (frame-per-second) ranges. Each range contains a minimum fps and maximum fps. If minimum fps equals to maximum fps, the camera outputs frames in fixed frame rate. If not, the camera outputs frames in auto frame rate. The actual frame rate fluctuates between the minimum and the maximum. The values are multiplied by 1000 and represented in integers. For example, if frame rate is 26.623 frames per second, the value is 26623. Returns a list of supported preview fps ranges. This method returns a list with at least one element. Every element is an int array of two values - minimum fps and maximum fps. The list is sorted from small to large (first by maximum fps and then minimum fps). See Also PREVIEW_FPS_MIN_INDEX PREVIEW_FPS_MAX_INDEX
	7:	java.util.logging.LogRecord public long getSequenceNumber () Gets the sequence number. Returns the sequence number.
	8:	android.graphics.pdf.PdfDocument.PageInfo public int getPageNumber () Gets the page number. Returns The page number.
	9:	android.telephony.PhoneNumberUtils public static String formatNumber (String source) Breaks the given number down and formats it according to the rules for the country the number is from. Parameters source The phone number to format Returns A locally acceptable formatting of the input, or the raw input if formatting rules aren't known for the number
getFrameSequenceLength
Gets the number of elements in the frame sequence
	0:	java.util.logging.LogRecord public long getSequenceNumber () Gets the sequence number. Returns the sequence number.
	1:	android.hardware.Camera.Parameters public List<int[]> getSupportedPreviewFpsRange () Gets the supported preview fps (frame-per-second) ranges. Each range contains a minimum fps and maximum fps. If minimum fps equals to maximum fps, the camera outputs frames in fixed frame rate. If not, the camera outputs frames in auto frame rate. The actual frame rate fluctuates between the minimum and the maximum. The values are multiplied by 1000 and represented in integers. For example, if frame rate is 26.623 frames per second, the value is 26623. Returns a list of supported preview fps ranges. This method returns a list with at least one element. Every element is an int array of two values - minimum fps and maximum fps. The list is sorted from small to large (first by maximum fps and then minimum fps). See Also PREVIEW_FPS_MIN_INDEX PREVIEW_FPS_MAX_INDEX
	2:	android.graphics.drawable.AnimationDrawable public int getNumberOfFrames () Returns The number of frames in the animation
	3:	java.util.logging.LogRecord public void setSequenceNumber (long sequenceNumber) Sets the sequence number. It is usually not necessary to call this method to change the sequence number because the number is allocated when this instance is constructed. Parameters sequenceNumber the sequence number to set.
	4:	android.renderscript.Allocation public Element getElement () Get the Element of the Type of the Allocation. Returns Element
	5:	android.mtp.MtpObjectInfo public final int getSequenceNumber () Returns the sequence number for the MTP object This field is typically not used for MTP devices, but is sometimes used to define a sequence of photos on PTP cameras. Returns the object's sequence number
	6:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	7:	android.text.AlteredCharSequence public int length () Returns the number of characters in this sequence. Returns the number of characters.
	8:	java.lang.CharSequence public abstract int length () Returns the number of characters in this sequence. Returns the number of characters.
	9:	android.view.Display public float getRefreshRate () Gets the refresh rate of this display in frames per second.
nextFrame
Selects the next frame in the frame sequence
	0:	android.view.Choreographer public void postFrameCallback (Choreographer.FrameCallback callback) Posts a frame callback to run on the next frame. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. See Also postFrameCallbackDelayed(Choreographer.FrameCallback, long) removeFrameCallback(Choreographer.FrameCallback)
	1:	android.view.Choreographer public void postFrameCallbackDelayed (Choreographer.FrameCallback callback, long delayMillis) Posts a frame callback to run on the next frame after the specified delay. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. delayMillis The delay time in milliseconds. See Also postFrameCallback(Choreographer.FrameCallback) removeFrameCallback(Choreographer.FrameCallback)
	2:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	3:	android.media.ImageReader public Image acquireNextImage () Acquire the next Image from the ImageReader's queue. Returns null if no new image is available. Warning: Consider using acquireLatestImage() instead, as it will automatically release older images, and allow slower-running processing routines to catch up to the newest frame. Usage of acquireNextImage() is recommended for batch/background processing. Incorrectly using this function can cause images to appear with an ever-increasing delay, followed by a complete stall where no new images seem to appear. This operation will fail by throwing an IllegalStateException if maxImages have been acquired with acquireNextImage() or acquireLatestImage(). In particular a sequence of acquireNextImage() or acquireLatestImage() calls greater than maxImages without calling close() in-between will exhaust the underlying queue. At such a time, IllegalStateException will be thrown until more images are released with close(). Returns a new frame of image data, or null if no image data is available. Throws IllegalStateException if maxImages images are currently acquired See Also acquireLatestImage()
	4:	android.graphics.Interpolator public void setKeyFrame (int index, int msec, float[] values) Assign the keyFrame (specified by index) a time value and an array of key values (with an implicity blend array of [0, 0, 1, 1] giving linear transition to the next set of key values). Parameters index The index of the key frame to assign msec The time (in mililiseconds) for this key frame. Based on the SystemClock.uptimeMillis() clock values Array of values associated with theis key frame
	5:	android.hardware.Camera.Parameters public int getPreviewFrameRate () This method was deprecated in API level 9. replaced by getPreviewFpsRange(int[]) Returns the setting for the rate at which preview frames are received. This is the target frame rate. The actual frame rate depends on the driver. Returns the frame rate setting (frames per second)
	6:	android.hardware.Camera.Parameters public void setPreviewFrameRate (int fps) This method was deprecated in API level 9. replaced by setPreviewFpsRange(int, int) Sets the rate at which preview frames are received. This is the target frame rate. The actual frame rate depends on the driver. Parameters fps the frame rate (frames per second)
	7:	android.graphics.drawable.AnimationDrawable public int getNumberOfFrames () Returns The number of frames in the animation
	8:	android.media.AudioRecord public int getNotificationMarkerPosition () Returns the notification marker position expressed in frames.
	9:	android.media.AudioRecord public int getPositionNotificationPeriod () Returns the notification update period expressed in frames.
prevFrame
Selects the previous frame in the frame sequence
	0:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	1:	android.hardware.Camera.Parameters public int getPreviewFrameRate () This method was deprecated in API level 9. replaced by getPreviewFpsRange(int[]) Returns the setting for the rate at which preview frames are received. This is the target frame rate. The actual frame rate depends on the driver. Returns the frame rate setting (frames per second)
	2:	android.hardware.Camera.Parameters public void setPreviewFrameRate (int fps) This method was deprecated in API level 9. replaced by setPreviewFpsRange(int, int) Sets the rate at which preview frames are received. This is the target frame rate. The actual frame rate depends on the driver. Parameters fps the frame rate (frames per second)
	3:	android.graphics.drawable.AnimationDrawable public int getNumberOfFrames () Returns The number of frames in the animation
	4:	android.media.AudioRecord public int getNotificationMarkerPosition () Returns the notification marker position expressed in frames.
	5:	android.media.AudioRecord public int getPositionNotificationPeriod () Returns the notification update period expressed in frames.
	6:	android.view.Choreographer public void postFrameCallback (Choreographer.FrameCallback callback) Posts a frame callback to run on the next frame. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. See Also postFrameCallbackDelayed(Choreographer.FrameCallback, long) removeFrameCallback(Choreographer.FrameCallback)
	7:	android.view.Choreographer public void postFrameCallbackDelayed (Choreographer.FrameCallback callback, long delayMillis) Posts a frame callback to run on the next frame after the specified delay. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. delayMillis The delay time in milliseconds. See Also postFrameCallback(Choreographer.FrameCallback) removeFrameCallback(Choreographer.FrameCallback)
	8:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs, int option) Call this method after setDataSource(). This method finds a representative frame close to the given time position by considering the given option if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source or just obtain and display a frame at the given time position. Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarantee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. option a hint on how the frame is found. Use OPTION_PREVIOUS_SYNC if one wants to retrieve a sync frame that has a timestamp earlier than or the same as timeUs. Use OPTION_NEXT_SYNC if one wants to retrieve a sync frame that has a timestamp later than or the same as timeUs. Use OPTION_CLOSEST_SYNC if one wants to retrieve a sync frame that has a timestamp closest to or the same as timeUs. Use OPTION_CLOSEST if one wants to retrieve a frame that may or may not be a sync frame but is closest to or the same as timeUs. OPTION_CLOSEST often has larger performance overhead compared to the other options if there is no sync frame located at timeUs. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved.
	9:	android.media.AudioTrack public int getNotificationMarkerPosition () Returns marker position expressed in frames. Returns marker position in wrapping frame units similar to getPlaybackHeadPosition(), or zero if marker is disabled.
paint
Draws the Sprite
	0:	android.graphics.Canvas public void drawPaint (Paint paint) Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint. Parameters paint The paint used to draw onto the canvas
	1:	android.graphics.Canvas public void drawPoints (float[] pts, Paint paint) Helper for drawPoints() that assumes you want to draw the entire array
	2:	android.graphics.NinePatch public Paint getPaint () Returns the paint used to draw this NinePatch. The paint can be null. See Also setPaint(Paint) draw(Canvas, Rect) draw(Canvas, RectF)
	3:	android.graphics.drawable.shapes.ArcShape public void draw (Canvas canvas, Paint paint) Draw this shape into the provided Canvas, with the provided Paint. Before calling this, you must call resize(float, float). Parameters canvas the Canvas within which this shape should be drawn paint the Paint object that defines this shape's characteristics
	4:	android.graphics.Canvas public void drawPath (Path path, Paint paint) Draw the specified path using the specified paint. The path will be filled or framed based on the Style in the paint. Parameters path The path to be drawn paint The paint used to draw the path
	5:	android.graphics.Canvas public void drawRect (RectF rect, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters rect The rect to be drawn paint The paint used to draw the rect
	6:	android.graphics.Canvas public void drawRect (Rect r, Paint paint) Draw the specified Rect using the specified Paint. The rectangle will be filled or framed based on the Style in the paint. Parameters r The rectangle to be drawn. paint The paint used to draw the rectangle
	7:	android.graphics.drawable.shapes.OvalShape public void draw (Canvas canvas, Paint paint) Draw this shape into the provided Canvas, with the provided Paint. Before calling this, you must call resize(float, float). Parameters canvas the Canvas within which this shape should be drawn paint the Paint object that defines this shape's characteristics
	8:	android.graphics.drawable.shapes.PathShape public void draw (Canvas canvas, Paint paint) Draw this shape into the provided Canvas, with the provided Paint. Before calling this, you must call resize(float, float). Parameters canvas the Canvas within which this shape should be drawn paint the Paint object that defines this shape's characteristics
	9:	android.graphics.drawable.shapes.RectShape public void draw (Canvas canvas, Paint paint) Draw this shape into the provided Canvas, with the provided Paint. Before calling this, you must call resize(float, float). Parameters canvas the Canvas within which this shape should be drawn paint the Paint object that defines this shape's characteristics
setFrameSequence
Set the frame sequence for this Sprite
	0:	android.hardware.Camera.Parameters public int getPreviewFrameRate () This method was deprecated in API level 9. replaced by getPreviewFpsRange(int[]) Returns the setting for the rate at which preview frames are received. This is the target frame rate. The actual frame rate depends on the driver. Returns the frame rate setting (frames per second)
	1:	android.hardware.Camera.Parameters public void setPreviewFrameRate (int fps) This method was deprecated in API level 9. replaced by setPreviewFpsRange(int, int) Sets the rate at which preview frames are received. This is the target frame rate. The actual frame rate depends on the driver. Parameters fps the frame rate (frames per second)
	2:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	3:	java.util.logging.LogRecord public void setSequenceNumber (long sequenceNumber) Sets the sequence number. It is usually not necessary to call this method to change the sequence number because the number is allocated when this instance is constructed. Parameters sequenceNumber the sequence number to set.
	4:	android.hardware.Camera.Parameters public List<Integer> getSupportedPreviewFrameRates () This method was deprecated in API level 9. replaced by getSupportedPreviewFpsRange() Gets the supported preview frame rates. Returns a list of supported preview frame rates. null if preview frame rate setting is not supported.
	5:	android.opengl.GLSurfaceView public void requestRender () Request that the renderer render a frame. This method is typically used when the render mode has been set to RENDERMODE_WHEN_DIRTY, so that frames are only rendered on demand. May be called from any thread. Must not be called before a renderer has been set.
	6:	android.graphics.drawable.DrawableContainer.DrawableContainerState public final void setVariablePadding (boolean variable) A boolean value indicating whether to use the maximum padding value of all frames in the set (false), or to use the padding value of the frame being shown (true). Default value is false.
	7:	android.media.MediaRecorder public void setCaptureRate (double fps) Set video frame capture rate. This can be used to set a different video frame capture rate than the recorded video's playback rate. This method also sets the recording mode to time lapse. In time lapse video recording, only video is recorded. Audio related parameters are ignored when a time lapse recording session starts, if an application sets them. Parameters fps Rate at which frames should be captured in frames per second. The fps can go as low as desired. However the fastest fps will be limited by the hardware. For resolutions that can be captured by the video camera, the fastest fps can be computed using getPreviewFpsRange(int[]). For higher resolutions the fastest fps may be more restrictive. Note that the recorder cannot guarantee that frames will be captured at the given rate due to camera/encoder limitations. However it tries to be as close as possible.
	8:	android.graphics.Interpolator public void setKeyFrame (int index, int msec, float[] values) Assign the keyFrame (specified by index) a time value and an array of key values (with an implicity blend array of [0, 0, 1, 1] giving linear transition to the next set of key values). Parameters index The index of the key frame to assign msec The time (in mililiseconds) for this key frame. Based on the SystemClock.uptimeMillis() clock values Array of values associated with theis key frame
	9:	android.media.AudioTrack public int setPositionNotificationPeriod (int periodInFrames) Sets the period for the periodic notification event. Parameters periodInFrames update period expressed in frames Returns error code or success, see SUCCESS, ERROR_INVALID_OPERATION
setImage
Changes the Image containing the Sprite's frames
	0:	android.media.Image.Plane public abstract ByteBuffer getBuffer () Get a direct ByteBuffer containing the frame data. In particular, the buffer returned will always have isDirect return true, so the underlying data could be mapped as a pointer in JNI without doing any copies with GetDirectBufferAddress. Returns the byte buffer containing the image data for this plane.
	1:	android.hardware.Camera.Parameters public int getPreviewFormat () Returns the image format for preview frames got from Camera.PreviewCallback. Returns the preview format. See Also ImageFormat setPreviewFormat(int)
	2:	android.media.ImageReader public Image acquireNextImage () Acquire the next Image from the ImageReader's queue. Returns null if no new image is available. Warning: Consider using acquireLatestImage() instead, as it will automatically release older images, and allow slower-running processing routines to catch up to the newest frame. Usage of acquireNextImage() is recommended for batch/background processing. Incorrectly using this function can cause images to appear with an ever-increasing delay, followed by a complete stall where no new images seem to appear. This operation will fail by throwing an IllegalStateException if maxImages have been acquired with acquireNextImage() or acquireLatestImage(). In particular a sequence of acquireNextImage() or acquireLatestImage() calls greater than maxImages without calling close() in-between will exhaust the underlying queue. At such a time, IllegalStateException will be thrown until more images are released with close(). Returns a new frame of image data, or null if no image data is available. Throws IllegalStateException if maxImages images are currently acquired See Also acquireLatestImage()
	3:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs, int option) Call this method after setDataSource(). This method finds a representative frame close to the given time position by considering the given option if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source or just obtain and display a frame at the given time position. Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarantee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. option a hint on how the frame is found. Use OPTION_PREVIOUS_SYNC if one wants to retrieve a sync frame that has a timestamp earlier than or the same as timeUs. Use OPTION_NEXT_SYNC if one wants to retrieve a sync frame that has a timestamp later than or the same as timeUs. Use OPTION_CLOSEST_SYNC if one wants to retrieve a sync frame that has a timestamp closest to or the same as timeUs. Use OPTION_CLOSEST if one wants to retrieve a frame that may or may not be a sync frame but is closest to or the same as timeUs. OPTION_CLOSEST often has larger performance overhead compared to the other options if there is no sync frame located at timeUs. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved.
	4:	android.media.Image public abstract long getTimestamp () Get the timestamp associated with this frame. The timestamp is measured in nanoseconds, and is monotonically increasing. However, the zero point and whether the timestamp can be compared against other sources of time or images depend on the source of this image.
	5:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs) Call this method after setDataSource(). This method finds a representative frame close to the given time position if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source. Call this method if one does not care how the frame is found as long as it is close to the given time; otherwise, please call getFrameAtTime(long, int). Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarentee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved. See Also getFrameAtTime(long, int)
	6:	android.media.ImageReader public Image acquireLatestImage () Acquire the latest Image from the ImageReader's queue, dropping older images. Returns null if no new image is available. This operation will acquire all the images possible from the ImageReader, but close() all images that aren't the latest. This function is recommended to use over acquireNextImage() for most use-cases, as it's more suited for real-time processing. Note that maxImages should be at least 2 for acquireLatestImage() to be any different than acquireNextImage() - discarding all-but-the-newest Image requires temporarily acquiring two Images at once. Or more generally, calling acquireLatestImage() with less than two images of margin, that is (maxImages - currentAcquiredImages < 2) will not discard as expected. This operation will fail by throwing an IllegalStateException if maxImages have been acquired with acquireLatestImage() or acquireNextImage(). In particular a sequence of acquireLatestImage() calls greater than getMaxImages() without calling close() in-between will exhaust the underlying queue. At such a time, IllegalStateException will be thrown until more images are released with close(). Returns latest frame of image data, or null if no image data is available. Throws IllegalStateException if too many images are currently acquired
	7:	android.hardware.Camera.Parameters public List<int[]> getSupportedPreviewFpsRange () Gets the supported preview fps (frame-per-second) ranges. Each range contains a minimum fps and maximum fps. If minimum fps equals to maximum fps, the camera outputs frames in fixed frame rate. If not, the camera outputs frames in auto frame rate. The actual frame rate fluctuates between the minimum and the maximum. The values are multiplied by 1000 and represented in integers. For example, if frame rate is 26.623 frames per second, the value is 26623. Returns a list of supported preview fps ranges. This method returns a list with at least one element. Every element is an int array of two values - minimum fps and maximum fps. The list is sorted from small to large (first by maximum fps and then minimum fps). See Also PREVIEW_FPS_MIN_INDEX PREVIEW_FPS_MAX_INDEX
	8:	android.graphics.BitmapRegionDecoder public static BitmapRegionDecoder newInstance (FileDescriptor fd, boolean isShareable) Create a BitmapRegionDecoder from the file descriptor. The position within the descriptor will not be changed when this returns, so the descriptor can be used again as is. Currently only the JPEG and PNG formats are supported. Parameters fd The file descriptor containing the data to decode isShareable If this is true, then the BitmapRegionDecoder may keep a shallow reference to the input. If this is false, then the BitmapRegionDecoder will explicitly make a copy of the input data, and keep that. Even if sharing is allowed, the implementation may still decide to make a deep copy of the input data. If an image is progressively encoded, allowing sharing may degrade the decoding speed. Returns BitmapRegionDecoder, or null if the image data could not be decoded. Throws IOException if the image format is not supported or can not be decoded.
	9:	android.hardware.Camera public final void setPreviewCallbackWithBuffer (Camera.PreviewCallback cb) Installs a callback to be invoked for every preview frame, using buffers supplied with addCallbackBuffer(byte[]), in addition to displaying them on the screen. The callback will be repeatedly called for as long as preview is active and buffers are available. Any other preview callbacks are overridden. The purpose of this method is to improve preview efficiency and frame rate by allowing preview frame memory reuse. You must call addCallbackBuffer(byte[]) at some point -- before or after calling this method -- or no callbacks will received. The buffer queue will be cleared if this method is called with a null callback, setPreviewCallback(Camera.PreviewCallback) is called, or setOneShotPreviewCallback(Camera.PreviewCallback) is called. If you are using the preview data to create video or still images, strongly consider using MediaActionSound to properly indicate image capture or recording start/stop to the user. Parameters cb a callback object that receives a copy of the preview frame, or null to stop receiving callbacks and clear the buffer queue. See Also addCallbackBuffer(byte[]) MediaActionSound
defineCollisionRectangle
Defines the Sprite's bounding rectangle that is used for collision detection purposes
	0:	android.graphics.drawable.shapes.RectShape protected final RectF rect () Returns the RectF that defines this rectangle's bounds.
	1:	android.graphics.Canvas public void drawOval (RectF oval, Paint paint) Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint. Parameters oval The rectangle bounds of the oval to be drawn
	2:	android.media.MediaRouter.UserRouteInfo public void setVolume (int volume) Defines at what volume the playback associated with this route is performed (for user feedback purposes). This information is only used when the playback is not local.
	3:	android.media.MediaRouter.UserRouteInfo public void setVolumeMax (int volumeMax) Defines the maximum volume at which the playback associated with this route is performed (for user feedback purposes). This information is only used when the playback is not local.
	4:	android.graphics.Path public boolean isRect (RectF rect) Returns true if the path specifies a rectangle. If so, and if rect is not null, set rect to the bounds of the path. If the path does not specify a rectangle, return false and ignore rect. Parameters rect If not null, returns the bounds of the path if it specifies a rectangle Returns true if the path specifies a rectangle
	5:	android.graphics.drawable.Drawable public void setBounds (Rect bounds) Specify a bounding rectangle for the Drawable. This is where the drawable will draw when its draw() method is called.
	6:	android.graphics.Matrix public boolean mapRect (RectF dst, RectF src) Apply this matrix to the src rectangle, and write the transformed rectangle into dst. This is accomplished by transforming the 4 corners of src, and then setting dst to the bounds of those points. Parameters dst Where the transformed rectangle is written. src The original rectangle to be transformed. Returns the result of calling rectStaysRect()
	7:	android.graphics.Rect public boolean intersect (Rect r) If the specified rectangle intersects this rectangle, return true and set this rectangle to that intersection, otherwise return false and do not change this rectangle. No check is performed to see if either rectangle is empty. To just test for intersection, use intersects() Parameters r The rectangle being intersected with this rectangle. Returns true if the specified rectangle and this rectangle intersect (and this rectangle is then set to that intersection) else return false and do not change this rectangle.
	8:	android.graphics.RectF public boolean intersect (RectF r) If the specified rectangle intersects this rectangle, return true and set this rectangle to that intersection, otherwise return false and do not change this rectangle. No check is performed to see if either rectangle is empty. To just test for intersection, use intersects() Parameters r The rectangle being intersected with this rectangle. Returns true if the specified rectangle and this rectangle intersect (and this rectangle is then set to that intersection) else return false and do not change this rectangle.
	9:	java.util.concurrent.locks.Lock public abstract void lock () Acquires the lock. If the lock is not available then the current thread becomes disabled for thread scheduling purposes and lies dormant until the lock has been acquired. Implementation Considerations A Lock implementation may be able to detect erroneous use of the lock, such as an invocation that would cause deadlock, and may throw an (unchecked) exception in such circumstances. The circumstances and the exception type must be documented by that Lock implementation.
setTransform
Sets the transform for this Sprite
	0:	android.widget.Gallery protected boolean getChildStaticTransformation (View child, Transformation t) Sets t to be the static transformation of the child, if set, returning a boolean to indicate whether a static transform was set. The default implementation simply returns false; subclasses may override this method for different behavior. setStaticTransformationsEnabled(boolean) must be set to true for this method to be called. Parameters child The child view whose static transform is being requested t The Transformation which will hold the result Returns true if the transformation was set, false otherwise
	1:	android.graphics.Matrix public boolean mapRect (RectF dst, RectF src) Apply this matrix to the src rectangle, and write the transformed rectangle into dst. This is accomplished by transforming the 4 corners of src, and then setting dst to the bounds of those points. Parameters dst Where the transformed rectangle is written. src The original rectangle to be transformed. Returns the result of calling rectStaysRect()
	2:	android.graphics.Camera public void applyToCanvas (Canvas canvas) Computes the matrix corresponding to the current transformation and applies it to the specified Canvas. Parameters canvas The Canvas to set the transform matrix onto
	3:	javax.xml.transform.dom.DOMSource public DOMSource () Zero-argument default constructor. If this constructor is used, and no DOM source is set using setNode(Node) , then the Transformer will create an empty source Document using newDocument(). See Also transform(Source, Result)
	4:	javax.xml.transform.sax.SAXSource public SAXSource () Zero-argument default constructor. If this constructor is used, and no SAX source is set using setInputSource(InputSource) , then the Transformer will create an empty source InputSource using new InputSource(). See Also transform(Source, Result)
	5:	android.graphics.Matrix public boolean mapRect (RectF rect) Apply this matrix to the rectangle, and write the transformed rectangle back into it. This is accomplished by transforming the 4 corners of rect, and then setting it to the bounds of those points Parameters rect The rectangle to transform. Returns the result of calling rectStaysRect()
	6:	javax.xml.transform.dom.DOMSource public void setNode (Node node) Set the node that will represents a Source DOM tree. Parameters node The node that is to be transformed.
	7:	javax.xml.transform.dom.DOMResult public Node getNode () Get the node that will contain the result DOM tree. If no node was set via DOMResult(Node), DOMResult(Node, String), DOMResult(Node, Node), DOMResult(Node, Node, String) or setNode(Node), then the node will be set by the transformation, and may be obtained from this method once the transformation is complete. Calling this method before the transformation will return null. Returns The node to which the transformation will be appended.
	8:	android.view.animation.AnimationSet public boolean getTransformation (long currentTime, Transformation t) The transformation of an animation set is the concatenation of all of its component animations. Parameters currentTime Where we are in the animation. This is wall clock time. t A transformation object that is provided by the caller and will be filled in by the animation. Returns True if the animation is still running See Also getTransformation(long, Transformation)
	9:	android.view.animation.AnimationSet public void addAnimation (Animation a) Add a child animation to this animation set. The transforms of the child animations are applied in the order that they were added Parameters a Animation to add.
collidesWith
Checks for a collision between this Sprite and the specified Sprite
	0:	android.widget.AbsListView public void setItemChecked (int position, boolean value) Sets the checked state of the specified position. The is only valid if the choice mode has been set to CHOICE_MODE_SINGLE or CHOICE_MODE_MULTIPLE. Parameters position The item whose checked state is to be checked value The new checked state for the item
	1:	java.security.acl.Owner public abstract boolean isOwner (Principal owner) Checks whether the specified principal is an owner of this object. Parameters owner the principal to check. Returns true if the specified principal is an owner, otherwise false.
	2:	java.security.acl.AclEntry public abstract boolean checkPermission (Permission permission) Checks whether the specified permission is in this ACL entry. Parameters permission the permission to check. Returns true if the permission is in this entry, otherwise false.
	3:	android.widget.AbsListView public boolean canScrollList (int direction) Check if the items in the list can be scrolled in a certain direction. Parameters direction Negative to check scrolling up, positive to check scrolling down. Returns true if the list can be scrolled in the specified direction, false otherwise. See Also scrollListBy(int)
	4:	android.widget.AbsListView public boolean isItemChecked (int position) Returns the checked state of the specified position. The result is only valid if the choice mode has been set to CHOICE_MODE_SINGLE or CHOICE_MODE_MULTIPLE. Parameters position The item whose checked state to return Returns The item's checked state or false if choice mode is invalid See Also setChoiceMode(int)
	5:	android.support.v4.widget.DrawerLayout public boolean isDrawerVisible (int drawerGravity) Check if a given drawer view is currently visible on-screen. The drawer may be only peeking onto the screen, fully extended, or anywhere in between. If there is no drawer with the given gravity this method will return false. Parameters drawerGravity Gravity of the drawer to check Returns true if the given drawer is visible on-screen
	6:	android.graphics.CornerPathEffect public CornerPathEffect (float radius) Transforms geometries that are drawn (either STROKE or FILL styles) by replacing any sharp angles between line segments into rounded angles of the specified radius. Parameters radius Amount to round sharp angles between line segments.
	7:	java.security.acl.Acl public abstract boolean checkPermission (Principal principal, Permission permission) Checks whether the specified principal is granted the specified permission. The list of granted permissions is determined according to the rules specified by getPermissions. Parameters principal the principal the check the permissions for. permission the permission to check for the principal. Returns true if the principal is granted the permission, otherwise false. See Also getPermissions(Principal)
	8:	java.security.cert.PKIXCertPathChecker public abstract void check (Certificate cert, Collection<String> unresolvedCritExts) Checks the specified certificate and removes the processed critical extensions from the specified list of X.509 extension OIDs. Parameters cert the certificate. unresolvedCritExts the list of critical X.509 extension OID strings. Throws CertPathValidatorException if check(s) fail on the specified certificate.
	9:	org.w3c.dom.Node public abstract boolean isDefaultNamespace (String namespaceURI) This method checks if the specified namespaceURI is the default namespace or not. Parameters namespaceURI The namespace URI to look for. Returns Returns true if the specified namespaceURI is the default namespace, false otherwise.
collidesWith
Checks for a collision between this Sprite and the specified TiledLayer
	0:	android.widget.AbsListView public void setItemChecked (int position, boolean value) Sets the checked state of the specified position. The is only valid if the choice mode has been set to CHOICE_MODE_SINGLE or CHOICE_MODE_MULTIPLE. Parameters position The item whose checked state is to be checked value The new checked state for the item
	1:	java.security.acl.Owner public abstract boolean isOwner (Principal owner) Checks whether the specified principal is an owner of this object. Parameters owner the principal to check. Returns true if the specified principal is an owner, otherwise false.
	2:	java.security.acl.AclEntry public abstract boolean checkPermission (Permission permission) Checks whether the specified permission is in this ACL entry. Parameters permission the permission to check. Returns true if the permission is in this entry, otherwise false.
	3:	android.widget.AbsListView public boolean canScrollList (int direction) Check if the items in the list can be scrolled in a certain direction. Parameters direction Negative to check scrolling up, positive to check scrolling down. Returns true if the list can be scrolled in the specified direction, false otherwise. See Also scrollListBy(int)
	4:	android.widget.AbsListView public boolean isItemChecked (int position) Returns the checked state of the specified position. The result is only valid if the choice mode has been set to CHOICE_MODE_SINGLE or CHOICE_MODE_MULTIPLE. Parameters position The item whose checked state to return Returns The item's checked state or false if choice mode is invalid See Also setChoiceMode(int)
	5:	android.support.v4.widget.DrawerLayout public boolean isDrawerVisible (int drawerGravity) Check if a given drawer view is currently visible on-screen. The drawer may be only peeking onto the screen, fully extended, or anywhere in between. If there is no drawer with the given gravity this method will return false. Parameters drawerGravity Gravity of the drawer to check Returns true if the given drawer is visible on-screen
	6:	android.graphics.CornerPathEffect public CornerPathEffect (float radius) Transforms geometries that are drawn (either STROKE or FILL styles) by replacing any sharp angles between line segments into rounded angles of the specified radius. Parameters radius Amount to round sharp angles between line segments.
	7:	java.security.acl.Acl public abstract boolean checkPermission (Principal principal, Permission permission) Checks whether the specified principal is granted the specified permission. The list of granted permissions is determined according to the rules specified by getPermissions. Parameters principal the principal the check the permissions for. permission the permission to check for the principal. Returns true if the principal is granted the permission, otherwise false. See Also getPermissions(Principal)
	8:	java.security.cert.PKIXCertPathChecker public abstract void check (Certificate cert, Collection<String> unresolvedCritExts) Checks the specified certificate and removes the processed critical extensions from the specified list of X.509 extension OIDs. Parameters cert the certificate. unresolvedCritExts the list of critical X.509 extension OID strings. Throws CertPathValidatorException if check(s) fail on the specified certificate.
	9:	org.w3c.dom.Node public abstract boolean isDefaultNamespace (String namespaceURI) This method checks if the specified namespaceURI is the default namespace or not. Parameters namespaceURI The namespace URI to look for. Returns Returns true if the specified namespaceURI is the default namespace, false otherwise.
collidesWith
Checks for a collision between this Sprite and the specified Image with its upper left corner at the specified location
	0:	android.widget.PopupWindow public void showAsDropDown (View anchor, int xoff, int yoff, int gravity) Display the content view in a popup window anchored to the bottom-left corner of the anchor view offset by the specified x and y coordinates. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled, the bottom-left corner of the popup is pinned at the top left corner of the anchor view. If the view later scrolls to move anchor to a different location, the popup will be moved correspondingly. Parameters anchor the view on which to pin the popup window xoff A horizontal offset from the anchor in pixels yoff A vertical offset from the anchor in pixels gravity Alignment of the popup relative to the anchor See Also dismiss()
	1:	android.widget.PopupWindow public void showAsDropDown (View anchor, int xoff, int yoff) Display the content view in a popup window anchored to the bottom-left corner of the anchor view offset by the specified x and y coordinates. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled, the bottom-left corner of the popup is pinned at the top left corner of the anchor view. If the view later scrolls to move anchor to a different location, the popup will be moved correspondingly. Parameters anchor the view on which to pin the popup window xoff A horizontal offset from the anchor in pixels yoff A vertical offset from the anchor in pixels See Also dismiss()
	2:	android.location.Geocoder public List<Address> getFromLocationName (String locationName, int maxResults, double lowerLeftLatitude, double lowerLeftLongitude, double upperRightLatitude, double upperRightLongitude) Returns an array of Addresses that are known to describe the named location, which may be a place name such as "Dalvik, Iceland", an address such as "1600 Amphitheatre Parkway, Mountain View, CA", an airport code such as "SFO", etc.. The returned addresses will be localized for the locale provided to this class's constructor. You may specify a bounding box for the search results by including the Latitude and Longitude of the Lower Left point and Upper Right point of the box. The query will block and returned values will be obtained by means of a network lookup. The results are a best guess and are not guaranteed to be meaningful or correct. It may be useful to call this method from a thread separate from your primary UI thread. Parameters locationName a user-supplied description of a location maxResults max number of addresses to return. Smaller numbers (1 to 5) are recommended lowerLeftLatitude the latitude of the lower left corner of the bounding box lowerLeftLongitude the longitude of the lower left corner of the bounding box upperRightLatitude the latitude of the upper right corner of the bounding box upperRightLongitude the longitude of the upper right corner of the bounding box Returns a list of Address objects. Returns null or empty list if no matches were found or there is no backend service available. Throws IllegalArgumentException if locationName is null IllegalArgumentException if any latitude is less than -90 or greater than 90 IllegalArgumentException if any longitude is less than -180 or greater than 180 IOException if the network is unavailable or any other I/O problem occurs
	3:	android.graphics.drawable.PaintDrawable public void setCornerRadii (float[] radii) Specify radii for each of the 4 corners. For each corner, the array contains 2 values, [X_radius, Y_radius]. The corners are ordered top-left, top-right, bottom-right, bottom-left Parameters radii the x and y radii of the corners
	4:	java.lang.Character public static int toLowerCase (int codePoint) Returns the lower case equivalent for the specified code point if it is an upper case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to check. Returns if codePoint is an upper case character then its lower case counterpart, otherwise just codePoint.
	5:	java.lang.Character public static boolean isUpperCase (int codePoint) Indicates whether the specified code point is an upper case letter. Parameters codePoint the code point to check. Returns true if codePoint is a upper case letter; false otherwise.
	6:	java.lang.Character public static boolean isUpperCase (char c) Indicates whether the specified character is an upper case letter. Parameters c the character to check. Returns true if c is a upper case letter; false otherwise.
	7:	android.graphics.drawable.GradientDrawable public void setCornerRadii (float[] radii) Specify radii for each of the 4 corners. For each corner, the array contains 2 values, [X_radius, Y_radius]. The corners are ordered top-left, top-right, bottom-right, bottom-left. This property is honored only when the shape is of type RECTANGLE. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters radii 4 pairs of X and Y radius for each corner, specified in pixels. The length of this array must be >= 8 See Also mutate() setCornerRadii(float[]) setShape(int)
	8:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, float left, float top, Paint paint) Draw the specified bitmap, with its top/left corner at (x,y), using the specified paint, transformed by the current matrix. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. If the bitmap and canvas have different densities, this function will take care of automatically scaling the bitmap to draw at the same density as the canvas. Parameters bitmap The bitmap to be drawn left The position of the left side of the bitmap being drawn top The position of the top side of the bitmap being drawn paint The paint used to draw the bitmap (may be null)
	9:	java.lang.Character public static char toLowerCase (char c) Returns the lower case equivalent for the specified character if the character is an upper case letter. Otherwise, the specified character is returned unchanged. Parameters c the character Returns if c is an upper case character then its lower case counterpart, otherwise just c.
