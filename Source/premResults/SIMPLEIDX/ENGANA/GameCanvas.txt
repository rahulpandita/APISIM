GameCanvas
Creates a new instance of a GameCanvas
	0:	android.graphics.pdf.PdfDocument.PageInfo.Builder public PdfDocument.PageInfo create () Creates a new PdfDocument.PageInfo. Returns The new instance.
	1:	java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject public AbstractQueuedLongSynchronizer.ConditionObject () Creates a new ConditionObject instance.
	2:	java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject public AbstractQueuedSynchronizer.ConditionObject () Creates a new ConditionObject instance.
	3:	android.support.v4.view.AccessibilityDelegateCompat public AccessibilityDelegateCompat () Creates a new instance.
	4:	android.support.v4.view.accessibility.AccessibilityNodeProviderCompat public AccessibilityNodeProviderCompat () Creates a new instance.
	5:	android.accessibilityservice.AccessibilityServiceInfo public AccessibilityServiceInfo () Creates a new instance.
	6:	java.security.cert.CertPathBuilderSpi public CertPathBuilderSpi () Creates a new CertPathBuilderSpi instance.
	7:	java.security.cert.CertPathValidatorSpi public CertPathValidatorSpi () Creates a new CertPathValidatorSpi instance.
	8:	javax.crypto.CipherSpi public CipherSpi () Creates a new CipherSpi instance.
	9:	javax.crypto.ExemptionMechanismSpi public ExemptionMechanismSpi () Creates a new ExemptionMechanismSpi instance.
getGraphics
Obtains the Graphics object for rendering a GameCanvas
	0:	android.graphics.drawable.BitmapDrawable public void setTargetDensity (Canvas canvas) Set the density scale at which this drawable will be rendered. This method assumes the drawable will be rendered at the same density as the specified canvas. Parameters canvas The Canvas from which the density scale must be obtained. See Also setDensity(int) getDensity()
	1:	android.graphics.drawable.NinePatchDrawable public void setTargetDensity (Canvas canvas) Set the density scale at which this drawable will be rendered. This method assumes the drawable will be rendered at the same density as the specified canvas. Parameters canvas The Canvas from which the density scale must be obtained. See Also setDensity(int) getDensity()
	2:	android.graphics.Bitmap public final boolean hasMipMap () Indicates whether the renderer responsible for drawing this bitmap should attempt to use mipmaps when this bitmap is drawn scaled down. If you know that you are going to draw this bitmap at less than 50% of its original size, you may be able to obtain a higher quality This property is only a suggestion that can be ignored by the renderer. It is not guaranteed to have any effect. Returns true if the renderer should attempt to use mipmaps, false otherwise See Also setHasMipMap(boolean)
	3:	android.graphics.Bitmap public final void setHasMipMap (boolean hasMipMap) Set a hint for the renderer responsible for drawing this bitmap indicating that it should attempt to use mipmaps when this bitmap is drawn scaled down. If you know that you are going to draw this bitmap at less than 50% of its original size, you may be able to obtain a higher quality by turning this property on. Note that if the renderer respects this hint it might have to allocate extra memory to hold the mipmap levels for this bitmap. This property is only a suggestion that can be ignored by the renderer. It is not guaranteed to have any effect. Parameters hasMipMap indicates whether the renderer should attempt to use mipmaps See Also hasMipMap()
	4:	android.view.Display public int getRotation () Returns the rotation of the screen from its "natural" orientation. The returned value may be Surface.ROTATION_0 (no rotation), Surface.ROTATION_90, Surface.ROTATION_180, or Surface.ROTATION_270. For example, if a device has a naturally tall screen, and the user has turned it on its side to go into a landscape orientation, the value returned here may be either Surface.ROTATION_90 or Surface.ROTATION_270 depending on the direction it was turned. The angle is the rotation of the drawn graphics on the screen, which is the opposite direction of the physical rotation of the device. For example, if the device is rotated 90 degrees counter-clockwise, to compensate rendering will be rotated by 90 degrees clockwise and thus the returned value here will be Surface.ROTATION_90.
	5:	javax.xml.parsers.DocumentBuilder public abstract DOMImplementation getDOMImplementation () Obtain an instance of a DOMImplementation object. Returns A new instance of a DOMImplementation.
	6:	android.os.Parcel public static Parcel obtain () Retrieve a new Parcel object from the pool.
	7:	org.apache.http.ProtocolVersion public final int hashCode () Obtains a hash code consistent with equals(Object). Returns the hashcode of this protocol version
	8:	javax.xml.parsers.DocumentBuilder public abstract Document newDocument () Obtain a new instance of a DOM Document object to build a DOM tree with. Returns A new instance of a DOM Document object.
	9:	android.os.Message public static Message obtain (Handler h, int what, Object obj) Same as obtain(), but sets the values of the target, what, and obj members. Parameters h The target value to set. what The what value to set. obj The object method to set. Returns A Message object from the global pool.
getKeyStates
Gets the states of the physical game keys
	0:	android.view.KeyEvent public char getDisplayLabel () Gets the primary character for this key. In other words, the label that is physically printed on it. Returns The display label character, or 0 if none (eg. for non-printing keys).
	1:	android.view.KeyCharacterMap public char getDisplayLabel (int keyCode) Gets the primary character for this key. In other words, the label that is physically printed on it. Parameters keyCode The key code. Returns The display label character, or 0 if none (eg. for non-printing keys).
	2:	android.view.KeyEvent public final int getKeyCode () Retrieve the key code of the key event. This is the physical key that was pressed, not the Unicode character. Returns The key code of the event.
	3:	android.content.DialogInterface.OnKeyListener public abstract boolean onKey (DialogInterface dialog, int keyCode, KeyEvent event) Called when a key is dispatched to a dialog. This allows listeners to get a chance to respond before the dialog. Parameters dialog The dialog the key has been dispatched to. keyCode The code for the physical key that was pressed event The KeyEvent object containing full information about the event. Returns True if the listener has consumed the event, false otherwise.
	4:	android.text.method.MetaKeyKeyListener public static final int getMetaState (long state) Gets the state of the meta keys. Parameters state the current meta state bits. Returns an integer in which each bit set to one represents a pressed or locked meta key.
	5:	android.text.method.MetaKeyKeyListener public static final int getMetaState (CharSequence text, KeyEvent event) Gets the state of the meta keys for a specific key event. For input devices that use toggled key modifiers, the `toggled' state is stored into the text buffer. This method retrieves the meta state for this event, accounting for the stored state. If the event has been created by a device that does not support toggled key modifiers, like a virtual device for example, the stored state is ignored. Parameters text the buffer in which the meta key would have been pressed. event the event for which to evaluate the meta state. Returns an integer in which each bit set to one represents a pressed or locked meta key.
	6:	android.print.PrinterCapabilitiesInfo public PrintAttributes.Margins getMinMargins () Gets the minimal margins. These are the minimal margins the printer physically supports. Returns The minimal margins.
	7:	android.view.KeyCharacterMap public int get (int keyCode, int metaState) Gets the Unicode character generated by the specified key and meta key state combination. Returns the Unicode character that the specified key would produce when the specified meta bits (see MetaKeyKeyListener) were active. Returns 0 if the key is not one that is used to type Unicode characters. If the return value has bit COMBINING_ACCENT set, the key is a "dead key" that should be combined with another to actually produce a character -- see getDeadChar(int, int) -- after masking with COMBINING_ACCENT_MASK. Parameters keyCode The key code. metaState The meta key modifier state. Returns The associated character or combining accent, or 0 if none.
	8:	android.text.method.MetaKeyKeyListener public static final int getMetaState (long state, int meta) Gets the state of a particular meta key. Parameters state the current state bits. meta META_SHIFT_ON, META_ALT_ON, or META_SYM_ON Returns 0 if inactive, 1 if active, 2 if locked.
	9:	android.text.method.BaseMovementMethod protected int getMovementMetaState (Spannable buffer, KeyEvent event) Gets the meta state used for movement using the modifiers tracked by the text buffer as well as those present in the key event. The movement meta state excludes the state of locked modifiers or the SHIFT key since they are not used by movement actions (but they may be used for selection). Parameters buffer The text buffer. event The key event. Returns The keyboard meta states used for movement.
paint
Paints this GameCanvas
	0:	android.graphics.Paint public Paint (Paint paint) Create a new paint, initialized with the attributes in the specified paint parameter. Parameters paint Existing paint used to initialized the attributes of the new paint.
	1:	android.graphics.LayerRasterizer public void addLayer (Paint paint) 
	2:	android.graphics.Paint public Paint () Create a new paint with default settings.
	3:	android.graphics.Canvas public void drawPaint (Paint paint) Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint. Parameters paint The paint used to draw onto the canvas
	4:	android.graphics.Canvas public void drawLines (float[] pts, Paint paint) 
	5:	android.graphics.drawable.NinePatchDrawable public Paint getPaint () 
	6:	android.graphics.Canvas public void drawPath (Path path, Paint paint) Draw the specified path using the specified paint. The path will be filled or framed based on the Style in the paint. Parameters path The path to be drawn paint The paint used to draw the path
	7:	android.graphics.Canvas public void drawRect (RectF rect, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters rect The rect to be drawn paint The paint used to draw the rect
	8:	android.graphics.Canvas public void drawRect (Rect r, Paint paint) Draw the specified Rect using the specified Paint. The rectangle will be filled or framed based on the Style in the paint. Parameters r The rectangle to be drawn. paint The paint used to draw the rectangle
	9:	android.graphics.Canvas public void drawOval (RectF oval, Paint paint) Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint. Parameters oval The rectangle bounds of the oval to be drawn
flushGraphics
Flushes the specified region of the off-screen buffer to the display
	0:	java.util.zip.Deflater public synchronized int deflate (byte[] buf, int offset, int byteCount, int flush) Deflates data (previously passed to setInput) into a specific region within the supplied buffer, optionally flushing the input buffer. Parameters flush one of NO_FLUSH, SYNC_FLUSH or FULL_FLUSH. Returns the number of compressed bytes written to buf. If this equals byteCount, the number of bytes of input to be flushed may have exceeded the output buffer's capacity. In this case, finishing a flush will require the output buffer to be drained and additional calls to deflate(byte[]) to be made. Throws IllegalArgumentException if flush is invalid.
	1:	android.graphics.Region public Region (Region region) Return a copy of the specified region
	2:	android.graphics.Region public boolean set (Region region) Set the region to the specified region.
	3:	android.view.accessibility.AccessibilityNodeInfo public int getLiveRegion () Gets the node's live region mode. A live region is a node that contains information that is important for the user and when it changes the user should be notified. For example, in a login screen with a TextView that displays an "incorrect password" notification, that view should be marked as a live region with mode ACCESSIBILITY_LIVE_REGION_POLITE. It is the responsibility of the accessibility service to monitor TYPE_WINDOW_CONTENT_CHANGED events indicating changes to live region nodes and their children. Returns The live region mode, or ACCESSIBILITY_LIVE_REGION_NONE if the view is not a live region. See Also getAccessibilityLiveRegion()
	4:	android.support.v4.view.accessibility.AccessibilityNodeInfoCompat public int getLiveRegion () Gets the node's live region mode. A live region is a node that contains information that is important for the user and when it changes the user should be notified. For example, in a login screen with a TextView that displays an "incorrect password" notification, that view should be marked as a live region with mode ACCESSIBILITY_LIVE_REGION_POLITE. It is the responsibility of the accessibility service to monitor TYPE_WINDOW_CONTENT_CHANGED events indicating changes to live region nodes and their children. Returns The live region mode, or ACCESSIBILITY_LIVE_REGION_NONE if the view is not a live region. See Also getAccessibilityLiveRegion(View)
	5:	java.util.logging.Handler public abstract void flush () Flushes any buffered output.
	6:	java.io.BufferedWriter public void flush () Flushes this writer. The contents of the buffer are committed to the target writer and it is then flushed. Throws IOException if an error occurs while flushing this writer.
	7:	android.graphics.Region public Region (Rect r) Return a region set to the specified rectangle
	8:	android.graphics.Region public boolean op (Region region, Region.Op op) Perform the specified Op on this region and the specified region. Return true if the result of the op is not empty.
	9:	org.apache.http.impl.io.ChunkedOutputStream public void flush () Flushes the content buffer and the underlying stream. Throws IOException
flushGraphics
Flushes the off-screen buffer to the display
	0:	java.util.logging.Handler public abstract void flush () Flushes any buffered output.
	1:	java.io.BufferedWriter public void flush () Flushes this writer. The contents of the buffer are committed to the target writer and it is then flushed. Throws IOException if an error occurs while flushing this writer.
	2:	org.apache.http.impl.io.ChunkedOutputStream public void flush () Flushes the content buffer and the underlying stream. Throws IOException
	3:	java.io.Console public void flush () Flushes the object by writing out any buffered data to the underlying output.
	4:	android.util.JsonWriter public void flush () Ensures all buffered data is written to the underlying Writer and flushes that writer. Throws IOException
	5:	java.util.logging.MemoryHandler public void flush () Call target handler to flush any buffered output. Note that this doesn't cause this MemoryHandler to push.
	6:	android.inputmethodservice.KeyboardView public void invalidateAllKeys () Requests a redraw of the entire keyboard. Calling invalidate() is not sufficient because the keyboard renders the keys to an off-screen buffer and an invalidate() only draws the cached buffer. See Also invalidateKey(int)
	7:	java.io.OutputStreamWriter public void flush () Flushes this writer. This implementation ensures that all buffered bytes are written to the target stream. After writing the bytes, the target stream is flushed as well. Throws IOException if an error occurs while flushing this writer.
	8:	java.io.ObjectOutputStream public void flush () Writes buffered data to the target stream and calls the flush method of the target stream. Throws IOException if an error occurs while writing to or flushing the output stream.
	9:	java.io.OutputStream public void flush () Flushes this stream. Implementations of this method should ensure that any buffered data is written out. This implementation does nothing. Throws IOException if an error occurs while flushing this stream.
