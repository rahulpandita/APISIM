getTitle
Gets the title of the Displayable
	0:	android.support.v7.view.ActionMode public abstract CharSequence getTitle () Returns the current title of this action mode. Returns Title text
	1:	android.view.ActionMode public abstract CharSequence getTitle () Returns the current title of this action mode. Returns Title text
	2:	android.view.MenuItem public abstract CharSequence getTitle () Retrieve the current title of the item. Returns The title.
	3:	android.preference.Preference public CharSequence getTitle () Returns the title of this Preference. Returns The title. See Also setTitle(CharSequence)
	4:	android.content.RestrictionEntry public String getTitle () Returns the user-visible title for the entry, if any. Returns the user-visible title for the entry, null if none was set earlier.
	5:	android.app.ActionBar public abstract CharSequence getTitle () Returns the current ActionBar title in standard mode. Returns null if getNavigationMode() would not return NAVIGATION_MODE_STANDARD. Returns The current ActionBar title or null.
	6:	android.support.v7.app.ActionBar public abstract CharSequence getTitle () Returns the current ActionBar title in standard mode. Returns null if getNavigationMode() would not return NAVIGATION_MODE_STANDARD. Returns The current ActionBar title or null.
	7:	android.support.v7.app.ActionBarImplJB public CharSequence getTitle () Returns the current ActionBar title in standard mode. Returns null if getNavigationMode() would not return NAVIGATION_MODE_STANDARD. Returns The current ActionBar title or null.
	8:	android.preference.PreferenceActivity.Header public CharSequence getTitle (Resources res) Return the currently set title. If titleRes is set, this resource is loaded from res and returned. Otherwise title is returned.
	9:	android.media.Ringtone public String getTitle (Context context) Returns a human-presentable title for ringtone. Looks in media content provider. If not in either, uses the filename Parameters context A context used for querying.
setTitle
Sets the title of the Displayable
	0:	android.support.v7.app.ActionBarImplJB public void setTitle (CharSequence title) Set the action bar's title. This will only be displayed if DISPLAY_SHOW_TITLE is set. Parameters title Title to set
	1:	android.preference.Preference public void setTitle (CharSequence title) Sets the title for this Preference with a CharSequence. This title will be placed into the ID title within the View created by onCreateView(ViewGroup). Parameters title The title for this Preference.
	2:	android.app.AlertDialog public void setTitle (CharSequence title) Set the title text for this dialog's window. Parameters title The new text to display in the title.
	3:	android.app.Dialog public void setTitle (CharSequence title) Set the title text for this dialog's window. Parameters title The new text to display in the title.
	4:	android.content.RestrictionEntry public void setTitle (String title) Sets the user-visible title for the entry. Parameters title the user-visible title for the entry.
	5:	android.app.AlertDialog.Builder public AlertDialog.Builder setTitle (CharSequence title) Set the title displayed in the Dialog. Returns This Builder object to allow for chaining of calls to set methods
	6:	android.app.DownloadManager.Request public DownloadManager.Request setTitle (CharSequence title) Set the title of this download, to be displayed in notifications (if enabled). If no title is given, a default one will be assigned based on the download filename, once the download starts. Returns this object
	7:	android.preference.Preference public void setTitle (int titleResId) Sets the title for this Preference with a resource ID. Parameters titleResId The title as a resource ID. See Also setTitle(CharSequence)
	8:	android.support.v7.app.ActionBarImplJB public void setTitle (int resId) Set the action bar's title. This will only be displayed if DISPLAY_SHOW_TITLE is set. Parameters resId Resource ID of title string to set
	9:	android.app.Dialog public void setTitle (int titleId) Set the title text for this dialog's window. The text is retrieved from the resources with the supplied identifier. Parameters titleId the title's text resource identifier
getTicker
Gets the ticker used by this Displayable
	0:	android.text.Html public static Spanned fromHtml (String source, Html.ImageGetter imageGetter, Html.TagHandler tagHandler) Returns displayable styled text from the provided HTML string. Any <img> tags in the HTML will use the specified ImageGetter to request a representation of the image (use null if you don't want this) and the specified TagHandler to handle unknown tags (specify null if you don't want this). This uses TagSoup to handle real HTML, including all of the brokenness found in the wild.
	1:	android.support.v4.app.NotificationCompat.Builder public NotificationCompat.Builder setLargeIcon (Bitmap icon) Set the large icon that is shown in the ticker and notification.
	2:	android.text.Html public static Spanned fromHtml (String source) Returns displayable styled text from the provided HTML string. Any <img> tags in the HTML will display as a generic replacement image which your program can then go through and replace with real images. This uses TagSoup to handle real HTML, including all of the brokenness found in the wild.
	3:	android.app.Notification.Builder public Notification.Builder setTicker (CharSequence tickerText) Set the "ticker" text which is displayed in the status bar when the notification first arrives. See Also tickerText
	4:	android.support.v4.app.NotificationCompat.Builder public NotificationCompat.Builder setOnlyAlertOnce (boolean onlyAlertOnce) Set this flag if you would only like the sound, vibrate and ticker to be played if the notification is not already showing.
	5:	android.app.Notification.Builder public Notification.Builder setOnlyAlertOnce (boolean onlyAlertOnce) Set this flag if you would only like the sound, vibrate and ticker to be played if the notification is not already showing. See Also FLAG_ONLY_ALERT_ONCE
	6:	android.security.KeyPairGeneratorSpec public Context getContext () Gets the Android context used for operations with this instance.
	7:	java.util.logging.Handler public Filter getFilter () Gets the filter used by this handler. Returns the filter used by this handler (possibly null).
	8:	java.util.logging.Logger public Filter getFilter () Gets the filter used by this logger. Returns the filter used by this logger, may be null.
	9:	android.app.Notification.Builder public Notification.Builder setLargeIcon (Bitmap icon) Add a large icon to the notification (and the ticker on some devices). In the platform template, this image will be shown on the left of the notification view in place of the small icon (which will move to the right side). See Also largeIcon
setTicker
Sets a ticker for use with this Displayable, replacing any previous ticker
	0:	android.app.Notification.Builder public Notification.Builder setTicker (CharSequence tickerText) Set the "ticker" text which is displayed in the status bar when the notification first arrives. See Also tickerText
	1:	android.support.v4.app.NotificationCompat.Builder public NotificationCompat.Builder setTicker (CharSequence tickerText) Set the text that is displayed in the status bar when the notification first arrives.
	2:	android.support.v4.app.NotificationCompat.Builder public NotificationCompat.Builder setTicker (CharSequence tickerText, RemoteViews views) Set the text that is displayed in the status bar when the notification first arrives, and also a RemoteViews object that may be displayed instead on some devices.
	3:	android.app.Notification.Builder public Notification.Builder setTicker (CharSequence tickerText, RemoteViews views) Set the text that is displayed in the status bar when the notification first arrives, and also a RemoteViews object that may be displayed instead on some devices. See Also tickerText tickerView
	4:	android.support.v4.app.NotificationCompat.Builder public NotificationCompat.Builder setLargeIcon (Bitmap icon) Set the large icon that is shown in the ticker and notification.
	5:	android.support.v4.app.NotificationCompat.Builder public NotificationCompat.Builder setOnlyAlertOnce (boolean onlyAlertOnce) Set this flag if you would only like the sound, vibrate and ticker to be played if the notification is not already showing.
	6:	android.app.Notification.Builder public Notification.Builder setOnlyAlertOnce (boolean onlyAlertOnce) Set this flag if you would only like the sound, vibrate and ticker to be played if the notification is not already showing. See Also FLAG_ONLY_ALERT_ONCE
	7:	android.view.LayoutInflater public void setFilter (LayoutInflater.Filter filter) Sets the LayoutInflater.Filter to by this LayoutInflater. If a view is attempted to be inflated which is not allowed by the LayoutInflater.Filter, the inflate(int, ViewGroup) call will throw an InflateException. This filter will replace any previous filter set on this LayoutInflater. Parameters filter The Filter which restricts the set of Views that are allowed to be inflated. This filter will replace any previous filter set on this LayoutInflater.
	8:	android.text.Html public static Spanned fromHtml (String source) Returns displayable styled text from the provided HTML string. Any <img> tags in the HTML will display as a generic replacement image which your program can then go through and replace with real images. This uses TagSoup to handle real HTML, including all of the brokenness found in the wild.
	9:	android.accounts.AccountManager public void setAuthToken (Account account, String authTokenType, String authToken) Adds an auth token to the AccountManager cache for an account. If the account does not exist then this call has no effect. Replaces any previous auth token for this account and auth token type. Intended for use by the authenticator, not directly by applications. It is safe to call this method from the main thread. This method requires the caller to hold the permission AUTHENTICATE_ACCOUNTS and to have the same UID as the account's authenticator. Parameters account The account to set an auth token for authTokenType The type of the auth token, see {#getAuthToken} authToken The auth token to add to the cache
isShown
Checks if the Displayable is actually visible on the display
	0:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
	1:	android.view.MenuItem public abstract MenuItem setCheckable (boolean checkable) Control whether this item can display a check mark. Setting this does not actually display a check mark (see setChecked(boolean) for that); rather, it ensures there is room in the item in which to display a check mark. See Menu for the menu types that support check marks. Parameters checkable Set to true to allow a check mark, false to disallow. The default is false. Returns This Item so additional setters can be called. See Also setChecked(boolean) isCheckable() setGroupCheckable(int, boolean, boolean)
	2:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	3:	android.inputmethodservice.InputMethodService public void setCandidatesViewShown (boolean shown) Controls the visibility of the candidates display area. By default it is hidden.
	4:	android.view.MenuItem public abstract boolean isCheckable () Return whether the item can currently display a check mark. Returns If a check mark can be displayed, returns true. See Also setCheckable(boolean)
	5:	android.view.MenuItem public abstract boolean isChecked () Return whether the item is currently displaying a check mark. Returns If a check mark is displayed, returns true. See Also setChecked(boolean)
	6:	android.support.v4.widget.DrawerLayout public boolean isDrawerVisible (View drawer) Check if a given drawer view is currently visible on-screen. The drawer may be only peeking onto the screen, fully extended, or anywhere inbetween. Parameters drawer Drawer view to check Returns true if the given drawer is visible on-screen See Also isDrawerOpen(android.view.View)
	7:	android.view.Gravity public static void applyDisplay (int gravity, Rect display, Rect inoutObj) Apply additional gravity behavior based on the overall "display" that an object exists in. This can be used after apply(int, int, int, Rect, int, int, Rect) to place the object within a visible display. By default this moves or clips the object to be visible in the display; the gravity flags DISPLAY_CLIP_HORIZONTAL and DISPLAY_CLIP_VERTICAL can be used to change this behavior. Parameters gravity Gravity constants to modify the placement within the display. display The rectangle of the display in which the object is being placed. inoutObj Supplies the current object position; returns with it modified if needed to fit in the display.
	8:	android.media.MediaRouter.UserRouteInfo public void setName (CharSequence name) Set the user-visible name of this route. Parameters name Name to display to the user to describe this route
	9:	android.app.Instrumentation.ActivityMonitor public final boolean isBlocking () Check whether this monitor blocks activity starts (not allowing the actual activity to run) or allows them to execute normally.
addCommand
Adds a command to the Displayable
	0:	java.sql.PreparedStatement public abstract void addBatch () Add a set of parameters to the PreparedStatement's command batch. Throws SQLException if a database error happens.
	1:	java.util.concurrent.Executor public abstract void execute (Runnable command) Executes the given command at some time in the future. The command may execute in a new thread, in a pooled thread, or in the calling thread, at the discretion of the Executor implementation. Parameters command the runnable task Throws RejectedExecutionException if this task cannot be accepted for execution NullPointerException if command is null
	2:	android.location.LocationManager public boolean sendExtraCommand (String provider, String command, Bundle extras) Sends additional commands to a location provider. Can be used to support provider specific extensions to the Location Manager API Parameters provider name of the location provider. command name of the command to send to the provider. extras optional arguments for the command (or null). The provider may optionally fill the extras Bundle with results from the command. Returns true if the command succeeds.
	3:	android.bluetooth.BluetoothHeadset public boolean sendVendorSpecificResultCode (BluetoothDevice device, String command, String arg) Sends a vendor-specific unsolicited result code to the headset. The actual string to be sent is command + ": " + arg. For example, if command is VENDOR_RESULT_CODE_COMMAND_ANDROID and arg is "0", the string "+ANDROID: 0" will be sent. Currently only VENDOR_RESULT_CODE_COMMAND_ANDROID is allowed as command. Requires BLUETOOTH permission. Parameters device Bluetooth headset. command A vendor-specific command. arg The argument that will be attached to the command. Returns false if there is no headset connected, or if the command is not an allowed vendor-specific unsolicited result code, or on error. true otherwise. Throws IllegalArgumentException if command is null.
	4:	java.lang.ProcessBuilder public ProcessBuilder command (String... command) Changes the program and arguments of this process builder. Parameters command the new operating system program and its arguments. Returns this process builder instance.
	5:	javax.sql.RowSet public abstract String getCommand () Gets the RowSet's command property. Returns a string containing the RowSet's command property. A command is a SQL statement which is executed to fetch required data into the RowSet.
	6:	java.lang.ProcessBuilder public ProcessBuilder command (List<String> command) Changes the program and arguments of this process builder. Note that the list passed to this method is not copied, so any subsequent updates to it are reflected in this instance's state. Parameters command the new operating system program and its arguments. Returns this process builder instance. Throws NullPointerException if command is null.
	7:	java.sql.BatchUpdateException public int[] getUpdateCounts () Gets the update count array giving status information for every command that was attempted in the batch. If a batch update command fails and a BatchUpdateException is thrown, the JDBC driver may continue processing the remaining commands in the batch. If the driver does so, the array returned by BatchUpdateException.getUpdateCounts has an element for every command in the batch, not only those that executed successfully. In this case, the array element for any command which encountered a problem is set to Statement.EXECUTE_FAILED. Returns an array that contains the successful update counts, before this exception was thrown. Alternatively, if the driver continues to process commands following an error, for each successive command there is a corresponding element in the array giving one of the following status values: the number of successful updates Statement.SUCCESS_NO_INFO indicating that the command completed successfully, but the amount of altered rows is unknown. Statement.EXECUTE_FAILED indicating that the command was unsuccessful.
	8:	android.view.inputmethod.InputMethodManager public void sendAppPrivateCommand (View view, String action, Bundle data) Call InputMethodSession.appPrivateCommand() on the current Input Method. Parameters view Optional View that is sending the command, or null if you want to send the command regardless of the view that is attached to the input method. action Name of the command to be performed. This must be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting commands. data Any data to include with the command.
	9:	java.lang.ProcessBuilder public ProcessBuilder (List<String> command) Constructs a new ProcessBuilder instance with the specified operating system program and its arguments. Note that the list passed to this constructor is not copied, so any subsequent updates to it are reflected in this instance's state. Parameters command the requested operating system program and its arguments. Throws NullPointerException if command is null.
removeCommand
Removes a command from the Displayable
	0:	android.location.LocationManager public boolean sendExtraCommand (String provider, String command, Bundle extras) Sends additional commands to a location provider. Can be used to support provider specific extensions to the Location Manager API Parameters provider name of the location provider. command name of the command to send to the provider. extras optional arguments for the command (or null). The provider may optionally fill the extras Bundle with results from the command. Returns true if the command succeeds.
	1:	java.util.prefs.AbstractPreferences public void remove (String key) Removes the preference mapped to the given key from this node. Parameters key the key of the preference to be removed.
	2:	android.preference.PreferenceGroup public boolean removePreference (Preference preference) Removes a Preference from this group. Parameters preference The preference to remove. Returns Whether the preference was found and removed.
	3:	org.apache.http.message.AbstractHttpMessage public void removeHeader (Header header) Removes a header from this message. Parameters header the header to remove.
	4:	java.util.prefs.AbstractPreferences public void removeNodeChangeListener (NodeChangeListener ncl) Removes the given NodeChangeListener instance from this node. Parameters ncl the listener to be removed.
	5:	java.util.prefs.AbstractPreferences public void removePreferenceChangeListener (PreferenceChangeListener pcl) Removes the given PreferenceChangeListener instance from this node. Parameters pcl the listener to be removed.
	6:	org.apache.http.HttpMessage public abstract void removeHeader (Header header) Removes a header from this message. Parameters header the header to remove.
	7:	android.media.MediaRouter.RouteGroup public void removeRoute (MediaRouter.RouteInfo route) Remove a route from this group. Parameters route route to remove
	8:	org.apache.http.impl.client.RedirectLocations public boolean remove (URI uri) Removes a URI from the list of redirects.
	9:	android.app.FragmentTransaction public abstract FragmentTransaction remove (Fragment fragment) Remove an existing fragment. If it was added to a container, its view is also removed from that container. Parameters fragment The fragment to be removed. Returns Returns the same FragmentTransaction instance.
setCommandListener
Sets a listener for Commands to this Displayable, replacing any previous CommandListener
	0:	android.app.FragmentBreadCrumbs public void setOnBreadCrumbClickListener (FragmentBreadCrumbs.OnBreadCrumbClickListener listener) Sets a listener for clicks on the bread crumbs. This will be called before the default click action is performed. Parameters listener The new listener to set. Replaces any existing listener.
	1:	android.view.LayoutInflater public void setFilter (LayoutInflater.Filter filter) Sets the LayoutInflater.Filter to by this LayoutInflater. If a view is attempted to be inflated which is not allowed by the LayoutInflater.Filter, the inflate(int, ViewGroup) call will throw an InflateException. This filter will replace any previous filter set on this LayoutInflater. Parameters filter The Filter which restricts the set of Views that are allowed to be inflated. This filter will replace any previous filter set on this LayoutInflater.
	2:	android.support.v7.media.RemotePlaybackClient public void setStatusCallback (RemotePlaybackClient.StatusCallback callback) Sets a callback that should receive status updates when the state of media sessions or media items created by this instance of the remote playback client changes. The callback should be set before the session is created or any play commands are issued. Parameters callback The callback to set. May be null to remove the previous callback.
	3:	android.text.Html public static Spanned fromHtml (String source) Returns displayable styled text from the provided HTML string. Any <img> tags in the HTML will display as a generic replacement image which your program can then go through and replace with real images. This uses TagSoup to handle real HTML, including all of the brokenness found in the wild.
	4:	android.media.AudioManager public int abandonAudioFocus (AudioManager.OnAudioFocusChangeListener l) Abandon audio focus. Causes the previous focus owner, if any, to receive focus. Parameters l the listener with which focus was requested. Returns AUDIOFOCUS_REQUEST_FAILED or AUDIOFOCUS_REQUEST_GRANTED
	5:	java.io.ObjectInputStream protected boolean enableResolveObject (boolean enable) Enables object replacement for this stream. By default this is not enabled. Only trusted subclasses (loaded with system class loader) are allowed to change this status. Parameters enable true to enable object replacement; false to disable it. Returns the previous setting. See Also resolveObject(Object) enableReplaceObject(boolean)
	6:	java.io.ObjectOutputStream protected boolean enableReplaceObject (boolean enable) Enables object replacement for this stream. By default this is not enabled. Only trusted subclasses (loaded with system class loader) are allowed to change this status. Parameters enable true to enable object replacement; false to disable it. Returns the previous setting. See Also replaceObject(Object) enableResolveObject(boolean)
	7:	android.accounts.AccountManager public void setAuthToken (Account account, String authTokenType, String authToken) Adds an auth token to the AccountManager cache for an account. If the account does not exist then this call has no effect. Replaces any previous auth token for this account and auth token type. Intended for use by the authenticator, not directly by applications. It is safe to call this method from the main thread. This method requires the caller to hold the permission AUTHENTICATE_ACCOUNTS and to have the same UID as the account's authenticator. Parameters account The account to set an auth token for authTokenType The type of the auth token, see {#getAuthToken} authToken The auth token to add to the cache
	8:	java.sql.BatchUpdateException public int[] getUpdateCounts () Gets the update count array giving status information for every command that was attempted in the batch. If a batch update command fails and a BatchUpdateException is thrown, the JDBC driver may continue processing the remaining commands in the batch. If the driver does so, the array returned by BatchUpdateException.getUpdateCounts has an element for every command in the batch, not only those that executed successfully. In this case, the array element for any command which encountered a problem is set to Statement.EXECUTE_FAILED. Returns an array that contains the successful update counts, before this exception was thrown. Alternatively, if the driver continues to process commands following an error, for each successive command there is a corresponding element in the array giving one of the following status values: the number of successful updates Statement.SUCCESS_NO_INFO indicating that the command completed successfully, but the amount of altered rows is unknown. Statement.EXECUTE_FAILED indicating that the command was unsuccessful.
	9:	java.sql.PreparedStatement public abstract void clearParameters () Clear the current parameter values. Typically, parameter values are retained for multiple executions of the Statement. Setting a parameter value replaces the previous value. This method clears the values for all parameters, releasing all resources used by those parameters. Throws SQLException if a database error happens.
getWidth
Gets the width in pixels of the displayable area available to the application
	0:	android.opengl.ETC1Util.ETC1Texture public int getWidth () Get the width of the texture in pixels. Returns the width of the texture in pixels.
	1:	android.widget.ListPopupWindow public int getWidth () Returns The width of the popup window in pixels.
	2:	android.graphics.NinePatch public int getWidth () Returns the intrinsic width, in pixels, of this NinePatch. This is equivalent to querying the width of the underlying bitmap returned by getBitmap().
	3:	android.media.Image public abstract int getWidth () The width of the image in pixels. For formats where some color channels are subsampled, this is the width of the largest-resolution plane.
	4:	android.media.ImageReader public int getWidth () The width of each Image, in pixels. ImageReader guarantees that all Images acquired from ImageReader (for example, with acquireNextImage()) will have the same dimensions as specified in newInstance(int, int, int, int). Returns the width of an Image
	5:	android.graphics.Picture public int getWidth () Get the width of the picture as passed to beginRecording. This does not reflect (per se) the content of the picture.
	6:	java.util.IllegalFormatWidthException public int getWidth () Returns the width associated with the exception. Returns the width.
	7:	android.graphics.Canvas public int getWidth () Returns the width of the current drawing layer Returns the width of the current drawing layer
	8:	android.widget.PopupWindow public int getWidth () Return this popup's width MeasureSpec Returns the width MeasureSpec of the popup See Also setWidth(int)
	9:	android.graphics.Bitmap public final int getWidth () Returns the bitmap's width
getHeight
Gets the height in pixels of the displayable area available to the application
	0:	android.opengl.ETC1Util.ETC1Texture public int getHeight () Get the height of the texture in pixels. Returns the width of the texture in pixels.
	1:	android.widget.ListPopupWindow public int getHeight () Returns The height of the popup window in pixels.
	2:	android.graphics.NinePatch public int getHeight () Returns the intrinsic height, in pixels, of this NinePatch. This is equivalent to querying the height of the underlying bitmap returned by getBitmap().
	3:	android.media.Image public abstract int getHeight () The height of the image in pixels. For formats where some color channels are subsampled, this is the height of the largest-resolution plane.
	4:	android.media.ImageReader public int getHeight () The height of each Image, in pixels. ImageReader guarantees that all Images acquired from ImageReader (for example, with acquireNextImage()) will have the same dimensions as specified in newInstance(int, int, int, int). Returns the height of an Image
	5:	android.graphics.Picture public int getHeight () Get the height of the picture as passed to beginRecording. This does not reflect (per se) the content of the picture.
	6:	android.app.ActionBar public abstract int getHeight () Retrieve the current height of the ActionBar. Returns The ActionBar's height
	7:	android.support.v7.app.ActionBar public abstract int getHeight () Retrieve the current height of the ActionBar. Returns The ActionBar's height
	8:	android.support.v7.app.ActionBarImplJB public int getHeight () Retrieve the current height of the ActionBar. Returns The ActionBar's height
	9:	android.graphics.Canvas public int getHeight () Returns the height of the current drawing layer Returns the height of the current drawing layer
sizeChanged
The implementation calls this method when the available area of the Displayable has been changed
	0:	android.inputmethodservice.InputMethodService public void onUpdateExtractingVisibility (EditorInfo ei) Called when the fullscreen-mode extracting editor info has changed, to determine whether the extracting (extract text and candidates) portion of the UI should be shown. The standard implementation hides or shows the extract area depending on whether it makes sense for the current editor. In particular, a TYPE_NULL input type or IME_FLAG_NO_EXTRACT_UI flag will turn off the extract area since there is no text to be shown.
	1:	android.inputmethodservice.InputMethodService public View onCreateInputView () Create and return the view hierarchy used for the input area (such as a soft keyboard). This will be called once, when the input area is first displayed. You can return null to have no input area; the default implementation returns null. To control when the input view is displayed, implement onEvaluateInputViewShown(). To change the input view after the first one is created by this function, use setInputView(View).
	2:	android.inputmethodservice.InputMethodService public void onUpdateExtractingViews (EditorInfo ei) Called when the fullscreen-mode extracting editor info has changed, to update the state of its UI such as the action buttons shown. You do not need to deal with this if you are using the standard full screen extract UI. If replacing it, you will need to re-implement this to put the appropriate action button in your own UI and handle it, and perform any other changes. The standard implementation turns on or off its accessory area depending on whether there is an action button, and hides or shows the entire extract area depending on whether it makes sense for the current editor. In particular, a TYPE_NULL or TYPE_TEXT_VARIATION_FILTER input type will turn off the extract area since there is no text to be shown.
	3:	android.content.ContentProvider public void onConfigurationChanged (Configuration newConfig) Called by the system when the device configuration changes while your component is running. Note that, unlike activities, other components are never restarted when a configuration changes: they must always deal with the results of the change, such as by re-retrieving resources. At the time that this function has been called, your Resources object will have been updated to return resource values matching the new configuration. For more information, read Handling Runtime Changes. This method is always called on the application main thread, and must not perform lengthy operations. The default content provider implementation does nothing. Override this method to take appropriate action. (Content providers do not usually care about things like screen orientation, but may want to know about locale changes.) Parameters newConfig The new device configuration.
	4:	android.app.Dialog public void onActionModeFinished (ActionMode mode) Called when an action mode has been finished. The appropriate mode callback method will have already been invoked. Note that if you override this method you should always call through to the superclass implementation by calling super.onActionModeFinished(mode). Parameters mode The mode that was just finished.
	5:	android.webkit.CookieSyncManager public void run () Starts executing the active part of the class' code. This method is called when a thread is started that has been created with a class which implements Runnable.
	6:	android.renderscript.RenderScript.RSErrorHandler public void run () Starts executing the active part of the class' code. This method is called when a thread is started that has been created with a class which implements Runnable.
	7:	android.support.v8.renderscript.RenderScript.RSErrorHandler public void run () Starts executing the active part of the class' code. This method is called when a thread is started that has been created with a class which implements Runnable.
	8:	android.renderscript.RenderScript.RSMessageHandler public void run () Starts executing the active part of the class' code. This method is called when a thread is started that has been created with a class which implements Runnable.
	9:	android.support.v8.renderscript.RenderScript.RSMessageHandler public void run () Starts executing the active part of the class' code. This method is called when a thread is started that has been created with a class which implements Runnable.
