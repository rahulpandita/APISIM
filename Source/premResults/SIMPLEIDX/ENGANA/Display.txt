getDisplay
Gets the Display object that is unique to this MIDlet
	0:	android.hardware.display.DisplayManager public Display[] getDisplays () Gets all currently valid logical displays. Returns An array containing all displays.
	1:	android.hardware.display.DisplayManager public Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	2:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	3:	android.support.v4.hardware.display.DisplayManagerCompat public abstract Display[] getDisplays () Gets all currently valid logical displays. Returns An array containing all displays.
	4:	android.support.v4.hardware.display.DisplayManagerCompat public abstract Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	5:	android.support.v4.hardware.display.DisplayManagerCompat public abstract Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	6:	android.view.Display public int getDisplayId () Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
	7:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
	8:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	9:	android.view.Display public String getName () Gets the name of the display. Note that some displays may be renamed by the user. Returns The display's name.
getColor
Returns one of the colors from the high level user interface color scheme, in the form 0x00RRGGBB based on the colorSpecifier passed in
	0:	android.view.Display public int getPixelFormat () This method was deprecated in API level 17. This method is no longer supported. The result is always RGBA_8888. Gets the pixel format of the display. Returns One of the constants defined in PixelFormat.
	1:	android.view.Display public int getOrientation () This method was deprecated in API level 8. use getRotation() Returns orientation of this display.
	2:	android.view.Display public String getName () Gets the name of the display. Note that some displays may be renamed by the user. Returns The display's name.
	3:	android.view.Display public int getRotation () Returns the rotation of the screen from its "natural" orientation. The returned value may be Surface.ROTATION_0 (no rotation), Surface.ROTATION_90, Surface.ROTATION_180, or Surface.ROTATION_270. For example, if a device has a naturally tall screen, and the user has turned it on its side to go into a landscape orientation, the value returned here may be either Surface.ROTATION_90 or Surface.ROTATION_270 depending on the direction it was turned. The angle is the rotation of the drawn graphics on the screen, which is the opposite direction of the physical rotation of the device. For example, if the device is rotated 90 degrees counter-clockwise, to compensate rendering will be rotated by 90 degrees clockwise and thus the returned value here will be Surface.ROTATION_90.
	4:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	5:	android.view.Display public int getState () Gets the state of the display, such as whether it is on or off. Returns The state of the display: one of STATE_OFF, STATE_ON, STATE_DOZING, or STATE_UNKNOWN.
	6:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
	7:	android.view.Display public int getHeight () This method was deprecated in API level 13. Use getSize(Point) instead.
	8:	android.view.Display public int getWidth () This method was deprecated in API level 13. Use getSize(Point) instead.
	9:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
getBorderStyle
Returns the stroke style used for border drawing depending on the state of the component (highlighted/non-highlighted)
	0:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	1:	android.view.Display public int getState () Gets the state of the display, such as whether it is on or off. Returns The state of the display: one of STATE_OFF, STATE_ON, STATE_DOZING, or STATE_UNKNOWN.
	2:	android.view.Display public int getRotation () Returns the rotation of the screen from its "natural" orientation. The returned value may be Surface.ROTATION_0 (no rotation), Surface.ROTATION_90, Surface.ROTATION_180, or Surface.ROTATION_270. For example, if a device has a naturally tall screen, and the user has turned it on its side to go into a landscape orientation, the value returned here may be either Surface.ROTATION_90 or Surface.ROTATION_270 depending on the direction it was turned. The angle is the rotation of the drawn graphics on the screen, which is the opposite direction of the physical rotation of the device. For example, if the device is rotated 90 degrees counter-clockwise, to compensate rendering will be rotated by 90 degrees clockwise and thus the returned value here will be Surface.ROTATION_90.
	3:	android.view.Display public int getOrientation () This method was deprecated in API level 8. use getRotation() Returns orientation of this display.
	4:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	5:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	6:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	7:	android.view.Display public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	8:	android.view.Display public int getHeight () This method was deprecated in API level 13. Use getSize(Point) instead.
	9:	android.view.Display public int getWidth () This method was deprecated in API level 13. Use getSize(Point) instead.
isColor
Gets information about color support of the device
	0:	android.hardware.display.DisplayManager public Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	1:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	2:	android.view.Display public int getPixelFormat () This method was deprecated in API level 17. This method is no longer supported. The result is always RGBA_8888. Gets the pixel format of the display. Returns One of the constants defined in PixelFormat.
	3:	android.view.Display public void getRectSize (Rect outSize) Gets the size of the display as a rectangle, in pixels. Parameters outSize A Rect object to receive the size information. See Also getSize(Point)
	4:	android.hardware.display.DisplayManager.DisplayListener public abstract void onDisplayAdded (int displayId) Called whenever a logical display has been added to the system. Use getDisplay(int) to get more information about the display. Parameters displayId The id of the logical display that was added.
	5:	android.view.Display public void getCurrentSizeRange (Point outSmallestSize, Point outLargestSize) Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size. This is basically the sizes you will see as the orientation changes, taking into account whatever screen decoration there is in each rotation. For example, the status bar is always at the top of the screen, so it will reduce the height both in landscape and portrait, and the smallest height returned here will be the smaller of the two. This is intended for applications to get an idea of the range of sizes they will encounter while going through device rotations, to provide a stable UI through rotation. The sizes here take into account all standard system decorations that reduce the size actually available to the application: the status bar, navigation bar, system bar, etc. It does not take into account more transient elements like an IME soft keyboard. Parameters outSmallestSize Filled in with the smallest width and height that the application will encounter, in pixels (not dp units). The x (width) dimension here directly corresponds to Configuration.smallestScreenWidthDp, except the value here is in raw screen pixels rather than dp units. Your application may of course still get smaller space yet if, for example, a soft keyboard is being displayed. outLargestSize Filled in with the largest width and height that the application will encounter, in pixels (not dp units). Your application may of course still get larger space than this if, for example, screen decorations like the status bar are being hidden.
	6:	android.hardware.display.DisplayManager public void unregisterDisplayListener (DisplayManager.DisplayListener listener) Unregisters an input device listener. Parameters listener The listener to unregister. See Also registerDisplayListener(DisplayManager.DisplayListener, Handler)
	7:	android.view.Display public int getRotation () Returns the rotation of the screen from its "natural" orientation. The returned value may be Surface.ROTATION_0 (no rotation), Surface.ROTATION_90, Surface.ROTATION_180, or Surface.ROTATION_270. For example, if a device has a naturally tall screen, and the user has turned it on its side to go into a landscape orientation, the value returned here may be either Surface.ROTATION_90 or Surface.ROTATION_270 depending on the direction it was turned. The angle is the rotation of the drawn graphics on the screen, which is the opposite direction of the physical rotation of the device. For example, if the device is rotated 90 degrees counter-clockwise, to compensate rendering will be rotated by 90 degrees clockwise and thus the returned value here will be Surface.ROTATION_90.
	8:	android.hardware.display.DisplayManager public void registerDisplayListener (DisplayManager.DisplayListener listener, Handler handler) Registers an display listener to receive notifications about when displays are added, removed or changed. Parameters listener The listener to register. handler The handler on which the listener should be invoked, or null if the listener should be invoked on the calling thread's looper. See Also unregisterDisplayListener(DisplayManager.DisplayListener)
	9:	android.view.Display public String getName () Gets the name of the display. Note that some displays may be renamed by the user. Returns The display's name.
numColors
Gets the number of colors (if isColor() is true) or graylevels (if isColor() is false) that can be represented on the device
	0:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	1:	android.view.Display public void getCurrentSizeRange (Point outSmallestSize, Point outLargestSize) Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size. This is basically the sizes you will see as the orientation changes, taking into account whatever screen decoration there is in each rotation. For example, the status bar is always at the top of the screen, so it will reduce the height both in landscape and portrait, and the smallest height returned here will be the smaller of the two. This is intended for applications to get an idea of the range of sizes they will encounter while going through device rotations, to provide a stable UI through rotation. The sizes here take into account all standard system decorations that reduce the size actually available to the application: the status bar, navigation bar, system bar, etc. It does not take into account more transient elements like an IME soft keyboard. Parameters outSmallestSize Filled in with the smallest width and height that the application will encounter, in pixels (not dp units). The x (width) dimension here directly corresponds to Configuration.smallestScreenWidthDp, except the value here is in raw screen pixels rather than dp units. Your application may of course still get smaller space yet if, for example, a soft keyboard is being displayed. outLargestSize Filled in with the largest width and height that the application will encounter, in pixels (not dp units). Your application may of course still get larger space than this if, for example, screen decorations like the status bar are being hidden.
	2:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
	3:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	4:	android.hardware.display.DisplayManager public void unregisterDisplayListener (DisplayManager.DisplayListener listener) Unregisters an input device listener. Parameters listener The listener to unregister. See Also registerDisplayListener(DisplayManager.DisplayListener, Handler)
	5:	android.view.Display public int getRotation () Returns the rotation of the screen from its "natural" orientation. The returned value may be Surface.ROTATION_0 (no rotation), Surface.ROTATION_90, Surface.ROTATION_180, or Surface.ROTATION_270. For example, if a device has a naturally tall screen, and the user has turned it on its side to go into a landscape orientation, the value returned here may be either Surface.ROTATION_90 or Surface.ROTATION_270 depending on the direction it was turned. The angle is the rotation of the drawn graphics on the screen, which is the opposite direction of the physical rotation of the device. For example, if the device is rotated 90 degrees counter-clockwise, to compensate rendering will be rotated by 90 degrees clockwise and thus the returned value here will be Surface.ROTATION_90.
	6:	android.view.Display public String getName () Gets the name of the display. Note that some displays may be renamed by the user. Returns The display's name.
	7:	android.view.Display public float getRefreshRate () Gets the refresh rate of this display in frames per second.
	8:	android.hardware.display.DisplayManager public Display[] getDisplays () Gets all currently valid logical displays. Returns An array containing all displays.
	9:	android.view.Display public int getDisplayId () Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
numAlphaLevels
Gets the number of alpha transparency levels supported by this implementation
	0:	android.view.Display public int getPixelFormat () This method was deprecated in API level 17. This method is no longer supported. The result is always RGBA_8888. Gets the pixel format of the display. Returns One of the constants defined in PixelFormat.
	1:	android.view.Display public int getHeight () This method was deprecated in API level 13. Use getSize(Point) instead.
	2:	android.view.Display public int getOrientation () This method was deprecated in API level 8. use getRotation() Returns orientation of this display.
	3:	android.view.Display public int getWidth () This method was deprecated in API level 13. Use getSize(Point) instead.
	4:	android.view.Display public String getName () Gets the name of the display. Note that some displays may be renamed by the user. Returns The display's name.
	5:	android.view.Display public float getRefreshRate () Gets the refresh rate of this display in frames per second.
	6:	android.hardware.display.DisplayManager public Display[] getDisplays () Gets all currently valid logical displays. Returns An array containing all displays.
	7:	android.view.Display public int getDisplayId () Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
	8:	android.view.Display public int getState () Gets the state of the display, such as whether it is on or off. Returns The state of the display: one of STATE_OFF, STATE_ON, STATE_DOZING, or STATE_UNKNOWN.
	9:	android.view.Display public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
getCurrent
Gets the current Displayable object for this MIDlet
	0:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
	1:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	2:	android.hardware.display.DisplayManager public Display[] getDisplays () Gets all currently valid logical displays. Returns An array containing all displays.
	3:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	4:	android.view.Display public void getRectSize (Rect outSize) Gets the size of the display as a rectangle, in pixels. Parameters outSize A Rect object to receive the size information. See Also getSize(Point)
	5:	android.hardware.display.DisplayManager public Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	6:	android.view.Display public void getRealSize (Point outSize) Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outSize Set to the real size of the display.
	7:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	8:	android.view.Display public String getName () Gets the name of the display. Note that some displays may be renamed by the user. Returns The display's name.
	9:	android.view.Display public float getRefreshRate () Gets the refresh rate of this display in frames per second.
setCurrent
Requests that a different Displayable object be made visible on the display
	0:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
	1:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	2:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	3:	android.hardware.display.DisplayManager public Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	4:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	5:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	6:	android.view.Display public void getRectSize (Rect outSize) Gets the size of the display as a rectangle, in pixels. Parameters outSize A Rect object to receive the size information. See Also getSize(Point)
	7:	android.view.Display public String getName () Gets the name of the display. Note that some displays may be renamed by the user. Returns The display's name.
	8:	android.hardware.display.DisplayManager public Display[] getDisplays () Gets all currently valid logical displays. Returns An array containing all displays.
	9:	android.view.Display public int getDisplayId () Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
setCurrent
Requests that this Alert be made current, and that nextDisplayable be made current after the Alert is dismissed
	0:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	1:	android.hardware.display.DisplayManager public Display[] getDisplays () Gets all currently valid logical displays. Returns An array containing all displays.
	2:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
	3:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	4:	android.view.Display public void getRealSize (Point outSize) Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outSize Set to the real size of the display.
	5:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	6:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	7:	android.support.v4.hardware.display.DisplayManagerCompat public abstract Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	8:	android.support.v4.hardware.display.DisplayManagerCompat public abstract Display[] getDisplays () Gets all currently valid logical displays. Returns An array containing all displays.
	9:	android.view.Display public void getCurrentSizeRange (Point outSmallestSize, Point outLargestSize) Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size. This is basically the sizes you will see as the orientation changes, taking into account whatever screen decoration there is in each rotation. For example, the status bar is always at the top of the screen, so it will reduce the height both in landscape and portrait, and the smallest height returned here will be the smaller of the two. This is intended for applications to get an idea of the range of sizes they will encounter while going through device rotations, to provide a stable UI through rotation. The sizes here take into account all standard system decorations that reduce the size actually available to the application: the status bar, navigation bar, system bar, etc. It does not take into account more transient elements like an IME soft keyboard. Parameters outSmallestSize Filled in with the smallest width and height that the application will encounter, in pixels (not dp units). The x (width) dimension here directly corresponds to Configuration.smallestScreenWidthDp, except the value here is in raw screen pixels rather than dp units. Your application may of course still get smaller space yet if, for example, a soft keyboard is being displayed. outLargestSize Filled in with the largest width and height that the application will encounter, in pixels (not dp units). Your application may of course still get larger space than this if, for example, screen decorations like the status bar are being hidden.
setCurrentItem
Requests that the Displayable that contains this Item be made current, scrolls the Displayable so that this Item is visible, and possibly assigns the focus to this Item
	0:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	1:	android.hardware.display.DisplayManager public Display[] getDisplays () Gets all currently valid logical displays. Returns An array containing all displays.
	2:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
	3:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	4:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	5:	android.view.Display public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	6:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	7:	android.view.Display public void getRealSize (Point outSize) Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outSize Set to the real size of the display.
	8:	android.view.Display public void getCurrentSizeRange (Point outSmallestSize, Point outLargestSize) Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size. This is basically the sizes you will see as the orientation changes, taking into account whatever screen decoration there is in each rotation. For example, the status bar is always at the top of the screen, so it will reduce the height both in landscape and portrait, and the smallest height returned here will be the smaller of the two. This is intended for applications to get an idea of the range of sizes they will encounter while going through device rotations, to provide a stable UI through rotation. The sizes here take into account all standard system decorations that reduce the size actually available to the application: the status bar, navigation bar, system bar, etc. It does not take into account more transient elements like an IME soft keyboard. Parameters outSmallestSize Filled in with the smallest width and height that the application will encounter, in pixels (not dp units). The x (width) dimension here directly corresponds to Configuration.smallestScreenWidthDp, except the value here is in raw screen pixels rather than dp units. Your application may of course still get smaller space yet if, for example, a soft keyboard is being displayed. outLargestSize Filled in with the largest width and height that the application will encounter, in pixels (not dp units). Your application may of course still get larger space than this if, for example, screen decorations like the status bar are being hidden.
	9:	android.support.v4.hardware.display.DisplayManagerCompat public abstract Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
callSerially
Causes the Runnable object r to have its run() method called later, serialized with the event stream, soon after completion of the repaint cycle
	0:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	1:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	2:	android.view.Display public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	3:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	4:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
	5:	android.view.Display public int getRotation () Returns the rotation of the screen from its "natural" orientation. The returned value may be Surface.ROTATION_0 (no rotation), Surface.ROTATION_90, Surface.ROTATION_180, or Surface.ROTATION_270. For example, if a device has a naturally tall screen, and the user has turned it on its side to go into a landscape orientation, the value returned here may be either Surface.ROTATION_90 or Surface.ROTATION_270 depending on the direction it was turned. The angle is the rotation of the drawn graphics on the screen, which is the opposite direction of the physical rotation of the device. For example, if the device is rotated 90 degrees counter-clockwise, to compensate rendering will be rotated by 90 degrees clockwise and thus the returned value here will be Surface.ROTATION_90.
	6:	android.view.Display public int getPixelFormat () This method was deprecated in API level 17. This method is no longer supported. The result is always RGBA_8888. Gets the pixel format of the display. Returns One of the constants defined in PixelFormat.
	7:	android.view.Display public int getHeight () This method was deprecated in API level 13. Use getSize(Point) instead.
	8:	android.view.Display public int getOrientation () This method was deprecated in API level 8. use getRotation() Returns orientation of this display.
	9:	android.view.Display public int getWidth () This method was deprecated in API level 13. Use getSize(Point) instead.
flashBacklight
Requests a flashing effect for the device's backlight
	0:	android.hardware.display.DisplayManager public void unregisterDisplayListener (DisplayManager.DisplayListener listener) Unregisters an input device listener. Parameters listener The listener to unregister. See Also registerDisplayListener(DisplayManager.DisplayListener, Handler)
	1:	android.view.Display public int getRotation () Returns the rotation of the screen from its "natural" orientation. The returned value may be Surface.ROTATION_0 (no rotation), Surface.ROTATION_90, Surface.ROTATION_180, or Surface.ROTATION_270. For example, if a device has a naturally tall screen, and the user has turned it on its side to go into a landscape orientation, the value returned here may be either Surface.ROTATION_90 or Surface.ROTATION_270 depending on the direction it was turned. The angle is the rotation of the drawn graphics on the screen, which is the opposite direction of the physical rotation of the device. For example, if the device is rotated 90 degrees counter-clockwise, to compensate rendering will be rotated by 90 degrees clockwise and thus the returned value here will be Surface.ROTATION_90.
	2:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	3:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	4:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	5:	android.view.Display public void getCurrentSizeRange (Point outSmallestSize, Point outLargestSize) Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size. This is basically the sizes you will see as the orientation changes, taking into account whatever screen decoration there is in each rotation. For example, the status bar is always at the top of the screen, so it will reduce the height both in landscape and portrait, and the smallest height returned here will be the smaller of the two. This is intended for applications to get an idea of the range of sizes they will encounter while going through device rotations, to provide a stable UI through rotation. The sizes here take into account all standard system decorations that reduce the size actually available to the application: the status bar, navigation bar, system bar, etc. It does not take into account more transient elements like an IME soft keyboard. Parameters outSmallestSize Filled in with the smallest width and height that the application will encounter, in pixels (not dp units). The x (width) dimension here directly corresponds to Configuration.smallestScreenWidthDp, except the value here is in raw screen pixels rather than dp units. Your application may of course still get smaller space yet if, for example, a soft keyboard is being displayed. outLargestSize Filled in with the largest width and height that the application will encounter, in pixels (not dp units). Your application may of course still get larger space than this if, for example, screen decorations like the status bar are being hidden.
	6:	android.support.v4.hardware.display.DisplayManagerCompat public abstract Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	7:	android.view.Display public int getDisplayId () Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
	8:	android.view.Display public int getFlags () Returns a combination of flags that describe the capabilities of the display. Returns The display flags. See Also FLAG_SUPPORTS_PROTECTED_BUFFERS FLAG_SECURE FLAG_PRIVATE
	9:	android.view.Display public int getHeight () This method was deprecated in API level 13. Use getSize(Point) instead.
vibrate
Requests operation of the device's vibrator
	0:	android.view.Display public void getCurrentSizeRange (Point outSmallestSize, Point outLargestSize) Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size. This is basically the sizes you will see as the orientation changes, taking into account whatever screen decoration there is in each rotation. For example, the status bar is always at the top of the screen, so it will reduce the height both in landscape and portrait, and the smallest height returned here will be the smaller of the two. This is intended for applications to get an idea of the range of sizes they will encounter while going through device rotations, to provide a stable UI through rotation. The sizes here take into account all standard system decorations that reduce the size actually available to the application: the status bar, navigation bar, system bar, etc. It does not take into account more transient elements like an IME soft keyboard. Parameters outSmallestSize Filled in with the smallest width and height that the application will encounter, in pixels (not dp units). The x (width) dimension here directly corresponds to Configuration.smallestScreenWidthDp, except the value here is in raw screen pixels rather than dp units. Your application may of course still get smaller space yet if, for example, a soft keyboard is being displayed. outLargestSize Filled in with the largest width and height that the application will encounter, in pixels (not dp units). Your application may of course still get larger space than this if, for example, screen decorations like the status bar are being hidden.
	1:	android.hardware.display.DisplayManager public void unregisterDisplayListener (DisplayManager.DisplayListener listener) Unregisters an input device listener. Parameters listener The listener to unregister. See Also registerDisplayListener(DisplayManager.DisplayListener, Handler)
	2:	android.view.Display public int getRotation () Returns the rotation of the screen from its "natural" orientation. The returned value may be Surface.ROTATION_0 (no rotation), Surface.ROTATION_90, Surface.ROTATION_180, or Surface.ROTATION_270. For example, if a device has a naturally tall screen, and the user has turned it on its side to go into a landscape orientation, the value returned here may be either Surface.ROTATION_90 or Surface.ROTATION_270 depending on the direction it was turned. The angle is the rotation of the drawn graphics on the screen, which is the opposite direction of the physical rotation of the device. For example, if the device is rotated 90 degrees counter-clockwise, to compensate rendering will be rotated by 90 degrees clockwise and thus the returned value here will be Surface.ROTATION_90.
	3:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	4:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	5:	android.support.v4.hardware.display.DisplayManagerCompat public abstract Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	6:	android.view.Display public int getDisplayId () Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
	7:	android.view.Display public int getFlags () Returns a combination of flags that describe the capabilities of the display. Returns The display flags. See Also FLAG_SUPPORTS_PROTECTED_BUFFERS FLAG_SECURE FLAG_PRIVATE
	8:	android.view.Display public int getHeight () This method was deprecated in API level 13. Use getSize(Point) instead.
	9:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
getBestImageWidth
Returns the best image width for a given image type
	0:	android.view.Display public void getCurrentSizeRange (Point outSmallestSize, Point outLargestSize) Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size. This is basically the sizes you will see as the orientation changes, taking into account whatever screen decoration there is in each rotation. For example, the status bar is always at the top of the screen, so it will reduce the height both in landscape and portrait, and the smallest height returned here will be the smaller of the two. This is intended for applications to get an idea of the range of sizes they will encounter while going through device rotations, to provide a stable UI through rotation. The sizes here take into account all standard system decorations that reduce the size actually available to the application: the status bar, navigation bar, system bar, etc. It does not take into account more transient elements like an IME soft keyboard. Parameters outSmallestSize Filled in with the smallest width and height that the application will encounter, in pixels (not dp units). The x (width) dimension here directly corresponds to Configuration.smallestScreenWidthDp, except the value here is in raw screen pixels rather than dp units. Your application may of course still get smaller space yet if, for example, a soft keyboard is being displayed. outLargestSize Filled in with the largest width and height that the application will encounter, in pixels (not dp units). Your application may of course still get larger space than this if, for example, screen decorations like the status bar are being hidden.
	1:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	2:	android.hardware.display.DisplayManager public Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	3:	android.view.Display public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	4:	android.view.Display public int getFlags () Returns a combination of flags that describe the capabilities of the display. Returns The display flags. See Also FLAG_SUPPORTS_PROTECTED_BUFFERS FLAG_SECURE FLAG_PRIVATE
	5:	android.view.Display public String getName () Gets the name of the display. Note that some displays may be renamed by the user. Returns The display's name.
	6:	android.view.Display public int getOrientation () This method was deprecated in API level 8. use getRotation() Returns orientation of this display.
	7:	android.hardware.display.DisplayManager public Display[] getDisplays () Gets all currently valid logical displays. Returns An array containing all displays.
	8:	android.view.Display public int getRotation () Returns the rotation of the screen from its "natural" orientation. The returned value may be Surface.ROTATION_0 (no rotation), Surface.ROTATION_90, Surface.ROTATION_180, or Surface.ROTATION_270. For example, if a device has a naturally tall screen, and the user has turned it on its side to go into a landscape orientation, the value returned here may be either Surface.ROTATION_90 or Surface.ROTATION_270 depending on the direction it was turned. The angle is the rotation of the drawn graphics on the screen, which is the opposite direction of the physical rotation of the device. For example, if the device is rotated 90 degrees counter-clockwise, to compensate rendering will be rotated by 90 degrees clockwise and thus the returned value here will be Surface.ROTATION_90.
	9:	android.view.Display public int getState () Gets the state of the display, such as whether it is on or off. Returns The state of the display: one of STATE_OFF, STATE_ON, STATE_DOZING, or STATE_UNKNOWN.
getBestImageHeight
Returns the best image height for a given image type
	0:	android.view.Display public void getCurrentSizeRange (Point outSmallestSize, Point outLargestSize) Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size. This is basically the sizes you will see as the orientation changes, taking into account whatever screen decoration there is in each rotation. For example, the status bar is always at the top of the screen, so it will reduce the height both in landscape and portrait, and the smallest height returned here will be the smaller of the two. This is intended for applications to get an idea of the range of sizes they will encounter while going through device rotations, to provide a stable UI through rotation. The sizes here take into account all standard system decorations that reduce the size actually available to the application: the status bar, navigation bar, system bar, etc. It does not take into account more transient elements like an IME soft keyboard. Parameters outSmallestSize Filled in with the smallest width and height that the application will encounter, in pixels (not dp units). The x (width) dimension here directly corresponds to Configuration.smallestScreenWidthDp, except the value here is in raw screen pixels rather than dp units. Your application may of course still get smaller space yet if, for example, a soft keyboard is being displayed. outLargestSize Filled in with the largest width and height that the application will encounter, in pixels (not dp units). Your application may of course still get larger space than this if, for example, screen decorations like the status bar are being hidden.
	1:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	2:	android.hardware.display.DisplayManager public Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	3:	android.view.Display public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	4:	android.view.Display public int getFlags () Returns a combination of flags that describe the capabilities of the display. Returns The display flags. See Also FLAG_SUPPORTS_PROTECTED_BUFFERS FLAG_SECURE FLAG_PRIVATE
	5:	android.view.Display public String getName () Gets the name of the display. Note that some displays may be renamed by the user. Returns The display's name.
	6:	android.view.Display public int getOrientation () This method was deprecated in API level 8. use getRotation() Returns orientation of this display.
	7:	android.hardware.display.DisplayManager public Display[] getDisplays () Gets all currently valid logical displays. Returns An array containing all displays.
	8:	android.view.Display public int getRotation () Returns the rotation of the screen from its "natural" orientation. The returned value may be Surface.ROTATION_0 (no rotation), Surface.ROTATION_90, Surface.ROTATION_180, or Surface.ROTATION_270. For example, if a device has a naturally tall screen, and the user has turned it on its side to go into a landscape orientation, the value returned here may be either Surface.ROTATION_90 or Surface.ROTATION_270 depending on the direction it was turned. The angle is the rotation of the drawn graphics on the screen, which is the opposite direction of the physical rotation of the device. For example, if the device is rotated 90 degrees counter-clockwise, to compensate rendering will be rotated by 90 degrees clockwise and thus the returned value here will be Surface.ROTATION_90.
	9:	android.view.Display public int getState () Gets the state of the display, such as whether it is on or off. Returns The state of the display: one of STATE_OFF, STATE_ON, STATE_DOZING, or STATE_UNKNOWN.
