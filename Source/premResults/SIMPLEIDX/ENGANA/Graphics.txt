drawString
(x,y)
(LEFT, HCENTER, RIGHT)
(TOP, BASELINE, BOTTOM)
OR
TOP | LEFT

Vertical centering of the text is not specified since it is not considered useful, it is hard to specify, and it is burdensome to implement
	0:	android.graphics.Rect public Rect (int left, int top, int right, int bottom) Create a new rectangle with the specified coordinates. Note: no range checking is performed, so the caller must ensure that left <= right and top <= bottom. Parameters left The X coordinate of the left side of the rectangle top The Y coordinate of the top of the rectangle right The X coordinate of the right side of the rectangle bottom The Y coordinate of the bottom of the rectangle
	1:	android.graphics.Rect public void set (int left, int top, int right, int bottom) Set the rectangle's coordinates to the specified values. Note: no range checking is performed, so it is up to the caller to ensure that left <= right and top <= bottom. Parameters left The X coordinate of the left side of the rectangle top The Y coordinate of the top of the rectangle right The X coordinate of the right side of the rectangle bottom The Y coordinate of the bottom of the rectangle
	2:	android.graphics.RectF public RectF (float left, float top, float right, float bottom) Create a new rectangle with the specified coordinates. Note: no range checking is performed, so the caller must ensure that left <= right and top <= bottom. Parameters left The X coordinate of the left side of the rectangle top The Y coordinate of the top of the rectangle right The X coordinate of the right side of the rectangle bottom The Y coordinate of the bottom of the rectangle
	3:	android.graphics.RectF public void set (float left, float top, float right, float bottom) Set the rectangle's coordinates to the specified values. Note: no range checking is performed, so it is up to the caller to ensure that left <= right and top <= bottom. Parameters left The X coordinate of the left side of the rectangle top The Y coordinate of the top of the rectangle right The X coordinate of the right side of the rectangle bottom The Y coordinate of the bottom of the rectangle
	4:	android.graphics.drawable.PaintDrawable public void setCornerRadii (float[] radii) Specify radii for each of the 4 corners. For each corner, the array contains 2 values, [X_radius, Y_radius]. The corners are ordered top-left, top-right, bottom-right, bottom-left Parameters radii the x and y radii of the corners
	5:	android.graphics.Rect public boolean contains (int x, int y) Returns true if (x,y) is inside the rectangle. The left and top are considered to be inside, while the right and bottom are not. This means that for a x,y to be contained: left <= x < right and top <= y < bottom. An empty rectangle never contains any point. Parameters x The X coordinate of the point being tested for containment y The Y coordinate of the point being tested for containment Returns true iff (x,y) are contained by the rectangle, where containment means left <= x < right and top <= y < bottom
	6:	android.graphics.RectF public boolean contains (float x, float y) Returns true if (x,y) is inside the rectangle. The left and top are considered to be inside, while the right and bottom are not. This means that for a x,y to be contained: left <= x < right and top <= y < bottom. An empty rectangle never contains any point. Parameters x The X coordinate of the point being tested for containment y The Y coordinate of the point being tested for containment Returns true iff (x,y) are contained by the rectangle, where containment means left <= x < right and top <= y < bottom
	7:	android.graphics.Region public Region (int left, int top, int right, int bottom) Return a region set to the specified rectangle
	8:	android.graphics.Region public boolean set (int left, int top, int right, int bottom) Set the region to the specified rectangle
	9:	android.graphics.Canvas public void drawRect (float left, float top, float right, float bottom, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters left The left side of the rectangle to be drawn top The top side of the rectangle to be drawn right The right side of the rectangle to be drawn bottom The bottom side of the rectangle to be drawn paint The paint used to draw the rect
drawString

translate
Translates the origin of the graphics context to the point (x, y) in the current coordinate system
	0:	android.graphics.Canvas public void translate (float dx, float dy) Preconcat the current matrix with the specified translation Parameters dx The distance to translate in X dy The distance to translate in Y
	1:	android.graphics.Camera public void translate (float x, float y, float z) Applies a translation transform on all three axis. Parameters x The distance to translate by on the X axis y The distance to translate by on the Y axis z The distance to translate by on the Z axis
	2:	android.graphics.Region public void translate (int dx, int dy) Translate the region by [dx, dy]. If the region is empty, do nothing.
	3:	android.graphics.Region public void translate (int dx, int dy, Region dst) Set the dst region to the result of translating this region by [dx, dy]. If this region is empty, then dst will be set to empty.
	4:	android.graphics.Path public void moveTo (float x, float y) Set the beginning of the next contour to the point (x,y). Parameters x The x-coordinate of the start of a new contour y The y-coordinate of the start of a new contour
	5:	android.graphics.Point public final boolean equals (int x, int y) Returns true if the point's coordinates equal (x,y)
	6:	android.graphics.Point public void set (int x, int y) Set the point's x and y coordinates
	7:	android.graphics.PointF public final boolean equals (float x, float y) Returns true if the point's coordinates equal (x,y)
	8:	android.graphics.PointF public final void set (float x, float y) Set the point's x and y coordinates
	9:	android.graphics.PointF public final void set (PointF p) Set the point's x and y coordinates to the coordinates of p
getTranslateX
Gets the X coordinate of the translated origin of this graphics context
	0:	android.graphics.Canvas public void drawText (String text, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	1:	android.graphics.Canvas public void drawText (char[] text, int index, int count, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	2:	android.graphics.Bitmap public static Bitmap createBitmap (Bitmap source, int x, int y, int width, int height, Matrix m, boolean filter) Returns an immutable bitmap from subset of the source bitmap, transformed by the optional matrix. The new bitmap may be the same object as source, or a copy may have been made. It is initialized with the same density as the original bitmap. If the source bitmap is immutable and the requested subset is the same as the source bitmap itself, then the source bitmap is returned and no new bitmap is created. Parameters source The bitmap we are subsetting x The x coordinate of the first pixel in source y The y coordinate of the first pixel in source width The number of pixels in each row height The number of rows m Optional matrix to be applied to the pixels filter true if the source should be filtered. Only applies if the matrix contains more than just translation. Returns A bitmap that represents the specified subset of source Throws IllegalArgumentException if the x, y, width, height values are outside of the dimensions of the source bitmap, or width is <= 0, or height is <= 0
	3:	android.graphics.Canvas public void drawText (CharSequence text, int start, int end, float x, float y, Paint paint) Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint. The origin is interpreted based on the Align setting in the Paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of origin for where to draw the text y The y-coordinate of origin for where to draw the text paint The paint used for the text (e.g. color, size, style)
	4:	android.graphics.Canvas public void drawText (String text, int start, int end, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	5:	android.graphics.Paint public void getTextPath (String text, int start, int end, float x, float y, Path path) Return the path (outline) for the specified text. Note: just like Canvas.drawText, this will respect the Align setting in the paint. Parameters text The text to retrieve the path from start The first character in the text end 1 past the last charcter in the text x The x coordinate of the text's origin y The y coordinate of the text's origin path The path to receive the data describing the text. Must be allocated by the caller.
	6:	android.graphics.Paint public void getTextPath (char[] text, int index, int count, float x, float y, Path path) Return the path (outline) for the specified text. Note: just like Canvas.drawText, this will respect the Align setting in the paint. Parameters text The text to retrieve the path from index The index of the first character in text count The number of characterss starting with index x The x coordinate of the text's origin y The y coordinate of the text's origin path The path to receive the data describing the text. Must be allocated by the caller.
	7:	android.graphics.Camera public void translate (float x, float y, float z) Applies a translation transform on all three axis. Parameters x The distance to translate by on the X axis y The distance to translate by on the Y axis z The distance to translate by on the Z axis
	8:	android.graphics.Canvas public void translate (float dx, float dy) Preconcat the current matrix with the specified translation Parameters dx The distance to translate in X dy The distance to translate in Y
	9:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, Rect src, RectF dst, Paint paint) Draw the specified bitmap, scaling/translating automatically to fill the destination rectangle. If the source rectangle is not null, it specifies the subset of the bitmap to draw. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. This function ignores the density associated with the bitmap. This is because the source and destination rectangle coordinate spaces are in their respective densities, so must already have the appropriate scaling factor applied. Parameters bitmap The bitmap to be drawn src May be null. The subset of the bitmap to be drawn dst The rectangle that the bitmap will be scaled/translated to fit into paint May be null. The paint used to draw the bitmap
getTranslateY
Gets the Y coordinate of the translated origin of this graphics context
	0:	android.graphics.Canvas public void drawText (String text, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	1:	android.graphics.Canvas public void drawText (char[] text, int index, int count, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	2:	android.graphics.Bitmap public static Bitmap createBitmap (Bitmap source, int x, int y, int width, int height, Matrix m, boolean filter) Returns an immutable bitmap from subset of the source bitmap, transformed by the optional matrix. The new bitmap may be the same object as source, or a copy may have been made. It is initialized with the same density as the original bitmap. If the source bitmap is immutable and the requested subset is the same as the source bitmap itself, then the source bitmap is returned and no new bitmap is created. Parameters source The bitmap we are subsetting x The x coordinate of the first pixel in source y The y coordinate of the first pixel in source width The number of pixels in each row height The number of rows m Optional matrix to be applied to the pixels filter true if the source should be filtered. Only applies if the matrix contains more than just translation. Returns A bitmap that represents the specified subset of source Throws IllegalArgumentException if the x, y, width, height values are outside of the dimensions of the source bitmap, or width is <= 0, or height is <= 0
	3:	android.graphics.Canvas public void drawText (CharSequence text, int start, int end, float x, float y, Paint paint) Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint. The origin is interpreted based on the Align setting in the Paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of origin for where to draw the text y The y-coordinate of origin for where to draw the text paint The paint used for the text (e.g. color, size, style)
	4:	android.graphics.Canvas public void drawText (String text, int start, int end, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	5:	android.graphics.Paint public void getTextPath (String text, int start, int end, float x, float y, Path path) Return the path (outline) for the specified text. Note: just like Canvas.drawText, this will respect the Align setting in the paint. Parameters text The text to retrieve the path from start The first character in the text end 1 past the last charcter in the text x The x coordinate of the text's origin y The y coordinate of the text's origin path The path to receive the data describing the text. Must be allocated by the caller.
	6:	android.graphics.Paint public void getTextPath (char[] text, int index, int count, float x, float y, Path path) Return the path (outline) for the specified text. Note: just like Canvas.drawText, this will respect the Align setting in the paint. Parameters text The text to retrieve the path from index The index of the first character in text count The number of characterss starting with index x The x coordinate of the text's origin y The y coordinate of the text's origin path The path to receive the data describing the text. Must be allocated by the caller.
	7:	android.graphics.Camera public void translate (float x, float y, float z) Applies a translation transform on all three axis. Parameters x The distance to translate by on the X axis y The distance to translate by on the Y axis z The distance to translate by on the Z axis
	8:	android.graphics.Canvas public void translate (float dx, float dy) Preconcat the current matrix with the specified translation Parameters dx The distance to translate in X dy The distance to translate in Y
	9:	android.graphics.Path public void moveTo (float x, float y) Set the beginning of the next contour to the point (x,y). Parameters x The x-coordinate of the start of a new contour y The y-coordinate of the start of a new contour
getColor
Gets the current color
	0:	android.graphics.drawable.ColorDrawable public int getColor () Gets the drawable's color value. Returns int The color to draw.
	1:	android.graphics.Paint public int getColor () Return the paint's color. Note that the color is a 32bit value containing alpha as well as r,g,b. This 32bit value is not premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b. See the Color class for more details. Returns the paint's color (and alpha).
	2:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	3:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	4:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	6:	android.graphics.Color public Color () 
	7:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	8:	android.graphics.Canvas public void drawVertices (Canvas.VertexMode mode, int vertexCount, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, Paint paint) Draw the array of vertices, interpreted as triangles (based on mode). The verts array is required, and specifies the x,y pairs for each vertex. If texs is non-null, then it is used to specify the coordinate in shader coordinates to use at each vertex (the paint must have a shader in this case). If there is no texs array, but there is a color array, then each color is interpolated across its corresponding triangle in a gradient. If both texs and colors arrays are present, then they behave as before, but the resulting color at each pixels is the result of multiplying the colors from the shader and the color-gradient together. The indices array is optional, but if it is present, then it is used to specify the index of each triangle, rather than just walking through the arrays in order. Parameters mode How to interpret the array of vertices vertexCount The number of values in the vertices array (and corresponding texs and colors arrays if non-null). Each logical vertex is two values (x, y), vertexCount must be a multiple of 2. verts Array of vertices for the mesh vertOffset Number of values in the verts to skip before drawing. texs May be null. If not null, specifies the coordinates to sample into the current shader (e.g. bitmap tile or gradient) texOffset Number of values in texs to skip before drawing. colors May be null. If not null, specifies a color for each vertex, to be interpolated across the triangle. colorOffset Number of values in colors to skip before drawing. indices If not null, array of indices to reference into the vertex (texs, colors) array. indexCount number of entries in the indices array (if not null). paint Specifies the shader to use if the texs array is non-null.
	9:	android.graphics.drawable.PaintDrawable public PaintDrawable (int color) 
getRedComponent
Gets the red component of the current color
	0:	android.graphics.Color public static int red (int color) Return the red component of a color int. This is the same as saying (color >> 16) & 0xFF
	1:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	2:	android.graphics.Color public static int argb (int alpha, int red, int green, int blue) Return a color-int from alpha, red, green, blue components. These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters alpha Alpha component [0..255] of the color red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	3:	android.graphics.Color public static int rgb (int red, int green, int blue) Return a color-int from red, green, blue components. The alpha component is implicity 255 (fully opaque). These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	4:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.graphics.Paint public void setARGB (int a, int r, int g, int b) Helper to setColor(), that takes a,r,g,b and constructs the color int Parameters a The new alpha component (0..255) of the paint's color. r The new red component (0..255) of the paint's color. g The new green component (0..255) of the paint's color. b The new blue component (0..255) of the paint's color.
	6:	android.graphics.Color public static int alpha (int color) Return the alpha component of a color int. This is the same as saying color >>> 24
	7:	android.graphics.Color public static int blue (int color) Return the blue component of a color int. This is the same as saying color & 0xFF
	8:	android.graphics.Color public static void RGBToHSV (int red, int green, int blue, float[] hsv) Convert RGB components to HSV. hsv[0] is Hue [0 .. 360) hsv[1] is Saturation [0...1] hsv[2] is Value [0...1] Parameters red red component value [0..255] green green component value [0..255] blue blue component value [0..255] hsv 3 element array which holds the resulting HSV components.
	9:	android.graphics.ColorMatrix public void setRotate (int axis, float degrees) Set the rotation on a color axis by the specified values. axis=0 correspond to a rotation around the RED color axis=1 correspond to a rotation around the GREEN color axis=2 correspond to a rotation around the BLUE color
getGreenComponent
Gets the green component of the current color
	0:	android.graphics.Color public static int green (int color) Return the green component of a color int. This is the same as saying (color >> 8) & 0xFF
	1:	android.graphics.Color public static int argb (int alpha, int red, int green, int blue) Return a color-int from alpha, red, green, blue components. These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters alpha Alpha component [0..255] of the color red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	2:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	3:	android.graphics.Color public static int rgb (int red, int green, int blue) Return a color-int from red, green, blue components. The alpha component is implicity 255 (fully opaque). These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	4:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.graphics.Paint public void setARGB (int a, int r, int g, int b) Helper to setColor(), that takes a,r,g,b and constructs the color int Parameters a The new alpha component (0..255) of the paint's color. r The new red component (0..255) of the paint's color. g The new green component (0..255) of the paint's color. b The new blue component (0..255) of the paint's color.
	6:	android.graphics.Color public static int alpha (int color) Return the alpha component of a color int. This is the same as saying color >>> 24
	7:	android.graphics.Color public static int blue (int color) Return the blue component of a color int. This is the same as saying color & 0xFF
	8:	android.graphics.Color public static void RGBToHSV (int red, int green, int blue, float[] hsv) Convert RGB components to HSV. hsv[0] is Hue [0 .. 360) hsv[1] is Saturation [0...1] hsv[2] is Value [0...1] Parameters red red component value [0..255] green green component value [0..255] blue blue component value [0..255] hsv 3 element array which holds the resulting HSV components.
	9:	android.graphics.ColorMatrix public void setRotate (int axis, float degrees) Set the rotation on a color axis by the specified values. axis=0 correspond to a rotation around the RED color axis=1 correspond to a rotation around the GREEN color axis=2 correspond to a rotation around the BLUE color
getBlueComponent
Gets the blue component of the current color
	0:	android.graphics.Color public static int blue (int color) Return the blue component of a color int. This is the same as saying color & 0xFF
	1:	android.graphics.Color public static int argb (int alpha, int red, int green, int blue) Return a color-int from alpha, red, green, blue components. These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters alpha Alpha component [0..255] of the color red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	2:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	3:	android.graphics.Color public static int rgb (int red, int green, int blue) Return a color-int from red, green, blue components. The alpha component is implicity 255 (fully opaque). These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	4:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.graphics.Paint public void setARGB (int a, int r, int g, int b) Helper to setColor(), that takes a,r,g,b and constructs the color int Parameters a The new alpha component (0..255) of the paint's color. r The new red component (0..255) of the paint's color. g The new green component (0..255) of the paint's color. b The new blue component (0..255) of the paint's color.
	6:	android.graphics.Color public static int alpha (int color) Return the alpha component of a color int. This is the same as saying color >>> 24
	7:	android.graphics.Color public static void RGBToHSV (int red, int green, int blue, float[] hsv) Convert RGB components to HSV. hsv[0] is Hue [0 .. 360) hsv[1] is Saturation [0...1] hsv[2] is Value [0...1] Parameters red red component value [0..255] green green component value [0..255] blue blue component value [0..255] hsv 3 element array which holds the resulting HSV components.
	8:	android.graphics.ColorMatrix public void setRotate (int axis, float degrees) Set the rotation on a color axis by the specified values. axis=0 correspond to a rotation around the RED color axis=1 correspond to a rotation around the GREEN color axis=2 correspond to a rotation around the BLUE color
	9:	android.graphics.Color public static int green (int color) Return the green component of a color int. This is the same as saying (color >> 8) & 0xFF
getGrayScale
Gets the current grayscale value of the color being used for rendering operations
	0:	android.graphics.drawable.ColorDrawable public int getColor () Gets the drawable's color value. Returns int The color to draw.
	1:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	2:	android.graphics.Canvas public void drawVertices (Canvas.VertexMode mode, int vertexCount, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, Paint paint) Draw the array of vertices, interpreted as triangles (based on mode). The verts array is required, and specifies the x,y pairs for each vertex. If texs is non-null, then it is used to specify the coordinate in shader coordinates to use at each vertex (the paint must have a shader in this case). If there is no texs array, but there is a color array, then each color is interpolated across its corresponding triangle in a gradient. If both texs and colors arrays are present, then they behave as before, but the resulting color at each pixels is the result of multiplying the colors from the shader and the color-gradient together. The indices array is optional, but if it is present, then it is used to specify the index of each triangle, rather than just walking through the arrays in order. Parameters mode How to interpret the array of vertices vertexCount The number of values in the vertices array (and corresponding texs and colors arrays if non-null). Each logical vertex is two values (x, y), vertexCount must be a multiple of 2. verts Array of vertices for the mesh vertOffset Number of values in the verts to skip before drawing. texs May be null. If not null, specifies the coordinates to sample into the current shader (e.g. bitmap tile or gradient) texOffset Number of values in texs to skip before drawing. colors May be null. If not null, specifies a color for each vertex, to be interpolated across the triangle. colorOffset Number of values in colors to skip before drawing. indices If not null, array of indices to reference into the vertex (texs, colors) array. indexCount number of entries in the indices array (if not null). paint Specifies the shader to use if the texs array is non-null.
	3:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, float left, float top, Paint paint) Draw the specified bitmap, with its top/left corner at (x,y), using the specified paint, transformed by the current matrix. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. If the bitmap and canvas have different densities, this function will take care of automatically scaling the bitmap to draw at the same density as the canvas. Parameters bitmap The bitmap to be drawn left The position of the left side of the bitmap being drawn top The position of the top side of the bitmap being drawn paint The paint used to draw the bitmap (may be null)
	4:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.graphics.Bitmap public static Bitmap createBitmap (DisplayMetrics display, int[] colors, int offset, int stride, int width, int height, Bitmap.Config config) Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array. Its initial density is determined from the given DisplayMetrics. Parameters display Display metrics for the display this bitmap will be drawn on. colors Array of Color used to initialize the pixels. offset Number of values to skip before the first color in the array of colors. stride Number of colors in the array between rows (must be >= width or <= -width). width The width of the bitmap height The height of the bitmap config The bitmap config to create. If the config does not support per-pixel alpha (e.g. RGB_565), then the alpha bytes in the colors[] will be ignored (assumed to be FF) Throws IllegalArgumentException if the width or height are <= 0, or if the color array's length is less than the number of pixels.
	6:	android.graphics.Bitmap public static Bitmap createBitmap (int[] colors, int offset, int stride, int width, int height, Bitmap.Config config) Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array. Its initial density is as per getDensity(). Parameters colors Array of Color used to initialize the pixels. offset Number of values to skip before the first color in the array of colors. stride Number of colors in the array between rows (must be >= width or <= -width). width The width of the bitmap height The height of the bitmap config The bitmap config to create. If the config does not support per-pixel alpha (e.g. RGB_565), then the alpha bytes in the colors[] will be ignored (assumed to be FF) Throws IllegalArgumentException if the width or height are <= 0, or if the color array's length is less than the number of pixels.
	7:	android.graphics.Canvas public void drawPosText (String text, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array. This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. Parameters text The text to be drawn pos Array of [x,y] positions, used to position each character paint The paint used for the text (e.g. color, size, style)
	8:	android.graphics.Bitmap public static Bitmap createBitmap (int[] colors, int width, int height, Bitmap.Config config) Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array. Its initial density is as per getDensity(). Parameters colors Array of Color used to initialize the pixels. This array must be at least as large as width * height. width The width of the bitmap height The height of the bitmap config The bitmap config to create. If the config does not support per-pixel alpha (e.g. RGB_565), then the alpha bytes in the colors[] will be ignored (assumed to be FF) Throws IllegalArgumentException if the width or height are <= 0, or if the color array's length is less than the number of pixels.
	9:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
setColor
Sets the current color to the specified RGB values
	0:	android.graphics.drawable.ColorDrawable public void setColor (int color) Sets the drawable's color value. This action will clobber the results of prior calls to setAlpha(int) on this object, which side-affected the underlying color. Parameters color The color to draw.
	1:	android.graphics.Paint public void setColor (int color) Set the paint's color. Note that the color is an int containing alpha as well as r,g,b. This 32bit value is not premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b. See the Color class for more details. Parameters color The new color (including alpha) to set in the paint.
	2:	android.graphics.drawable.GradientDrawable public void setColors (int[] colors) Sets the colors used to draw the gradient. Each color is specified as an ARGB integer and the array must contain at least 2 colors. Note: changing orientation will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the orientation. Parameters colors 2 or more ARGB colors See Also mutate() setColor(int)
	3:	android.graphics.drawable.GradientDrawable public void setColor (int argb) Changes this drawbale to use a single color instead of a gradient. Note: changing color will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the color. Parameters argb The color used to fill the shape See Also mutate() setColors(int[])
	4:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.graphics.ColorMatrix public void setRotate (int axis, float degrees) Set the rotation on a color axis by the specified values. axis=0 correspond to a rotation around the RED color axis=1 correspond to a rotation around the GREEN color axis=2 correspond to a rotation around the BLUE color
	6:	android.graphics.Color public static int rgb (int red, int green, int blue) Return a color-int from red, green, blue components. The alpha component is implicity 255 (fully opaque). These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	7:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	8:	android.graphics.Bitmap public static Bitmap createBitmap (DisplayMetrics display, int[] colors, int offset, int stride, int width, int height, Bitmap.Config config) Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array. Its initial density is determined from the given DisplayMetrics. Parameters display Display metrics for the display this bitmap will be drawn on. colors Array of Color used to initialize the pixels. offset Number of values to skip before the first color in the array of colors. stride Number of colors in the array between rows (must be >= width or <= -width). width The width of the bitmap height The height of the bitmap config The bitmap config to create. If the config does not support per-pixel alpha (e.g. RGB_565), then the alpha bytes in the colors[] will be ignored (assumed to be FF) Throws IllegalArgumentException if the width or height are <= 0, or if the color array's length is less than the number of pixels.
	9:	android.graphics.Bitmap public static Bitmap createBitmap (int[] colors, int offset, int stride, int width, int height, Bitmap.Config config) Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array. Its initial density is as per getDensity(). Parameters colors Array of Color used to initialize the pixels. offset Number of values to skip before the first color in the array of colors. stride Number of colors in the array between rows (must be >= width or <= -width). width The width of the bitmap height The height of the bitmap config The bitmap config to create. If the config does not support per-pixel alpha (e.g. RGB_565), then the alpha bytes in the colors[] will be ignored (assumed to be FF) Throws IllegalArgumentException if the width or height are <= 0, or if the color array's length is less than the number of pixels.
setColor
Sets the current color to the specified RGB values
	0:	android.graphics.drawable.ColorDrawable public void setColor (int color) Sets the drawable's color value. This action will clobber the results of prior calls to setAlpha(int) on this object, which side-affected the underlying color. Parameters color The color to draw.
	1:	android.graphics.Paint public void setColor (int color) Set the paint's color. Note that the color is an int containing alpha as well as r,g,b. This 32bit value is not premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b. See the Color class for more details. Parameters color The new color (including alpha) to set in the paint.
	2:	android.graphics.drawable.GradientDrawable public void setColors (int[] colors) Sets the colors used to draw the gradient. Each color is specified as an ARGB integer and the array must contain at least 2 colors. Note: changing orientation will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the orientation. Parameters colors 2 or more ARGB colors See Also mutate() setColor(int)
	3:	android.graphics.drawable.GradientDrawable public void setColor (int argb) Changes this drawbale to use a single color instead of a gradient. Note: changing color will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the color. Parameters argb The color used to fill the shape See Also mutate() setColors(int[])
	4:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.graphics.ColorMatrix public void setRotate (int axis, float degrees) Set the rotation on a color axis by the specified values. axis=0 correspond to a rotation around the RED color axis=1 correspond to a rotation around the GREEN color axis=2 correspond to a rotation around the BLUE color
	6:	android.graphics.Color public static int rgb (int red, int green, int blue) Return a color-int from red, green, blue components. The alpha component is implicity 255 (fully opaque). These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	7:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	8:	android.graphics.Bitmap public static Bitmap createBitmap (DisplayMetrics display, int[] colors, int offset, int stride, int width, int height, Bitmap.Config config) Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array. Its initial density is determined from the given DisplayMetrics. Parameters display Display metrics for the display this bitmap will be drawn on. colors Array of Color used to initialize the pixels. offset Number of values to skip before the first color in the array of colors. stride Number of colors in the array between rows (must be >= width or <= -width). width The width of the bitmap height The height of the bitmap config The bitmap config to create. If the config does not support per-pixel alpha (e.g. RGB_565), then the alpha bytes in the colors[] will be ignored (assumed to be FF) Throws IllegalArgumentException if the width or height are <= 0, or if the color array's length is less than the number of pixels.
	9:	android.graphics.Bitmap public static Bitmap createBitmap (int[] colors, int offset, int stride, int width, int height, Bitmap.Config config) Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array. Its initial density is as per getDensity(). Parameters colors Array of Color used to initialize the pixels. offset Number of values to skip before the first color in the array of colors. stride Number of colors in the array between rows (must be >= width or <= -width). width The width of the bitmap height The height of the bitmap config The bitmap config to create. If the config does not support per-pixel alpha (e.g. RGB_565), then the alpha bytes in the colors[] will be ignored (assumed to be FF) Throws IllegalArgumentException if the width or height are <= 0, or if the color array's length is less than the number of pixels.
setGrayScale
Sets the current grayscale to be used for all subsequent rendering operations
	0:	android.graphics.Canvas public int save () Saves the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Returns The value to pass to restoreToCount() to balance this save()
	1:	android.graphics.Canvas public int save (int saveFlags) Based on saveFlags, can save the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Parameters saveFlags flag bits that specify which parts of the Canvas state to save/restore Returns The value to pass to restoreToCount() to balance this save()
	2:	android.graphics.Bitmap public final void setHasMipMap (boolean hasMipMap) Set a hint for the renderer responsible for drawing this bitmap indicating that it should attempt to use mipmaps when this bitmap is drawn scaled down. If you know that you are going to draw this bitmap at less than 50% of its original size, you may be able to obtain a higher quality by turning this property on. Note that if the renderer respects this hint it might have to allocate extra memory to hold the mipmap levels for this bitmap. This property is only a suggestion that can be ignored by the renderer. It is not guaranteed to have any effect. Parameters hasMipMap indicates whether the renderer should attempt to use mipmaps See Also hasMipMap()
	3:	android.graphics.drawable.BitmapDrawable public final Paint getPaint () Returns the paint used to render this drawable.
	4:	android.graphics.Paint public void setTextLocale (Locale locale) Set the text locale. The text locale affects how the text is drawn for some languages. For example, if the locale is CHINESE or CHINA, then the text renderer will prefer to draw text using a Chinese font. Likewise, if the locale is JAPANESE or JAPAN, then the text renderer will prefer to draw text using a Japanese font. This distinction is important because Chinese and Japanese text both use many of the same Unicode code points but their appearance is subtly different for each language. By default, the text locale is initialized to the system locale (as returned by getDefault()). This assumes that the text to be rendered will most likely be in the user's preferred language. If the actual language of the text is known, then it can be provided to the text renderer using this method. The text renderer may attempt to guess the language script based on the contents of the text to be drawn independent of the text locale here. Specifying the text locale just helps it do a better job in certain ambiguous cases Parameters locale the paint's locale value for drawing text, must not be null.
	5:	android.graphics.drawable.Drawable public Region getTransparentRegion () Returns a Region representing the part of the Drawable that is completely transparent. This can be used to perform drawing operations, identifying which parts of the target will not change when rendering the Drawable. The default implementation returns null, indicating no transparent region; subclasses can optionally override this to return an actual Region if they want to supply this optimization information, but it is not required that they do so. Returns Returns null if the Drawables has no transparent region to report, else a Region holding the parts of the Drawable's bounds that are transparent.
	6:	android.graphics.drawable.NinePatchDrawable public Region getTransparentRegion () Returns a Region representing the part of the Drawable that is completely transparent. This can be used to perform drawing operations, identifying which parts of the target will not change when rendering the Drawable. The default implementation returns null, indicating no transparent region; subclasses can optionally override this to return an actual Region if they want to supply this optimization information, but it is not required that they do so. Returns Returns null if the Drawables has no transparent region to report, else a Region holding the parts of the Drawable's bounds that are transparent.
	7:	android.graphics.drawable.BitmapDrawable public final Bitmap getBitmap () Returns the bitmap used by this drawable to render. May be null.
	8:	android.graphics.Canvas public int saveLayer (RectF bounds, Paint paint, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds May be null. The maximum size the offscreen bitmap needs to be (in local coordinates) paint This is copied, and is applied to the offscreen when restore() is called. saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this save()
	9:	android.graphics.Canvas public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds The maximum size the offscreen bitmap needs to be (in local coordinates) alpha The alpha to apply to the offscreen when when it is drawn during restore() saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this call
getFont
Gets the current font
	0:	android.graphics.Paint public Typeface getTypeface () Get the paint's typeface object. The typeface object identifies which font to use when drawing or measuring text. Returns the paint's typeface (or null)
	1:	android.graphics.Paint public float getFontMetrics (Paint.FontMetrics metrics) Return the font's recommended interline spacing, given the Paint's settings for typeface, textSize, etc. If metrics is not null, return the fontmetric values in it. Parameters metrics If this object is not null, its fields are filled with the appropriate values given the paint's text attributes. Returns the font's recommended interline spacing.
	2:	android.graphics.Paint public int getFontMetricsInt (Paint.FontMetricsInt fmi) Return the font's interline spacing, given the Paint's settings for typeface, textSize, etc. If metrics is not null, return the fontmetric values in it. Note: all values have been converted to integers from floats, in such a way has to make the answers useful for both spacing and clipping. If you want more control over the rounding, call getFontMetrics(). Returns the font's interline spacing.
	3:	android.graphics.drawable.BitmapDrawable public int getAlpha () Gets the current alpha value for the drawable. 0 means fully transparent, 255 means fully opaque. This method is implemented by Drawable subclasses and the value returned is specific to how that class treats alpha. The default return value is 255 if the class does not override this method to return a value specific to its use of alpha.
	4:	android.graphics.drawable.ClipDrawable public int getAlpha () Gets the current alpha value for the drawable. 0 means fully transparent, 255 means fully opaque. This method is implemented by Drawable subclasses and the value returned is specific to how that class treats alpha. The default return value is 255 if the class does not override this method to return a value specific to its use of alpha.
	5:	android.graphics.drawable.Drawable public int getAlpha () Gets the current alpha value for the drawable. 0 means fully transparent, 255 means fully opaque. This method is implemented by Drawable subclasses and the value returned is specific to how that class treats alpha. The default return value is 255 if the class does not override this method to return a value specific to its use of alpha.
	6:	android.graphics.drawable.DrawableContainer public int getAlpha () Gets the current alpha value for the drawable. 0 means fully transparent, 255 means fully opaque. This method is implemented by Drawable subclasses and the value returned is specific to how that class treats alpha. The default return value is 255 if the class does not override this method to return a value specific to its use of alpha.
	7:	android.graphics.drawable.GradientDrawable public int getAlpha () Gets the current alpha value for the drawable. 0 means fully transparent, 255 means fully opaque. This method is implemented by Drawable subclasses and the value returned is specific to how that class treats alpha. The default return value is 255 if the class does not override this method to return a value specific to its use of alpha.
	8:	android.graphics.drawable.InsetDrawable public int getAlpha () Gets the current alpha value for the drawable. 0 means fully transparent, 255 means fully opaque. This method is implemented by Drawable subclasses and the value returned is specific to how that class treats alpha. The default return value is 255 if the class does not override this method to return a value specific to its use of alpha.
	9:	android.graphics.drawable.LayerDrawable public int getAlpha () Gets the current alpha value for the drawable. 0 means fully transparent, 255 means fully opaque. This method is implemented by Drawable subclasses and the value returned is specific to how that class treats alpha. The default return value is 255 if the class does not override this method to return a value specific to its use of alpha.
setStrokeStyle
Sets the stroke style used for drawing lines, arcs, rectangles, and rounded rectangles
	0:	android.graphics.Canvas public void drawRect (Rect r, Paint paint) Draw the specified Rect using the specified Paint. The rectangle will be filled or framed based on the Style in the paint. Parameters r The rectangle to be drawn. paint The paint used to draw the rectangle
	1:	android.graphics.Canvas public void drawRect (float left, float top, float right, float bottom, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters left The left side of the rectangle to be drawn top The top side of the rectangle to be drawn right The right side of the rectangle to be drawn bottom The bottom side of the rectangle to be drawn paint The paint used to draw the rect
	2:	android.graphics.Paint public void setStrokeWidth (float width) Set the width for stroking. Pass 0 to stroke in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Parameters width set the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	3:	android.graphics.Paint public void setStrokeCap (Paint.Cap cap) Set the paint's Cap. Parameters cap set the paint's line cap style, used whenever the paint's style is Stroke or StrokeAndFill.
	4:	android.graphics.drawable.GradientDrawable public void setShape (int shape) Sets the type of shape used to draw the gradient. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters shape The desired shape for this drawable: LINE, OVAL, RECTANGLE or RING See Also mutate()
	5:	android.graphics.RectF public void round (Rect dst) Set the dst integer Rect by rounding this rectangle's coordinates to their nearest integer values.
	6:	android.graphics.Canvas public void drawOval (RectF oval, Paint paint) Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint. Parameters oval The rectangle bounds of the oval to be drawn
	7:	android.graphics.Paint public Paint.Cap getStrokeCap () Return the paint's Cap, controlling how the start and end of stroked lines and paths are treated. Returns the line cap style for the paint, used whenever the paint's style is Stroke or StrokeAndFill.
	8:	android.graphics.Rect public boolean intersect (Rect r) If the specified rectangle intersects this rectangle, return true and set this rectangle to that intersection, otherwise return false and do not change this rectangle. No check is performed to see if either rectangle is empty. To just test for intersection, use intersects() Parameters r The rectangle being intersected with this rectangle. Returns true if the specified rectangle and this rectangle intersect (and this rectangle is then set to that intersection) else return false and do not change this rectangle.
	9:	android.graphics.RectF public boolean intersect (RectF r) If the specified rectangle intersects this rectangle, return true and set this rectangle to that intersection, otherwise return false and do not change this rectangle. No check is performed to see if either rectangle is empty. To just test for intersection, use intersects() Parameters r The rectangle being intersected with this rectangle. Returns true if the specified rectangle and this rectangle intersect (and this rectangle is then set to that intersection) else return false and do not change this rectangle.
getStrokeStyle
Gets the stroke style used for drawing operations
	0:	android.graphics.Paint public float getStrokeWidth () Return the width for stroking. A value of 0 strokes in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Returns the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	1:	android.graphics.Paint public void setStrokeWidth (float width) Set the width for stroking. Pass 0 to stroke in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Parameters width set the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	2:	android.graphics.Paint public Paint.Cap getStrokeCap () Return the paint's Cap, controlling how the start and end of stroked lines and paths are treated. Returns the line cap style for the paint, used whenever the paint's style is Stroke or StrokeAndFill.
	3:	android.graphics.Paint public float getStrokeMiter () Return the paint's stroke miter value. Used to control the behavior of miter joins when the joins angle is sharp. Returns the paint's miter limit, used whenever the paint's style is Stroke or StrokeAndFill.
	4:	android.graphics.Paint public void setStrokeJoin (Paint.Join join) Set the paint's Join. Parameters join set the paint's Join, used whenever the paint's style is Stroke or StrokeAndFill.
	5:	android.graphics.Paint public Paint.Style getStyle () Return the paint's style, used for controlling how primitives' geometries are interpreted (except for drawBitmap, which always assumes FILL_STYLE). Returns the paint's style setting (Fill, Stroke, StrokeAndFill)
	6:	android.graphics.Paint public void setStrokeCap (Paint.Cap cap) Set the paint's Cap. Parameters cap set the paint's line cap style, used whenever the paint's style is Stroke or StrokeAndFill.
	7:	android.graphics.Paint public void setStrokeMiter (float miter) Set the paint's stroke miter value. This is used to control the behavior of miter joins when the joins angle is sharp. This value must be >= 0. Parameters miter set the miter limit on the paint, used whenever the paint's style is Stroke or StrokeAndFill.
	8:	android.graphics.PathDashPathEffect public PathDashPathEffect (Path shape, float advance, float phase, PathDashPathEffect.Style style) Dash the drawn path by stamping it with the specified shape. This only applies to drawings when the paint's style is STROKE or STROKE_AND_FILL. If the paint's style is FILL, then this effect is ignored. The paint's strokeWidth does not affect the results. Parameters shape The path to stamp along advance spacing between each stamp of shape phase amount to offset before the first shape is stamped style how to transform the shape at each position as it is stamped
	9:	android.graphics.DashPathEffect public DashPathEffect (float[] intervals, float phase) The intervals array must contain an even number of entries (>=2), with the even indices specifying the "on" intervals, and the odd indices specifying the "off" intervals. phase is an offset into the intervals array (mod the sum of all of the intervals). The intervals array controls the length of the dashes. The paint's strokeWidth controls the thickness of the dashes. Note: this patheffect only affects drawing with the paint's style is set to STROKE or FILL_AND_STROKE. It is ignored if the drawing is done with style == FILL. Parameters intervals array of ON and OFF distances phase offset into the intervals array
setFont
Sets the font for all subsequent text rendering operations
	0:	android.graphics.Paint public void setTextLocale (Locale locale) Set the text locale. The text locale affects how the text is drawn for some languages. For example, if the locale is CHINESE or CHINA, then the text renderer will prefer to draw text using a Chinese font. Likewise, if the locale is JAPANESE or JAPAN, then the text renderer will prefer to draw text using a Japanese font. This distinction is important because Chinese and Japanese text both use many of the same Unicode code points but their appearance is subtly different for each language. By default, the text locale is initialized to the system locale (as returned by getDefault()). This assumes that the text to be rendered will most likely be in the user's preferred language. If the actual language of the text is known, then it can be provided to the text renderer using this method. The text renderer may attempt to guess the language script based on the contents of the text to be drawn independent of the text locale here. Specifying the text locale just helps it do a better job in certain ambiguous cases Parameters locale the paint's locale value for drawing text, must not be null.
	1:	android.graphics.Paint public float getFontMetrics (Paint.FontMetrics metrics) Return the font's recommended interline spacing, given the Paint's settings for typeface, textSize, etc. If metrics is not null, return the fontmetric values in it. Parameters metrics If this object is not null, its fields are filled with the appropriate values given the paint's text attributes. Returns the font's recommended interline spacing.
	2:	android.graphics.Canvas public int save () Saves the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Returns The value to pass to restoreToCount() to balance this save()
	3:	android.graphics.Canvas public int save (int saveFlags) Based on saveFlags, can save the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Parameters saveFlags flag bits that specify which parts of the Canvas state to save/restore Returns The value to pass to restoreToCount() to balance this save()
	4:	android.graphics.Paint public int getFontMetricsInt (Paint.FontMetricsInt fmi) Return the font's interline spacing, given the Paint's settings for typeface, textSize, etc. If metrics is not null, return the fontmetric values in it. Note: all values have been converted to integers from floats, in such a way has to make the answers useful for both spacing and clipping. If you want more control over the rounding, call getFontMetrics(). Returns the font's interline spacing.
	5:	android.graphics.Paint public Typeface getTypeface () Get the paint's typeface object. The typeface object identifies which font to use when drawing or measuring text. Returns the paint's typeface (or null)
	6:	android.graphics.Paint public void setTextAlign (Paint.Align align) Set the paint's text alignment. This controls how the text is positioned relative to its origin. LEFT align means that all of the text will be drawn to the right of its origin (i.e. the origin specifieds the LEFT edge of the text) and so on. Parameters align set the paint's Align value for drawing text.
	7:	android.graphics.Canvas public void drawPosText (String text, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array. This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. Parameters text The text to be drawn pos Array of [x,y] positions, used to position each character paint The paint used for the text (e.g. color, size, style)
	8:	android.graphics.Canvas public int saveLayer (RectF bounds, Paint paint, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds May be null. The maximum size the offscreen bitmap needs to be (in local coordinates) paint This is copied, and is applied to the offscreen when restore() is called. saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this save()
	9:	android.graphics.Canvas public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds The maximum size the offscreen bitmap needs to be (in local coordinates) alpha The alpha to apply to the offscreen when when it is drawn during restore() saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this call
getClipX
Gets the X offset of the current clipping area, relative to the coordinate system origin of this graphics context
	0:	android.graphics.Canvas public final Rect getClipBounds () Retrieve the bounds of the current clip (in local coordinates). Returns the clip bounds, or [0, 0, 0, 0] if the clip is empty.
	1:	android.graphics.Canvas public boolean clipRegion (Region region, Region.Op op) Modify the current clip with the specified region. Note that unlike clipRect() and clipPath() which transform their arguments by the current matrix, clipRegion() assumes its argument is already in the coordinate system of the current layer's bitmap, and so not transformation is performed. Parameters region The region to operate on the current clip, based on op op How the clip is modified Returns true if the resulting is non-empty
	2:	android.graphics.Canvas public boolean clipRegion (Region region) Intersect the current clip with the specified region. Note that unlike clipRect() and clipPath() which transform their arguments by the current matrix, clipRegion() assumes its argument is already in the coordinate system of the current layer's bitmap, and so not transformation is performed. Parameters region The region to operate on the current clip, based on op Returns true if the resulting is non-empty
	3:	android.graphics.Canvas public boolean clipRect (RectF rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	4:	android.graphics.Canvas public boolean clipRect (Rect rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	5:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	6:	android.graphics.Canvas public boolean clipRect (Rect rect, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. op How the clip is modified Returns true if the resulting clip is non-empty
	7:	android.graphics.Canvas public boolean clipRect (int left, int top, int right, int bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	8:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	9:	android.graphics.Canvas public void drawText (String text, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
getClipY
Gets the Y offset of the current clipping area, relative to the coordinate system origin of this graphics context
	0:	android.graphics.Canvas public final Rect getClipBounds () Retrieve the bounds of the current clip (in local coordinates). Returns the clip bounds, or [0, 0, 0, 0] if the clip is empty.
	1:	android.graphics.Canvas public boolean clipRegion (Region region, Region.Op op) Modify the current clip with the specified region. Note that unlike clipRect() and clipPath() which transform their arguments by the current matrix, clipRegion() assumes its argument is already in the coordinate system of the current layer's bitmap, and so not transformation is performed. Parameters region The region to operate on the current clip, based on op op How the clip is modified Returns true if the resulting is non-empty
	2:	android.graphics.Canvas public boolean clipRegion (Region region) Intersect the current clip with the specified region. Note that unlike clipRect() and clipPath() which transform their arguments by the current matrix, clipRegion() assumes its argument is already in the coordinate system of the current layer's bitmap, and so not transformation is performed. Parameters region The region to operate on the current clip, based on op Returns true if the resulting is non-empty
	3:	android.graphics.Canvas public boolean clipRect (RectF rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	4:	android.graphics.Canvas public boolean clipRect (Rect rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	5:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	6:	android.graphics.Canvas public boolean clipRect (Rect rect, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. op How the clip is modified Returns true if the resulting clip is non-empty
	7:	android.graphics.Canvas public boolean clipRect (int left, int top, int right, int bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	8:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	9:	android.graphics.Canvas public void drawText (String text, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
getClipWidth
Gets the width of the current clipping area
	0:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	1:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	2:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
	3:	android.graphics.Region public boolean setPath (Path path, Region clip) Set the region to the area described by the path and clip. Return true if the resulting region is non-empty. This produces a region that is identical to the pixels that would be drawn by the path (with no antialiasing).
	4:	android.graphics.Canvas public final Rect getClipBounds () Retrieve the bounds of the current clip (in local coordinates). Returns the clip bounds, or [0, 0, 0, 0] if the clip is empty.
	5:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	6:	android.graphics.Canvas public boolean clipPath (Path path, Region.Op op) Modify the current clip with the specified path. Parameters path The path to operate on the current clip op How the clip is modified Returns true if the resulting is non-empty
	7:	android.graphics.Canvas public boolean clipRect (RectF rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	8:	android.graphics.Canvas public boolean clipRect (Rect rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	9:	android.graphics.Canvas public boolean clipRect (int left, int top, int right, int bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
getClipHeight
Gets the height of the current clipping area
	0:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	1:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	2:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
	3:	android.graphics.Region public boolean setPath (Path path, Region clip) Set the region to the area described by the path and clip. Return true if the resulting region is non-empty. This produces a region that is identical to the pixels that would be drawn by the path (with no antialiasing).
	4:	android.graphics.Canvas public final Rect getClipBounds () Retrieve the bounds of the current clip (in local coordinates). Returns the clip bounds, or [0, 0, 0, 0] if the clip is empty.
	5:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	6:	android.graphics.Canvas public boolean clipPath (Path path, Region.Op op) Modify the current clip with the specified path. Parameters path The path to operate on the current clip op How the clip is modified Returns true if the resulting is non-empty
	7:	android.graphics.Canvas public boolean clipRect (RectF rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	8:	android.graphics.Canvas public boolean clipRect (Rect rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	9:	android.graphics.Canvas public boolean clipRect (int left, int top, int right, int bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
clipRect
Intersects the current clip with the specified rectangle
	0:	android.graphics.Canvas public boolean clipRect (RectF rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	1:	android.graphics.Canvas public boolean clipRect (Rect rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	2:	android.graphics.Canvas public boolean clipRect (Rect rect, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. op How the clip is modified Returns true if the resulting clip is non-empty
	3:	android.graphics.Canvas public boolean clipRect (int left, int top, int right, int bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	4:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	5:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	6:	android.graphics.Canvas public boolean clipRect (RectF rect, Region.Op op) Modify the current clip with the specified rectangle. Parameters rect The rect to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	7:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	8:	android.graphics.Canvas public boolean clipPath (Path path) Intersect the current clip with the specified path. Parameters path The path to intersect with the current clip Returns true if the resulting is non-empty
	9:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
setClip
Sets the current clip to the rectangle specified by the given coordinates
	0:	android.graphics.Canvas public boolean clipRect (RectF rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	1:	android.graphics.Canvas public boolean clipRect (Rect rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	2:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	3:	android.graphics.Canvas public boolean clipRect (int left, int top, int right, int bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	4:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	5:	android.graphics.Canvas public boolean clipRect (Rect rect, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. op How the clip is modified Returns true if the resulting clip is non-empty
	6:	android.graphics.Rect public void readFromParcel (Parcel in) Set the rectangle's coordinates from the data stored in the specified parcel. To write a rectangle to a parcel, call writeToParcel(). Parameters in The parcel to read the rectangle's coordinates from
	7:	android.graphics.RectF public void readFromParcel (Parcel in) Set the rectangle's coordinates from the data stored in the specified parcel. To write a rectangle to a parcel, call writeToParcel(). Parameters in The parcel to read the rectangle's coordinates from
	8:	android.graphics.Canvas public boolean clipRect (RectF rect, Region.Op op) Modify the current clip with the specified rectangle. Parameters rect The rect to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	9:	android.graphics.Rect public void set (int left, int top, int right, int bottom) Set the rectangle's coordinates to the specified values. Note: no range checking is performed, so it is up to the caller to ensure that left <= right and top <= bottom. Parameters left The X coordinate of the left side of the rectangle top The Y coordinate of the top of the rectangle right The X coordinate of the right side of the rectangle bottom The Y coordinate of the bottom of the rectangle
drawLine
Draws a line between the coordinates (x1,y1) and (x2,y2) using the current color and stroke style
	0:	android.graphics.Canvas public void drawLines (float[] pts, int offset, int count, Paint paint) Draw a series of lines. Each line is taken from 4 consecutive values in the pts array. Thus to draw 1 line, the array must contain at least 4 values. This is logically the same as drawing the array as follows: drawLine(pts[0], pts[1], pts[2], pts[3]) followed by drawLine(pts[4], pts[5], pts[6], pts[7]) and so on. Parameters pts Array of points to draw [x0 y0 x1 y1 x2 y2 ...] offset Number of values in the array to skip before drawing. count The number of values in the array to process, after skipping "offset" of them. Since each line uses 4 values, the number of "lines" that are drawn is really (count >> 2). paint The paint used to draw the points
	1:	android.graphics.Canvas public void drawLine (float startX, float startY, float stopX, float stopY, Paint paint) Draw a line segment with the specified start and stop x,y coordinates, using the specified paint. Note that since a line is always "framed", the Style is ignored in the paint. Degenerate lines (length is 0) will not be drawn. Parameters startX The x-coordinate of the start point of the line startY The y-coordinate of the start point of the line paint The paint used to draw the line
	2:	android.graphics.Canvas public void drawLines (float[] pts, Paint paint) 
	3:	android.graphics.Canvas public void drawPoints (float[] pts, int offset, int count, Paint paint) Draw a series of points. Each point is centered at the coordinate specified by pts[], and its diameter is specified by the paint's stroke width (as transformed by the canvas' CTM), with special treatment for a stroke width of 0, which always draws exactly 1 pixel (or at most 4 if antialiasing is enabled). The shape of the point is controlled by the paint's Cap type. The shape is a square, unless the cap type is Round, in which case the shape is a circle. Parameters pts Array of points to draw [x0 y0 x1 y1 x2 y2 ...] offset Number of values to skip before starting to draw. count The number of values to process, after skipping offset of them. Since one point uses two values, the number of "points" that are drawn is really (count >> 1). paint The paint used to draw the points
	4:	android.graphics.LinearGradient public LinearGradient (float x0, float y0, float x1, float y1, int color0, int color1, Shader.TileMode tile) Create a shader that draws a linear gradient along a line. Parameters x0 The x-coordinate for the start of the gradient line y0 The y-coordinate for the start of the gradient line x1 The x-coordinate for the end of the gradient line y1 The y-coordinate for the end of the gradient line color0 The color at the start of the gradient line. color1 The color at the end of the gradient line. tile The Shader tiling mode
	5:	android.graphics.LinearGradient public LinearGradient (float x0, float y0, float x1, float y1, int[] colors, float[] positions, Shader.TileMode tile) Create a shader that draws a linear gradient along a line. Parameters x0 The x-coordinate for the start of the gradient line y0 The y-coordinate for the start of the gradient line x1 The x-coordinate for the end of the gradient line y1 The y-coordinate for the end of the gradient line colors The colors to be distributed along the gradient line positions May be null. The relative positions [0..1] of each corresponding color in the colors array. If this is null, the the colors are distributed evenly along the gradient line. tile The Shader tiling mode
	6:	android.graphics.Path public void rCubicTo (float x1, float y1, float x2, float y2, float x3, float y3) Same as cubicTo, but the coordinates are considered relative to the current point on this contour. If there is no previous point, then a moveTo(0,0) is inserted automatically.
	7:	android.graphics.Path public void quadTo (float x1, float y1, float x2, float y2) Add a quadratic bezier from the last point, approaching control point (x1,y1), and ending at (x2,y2). If no moveTo() call has been made for this contour, the first point is automatically set to (0,0). Parameters x1 The x-coordinate of the control point on a quadratic curve y1 The y-coordinate of the control point on a quadratic curve x2 The x-coordinate of the end point on a quadratic curve y2 The y-coordinate of the end point on a quadratic curve
	8:	android.graphics.Path public void cubicTo (float x1, float y1, float x2, float y2, float x3, float y3) Add a cubic bezier from the last point, approaching control points (x1,y1) and (x2,y2), and ending at (x3,y3). If no moveTo() call has been made for this contour, the first point is automatically set to (0,0). Parameters x1 The x-coordinate of the 1st control point on a cubic curve y1 The y-coordinate of the 1st control point on a cubic curve x2 The x-coordinate of the 2nd control point on a cubic curve y2 The y-coordinate of the 2nd control point on a cubic curve x3 The x-coordinate of the end point on a cubic curve y3 The y-coordinate of the end point on a cubic curve
	9:	android.graphics.Paint public Paint.Cap getStrokeCap () Return the paint's Cap, controlling how the start and end of stroked lines and paths are treated. Returns the line cap style for the paint, used whenever the paint's style is Stroke or StrokeAndFill.
fillRect
Fills the specified rectangle with the current color
	0:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	1:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	2:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	3:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, Rect src, RectF dst, Paint paint) Draw the specified bitmap, scaling/translating automatically to fill the destination rectangle. If the source rectangle is not null, it specifies the subset of the bitmap to draw. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. This function ignores the density associated with the bitmap. This is because the source and destination rectangle coordinate spaces are in their respective densities, so must already have the appropriate scaling factor applied. Parameters bitmap The bitmap to be drawn src May be null. The subset of the bitmap to be drawn dst The rectangle that the bitmap will be scaled/translated to fit into paint May be null. The paint used to draw the bitmap
	4:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, Rect src, Rect dst, Paint paint) Draw the specified bitmap, scaling/translating automatically to fill the destination rectangle. If the source rectangle is not null, it specifies the subset of the bitmap to draw. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. This function ignores the density associated with the bitmap. This is because the source and destination rectangle coordinate spaces are in their respective densities, so must already have the appropriate scaling factor applied. Parameters bitmap The bitmap to be drawn src May be null. The subset of the bitmap to be drawn dst The rectangle that the bitmap will be scaled/translated to fit into paint May be null. The paint used to draw the bitmap
	5:	android.graphics.Canvas public void drawPaint (Paint paint) Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint. Parameters paint The paint used to draw onto the canvas
	6:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	7:	android.graphics.Bitmap public void eraseColor (int c) Fills the bitmap's pixels with the specified Color. Throws IllegalStateException if the bitmap is not mutable.
	8:	android.graphics.Canvas public void drawRect (Rect r, Paint paint) Draw the specified Rect using the specified Paint. The rectangle will be filled or framed based on the Style in the paint. Parameters r The rectangle to be drawn. paint The paint used to draw the rectangle
	9:	android.graphics.Canvas public void drawRect (float left, float top, float right, float bottom, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters left The left side of the rectangle to be drawn top The top side of the rectangle to be drawn right The right side of the rectangle to be drawn bottom The bottom side of the rectangle to be drawn paint The paint used to draw the rect
drawRect
Draws the outline of the specified rectangle using the current color and stroke style
	0:	android.graphics.Canvas public void drawRect (Rect r, Paint paint) Draw the specified Rect using the specified Paint. The rectangle will be filled or framed based on the Style in the paint. Parameters r The rectangle to be drawn. paint The paint used to draw the rectangle
	1:	android.graphics.Canvas public void drawRect (RectF rect, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters rect The rect to be drawn paint The paint used to draw the rect
	2:	android.graphics.Canvas public void drawRect (float left, float top, float right, float bottom, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters left The left side of the rectangle to be drawn top The top side of the rectangle to be drawn right The right side of the rectangle to be drawn bottom The bottom side of the rectangle to be drawn paint The paint used to draw the rect
	3:	android.graphics.Paint public float getStrokeWidth () Return the width for stroking. A value of 0 strokes in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Returns the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	4:	android.graphics.Paint public void setStrokeWidth (float width) Set the width for stroking. Pass 0 to stroke in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Parameters width set the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	5:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	6:	android.graphics.Canvas public void drawOval (RectF oval, Paint paint) Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint. Parameters oval The rectangle bounds of the oval to be drawn
	7:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	8:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, Rect src, RectF dst, Paint paint) Draw the specified bitmap, scaling/translating automatically to fill the destination rectangle. If the source rectangle is not null, it specifies the subset of the bitmap to draw. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. This function ignores the density associated with the bitmap. This is because the source and destination rectangle coordinate spaces are in their respective densities, so must already have the appropriate scaling factor applied. Parameters bitmap The bitmap to be drawn src May be null. The subset of the bitmap to be drawn dst The rectangle that the bitmap will be scaled/translated to fit into paint May be null. The paint used to draw the bitmap
	9:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, Rect src, Rect dst, Paint paint) Draw the specified bitmap, scaling/translating automatically to fill the destination rectangle. If the source rectangle is not null, it specifies the subset of the bitmap to draw. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. This function ignores the density associated with the bitmap. This is because the source and destination rectangle coordinate spaces are in their respective densities, so must already have the appropriate scaling factor applied. Parameters bitmap The bitmap to be drawn src May be null. The subset of the bitmap to be drawn dst The rectangle that the bitmap will be scaled/translated to fit into paint May be null. The paint used to draw the bitmap
drawRoundRect
Draws the outline of the specified rounded corner rectangle using the current color and stroke style
	0:	android.graphics.Canvas public void drawRoundRect (RectF rect, float rx, float ry, Paint paint) Draw the specified round-rect using the specified paint. The roundrect will be filled or framed based on the Style in the paint. Parameters rect The rectangular bounds of the roundRect to be drawn rx The x-radius of the oval used to round the corners ry The y-radius of the oval used to round the corners paint The paint used to draw the roundRect
	1:	android.graphics.drawable.PaintDrawable public void setCornerRadius (float radius) Specify radius for the corners of the rectangle. If this is > 0, then the drawable is drawn in a round-rectangle, rather than a rectangle. Parameters radius the radius for the corners of the rectangle
	2:	android.graphics.Canvas public void drawRect (Rect r, Paint paint) Draw the specified Rect using the specified Paint. The rectangle will be filled or framed based on the Style in the paint. Parameters r The rectangle to be drawn. paint The paint used to draw the rectangle
	3:	android.graphics.Paint public float getStrokeWidth () Return the width for stroking. A value of 0 strokes in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Returns the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	4:	android.graphics.Paint public void setStrokeWidth (float width) Set the width for stroking. Pass 0 to stroke in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Parameters width set the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	5:	android.graphics.Canvas public void drawRect (float left, float top, float right, float bottom, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters left The left side of the rectangle to be drawn top The top side of the rectangle to be drawn right The right side of the rectangle to be drawn bottom The bottom side of the rectangle to be drawn paint The paint used to draw the rect
	6:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	7:	android.graphics.Canvas public void drawOval (RectF oval, Paint paint) Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint. Parameters oval The rectangle bounds of the oval to be drawn
	8:	android.graphics.Canvas public void drawRect (RectF rect, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters rect The rect to be drawn paint The paint used to draw the rect
	9:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, float left, float top, Paint paint) Draw the specified bitmap, with its top/left corner at (x,y), using the specified paint, transformed by the current matrix. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. If the bitmap and canvas have different densities, this function will take care of automatically scaling the bitmap to draw at the same density as the canvas. Parameters bitmap The bitmap to be drawn left The position of the left side of the bitmap being drawn top The position of the top side of the bitmap being drawn paint The paint used to draw the bitmap (may be null)
fillRoundRect
Fills the specified rounded corner rectangle with the current color
	0:	android.graphics.drawable.PaintDrawable public void setCornerRadius (float radius) Specify radius for the corners of the rectangle. If this is > 0, then the drawable is drawn in a round-rectangle, rather than a rectangle. Parameters radius the radius for the corners of the rectangle
	1:	android.graphics.drawable.GradientDrawable public void setCornerRadius (float radius) Specify radius for the corners of the gradient. If this is > 0, then the drawable is drawn in a round-rectangle, rather than a rectangle. This property is honored only when the shape is of type RECTANGLE. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters radius The radius in pixels of the corners of the rectangle shape See Also mutate() setCornerRadii(float[]) setShape(int)
	2:	android.graphics.Path public void addRoundRect (RectF rect, float rx, float ry, Path.Direction dir) Add a closed round-rectangle contour to the path Parameters rect The bounds of a round-rectangle to add to the path rx The x-radius of the rounded corners on the round-rectangle ry The y-radius of the rounded corners on the round-rectangle dir The direction to wind the round-rectangle's contour
	3:	android.graphics.Canvas public void drawRoundRect (RectF rect, float rx, float ry, Paint paint) Draw the specified round-rect using the specified paint. The roundrect will be filled or framed based on the Style in the paint. Parameters rect The rectangular bounds of the roundRect to be drawn rx The x-radius of the oval used to round the corners ry The y-radius of the oval used to round the corners paint The paint used to draw the roundRect
	4:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	5:	android.graphics.drawable.shapes.RoundRectShape public RoundRectShape (float[] outerRadii, RectF inset, float[] innerRadii) RoundRectShape constructor. Specifies an outer (round)rect and an optional inner (round)rect. Parameters outerRadii An array of 8 radius values, for the outer roundrect. The first two floats are for the top-left corner (remaining pairs correspond clockwise). For no rounded corners on the outer rectangle, pass null. inset A RectF that specifies the distance from the inner rect to each side of the outer rect. For no inner, pass null. innerRadii An array of 8 radius values, for the inner roundrect. The first two floats are for the top-left corner (remaining pairs correspond clockwise). For no rounded corners on the inner rectangle, pass null. If inset parameter is null, this parameter is ignored.
	6:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	7:	android.graphics.Path public void addRoundRect (RectF rect, float[] radii, Path.Direction dir) Add a closed round-rectangle contour to the path. Each corner receives two radius values [X, Y]. The corners are ordered top-left, top-right, bottom-right, bottom-left Parameters rect The bounds of a round-rectangle to add to the path radii Array of 8 values, 4 pairs of [X,Y] radii dir The direction to wind the round-rectangle's contour
	8:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	9:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, Rect src, RectF dst, Paint paint) Draw the specified bitmap, scaling/translating automatically to fill the destination rectangle. If the source rectangle is not null, it specifies the subset of the bitmap to draw. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. This function ignores the density associated with the bitmap. This is because the source and destination rectangle coordinate spaces are in their respective densities, so must already have the appropriate scaling factor applied. Parameters bitmap The bitmap to be drawn src May be null. The subset of the bitmap to be drawn dst The rectangle that the bitmap will be scaled/translated to fit into paint May be null. The paint used to draw the bitmap
fillArc
Fills a circular or elliptical arc covering the specified rectangle
	0:	android.graphics.Canvas public void drawRect (Rect r, Paint paint) Draw the specified Rect using the specified Paint. The rectangle will be filled or framed based on the Style in the paint. Parameters r The rectangle to be drawn. paint The paint used to draw the rectangle
	1:	android.graphics.Canvas public void drawRect (float left, float top, float right, float bottom, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters left The left side of the rectangle to be drawn top The top side of the rectangle to be drawn right The right side of the rectangle to be drawn bottom The bottom side of the rectangle to be drawn paint The paint used to draw the rect
	2:	android.graphics.Canvas public void drawOval (RectF oval, Paint paint) Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint. Parameters oval The rectangle bounds of the oval to be drawn
	3:	android.graphics.Path public void arcTo (RectF oval, float startAngle, float sweepAngle) Append the specified arc to the path as a new contour. If the start of the path is different from the path's current last point, then an automatic lineTo() is added to connect the current contour to the start of the arc. However, if the path is empty, then we call moveTo() with the first point of the arc. Parameters oval The bounds of oval defining shape and size of the arc startAngle Starting angle (in degrees) where the arc begins sweepAngle Sweep angle (in degrees) measured clockwise
	4:	android.graphics.Path public void addArc (RectF oval, float startAngle, float sweepAngle) Add the specified arc to the path as a new contour. Parameters oval The bounds of oval defining the shape and size of the arc startAngle Starting angle (in degrees) where the arc begins sweepAngle Sweep angle (in degrees) measured clockwise
	5:	android.graphics.Path public void arcTo (RectF oval, float startAngle, float sweepAngle, boolean forceMoveTo) Append the specified arc to the path as a new contour. If the start of the path is different from the path's current last point, then an automatic lineTo() is added to connect the current contour to the start of the arc. However, if the path is empty, then we call moveTo() with the first point of the arc. The sweep angle is tread mod 360. Parameters oval The bounds of oval defining shape and size of the arc startAngle Starting angle (in degrees) where the arc begins sweepAngle Sweep angle (in degrees) measured clockwise, treated mod 360. forceMoveTo If true, always begin a new contour with the arc
	6:	android.graphics.Rect public void union (Rect r) Update this Rect to enclose itself and the specified rectangle. If the specified rectangle is empty, nothing is done. If this rectangle is empty it is set to the specified rectangle. Parameters r The rectangle being unioned with this rectangle
	7:	android.graphics.RectF public void union (RectF r) Update this Rect to enclose itself and the specified rectangle. If the specified rectangle is empty, nothing is done. If this rectangle is empty it is set to the specified rectangle. Parameters r The rectangle being unioned with this rectangle
	8:	android.graphics.Canvas public void drawPaint (Paint paint) Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint. Parameters paint The paint used to draw onto the canvas
	9:	android.graphics.Canvas public void drawRect (RectF rect, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters rect The rect to be drawn paint The paint used to draw the rect
drawArc
Draws the outline of a circular or elliptical arc covering the specified rectangle, using the current color and stroke style
	0:	android.graphics.Canvas public void drawArc (RectF oval, float startAngle, float sweepAngle, boolean useCenter, Paint paint) Draw the specified arc, which will be scaled to fit inside the specified oval. If the start angle is negative or >= 360, the start angle is treated as start angle modulo 360. If the sweep angle is >= 360, then the oval is drawn completely. Note that this differs slightly from SkPath::arcTo, which treats the sweep angle modulo 360. If the sweep angle is negative, the sweep angle is treated as sweep angle modulo 360 The arc is drawn clockwise. An angle of 0 degrees correspond to the geometric angle of 0 degrees (3 o'clock on a watch.) Parameters oval The bounds of oval used to define the shape and size of the arc startAngle Starting angle (in degrees) where the arc begins sweepAngle Sweep angle (in degrees) measured clockwise useCenter If true, include the center of the oval in the arc, and close it if it is being stroked. This will draw a wedge paint The paint used to draw the arc
	1:	android.graphics.Canvas public void drawRect (Rect r, Paint paint) Draw the specified Rect using the specified Paint. The rectangle will be filled or framed based on the Style in the paint. Parameters r The rectangle to be drawn. paint The paint used to draw the rectangle
	2:	android.graphics.Paint public float getStrokeWidth () Return the width for stroking. A value of 0 strokes in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Returns the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	3:	android.graphics.Paint public void setStrokeWidth (float width) Set the width for stroking. Pass 0 to stroke in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Parameters width set the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	4:	android.graphics.Canvas public void drawRect (float left, float top, float right, float bottom, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters left The left side of the rectangle to be drawn top The top side of the rectangle to be drawn right The right side of the rectangle to be drawn bottom The bottom side of the rectangle to be drawn paint The paint used to draw the rect
	5:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	6:	android.graphics.Canvas public void drawOval (RectF oval, Paint paint) Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint. Parameters oval The rectangle bounds of the oval to be drawn
	7:	android.graphics.Canvas public void drawRect (RectF rect, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters rect The rect to be drawn paint The paint used to draw the rect
	8:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	9:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, Rect src, RectF dst, Paint paint) Draw the specified bitmap, scaling/translating automatically to fill the destination rectangle. If the source rectangle is not null, it specifies the subset of the bitmap to draw. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. This function ignores the density associated with the bitmap. This is because the source and destination rectangle coordinate spaces are in their respective densities, so must already have the appropriate scaling factor applied. Parameters bitmap The bitmap to be drawn src May be null. The subset of the bitmap to be drawn dst The rectangle that the bitmap will be scaled/translated to fit into paint May be null. The paint used to draw the bitmap
drawString
Draws the specified String using the current font and color
	0:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	1:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	2:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	3:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	4:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	5:	android.graphics.Canvas public void drawVertices (Canvas.VertexMode mode, int vertexCount, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, Paint paint) Draw the array of vertices, interpreted as triangles (based on mode). The verts array is required, and specifies the x,y pairs for each vertex. If texs is non-null, then it is used to specify the coordinate in shader coordinates to use at each vertex (the paint must have a shader in this case). If there is no texs array, but there is a color array, then each color is interpolated across its corresponding triangle in a gradient. If both texs and colors arrays are present, then they behave as before, but the resulting color at each pixels is the result of multiplying the colors from the shader and the color-gradient together. The indices array is optional, but if it is present, then it is used to specify the index of each triangle, rather than just walking through the arrays in order. Parameters mode How to interpret the array of vertices vertexCount The number of values in the vertices array (and corresponding texs and colors arrays if non-null). Each logical vertex is two values (x, y), vertexCount must be a multiple of 2. verts Array of vertices for the mesh vertOffset Number of values in the verts to skip before drawing. texs May be null. If not null, specifies the coordinates to sample into the current shader (e.g. bitmap tile or gradient) texOffset Number of values in texs to skip before drawing. colors May be null. If not null, specifies a color for each vertex, to be interpolated across the triangle. colorOffset Number of values in colors to skip before drawing. indices If not null, array of indices to reference into the vertex (texs, colors) array. indexCount number of entries in the indices array (if not null). paint Specifies the shader to use if the texs array is non-null.
	6:	android.graphics.Canvas public void drawBitmap (int[] colors, int offset, int stride, float x, float y, int width, int height, boolean hasAlpha, Paint paint) Treat the specified array of colors as a bitmap, and draw it. This gives the same result as first creating a bitmap from the array, and then drawing it, but this method avoids explicitly creating a bitmap object which can be more efficient if the colors are changing often. Parameters colors Array of colors representing the pixels of the bitmap offset Offset into the array of colors for the first pixel stride The number of colors in the array between rows (must be >= width or <= -width). x The X coordinate for where to draw the bitmap y The Y coordinate for where to draw the bitmap width The width of the bitmap height The height of the bitmap hasAlpha True if the alpha channel of the colors contains valid values. If false, the alpha byte is ignored (assumed to be 0xFF for every pixel). paint May be null. The paint used to draw the bitmap
	7:	android.graphics.drawable.GradientDrawable public void setColors (int[] colors) Sets the colors used to draw the gradient. Each color is specified as an ARGB integer and the array must contain at least 2 colors. Note: changing orientation will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the orientation. Parameters colors 2 or more ARGB colors See Also mutate() setColor(int)
	8:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, float left, float top, Paint paint) Draw the specified bitmap, with its top/left corner at (x,y), using the specified paint, transformed by the current matrix. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. If the bitmap and canvas have different densities, this function will take care of automatically scaling the bitmap to draw at the same density as the canvas. Parameters bitmap The bitmap to be drawn left The position of the left side of the bitmap being drawn top The position of the top side of the bitmap being drawn paint The paint used to draw the bitmap (may be null)
	9:	android.graphics.NinePatch public void draw (Canvas canvas, Rect location, Paint paint) Draws the NinePatch. This method will ignore the paint returned by getPaint() and use the specified paint instead. Parameters canvas A container for the current matrix and clip used to draw the NinePatch. location Where to draw the NinePatch. paint The Paint to draw through.
drawSubstring
Draws the specified String using the current font and color
	0:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	1:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	2:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	3:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	4:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	5:	android.graphics.Canvas public void drawVertices (Canvas.VertexMode mode, int vertexCount, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, Paint paint) Draw the array of vertices, interpreted as triangles (based on mode). The verts array is required, and specifies the x,y pairs for each vertex. If texs is non-null, then it is used to specify the coordinate in shader coordinates to use at each vertex (the paint must have a shader in this case). If there is no texs array, but there is a color array, then each color is interpolated across its corresponding triangle in a gradient. If both texs and colors arrays are present, then they behave as before, but the resulting color at each pixels is the result of multiplying the colors from the shader and the color-gradient together. The indices array is optional, but if it is present, then it is used to specify the index of each triangle, rather than just walking through the arrays in order. Parameters mode How to interpret the array of vertices vertexCount The number of values in the vertices array (and corresponding texs and colors arrays if non-null). Each logical vertex is two values (x, y), vertexCount must be a multiple of 2. verts Array of vertices for the mesh vertOffset Number of values in the verts to skip before drawing. texs May be null. If not null, specifies the coordinates to sample into the current shader (e.g. bitmap tile or gradient) texOffset Number of values in texs to skip before drawing. colors May be null. If not null, specifies a color for each vertex, to be interpolated across the triangle. colorOffset Number of values in colors to skip before drawing. indices If not null, array of indices to reference into the vertex (texs, colors) array. indexCount number of entries in the indices array (if not null). paint Specifies the shader to use if the texs array is non-null.
	6:	android.graphics.Canvas public void drawBitmap (int[] colors, int offset, int stride, float x, float y, int width, int height, boolean hasAlpha, Paint paint) Treat the specified array of colors as a bitmap, and draw it. This gives the same result as first creating a bitmap from the array, and then drawing it, but this method avoids explicitly creating a bitmap object which can be more efficient if the colors are changing often. Parameters colors Array of colors representing the pixels of the bitmap offset Offset into the array of colors for the first pixel stride The number of colors in the array between rows (must be >= width or <= -width). x The X coordinate for where to draw the bitmap y The Y coordinate for where to draw the bitmap width The width of the bitmap height The height of the bitmap hasAlpha True if the alpha channel of the colors contains valid values. If false, the alpha byte is ignored (assumed to be 0xFF for every pixel). paint May be null. The paint used to draw the bitmap
	7:	android.graphics.drawable.GradientDrawable public void setColors (int[] colors) Sets the colors used to draw the gradient. Each color is specified as an ARGB integer and the array must contain at least 2 colors. Note: changing orientation will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the orientation. Parameters colors 2 or more ARGB colors See Also mutate() setColor(int)
	8:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, float left, float top, Paint paint) Draw the specified bitmap, with its top/left corner at (x,y), using the specified paint, transformed by the current matrix. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. If the bitmap and canvas have different densities, this function will take care of automatically scaling the bitmap to draw at the same density as the canvas. Parameters bitmap The bitmap to be drawn left The position of the left side of the bitmap being drawn top The position of the top side of the bitmap being drawn paint The paint used to draw the bitmap (may be null)
	9:	android.graphics.NinePatch public void draw (Canvas canvas, Rect location, Paint paint) Draws the NinePatch. This method will ignore the paint returned by getPaint() and use the specified paint instead. Parameters canvas A container for the current matrix and clip used to draw the NinePatch. location Where to draw the NinePatch. paint The Paint to draw through.
drawChar
Draws the specified character using the current font and color
	0:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	1:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	2:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	3:	android.graphics.Canvas public void drawText (CharSequence text, int start, int end, float x, float y, Paint paint) Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint. The origin is interpreted based on the Align setting in the Paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of origin for where to draw the text y The y-coordinate of origin for where to draw the text paint The paint used for the text (e.g. color, size, style)
	4:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	5:	android.graphics.Canvas public void drawPosText (char[] text, int index, int count, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array. This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. Parameters text The text to be drawn index The index of the first character to draw count The number of characters to draw, starting from index. pos Array of [x,y] positions, used to position each character paint The paint used for the text (e.g. color, size, style)
	6:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	7:	android.graphics.Canvas public void drawText (String text, int start, int end, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	8:	android.graphics.Canvas public void drawVertices (Canvas.VertexMode mode, int vertexCount, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, Paint paint) Draw the array of vertices, interpreted as triangles (based on mode). The verts array is required, and specifies the x,y pairs for each vertex. If texs is non-null, then it is used to specify the coordinate in shader coordinates to use at each vertex (the paint must have a shader in this case). If there is no texs array, but there is a color array, then each color is interpolated across its corresponding triangle in a gradient. If both texs and colors arrays are present, then they behave as before, but the resulting color at each pixels is the result of multiplying the colors from the shader and the color-gradient together. The indices array is optional, but if it is present, then it is used to specify the index of each triangle, rather than just walking through the arrays in order. Parameters mode How to interpret the array of vertices vertexCount The number of values in the vertices array (and corresponding texs and colors arrays if non-null). Each logical vertex is two values (x, y), vertexCount must be a multiple of 2. verts Array of vertices for the mesh vertOffset Number of values in the verts to skip before drawing. texs May be null. If not null, specifies the coordinates to sample into the current shader (e.g. bitmap tile or gradient) texOffset Number of values in texs to skip before drawing. colors May be null. If not null, specifies a color for each vertex, to be interpolated across the triangle. colorOffset Number of values in colors to skip before drawing. indices If not null, array of indices to reference into the vertex (texs, colors) array. indexCount number of entries in the indices array (if not null). paint Specifies the shader to use if the texs array is non-null.
	9:	android.graphics.Canvas public void drawPosText (String text, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array. This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. Parameters text The text to be drawn pos Array of [x,y] positions, used to position each character paint The paint used for the text (e.g. color, size, style)
drawChars
Draws the specified characters using the current font and color
	0:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	1:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	2:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	3:	android.graphics.Canvas public void drawText (CharSequence text, int start, int end, float x, float y, Paint paint) Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint. The origin is interpreted based on the Align setting in the Paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of origin for where to draw the text y The y-coordinate of origin for where to draw the text paint The paint used for the text (e.g. color, size, style)
	4:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	5:	android.graphics.Canvas public void drawPosText (char[] text, int index, int count, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array. This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. Parameters text The text to be drawn index The index of the first character to draw count The number of characters to draw, starting from index. pos Array of [x,y] positions, used to position each character paint The paint used for the text (e.g. color, size, style)
	6:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	7:	android.graphics.Canvas public void drawText (String text, int start, int end, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	8:	android.graphics.Canvas public void drawVertices (Canvas.VertexMode mode, int vertexCount, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, Paint paint) Draw the array of vertices, interpreted as triangles (based on mode). The verts array is required, and specifies the x,y pairs for each vertex. If texs is non-null, then it is used to specify the coordinate in shader coordinates to use at each vertex (the paint must have a shader in this case). If there is no texs array, but there is a color array, then each color is interpolated across its corresponding triangle in a gradient. If both texs and colors arrays are present, then they behave as before, but the resulting color at each pixels is the result of multiplying the colors from the shader and the color-gradient together. The indices array is optional, but if it is present, then it is used to specify the index of each triangle, rather than just walking through the arrays in order. Parameters mode How to interpret the array of vertices vertexCount The number of values in the vertices array (and corresponding texs and colors arrays if non-null). Each logical vertex is two values (x, y), vertexCount must be a multiple of 2. verts Array of vertices for the mesh vertOffset Number of values in the verts to skip before drawing. texs May be null. If not null, specifies the coordinates to sample into the current shader (e.g. bitmap tile or gradient) texOffset Number of values in texs to skip before drawing. colors May be null. If not null, specifies a color for each vertex, to be interpolated across the triangle. colorOffset Number of values in colors to skip before drawing. indices If not null, array of indices to reference into the vertex (texs, colors) array. indexCount number of entries in the indices array (if not null). paint Specifies the shader to use if the texs array is non-null.
	9:	android.graphics.Canvas public void drawPosText (String text, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array. This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. Parameters text The text to be drawn pos Array of [x,y] positions, used to position each character paint The paint used for the text (e.g. color, size, style)
drawImage
Draws the specified image by using the anchor point
	0:	android.graphics.Canvas public void drawPoints (float[] pts, int offset, int count, Paint paint) Draw a series of points. Each point is centered at the coordinate specified by pts[], and its diameter is specified by the paint's stroke width (as transformed by the canvas' CTM), with special treatment for a stroke width of 0, which always draws exactly 1 pixel (or at most 4 if antialiasing is enabled). The shape of the point is controlled by the paint's Cap type. The shape is a square, unless the cap type is Round, in which case the shape is a circle. Parameters pts Array of points to draw [x0 y0 x1 y1 x2 y2 ...] offset Number of values to skip before starting to draw. count The number of values to process, after skipping offset of them. Since one point uses two values, the number of "points" that are drawn is really (count >> 1). paint The paint used to draw the points
	1:	android.graphics.Canvas public void drawLine (float startX, float startY, float stopX, float stopY, Paint paint) Draw a line segment with the specified start and stop x,y coordinates, using the specified paint. Note that since a line is always "framed", the Style is ignored in the paint. Degenerate lines (length is 0) will not be drawn. Parameters startX The x-coordinate of the start point of the line startY The y-coordinate of the start point of the line paint The paint used to draw the line
	2:	android.graphics.NinePatch public void draw (Canvas canvas, Rect location, Paint paint) Draws the NinePatch. This method will ignore the paint returned by getPaint() and use the specified paint instead. Parameters canvas A container for the current matrix and clip used to draw the NinePatch. location Where to draw the NinePatch. paint The Paint to draw through.
	3:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, Matrix matrix, Paint paint) Draw the bitmap using the specified matrix. Parameters bitmap The bitmap to draw matrix The matrix used to transform the bitmap when it is drawn paint May be null. The paint used to draw the bitmap
	4:	android.graphics.Canvas public void drawLines (float[] pts, int offset, int count, Paint paint) Draw a series of lines. Each line is taken from 4 consecutive values in the pts array. Thus to draw 1 line, the array must contain at least 4 values. This is logically the same as drawing the array as follows: drawLine(pts[0], pts[1], pts[2], pts[3]) followed by drawLine(pts[4], pts[5], pts[6], pts[7]) and so on. Parameters pts Array of points to draw [x0 y0 x1 y1 x2 y2 ...] offset Number of values in the array to skip before drawing. count The number of values in the array to process, after skipping "offset" of them. Since each line uses 4 values, the number of "lines" that are drawn is really (count >> 2). paint The paint used to draw the points
	5:	android.graphics.Canvas public void drawPath (Path path, Paint paint) Draw the specified path using the specified paint. The path will be filled or framed based on the Style in the paint. Parameters path The path to be drawn paint The paint used to draw the path
	6:	android.graphics.Canvas public void drawRect (RectF rect, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters rect The rect to be drawn paint The paint used to draw the rect
	7:	android.graphics.Canvas public void drawRect (Rect r, Paint paint) Draw the specified Rect using the specified Paint. The rectangle will be filled or framed based on the Style in the paint. Parameters r The rectangle to be drawn. paint The paint used to draw the rectangle
	8:	android.graphics.Paint public void setTextLocale (Locale locale) Set the text locale. The text locale affects how the text is drawn for some languages. For example, if the locale is CHINESE or CHINA, then the text renderer will prefer to draw text using a Chinese font. Likewise, if the locale is JAPANESE or JAPAN, then the text renderer will prefer to draw text using a Japanese font. This distinction is important because Chinese and Japanese text both use many of the same Unicode code points but their appearance is subtly different for each language. By default, the text locale is initialized to the system locale (as returned by getDefault()). This assumes that the text to be rendered will most likely be in the user's preferred language. If the actual language of the text is known, then it can be provided to the text renderer using this method. The text renderer may attempt to guess the language script based on the contents of the text to be drawn independent of the text locale here. Specifying the text locale just helps it do a better job in certain ambiguous cases Parameters locale the paint's locale value for drawing text, must not be null.
	9:	android.graphics.Canvas public void drawText (CharSequence text, int start, int end, float x, float y, Paint paint) Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint. The origin is interpreted based on the Align setting in the Paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of origin for where to draw the text y The y-coordinate of origin for where to draw the text paint The paint used for the text (e.g. color, size, style)
drawRegion
Copies a region of the specified source image to a location within the destination, possibly transforming (rotating and reflecting) the image data using the chosen transform function
	0:	android.graphics.ColorMatrixColorFilter public ColorMatrixColorFilter (ColorMatrix matrix) Create a colorfilter that transforms colors through a 4x5 color matrix. Parameters matrix 4x5 matrix used to transform colors. It is copied into the filter, so changes made to the matrix after the filter is constructed will not be reflected in the filter.
	1:	android.graphics.BitmapRegionDecoder public Bitmap decodeRegion (Rect rect, BitmapFactory.Options options) Decodes a rectangle region in the image specified by rect. Parameters rect The rectangle that specified the region to be decode. options null-ok; Options that control downsampling. inPurgeable is not supported. Returns The decoded bitmap, or null if the image data could not be decoded.
	2:	android.graphics.BitmapRegionDecoder public static BitmapRegionDecoder newInstance (FileDescriptor fd, boolean isShareable) Create a BitmapRegionDecoder from the file descriptor. The position within the descriptor will not be changed when this returns, so the descriptor can be used again as is. Currently only the JPEG and PNG formats are supported. Parameters fd The file descriptor containing the data to decode isShareable If this is true, then the BitmapRegionDecoder may keep a shallow reference to the input. If this is false, then the BitmapRegionDecoder will explicitly make a copy of the input data, and keep that. Even if sharing is allowed, the implementation may still decide to make a deep copy of the input data. If an image is progressively encoded, allowing sharing may degrade the decoding speed. Returns BitmapRegionDecoder, or null if the image data could not be decoded. Throws IOException if the image format is not supported or can not be decoded.
	3:	android.graphics.Region public Region (Region region) Return a copy of the specified region
	4:	android.graphics.Canvas public boolean clipRegion (Region region) Intersect the current clip with the specified region. Note that unlike clipRect() and clipPath() which transform their arguments by the current matrix, clipRegion() assumes its argument is already in the coordinate system of the current layer's bitmap, and so not transformation is performed. Parameters region The region to operate on the current clip, based on op Returns true if the resulting is non-empty
	5:	android.graphics.Canvas public boolean clipRegion (Region region, Region.Op op) Modify the current clip with the specified region. Note that unlike clipRect() and clipPath() which transform their arguments by the current matrix, clipRegion() assumes its argument is already in the coordinate system of the current layer's bitmap, and so not transformation is performed. Parameters region The region to operate on the current clip, based on op op How the clip is modified Returns true if the resulting is non-empty
	6:	android.graphics.Matrix public void setRotate (float degrees, float px, float py) Set the matrix to rotate by the specified number of degrees, with a pivot point at (px, py). The pivot point is the coordinate that should remain unchanged by the specified transformation.
	7:	android.graphics.BitmapRegionDecoder public static BitmapRegionDecoder newInstance (byte[] data, int offset, int length, boolean isShareable) Create a BitmapRegionDecoder from the specified byte array. Currently only the JPEG and PNG formats are supported. Parameters data byte array of compressed image data. offset offset into data for where the decoder should begin parsing. length the number of bytes, beginning at offset, to parse isShareable If this is true, then the BitmapRegionDecoder may keep a shallow reference to the input. If this is false, then the BitmapRegionDecoder will explicitly make a copy of the input data, and keep that. Even if sharing is allowed, the implementation may still decide to make a deep copy of the input data. If an image is progressively encoded, allowing sharing may degrade the decoding speed. Returns BitmapRegionDecoder, or null if the image data could not be decoded. Throws IOException if the image format is not supported or can not be decoded.
	8:	android.graphics.BitmapFactory public static Bitmap decodeFile (String pathName, BitmapFactory.Options opts) Decode a file path into a bitmap. If the specified file name is null, or cannot be decoded into a bitmap, the function returns null. Parameters pathName complete path name for the file to be decoded. opts null-ok; Options that control downsampling and whether the image should be completely decoded, or just is size returned. Returns The decoded bitmap, or null if the image data could not be decoded, or, if opts is non-null, if opts requested only the size be returned (in opts.outWidth and opts.outHeight)
	9:	android.graphics.ColorMatrixColorFilter public ColorMatrixColorFilter (float[] array) Create a colorfilter that transforms colors through a 4x5 color matrix. Parameters array array of floats used to transform colors, treated as a 4x5 matrix. The first 20 entries of the array are copied into the filter. See ColorMatrix.
copyArea
Copies the contents of a rectangular area (x_src, y_src, width, height) to a destination area, whose anchor point identified by anchor is located at (x_dest, y_dest)
	0:	android.graphics.pdf.PdfDocument.PageInfo public Rect getContentRect () Get the content rectangle in PostScript points (1/72th of an inch). This is the area that contains the page content and is relative to the page top left. Returns The content rectangle.
	1:	android.graphics.pdf.PdfDocument.PageInfo.Builder public PdfDocument.PageInfo.Builder setContentRect (Rect contentRect) Sets the content rectangle in PostScript point (1/72th of an inch). This is the area that contains the page content and is relative to the page top left. Parameters contentRect The content rectangle. Must fit in the page.
	2:	android.graphics.Bitmap public static Bitmap createBitmap (Bitmap source, int x, int y, int width, int height) Returns an immutable bitmap from the specified subset of the source bitmap. The new bitmap may be the same object as source, or a copy may have been made. It is initialized with the same density as the original bitmap. Parameters source The bitmap we are subsetting x The x coordinate of the first pixel in source y The y coordinate of the first pixel in source width The number of pixels in each row height The number of rows Returns A copy of a subset of the source bitmap or the source bitmap itself. Throws IllegalArgumentException if the x, y, width, height values are outside of the dimensions of the source bitmap, or width is <= 0, or height is <= 0
	3:	android.graphics.Bitmap public int getPixel (int x, int y) Returns the Color at the specified location. Throws an exception if x or y are out of bounds (negative or >= to the width or height respectively). The returned color is a non-premultiplied ARGB value. Parameters x The x coordinate (0...width-1) of the pixel to return y The y coordinate (0...height-1) of the pixel to return Returns The argb Color at the specified coordinate Throws IllegalArgumentException if x, y exceed the bitmap's bounds
	4:	android.graphics.Bitmap public static Bitmap createBitmap (int width, int height, Bitmap.Config config) Returns a mutable bitmap with the specified width and height. Its initial density is as per getDensity(). Parameters width The width of the bitmap height The height of the bitmap config The bitmap config to create. Throws IllegalArgumentException if the width or height are <= 0
	5:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, Rect src, RectF dst, Paint paint) Draw the specified bitmap, scaling/translating automatically to fill the destination rectangle. If the source rectangle is not null, it specifies the subset of the bitmap to draw. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. This function ignores the density associated with the bitmap. This is because the source and destination rectangle coordinate spaces are in their respective densities, so must already have the appropriate scaling factor applied. Parameters bitmap The bitmap to be drawn src May be null. The subset of the bitmap to be drawn dst The rectangle that the bitmap will be scaled/translated to fit into paint May be null. The paint used to draw the bitmap
	6:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, Rect src, Rect dst, Paint paint) Draw the specified bitmap, scaling/translating automatically to fill the destination rectangle. If the source rectangle is not null, it specifies the subset of the bitmap to draw. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. This function ignores the density associated with the bitmap. This is because the source and destination rectangle coordinate spaces are in their respective densities, so must already have the appropriate scaling factor applied. Parameters bitmap The bitmap to be drawn src May be null. The subset of the bitmap to be drawn dst The rectangle that the bitmap will be scaled/translated to fit into paint May be null. The paint used to draw the bitmap
	7:	android.graphics.Bitmap public void setPixels (int[] pixels, int offset, int stride, int x, int y, int width, int height) Replace pixels in the bitmap with the colors in the array. Each element in the array is a packed int prepresenting a non-premultiplied ARGB Color. Parameters pixels The colors to write to the bitmap offset The index of the first color to read from pixels[] stride The number of colors in pixels[] to skip between rows. Normally this value will be the same as the width of the bitmap, but it can be larger (or negative). x The x coordinate of the first pixel to write to in the bitmap. y The y coordinate of the first pixel to write to in the bitmap. width The number of colors to copy from pixels[] per row height The number of rows to write to the bitmap Throws IllegalStateException if the bitmap is not mutable IllegalArgumentException if x, y, width, height are outside of the bitmap's bounds. ArrayIndexOutOfBoundsException if the pixels array is too small to receive the specified number of pixels.
	8:	android.graphics.Bitmap public void getPixels (int[] pixels, int offset, int stride, int x, int y, int width, int height) Returns in pixels[] a copy of the data in the bitmap. Each value is a packed int representing a Color. The stride parameter allows the caller to allow for gaps in the returned pixels array between rows. For normal packed results, just pass width for the stride value. The returned colors are non-premultiplied ARGB values. Parameters pixels The array to receive the bitmap's colors offset The first index to write into pixels[] stride The number of entries in pixels[] to skip between rows (must be >= bitmap's width). Can be negative. x The x coordinate of the first pixel to read from the bitmap y The y coordinate of the first pixel to read from the bitmap width The number of pixels to read from each row height The number of rows to read Throws IllegalArgumentException if x, y, width, height exceed the bounds of the bitmap, or if abs(stride) < width. ArrayIndexOutOfBoundsException if the pixels array is too small to receive the specified number of pixels.
	9:	android.graphics.Bitmap public static Bitmap createBitmap (Bitmap source, int x, int y, int width, int height, Matrix m, boolean filter) Returns an immutable bitmap from subset of the source bitmap, transformed by the optional matrix. The new bitmap may be the same object as source, or a copy may have been made. It is initialized with the same density as the original bitmap. If the source bitmap is immutable and the requested subset is the same as the source bitmap itself, then the source bitmap is returned and no new bitmap is created. Parameters source The bitmap we are subsetting x The x coordinate of the first pixel in source y The y coordinate of the first pixel in source width The number of pixels in each row height The number of rows m Optional matrix to be applied to the pixels filter true if the source should be filtered. Only applies if the matrix contains more than just translation. Returns A bitmap that represents the specified subset of source Throws IllegalArgumentException if the x, y, width, height values are outside of the dimensions of the source bitmap, or width is <= 0, or height is <= 0
fillTriangle
Fills the specified triangle will the current color
	0:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	1:	android.graphics.Canvas public void drawVertices (Canvas.VertexMode mode, int vertexCount, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, Paint paint) Draw the array of vertices, interpreted as triangles (based on mode). The verts array is required, and specifies the x,y pairs for each vertex. If texs is non-null, then it is used to specify the coordinate in shader coordinates to use at each vertex (the paint must have a shader in this case). If there is no texs array, but there is a color array, then each color is interpolated across its corresponding triangle in a gradient. If both texs and colors arrays are present, then they behave as before, but the resulting color at each pixels is the result of multiplying the colors from the shader and the color-gradient together. The indices array is optional, but if it is present, then it is used to specify the index of each triangle, rather than just walking through the arrays in order. Parameters mode How to interpret the array of vertices vertexCount The number of values in the vertices array (and corresponding texs and colors arrays if non-null). Each logical vertex is two values (x, y), vertexCount must be a multiple of 2. verts Array of vertices for the mesh vertOffset Number of values in the verts to skip before drawing. texs May be null. If not null, specifies the coordinates to sample into the current shader (e.g. bitmap tile or gradient) texOffset Number of values in texs to skip before drawing. colors May be null. If not null, specifies a color for each vertex, to be interpolated across the triangle. colorOffset Number of values in colors to skip before drawing. indices If not null, array of indices to reference into the vertex (texs, colors) array. indexCount number of entries in the indices array (if not null). paint Specifies the shader to use if the texs array is non-null.
	2:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	3:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	4:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.graphics.Bitmap public void eraseColor (int c) Fills the bitmap's pixels with the specified Color. Throws IllegalStateException if the bitmap is not mutable.
	6:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	7:	android.graphics.drawable.GradientDrawable public void setColor (int argb) Changes this drawbale to use a single color instead of a gradient. Note: changing color will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the color. Parameters argb The color used to fill the shape See Also mutate() setColors(int[])
	8:	android.graphics.Canvas public void drawPaint (Paint paint) Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint. Parameters paint The paint used to draw onto the canvas
	9:	android.graphics.drawable.Drawable public void setColorFilter (int color, PorterDuff.Mode mode) Specify a color and porterduff mode to be the colorfilter for this drawable.
drawRGB
Renders a series of device-independent RGB+transparency values in a specified region
	0:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	1:	android.graphics.drawable.Drawable public Region getTransparentRegion () Returns a Region representing the part of the Drawable that is completely transparent. This can be used to perform drawing operations, identifying which parts of the target will not change when rendering the Drawable. The default implementation returns null, indicating no transparent region; subclasses can optionally override this to return an actual Region if they want to supply this optimization information, but it is not required that they do so. Returns Returns null if the Drawables has no transparent region to report, else a Region holding the parts of the Drawable's bounds that are transparent.
	2:	android.graphics.drawable.NinePatchDrawable public Region getTransparentRegion () Returns a Region representing the part of the Drawable that is completely transparent. This can be used to perform drawing operations, identifying which parts of the target will not change when rendering the Drawable. The default implementation returns null, indicating no transparent region; subclasses can optionally override this to return an actual Region if they want to supply this optimization information, but it is not required that they do so. Returns Returns null if the Drawables has no transparent region to report, else a Region holding the parts of the Drawable's bounds that are transparent.
	3:	android.graphics.NinePatch public final Region getTransparentRegion (Rect bounds) Returns a Region representing the parts of the NinePatch that are completely transparent. Parameters bounds The location and size of the NinePatch. Returns null if the NinePatch has no transparent region to report, else a Region holding the parts of the specified bounds that are transparent.
	4:	android.graphics.Region public Region (Region region) Return a copy of the specified region
	5:	android.graphics.Region public boolean set (Region region) Set the region to the specified region.
	6:	android.graphics.Paint public void setTextLocale (Locale locale) Set the text locale. The text locale affects how the text is drawn for some languages. For example, if the locale is CHINESE or CHINA, then the text renderer will prefer to draw text using a Chinese font. Likewise, if the locale is JAPANESE or JAPAN, then the text renderer will prefer to draw text using a Japanese font. This distinction is important because Chinese and Japanese text both use many of the same Unicode code points but their appearance is subtly different for each language. By default, the text locale is initialized to the system locale (as returned by getDefault()). This assumes that the text to be rendered will most likely be in the user's preferred language. If the actual language of the text is known, then it can be provided to the text renderer using this method. The text renderer may attempt to guess the language script based on the contents of the text to be drawn independent of the text locale here. Specifying the text locale just helps it do a better job in certain ambiguous cases Parameters locale the paint's locale value for drawing text, must not be null.
	7:	android.graphics.Region public Region (Rect r) Return a region set to the specified rectangle
	8:	android.graphics.Region public boolean op (Region region, Region.Op op) Perform the specified Op on this region and the specified region. Return true if the result of the op is not empty.
	9:	android.graphics.Region public boolean op (Rect rect, Region region, Region.Op op) Set this region to the result of performing the Op on the specified rect and region. Return true if the result is not empty.
P

getDisplayColor
Gets the color that will be displayed if the specified color is requested
	0:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	1:	android.graphics.Bitmap public static Bitmap createBitmap (DisplayMetrics display, int[] colors, int offset, int stride, int width, int height, Bitmap.Config config) Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array. Its initial density is determined from the given DisplayMetrics. Parameters display Display metrics for the display this bitmap will be drawn on. colors Array of Color used to initialize the pixels. offset Number of values to skip before the first color in the array of colors. stride Number of colors in the array between rows (must be >= width or <= -width). width The width of the bitmap height The height of the bitmap config The bitmap config to create. If the config does not support per-pixel alpha (e.g. RGB_565), then the alpha bytes in the colors[] will be ignored (assumed to be FF) Throws IllegalArgumentException if the width or height are <= 0, or if the color array's length is less than the number of pixels.
	2:	android.graphics.Bitmap public static Bitmap createBitmap (DisplayMetrics display, int[] colors, int width, int height, Bitmap.Config config) Returns a immutable bitmap with the specified width and height, with each pixel value set to the corresponding value in the colors array. Its initial density is determined from the given DisplayMetrics. Parameters display Display metrics for the display this bitmap will be drawn on. colors Array of Color used to initialize the pixels. This array must be at least as large as width * height. width The width of the bitmap height The height of the bitmap config The bitmap config to create. If the config does not support per-pixel alpha (e.g. RGB_565), then the alpha bytes in the colors[] will be ignored (assumed to be FF) Throws IllegalArgumentException if the width or height are <= 0, or if the color array's length is less than the number of pixels.
	3:	android.graphics.drawable.ColorDrawable public int getColor () Gets the drawable's color value. Returns int The color to draw.
	4:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	5:	android.graphics.drawable.Drawable public void setColorFilter (int color, PorterDuff.Mode mode) Specify a color and porterduff mode to be the colorfilter for this drawable.
	6:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	7:	android.graphics.ColorMatrix public void setRotate (int axis, float degrees) Set the rotation on a color axis by the specified values. axis=0 correspond to a rotation around the RED color axis=1 correspond to a rotation around the GREEN color axis=2 correspond to a rotation around the BLUE color
	8:	android.graphics.Color public Color () 
	9:	android.graphics.drawable.GradientDrawable public void setColors (int[] colors) Sets the colors used to draw the gradient. Each color is specified as an ARGB integer and the array must contain at least 2 colors. Note: changing orientation will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the orientation. Parameters colors 2 or more ARGB colors See Also mutate() setColor(int)
