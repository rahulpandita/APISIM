getGameAction

Canvas
Constructs a new Canvas object
	0:	android.hardware.input.InputManager.InputDeviceListener public abstract void onInputDeviceChanged (int deviceId) Called whenever the properties of an input device have changed since they were last queried. Use getInputDevice(int) to get a fresh InputDevice object with the new properties. Parameters deviceId The id of the input device that changed.
	1:	android.print.PrintJob public PrintJobInfo getInfo () Gets the PrintJobInfo that describes this job. Node:The returned info object is a snapshot of the current print job state. Every call to this method returns a fresh info object that reflects the current print job state. Returns The print job info.
	2:	android.printservice.PrintJob public PrintJobInfo getInfo () Gets the PrintJobInfo that describes this job. Node:The returned info object is a snapshot of the current print job state. Every call to this method returns a fresh info object that reflects the current print job state. Returns The print job info.
	3:	android.media.AudioRecord public static int getMinBufferSize (int sampleRateInHz, int channelConfig, int audioFormat) Returns the minimum buffer size required for the successful creation of an AudioRecord object, in byte units. Note that this size doesn't guarantee a smooth recording under load, and higher values should be chosen according to the expected frequency at which the AudioRecord instance will be polled for new data. See AudioRecord(int, int, int, int, int) for more information on valid configuration values. Parameters sampleRateInHz the sample rate expressed in Hertz. channelConfig describes the configuration of the audio channels. See CHANNEL_IN_MONO and CHANNEL_IN_STEREO audioFormat the format in which the audio data is represented. See ENCODING_PCM_16BIT. Returns ERROR_BAD_VALUE if the recording parameters are not supported by the hardware, or an invalid parameter was passed, or ERROR if the implementation was unable to query the hardware for its input properties, or the minimum buffer size expressed in bytes. See Also AudioRecord(int, int, int, int, int)
	4:	android.os.Parcel public final void writeTypedList (List<T> val) Flatten a List containing a particular object type into the parcel, at the current dataPosition() and growing dataCapacity() if needed. The type of the objects in the list must be one that implements Parcelable. Unlike the generic writeList() method, however, only the raw data of the objects is written and not their type, so you must use the corresponding readTypedList() to unmarshall them. Parameters val The list of objects to be written. See Also createTypedArrayList(Parcelable.Creator) readTypedList(List, Parcelable.Creator) Parcelable
	5:	java.lang.reflect.ParameterizedType public abstract Type getRawType () Returns the declaring type of this parameterized type. The raw type of Set field; is Set. Returns the raw type of this parameterized type
	6:	android.os.Parcel public final void writeTypedArray (T[] val, int parcelableFlags) Flatten a heterogeneous array containing a particular object type into the parcel, at the current dataPosition() and growing dataCapacity() if needed. The type of the objects in the array must be one that implements Parcelable. Unlike the writeParcelableArray(T[], int) method, however, only the raw data of the objects is written and not their type, so you must use readTypedArray(T[], Parcelable.Creator) with the correct corresponding Parcelable.Creator implementation to unmarshall them. Parameters val The array of objects to be written. parcelableFlags Contextual flags as per Parcelable.writeToParcel(). See Also readTypedArray(T[], Parcelable.Creator) writeParcelableArray(T[], int) Parcelable.Creator
	7:	android.app.admin.DeviceAdminInfo public ActivityInfo getActivityInfo () Return the raw information about the receiver implementing this device admin. Do not modify the returned object.
	8:	android.view.inputmethod.InputMethodInfo public ServiceInfo getServiceInfo () Return the raw information about the Service implementing this input method. Do not modify the returned object.
	9:	javax.xml.datatype.Duration public abstract Duration multiply (BigDecimal factor) Computes a new duration whose value is factor times longer than the value of this duration. For example, "P1M" (1 month) * "12" = "P12M" (12 months) "PT1M" (1 min) * "0.3" = "PT18S" (18 seconds) "P1M" (1 month) * "1.5" = IllegalStateException Since the Duration class is immutable, this method doesn't change the value of this object. It simply computes a new Duration object and returns it. The operation will be performed field by field with the precision of BigDecimal. Since all the fields except seconds are restricted to hold integers, any fraction produced by the computation will be carried down toward the next lower unit. For example, if you multiply "P1D" (1 day) with "0.5", then it will be 0.5 day, which will be carried down to "PT12H" (12 hours). When fractions of month cannot be meaningfully carried down to days, or year to months, this will cause an IllegalStateException to be thrown. For example if you multiple one month by 0.5. To avoid IllegalStateException, use the normalizeWith(Calendar) method to remove the years and months fields. Parameters factor to multiply by Returns returns a non-null valid Duration object Throws IllegalStateException if operation produces fraction in the months field. NullPointerException if the factor parameter is null.
isDoubleBuffered
Checks if the Canvas is double buffered by the implementation
	0:	android.app.KeyguardManager public void exitKeyguardSecurely (KeyguardManager.OnKeyguardExitResult callback) This method was deprecated in API level 13. Use FLAG_DISMISS_KEYGUARD and/or FLAG_SHOW_WHEN_LOCKED instead; this allows you to seamlessly hide the keyguard as your application moves in and out of the foreground and does not require that any special permissions be requested. Exit the keyguard securely. The use case for this api is that, after disabling the keyguard, your app, which was granted permission to disable the keyguard and show a limited amount of information deemed safe without the user getting past the keyguard, needs to navigate to something that is not safe to view without getting past the keyguard. This will, if the keyguard is secure, bring up the unlock screen of the keyguard. This method requires the caller to hold the permission DISABLE_KEYGUARD. Parameters callback Let's you know whether the operation was succesful and it is safe to launch anything that would normally be considered safe once the user has gotten past the keyguard.
	1:	org.json.JSONTokener public char skipTo (char to) Advances past all input up to but not including the next occurrence of to. If the remaining input doesn't contain to, the input is unchanged.
	2:	org.json.JSONTokener public void skipPast (String thru) Advances past all input up to and including the next occurrence of thru. If the remaining input doesn't contain thru, the input is exhausted.
	3:	org.xml.sax.Attributes public abstract String getLocalName (int index) Look up an attribute's local name by index. Parameters index The attribute index (zero-based). Returns The local name, or the empty string if Namespace processing is not being performed, or null if the index is out of range. See Also getLength()
	4:	org.xml.sax.Attributes public abstract String getQName (int index) Look up an attribute's XML qualified (prefixed) name by index. Parameters index The attribute index (zero-based). Returns The XML qualified name, or the empty string if none is available, or null if the index is out of range. See Also getLength()
	5:	org.xml.sax.Attributes public abstract String getURI (int index) Look up an attribute's Namespace URI by index. Parameters index The attribute index (zero-based). Returns The Namespace URI, or the empty string if none is available, or null if the index is out of range. See Also getLength()
	6:	org.xmlpull.v1.sax2.Driver public String getLocalName (int index) Look up an attribute's local name by index. Parameters index The attribute index (zero-based). Returns The local name, or the empty string if Namespace processing is not being performed, or null if the index is out of range.
	7:	org.xmlpull.v1.sax2.Driver public String getQName (int index) Look up an attribute's XML qualified (prefixed) name by index. Parameters index The attribute index (zero-based). Returns The XML qualified name, or the empty string if none is available, or null if the index is out of range.
	8:	org.xmlpull.v1.sax2.Driver public String getURI (int index) Look up an attribute's Namespace URI by index. Parameters index The attribute index (zero-based). Returns The Namespace URI, or the empty string if none is available, or null if the index is out of range.
	9:	android.app.AlarmManager public void setRepeating (int type, long triggerAtMillis, long intervalMillis, PendingIntent operation) Schedule a repeating alarm. Note: for timing operations (ticks, timeouts, etc) it is easier and much more efficient to use Handler. If there is already an alarm scheduled for the same IntentSender, it will first be canceled. Like set(int, long, PendingIntent), except you can also supply a period at which the alarm will automatically repeat. This alarm continues repeating until explicitly removed with cancel(PendingIntent). If the stated trigger time is in the past, the alarm will be triggered immediately, with an alarm count depending on how far in the past the trigger time is relative to the repeat interval. If an alarm is delayed (by system sleep, for example, for non _WAKEUP alarm types), a skipped repeat will be delivered as soon as possible. After that, future alarms will be delivered according to the original schedule; they do not drift over time. For example, if you have set a recurring alarm for the top of every hour but the phone was asleep from 7:45 until 8:45, an alarm will be sent as soon as the phone awakens, then the next alarm will be sent at 9:00. If your application wants to allow the delivery times to drift in order to guarantee that at least a certain time interval always elapses between alarms, then the approach to take is to use one-time alarms, scheduling the next one yourself when handling each alarm delivery. Note: as of API 19, all repeating alarms are inexact. If your application needs precise delivery times then it must use one-time exact alarms, rescheduling each time as described above. Legacy applications whose targetSdkVersion is earlier than API 19 will continue to have all of their alarms, including repeating alarms, treated as exact. Parameters type One of ELAPSED_REALTIME, ELAPSED_REALTIME_WAKEUP, RTC, or RTC_WAKEUP. triggerAtMillis time in milliseconds that the alarm should first go off, using the appropriate clock (depending on the alarm type). intervalMillis interval in milliseconds between subsequent repeats of the alarm. operation Action to perform when the alarm goes off; typically comes from IntentSender.getBroadcast(). See Also Handler set(int, long, PendingIntent) setExact(int, long, PendingIntent) setWindow(int, long, long, PendingIntent) cancel(PendingIntent) sendBroadcast(Intent) registerReceiver(BroadcastReceiver, IntentFilter) filterEquals(Intent) ELAPSED_REALTIME ELAPSED_REALTIME_WAKEUP RTC RTC_WAKEUP
hasPointerEvents
Checks if the platform supports pointer press and release events
	0:	android.widget.AbsListView protected void dispatchSetPressed (boolean pressed) Dispatch setPressed to all of this View's children. Parameters pressed The new pressed state
	1:	android.widget.Gallery protected void dispatchSetPressed (boolean pressed) Dispatch setPressed to all of this View's children. Parameters pressed The new pressed state
	2:	android.app.Activity public boolean onKeyDown (int keyCode, KeyEvent event) Called when a key was pressed down and not handled by any of the views inside of the activity. So, for example, key presses while the cursor is inside a TextView will not trigger the event (unless it is a navigation to another object) because TextView handles its own key presses. If the focused view didn't want this event, this method is called. The default implementation takes care of KEYCODE_BACK by calling onBackPressed(), though the behavior varies based on the application compatibility mode: for ECLAIR or later applications, it will set up the dispatch to call onKeyUp(int, KeyEvent) where the action will be performed; for earlier applications, it will perform the action immediately in on-down, as those versions of the platform behaved. Other additional default key handling may be performed if configured with setDefaultKeyMode(int). Parameters keyCode The value in event.getKeyCode(). event Description of the key event. Returns Return true to prevent this event from being propagated further, or false to indicate that you have not handled this event and it should continue to be propagated. See Also onKeyUp(int, KeyEvent) KeyEvent
	3:	android.widget.AbsSeekBar public int getKeyProgressIncrement () Returns the amount of progress changed via the arrow keys. By default, this will be a value that is derived from the max progress. Returns The amount to increment or decrement when the user presses the arrow keys. This will be positive.
	4:	android.widget.AbsSeekBar public void setKeyProgressIncrement (int increment) Sets the amount of progress changed via the arrow keys. Parameters increment The amount to increment or decrement when the user presses the arrow keys.
	5:	android.widget.HorizontalScrollView public boolean arrowScroll (int direction) Handle scrolling in response to a left or right arrow click. Parameters direction The direction corresponding to the arrow key that was pressed Returns True if we consumed the event, false otherwise
	6:	android.app.Activity public boolean onKeyUp (int keyCode, KeyEvent event) Called when a key was released and not handled by any of the views inside of the activity. So, for example, key presses while the cursor is inside a TextView will not trigger the event (unless it is a navigation to another object) because TextView handles its own key presses. The default implementation handles KEYCODE_BACK to stop the activity and go back. Parameters keyCode The value in event.getKeyCode(). event Description of the key event. Returns Return true to prevent this event from being propagated further, or false to indicate that you have not handled this event and it should continue to be propagated. See Also onKeyDown(int, KeyEvent) KeyEvent
	7:	android.view.MotionEvent public final float getSize (int pointerIndex) Returns a scaled value of the approximate size for the given pointer index (use getPointerId(int) to find the pointer identifier for this index). This represents some approximation of the area of the screen being pressed; the actual value in pixels corresponding to the touch is normalized with the device specific range of values and scaled to a value between 0 and 1. The value of size can be used to determine fat touch events. Parameters pointerIndex Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to getPointerCount()-1. See Also AXIS_SIZE
	8:	android.view.KeyEvent public final boolean isAltPressed () Returns the pressed state of the ALT meta key. Returns true if the ALT key is pressed, false otherwise See Also KEYCODE_ALT_LEFT KEYCODE_ALT_RIGHT META_ALT_ON
	9:	android.view.KeyEvent public final boolean isCtrlPressed () Returns the pressed state of the CTRL meta key. Returns true if the CTRL key is pressed, false otherwise See Also KEYCODE_CTRL_LEFT KEYCODE_CTRL_RIGHT META_CTRL_ON
hasPointerMotionEvents
Checks if the platform supports pointer motion events (pointer dragged)
	0:	android.app.Activity public boolean onGenericMotionEvent (MotionEvent event) Called when a generic motion event was not handled by any of the views inside of the activity. Generic motion events describe joystick movements, mouse hovers, track pad touches, scroll wheel movements and other input events. The source of the motion event specifies the class of input that was received. Implementations of this method must examine the bits in the source before processing the event. The following code example shows how this is done. Generic motion events with source class SOURCE_CLASS_POINTER are delivered to the view under the pointer. All other generic motion events are delivered to the focused view. See onGenericMotionEvent(MotionEvent) for an example of how to handle this event. Parameters event The generic motion event being processed. Returns Return true if you have consumed the event, false if you haven't. The default implementation always returns false.
	1:	android.app.Dialog public boolean onGenericMotionEvent (MotionEvent event) Called when a generic motion event was not handled by any of the views inside of the dialog. Generic motion events describe joystick movements, mouse hovers, track pad touches, scroll wheel movements and other input events. The source of the motion event specifies the class of input that was received. Implementations of this method must examine the bits in the source before processing the event. The following code example shows how this is done. Generic motion events with source class SOURCE_CLASS_POINTER are delivered to the view under the pointer. All other generic motion events are delivered to the focused view. See onGenericMotionEvent(MotionEvent) for an example of how to handle this event. Parameters event The generic motion event being processed. Returns Return true if you have consumed the event, false if you haven't. The default implementation always returns false.
	2:	android.widget.AbsListView public boolean onGenericMotionEvent (MotionEvent event) Implement this method to handle generic motion events. Generic motion events describe joystick movements, mouse hovers, track pad touches, scroll wheel movements and other input events. The source of the motion event specifies the class of input that was received. Implementations of this method must examine the bits in the source before processing the event. The following code example shows how this is done. Generic motion events with source class SOURCE_CLASS_POINTER are delivered to the view under the pointer. All other generic motion events are delivered to the focused view. public boolean onGenericMotionEvent(MotionEvent event) { if (event.isFromSource(InputDevice.SOURCE_CLASS_JOYSTICK)) { if (event.getAction() == MotionEvent.ACTION_MOVE) { // process the joystick movement... return true; } } if (event.isFromSource(InputDevice.SOURCE_CLASS_POINTER)) { switch (event.getAction()) { case MotionEvent.ACTION_HOVER_MOVE: // process the mouse hover movement... return true; case MotionEvent.ACTION_SCROLL: // process the scroll wheel movement... return true; } } return super.onGenericMotionEvent(event); } Parameters event The generic motion event being processed. Returns True if the event was handled, false otherwise.
	3:	android.widget.HorizontalScrollView public boolean onGenericMotionEvent (MotionEvent event) Implement this method to handle generic motion events. Generic motion events describe joystick movements, mouse hovers, track pad touches, scroll wheel movements and other input events. The source of the motion event specifies the class of input that was received. Implementations of this method must examine the bits in the source before processing the event. The following code example shows how this is done. Generic motion events with source class SOURCE_CLASS_POINTER are delivered to the view under the pointer. All other generic motion events are delivered to the focused view. public boolean onGenericMotionEvent(MotionEvent event) { if (event.isFromSource(InputDevice.SOURCE_CLASS_JOYSTICK)) { if (event.getAction() == MotionEvent.ACTION_MOVE) { // process the joystick movement... return true; } } if (event.isFromSource(InputDevice.SOURCE_CLASS_POINTER)) { switch (event.getAction()) { case MotionEvent.ACTION_HOVER_MOVE: // process the mouse hover movement... return true; case MotionEvent.ACTION_SCROLL: // process the scroll wheel movement... return true; } } return super.onGenericMotionEvent(event); } Parameters event The generic motion event being processed. Returns True if the event was handled, false otherwise.
	4:	android.view.MotionEvent.PointerProperties public MotionEvent.PointerProperties () Creates a pointer properties object with an invalid pointer id.
	5:	android.view.ScaleGestureDetector.OnScaleGestureListener public abstract boolean onScale (ScaleGestureDetector detector) Responds to scaling events for a gesture in progress. Reported by pointer motion. Parameters detector The detector reporting the event - use this to retrieve extended info about event state. Returns Whether or not the detector should consider this event as handled. If an event was not handled, the detector will continue to accumulate movement until an event is handled. This can be useful if an application, for example, only wants to update scaling factors if the change is greater than 0.01.
	6:	android.view.ScaleGestureDetector.SimpleOnScaleGestureListener public boolean onScale (ScaleGestureDetector detector) Responds to scaling events for a gesture in progress. Reported by pointer motion. Parameters detector The detector reporting the event - use this to retrieve extended info about event state. Returns Whether or not the detector should consider this event as handled. If an event was not handled, the detector will continue to accumulate movement until an event is handled. This can be useful if an application, for example, only wants to update scaling factors if the change is greater than 0.01.
	7:	android.inputmethodservice.KeyboardView public boolean onHoverEvent (MotionEvent event) Implement this method to handle hover events. This method is called whenever a pointer is hovering into, over, or out of the bounds of a view and the view is not currently being touched. Hover events are represented as pointer events with action ACTION_HOVER_ENTER, ACTION_HOVER_MOVE, or ACTION_HOVER_EXIT. The view receives a hover event with action ACTION_HOVER_ENTER when the pointer enters the bounds of the view. The view receives a hover event with action ACTION_HOVER_MOVE when the pointer has already entered the bounds of the view and has moved. The view receives a hover event with action ACTION_HOVER_EXIT when the pointer has exited the bounds of the view or when the pointer is about to go down due to a button click, tap, or similar user action that causes the view to be touched. The view should implement this method to return true to indicate that it is handling the hover event, such as by changing its drawable state. The default implementation calls setHovered(boolean) to update the hovered state of the view when a hover enter or hover exit event is received, if the view is enabled and is clickable. The default implementation also sends hover accessibility events. Parameters event The motion event that describes the hover. Returns True if the view handled the hover event.
	8:	android.app.Instrumentation public void sendPointerSync (MotionEvent event) Dispatch a pointer event. Finished at some point after the recipient has returned from its event processing, though it may not have completely finished reacting from the event -- for example, if it needs to update its display as a result, it may still be in the process of doing that. Parameters event A motion event describing the pointer action. (As noted in obtain(long, long, int, float, float, int), be sure to use uptimeMillis() as the timebase.
	9:	android.view.MotionEvent public final void addBatch (long eventTime, PointerCoords[] pointerCoords, int metaState) Add a new movement to the batch of movements in this event. The event's current location, position and size is updated to the new values. The current values in the event are added to a list of historical values. Only applies to ACTION_MOVE or ACTION_HOVER_MOVE events. Parameters eventTime The time stamp (in ms) for this data. pointerCoords The new pointer coordinates. metaState Meta key state.
hasRepeatEvents
Checks if the platform can generate repeat events when key is kept down
	0:	android.view.KeyEvent public final int getRepeatCount () Retrieve the repeat count of the event. For both key up and key down events, this is the number of times the key has repeated with the first down starting at 0 and counting up from there. For multiple key events, this is the number of down/up pairs that have occurred. Returns The number of times the key has repeated.
	1:	android.app.Activity public boolean onKeyDown (int keyCode, KeyEvent event) Called when a key was pressed down and not handled by any of the views inside of the activity. So, for example, key presses while the cursor is inside a TextView will not trigger the event (unless it is a navigation to another object) because TextView handles its own key presses. If the focused view didn't want this event, this method is called. The default implementation takes care of KEYCODE_BACK by calling onBackPressed(), though the behavior varies based on the application compatibility mode: for ECLAIR or later applications, it will set up the dispatch to call onKeyUp(int, KeyEvent) where the action will be performed; for earlier applications, it will perform the action immediately in on-down, as those versions of the platform behaved. Other additional default key handling may be performed if configured with setDefaultKeyMode(int). Parameters keyCode The value in event.getKeyCode(). event Description of the key event. Returns Return true to prevent this event from being propagated further, or false to indicate that you have not handled this event and it should continue to be propagated. See Also onKeyUp(int, KeyEvent) KeyEvent
	2:	android.widget.AutoCompleteTextView public int getDropDownHeight () Returns the current height for the auto-complete drop down list. This can be a fixed height, or MATCH_PARENT to fill the screen, or WRAP_CONTENT to fit the height of the drop down's content. Related XML Attributes android:dropDownHeight Returns the height for the drop down list
	3:	android.inputmethodservice.KeyboardView.OnKeyboardActionListener public abstract void swipeDown () Called when the user quickly moves the finger from up to down.
	4:	android.inputmethodservice.KeyboardView.OnKeyboardActionListener public abstract void swipeUp () Called when the user quickly moves the finger from down to up.
	5:	android.view.GestureDetector public void setIsLongpressEnabled (boolean isLongpressEnabled) Set whether longpress is enabled, if this is enabled when a user presses and holds down you get a longpress event and nothing further. If it's disabled the user can press and hold down and then later moved their finger and you will get scroll events. By default longpress is enabled. Parameters isLongpressEnabled whether longpress should be enabled.
	6:	android.support.v4.view.GestureDetectorCompat public void setIsLongpressEnabled (boolean enabled) Set whether longpress is enabled, if this is enabled when a user presses and holds down you get a longpress event and nothing further. If it's disabled the user can press and hold down and then later moved their finger and you will get scroll events. By default longpress is enabled. Parameters enabled whether longpress should be enabled.
	7:	android.view.KeyEvent public final long getDownTime () Retrieve the time of the most recent key down event, in the uptimeMillis() time base. If this is a down event, this will be the same as getEventTime(). Note that when chording keys, this value is the down time of the most recently pressed key, which may not be the same physical key of this event. Returns Returns the most recent key down time, in the uptimeMillis() time base
	8:	android.widget.AutoCompleteTextView public int getDropDownWidth () Returns the current width for the auto-complete drop down list. This can be a fixed width, or MATCH_PARENT to fill the screen, or WRAP_CONTENT to fit the width of its anchor view. Related XML Attributes android:dropDownWidth Returns the width for the drop down list
	9:	android.media.Rating public static Rating newThumbRating (boolean thumbIsUp) Return a Rating instance with a thumb-based rating. Create and return a new Rating instance with a RATING_THUMB_UP_DOWN rating style, and a "thumb up" or "thumb down" rating. Parameters thumbIsUp true for a "thumb up" rating, false for "thumb down". Returns a new Rating instance.
getKeyCode
Gets a key code that corresponds to the specified game action on the device
	0:	android.content.IntentFilter public final void addAction (String action) Add a new Intent action to match against. If any actions are included in the filter, then an Intent's action must be one of those values for it to match. If no actions are included, the Intent action is ignored. Parameters action Name of the action to match, i.e. Intent.ACTION_VIEW.
	1:	android.view.KeyEvent public static KeyEvent changeAction (KeyEvent event, int action) Create a new key event that is the same as the given one, but whose action is replaced with the given value. Parameters event The existing event to be copied. This is not modified. action The new action code of the event.
	2:	android.app.admin.DevicePolicyManager public int getStorageEncryptionStatus () Called by an application that is administering the device to determine the current encryption status of the device. Depending on the returned status code, the caller may proceed in different ways. If the result is ENCRYPTION_STATUS_UNSUPPORTED, the storage system does not support encryption. If the result is ENCRYPTION_STATUS_INACTIVE, use ACTION_START_ENCRYPTION to begin the process of encrypting or decrypting the storage. If the result is ENCRYPTION_STATUS_ACTIVATING or ENCRYPTION_STATUS_ACTIVE, no further action is required. Returns current status of encryption. The value will be one of ENCRYPTION_STATUS_UNSUPPORTED, ENCRYPTION_STATUS_INACTIVE, ENCRYPTION_STATUS_ACTIVATING, orENCRYPTION_STATUS_ACTIVE.
	3:	android.content.IntentFilter public final int match (String action, String type, String scheme, Uri data, Set<String> categories, String logTag) Test whether this filter matches the given intent data. A match is only successful if the actions and categories in the Intent match against the filter, as described in IntentFilter; in that case, the match result returned will be as per matchData(String, String, Uri). Parameters action The intent action to match against (Intent.getAction). type The intent type to match against (Intent.resolveType()). scheme The data scheme to match against (Intent.getScheme()). data The data URI to match against (Intent.getData()). categories The categories to match against (Intent.getCategories()). logTag Tag to use in debugging messages. Returns Returns either a valid match constant (a combination of MATCH_CATEGORY_MASK and MATCH_ADJUSTMENT_MASK), or one of the error codes NO_MATCH_TYPE if the type didn't match, NO_MATCH_DATA if the scheme/path didn't match, if the action didn't match, or {@link #NO_MATCH_CATEGORY if one or more categories didn't match. See Also matchData(String, String, Uri) getAction() resolveType(ContentResolver) getScheme() getData() getCategories()
	4:	android.media.AudioManager public void dispatchMediaKeyEvent (KeyEvent keyEvent) Sends a simulated key event for a media button. To simulate a key press, you must first send a KeyEvent built with a ACTION_DOWN action, then another event with the ACTION_UP action. The key event will be sent to the current media key event consumer which registered with registerMediaButtonEventReceiver(PendingIntent). Parameters keyEvent a KeyEvent instance whose key code is one of KEYCODE_MUTE, KEYCODE_HEADSETHOOK, KEYCODE_MEDIA_PLAY, KEYCODE_MEDIA_PAUSE, KEYCODE_MEDIA_PLAY_PAUSE, KEYCODE_MEDIA_STOP, KEYCODE_MEDIA_NEXT, KEYCODE_MEDIA_PREVIOUS, KEYCODE_MEDIA_REWIND, KEYCODE_MEDIA_RECORD, KEYCODE_MEDIA_FAST_FORWARD, KEYCODE_MEDIA_CLOSE, KEYCODE_MEDIA_EJECT, or KEYCODE_MEDIA_AUDIO_TRACK.
	5:	android.view.KeyEvent public KeyEvent (int action, int code) Create a new key event. Parameters action Action code: either ACTION_DOWN, ACTION_UP, or ACTION_MULTIPLE. code The key code.
	6:	android.media.RemoteController public boolean sendMediaKeyEvent (KeyEvent keyEvent) Send a simulated key event for a media button to be received by the current client. To simulate a key press, you must first send a KeyEvent built with a ACTION_DOWN action, then another event with the ACTION_UP action. The key event will be sent to the registered receiver (see registerMediaButtonEventReceiver(PendingIntent)) whose associated RemoteControlClient's metadata and playback state is published (there may be none under some circumstances). Parameters keyEvent a KeyEvent instance whose key code is one of KEYCODE_MUTE, KEYCODE_HEADSETHOOK, KEYCODE_MEDIA_PLAY, KEYCODE_MEDIA_PAUSE, KEYCODE_MEDIA_PLAY_PAUSE, KEYCODE_MEDIA_STOP, KEYCODE_MEDIA_NEXT, KEYCODE_MEDIA_PREVIOUS, KEYCODE_MEDIA_REWIND, KEYCODE_MEDIA_RECORD, KEYCODE_MEDIA_FAST_FORWARD, KEYCODE_MEDIA_CLOSE, KEYCODE_MEDIA_EJECT, or KEYCODE_MEDIA_AUDIO_TRACK. Returns true if the event was successfully sent, false otherwise. Throws IllegalArgumentException
	7:	android.content.IntentFilter public final int match (ContentResolver resolver, Intent intent, boolean resolve, String logTag) Test whether this filter matches the given intent. Parameters intent The Intent to compare against. resolve If true, the intent's type will be resolved by calling Intent.resolveType(); otherwise a simple match against Intent.type will be performed. logTag Tag to use in debugging messages. Returns Returns either a valid match constant (a combination of MATCH_CATEGORY_MASK and MATCH_ADJUSTMENT_MASK), or one of the error codes NO_MATCH_TYPE if the type didn't match, NO_MATCH_DATA if the scheme/path didn't match, if the action didn't match, or {@link #NO_MATCH_CATEGORY if one or more categories didn't match.How well the filter matches. Negative if it doesn't match, zero or positive positive value if it does with a higher value representing a better match. See Also match(String, String, String, android.net.Uri, Set, String)
	8:	java.nio.charset.CharsetEncoder public final CoderResult flush (ByteBuffer out) Flushes this encoder. This method will call implFlush. Some encoders may need to write some bytes to the output buffer when they have read all input characters, subclasses can overridden implFlush to perform writing action. The maximum number of written bytes won't larger than out.remaining(). If some encoder wants to write more bytes than the output buffer's available remaining space, then CoderResult.OVERFLOW will be returned, and this method must be called again with a byte buffer that has free space. Otherwise this method will return CoderResult.UNDERFLOW, which means one encoding process has been completed successfully. During the flush, the output buffer's position will be changed accordingly, while its mark and limit will be intact. Parameters out the given output buffer. Returns CoderResult.UNDERFLOW or CoderResult.OVERFLOW. Throws IllegalStateException if this encoder isn't already flushed or at end of input.
	9:	java.util.concurrent.CyclicBarrier public int await (long timeout, TimeUnit unit) Waits until all parties have invoked await on this barrier, or the specified waiting time elapses. If the current thread is not the last to arrive then it is disabled for thread scheduling purposes and lies dormant until one of the following things happens: The last thread arrives; or The specified timeout elapses; or Some other thread interrupts the current thread; or Some other thread interrupts one of the other waiting threads; or Some other thread times out while waiting for barrier; or Some other thread invokes reset() on this barrier. If the current thread: has its interrupted status set on entry to this method; or is interrupted while waiting then InterruptedException is thrown and the current thread's interrupted status is cleared. If the specified waiting time elapses then TimeoutException is thrown. If the time is less than or equal to zero, the method will not wait at all. If the barrier is reset() while any thread is waiting, or if the barrier is broken when await is invoked, or while any thread is waiting, then BrokenBarrierException is thrown. If any thread is interrupted while waiting, then all other waiting threads will throw BrokenBarrierException and the barrier is placed in the broken state. If the current thread is the last thread to arrive, and a non-null barrier action was supplied in the constructor, then the current thread runs the action before allowing the other threads to continue. If an exception occurs during the barrier action then that exception will be propagated in the current thread and the barrier is placed in the broken state. Parameters timeout the time to wait for the barrier unit the time unit of the timeout parameter Returns the arrival index of the current thread, where index getParties() - 1 indicates the first to arrive and zero indicates the last to arrive Throws InterruptedException if the current thread was interrupted while waiting TimeoutException if the specified timeout elapses BrokenBarrierException if another thread was interrupted or timed out while the current thread was waiting, or the barrier was reset, or the barrier was broken when await was called, or the barrier action (if present) failed due to an exception
getKeyName
Gets an informative key string for a key
	0:	android.test.InstrumentationTestSuite public InstrumentationTestSuite (String name, Instrumentation instr) 
	1:	android.accounts.Account public Account (String name, String type) 
	2:	android.graphics.Paint public float getTextSkewX () Return the paint's horizontal skew factor for text. The default value is 0. Returns the paint's skew factor in X for drawing text.
	3:	android.test.mock.MockPackageManager public List<InstrumentationInfo> queryInstrumentation (String targetPackage, int flags) Retrieve information about available instrumentation code. May be used to retrieve either all instrumentation code, or only the code targeting a particular package. Parameters targetPackage If null, all instrumentation is returned; only the instrumentation targeting this package name is returned. flags Additional option flags. Currently should always be 0. Returns A List<InstrumentationInfo> containing one entry for each matching available Instrumentation. Returns an empty list if there is no instrumentation available for the given package.
	4:	android.content.Context public abstract boolean startInstrumentation (ComponentName className, String profileFile, Bundle arguments) Start executing an Instrumentation class. The given Instrumentation component will be run by killing its target application (if currently running), starting the target process, instantiating the instrumentation component, and then letting it drive the application. This function is not synchronous -- it returns as soon as the instrumentation has started and while it is running. Instrumentation is normally only allowed to run against a package that is either unsigned or signed with a signature that the the instrumentation package is also signed with (ensuring the target trusts the instrumentation). Parameters className Name of the Instrumentation component to be run. profileFile Optional path to write profiling data as the instrumentation runs, or null for no profiling. arguments Additional optional arguments to pass to the instrumentation, or null. Returns true if the instrumentation was successfully started, else false if it could not be found.
	5:	android.content.ContextWrapper public boolean startInstrumentation (ComponentName className, String profileFile, Bundle arguments) Start executing an Instrumentation class. The given Instrumentation component will be run by killing its target application (if currently running), starting the target process, instantiating the instrumentation component, and then letting it drive the application. This function is not synchronous -- it returns as soon as the instrumentation has started and while it is running. Instrumentation is normally only allowed to run against a package that is either unsigned or signed with a signature that the the instrumentation package is also signed with (ensuring the target trusts the instrumentation). Parameters className Name of the Instrumentation component to be run. profileFile Optional path to write profiling data as the instrumentation runs, or null for no profiling. arguments Additional optional arguments to pass to the instrumentation, or null. Returns true if the instrumentation was successfully started, else false if it could not be found.
	6:	android.test.mock.MockContext public boolean startInstrumentation (ComponentName className, String profileFile, Bundle arguments) Start executing an Instrumentation class. The given Instrumentation component will be run by killing its target application (if currently running), starting the target process, instantiating the instrumentation component, and then letting it drive the application. This function is not synchronous -- it returns as soon as the instrumentation has started and while it is running. Instrumentation is normally only allowed to run against a package that is either unsigned or signed with a signature that the the instrumentation package is also signed with (ensuring the target trusts the instrumentation). Parameters className Name of the Instrumentation component to be run. profileFile Optional path to write profiling data as the instrumentation runs, or null for no profiling. arguments Additional optional arguments to pass to the instrumentation, or null. Returns true if the instrumentation was successfully started, else false if it could not be found.
	7:	java.sql.CallableStatement public abstract void registerOutParameter (String parameterName, int sqlType, String typeName) Defines the Type of a specified OUT parameter. This variant of the method is designed for use with parameters that are User Defined Types (UDT) or a REF type, although it can be used for any type. Parameters parameterName the parameter name sqlType a JDBC type expressed as a constant from Types typeName the fully qualified name of an SQL structured type. For a REF type, this name should be the fully qualified name of the referenced type. Throws SQLException if a database error occurs.
	8:	android.graphics.Paint public float getTextScaleX () Return the paint's horizontal scale factor for text. The default value is 1.0. Returns the paint's scale factor in X for drawing/measuring text
	9:	android.content.pm.PackageManager public abstract List<InstrumentationInfo> queryInstrumentation (String targetPackage, int flags) Retrieve information about available instrumentation code. May be used to retrieve either all instrumentation code, or only the code targeting a particular package. Parameters targetPackage If null, all instrumentation is returned; only the instrumentation targeting this package name is returned. flags Additional option flags. Currently should always be 0. Returns A List<InstrumentationInfo> containing one entry for each matching available Instrumentation. Returns an empty list if there is no instrumentation available for the given package.
getKeyName

getGameAction
Gets the game action associated with the given key code of the device
	0:	android.view.KeyEvent public static KeyEvent changeAction (KeyEvent event, int action) Create a new key event that is the same as the given one, but whose action is replaced with the given value. Parameters event The existing event to be copied. This is not modified. action The new action code of the event.
	1:	android.content.IntentFilter public final void addAction (String action) Add a new Intent action to match against. If any actions are included in the filter, then an Intent's action must be one of those values for it to match. If no actions are included, the Intent action is ignored. Parameters action Name of the action to match, i.e. Intent.ACTION_VIEW.
	2:	android.content.Intent public Intent (String action, Uri uri) Create an intent with a given action and for a given data url. Note that the action must be in a namespace because Intents are used globally in the system -- for example the system VIEW action is android.intent.action.VIEW; an application's custom action would be something like com.google.app.myapp.CUSTOM_ACTION. Note: scheme and host name matching in the Android framework is case-sensitive, unlike the formal RFC. As a result, you should always ensure that you write your Uri with these elements using lower case letters, and normalize any Uris you receive from outside of Android to ensure the scheme and host is lower case. Parameters action The Intent action, such as ACTION_VIEW. uri The Intent data URI.
	3:	android.app.admin.DevicePolicyManager public int getStorageEncryptionStatus () Called by an application that is administering the device to determine the current encryption status of the device. Depending on the returned status code, the caller may proceed in different ways. If the result is ENCRYPTION_STATUS_UNSUPPORTED, the storage system does not support encryption. If the result is ENCRYPTION_STATUS_INACTIVE, use ACTION_START_ENCRYPTION to begin the process of encrypting or decrypting the storage. If the result is ENCRYPTION_STATUS_ACTIVATING or ENCRYPTION_STATUS_ACTIVE, no further action is required. Returns current status of encryption. The value will be one of ENCRYPTION_STATUS_UNSUPPORTED, ENCRYPTION_STATUS_INACTIVE, ENCRYPTION_STATUS_ACTIVATING, orENCRYPTION_STATUS_ACTIVE.
	4:	android.view.KeyEvent public KeyEvent (int action, int code) Create a new key event. Parameters action Action code: either ACTION_DOWN, ACTION_UP, or ACTION_MULTIPLE. code The key code.
	5:	java.lang.Runtime public void halt (int code) Causes the VM to stop running, and the program to exit with the given return code. Use 0 to signal success to the calling process and 1 to signal failure. Neither shutdown hooks nor finalizers are run before exiting. This method is unlikely to be useful to an Android application.
	6:	android.view.KeyEvent.DispatcherState public void performedLongPress (KeyEvent event) Keep track of the given event's key code as having performed an action with a long press, so no action should occur on the up. This is only needed if you are directly dispatching events, rather than handling them in onKeyLongPress(int, KeyEvent).
	7:	android.content.IntentFilter public final int match (String action, String type, String scheme, Uri data, Set<String> categories, String logTag) Test whether this filter matches the given intent data. A match is only successful if the actions and categories in the Intent match against the filter, as described in IntentFilter; in that case, the match result returned will be as per matchData(String, String, Uri). Parameters action The intent action to match against (Intent.getAction). type The intent type to match against (Intent.resolveType()). scheme The data scheme to match against (Intent.getScheme()). data The data URI to match against (Intent.getData()). categories The categories to match against (Intent.getCategories()). logTag Tag to use in debugging messages. Returns Returns either a valid match constant (a combination of MATCH_CATEGORY_MASK and MATCH_ADJUSTMENT_MASK), or one of the error codes NO_MATCH_TYPE if the type didn't match, NO_MATCH_DATA if the scheme/path didn't match, if the action didn't match, or {@link #NO_MATCH_CATEGORY if one or more categories didn't match. See Also matchData(String, String, Uri) getAction() resolveType(ContentResolver) getScheme() getData() getCategories()
	8:	java.nio.charset.CharsetEncoder public final CoderResult flush (ByteBuffer out) Flushes this encoder. This method will call implFlush. Some encoders may need to write some bytes to the output buffer when they have read all input characters, subclasses can overridden implFlush to perform writing action. The maximum number of written bytes won't larger than out.remaining(). If some encoder wants to write more bytes than the output buffer's available remaining space, then CoderResult.OVERFLOW will be returned, and this method must be called again with a byte buffer that has free space. Otherwise this method will return CoderResult.UNDERFLOW, which means one encoding process has been completed successfully. During the flush, the output buffer's position will be changed accordingly, while its mark and limit will be intact. Parameters out the given output buffer. Returns CoderResult.UNDERFLOW or CoderResult.OVERFLOW. Throws IllegalStateException if this encoder isn't already flushed or at end of input.
	9:	android.os.Binder public final boolean transact (int code, Parcel data, Parcel reply, int flags) Default implementation rewinds the parcels and calls onTransact. On the remote side, transact calls into the binder to do the IPC. Parameters code The action to perform. This should be a number between FIRST_CALL_TRANSACTION and LAST_CALL_TRANSACTION. data Marshalled data to send to the target. Must not be null. If you are not sending any data, you must create an empty Parcel that is given here. reply Marshalled data to be received from the target. May be null if you are not interested in the return value. flags Additional operation flags. Either 0 for a normal RPC, or FLAG_ONEWAY for a one-way RPC. Throws RemoteException
setFullScreenMode
Controls whether the Canvas is in full-screen mode or in normal mode
	0:	android.inputmethodservice.InputMethodService public void onUpdateExtractingViews (EditorInfo ei) Called when the fullscreen-mode extracting editor info has changed, to update the state of its UI such as the action buttons shown. You do not need to deal with this if you are using the standard full screen extract UI. If replacing it, you will need to re-implement this to put the appropriate action button in your own UI and handle it, and perform any other changes. The standard implementation turns on or off its accessory area depending on whether there is an action button, and hides or shows the entire extract area depending on whether it makes sense for the current editor. In particular, a TYPE_NULL or TYPE_TEXT_VARIATION_FILTER input type will turn off the extract area since there is no text to be shown.
	1:	java.util.concurrent.locks.AbstractQueuedLongSynchronizer protected boolean tryReleaseShared (long arg) Attempts to set the state to reflect a release in shared mode. This method is always invoked by the thread performing release. The default implementation throws UnsupportedOperationException. Parameters arg the release argument. This value is always the one passed to a release method, or the current state value upon entry to a condition wait. The value is otherwise uninterpreted and can represent anything you like. Returns true if this release of shared mode may permit a waiting acquire (shared or exclusive) to succeed; and false otherwise Throws IllegalMonitorStateException if releasing would place this synchronizer in an illegal state. This exception must be thrown in a consistent fashion for synchronization to work correctly. UnsupportedOperationException if shared mode is not supported
	2:	java.util.concurrent.locks.AbstractQueuedSynchronizer protected boolean tryReleaseShared (int arg) Attempts to set the state to reflect a release in shared mode. This method is always invoked by the thread performing release. The default implementation throws UnsupportedOperationException. Parameters arg the release argument. This value is always the one passed to a release method, or the current state value upon entry to a condition wait. The value is otherwise uninterpreted and can represent anything you like. Returns true if this release of shared mode may permit a waiting acquire (shared or exclusive) to succeed; and false otherwise Throws IllegalMonitorStateException if releasing would place this synchronizer in an illegal state. This exception must be thrown in a consistent fashion for synchronization to work correctly. UnsupportedOperationException if shared mode is not supported
	3:	android.os.PowerManager public boolean isInteractive () Returns true if the device is in an interactive state. When this method returns true, the device is awake and ready to interact with the user (although this is not a guarantee that the user is actively interacting with the device just this moment). The main screen is usually turned on while in this state. Certain features, such as the proximity sensor, may temporarily turn off the screen while still leaving the device in an interactive state. Note in particular that the device is still considered to be interactive while dreaming (since dreams can be interactive) but not when it is dozing or asleep. When this method returns false, the device is dozing or asleep and must be awoken before it will become ready to interact with the user again. The main screen is usually turned off while in this state. Certain features, such as "ambient mode" may cause the main screen to remain on (albeit in a low power state) to display system-provided content while the device dozes. The system will send a screen on or screen off broadcast whenever the interactive state of the device changes. For historical reasons, the names of these broadcasts refer to the power state of the screen but they are actually sent in response to changes in the overall interactive state of the device, as described by this method. Services may use the non-interactive state as a hint to conserve power since the user is not present. Returns True if the device is in an interactive state. See Also ACTION_SCREEN_ON ACTION_SCREEN_OFF
	4:	android.media.AudioManager public void setMode (int mode) Sets the audio mode. The audio mode encompasses audio routing AND the behavior of the telephony layer. Therefore this method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application. In particular, the MODE_IN_CALL mode should only be used by the telephony application when it places a phone call, as it will cause signals from the radio layer to feed the platform mixer. Parameters mode the requested audio mode (MODE_NORMAL, MODE_RINGTONE, MODE_IN_CALL or MODE_IN_COMMUNICATION). Informs the HAL about the current audio state so that it can route the audio appropriately.
	5:	java.util.concurrent.locks.AbstractQueuedLongSynchronizer protected long tryAcquireShared (long arg) Attempts to acquire in shared mode. This method should query if the state of the object permits it to be acquired in the shared mode, and if so to acquire it. This method is always invoked by the thread performing acquire. If this method reports failure, the acquire method may queue the thread, if it is not already queued, until it is signalled by a release from some other thread. The default implementation throws UnsupportedOperationException. Parameters arg the acquire argument. This value is always the one passed to an acquire method, or is the value saved on entry to a condition wait. The value is otherwise uninterpreted and can represent anything you like. Returns a negative value on failure; zero if acquisition in shared mode succeeded but no subsequent shared-mode acquire can succeed; and a positive value if acquisition in shared mode succeeded and subsequent shared-mode acquires might also succeed, in which case a subsequent waiting thread must check availability. (Support for three different return values enables this method to be used in contexts where acquires only sometimes act exclusively.) Upon success, this object has been acquired. Throws IllegalMonitorStateException if acquiring would place this synchronizer in an illegal state. This exception must be thrown in a consistent fashion for synchronization to work correctly. UnsupportedOperationException if shared mode is not supported
	6:	java.util.concurrent.locks.AbstractQueuedSynchronizer protected int tryAcquireShared (int arg) Attempts to acquire in shared mode. This method should query if the state of the object permits it to be acquired in the shared mode, and if so to acquire it. This method is always invoked by the thread performing acquire. If this method reports failure, the acquire method may queue the thread, if it is not already queued, until it is signalled by a release from some other thread. The default implementation throws UnsupportedOperationException. Parameters arg the acquire argument. This value is always the one passed to an acquire method, or is the value saved on entry to a condition wait. The value is otherwise uninterpreted and can represent anything you like. Returns a negative value on failure; zero if acquisition in shared mode succeeded but no subsequent shared-mode acquire can succeed; and a positive value if acquisition in shared mode succeeded and subsequent shared-mode acquires might also succeed, in which case a subsequent waiting thread must check availability. (Support for three different return values enables this method to be used in contexts where acquires only sometimes act exclusively.) Upon success, this object has been acquired. Throws IllegalMonitorStateException if acquiring would place this synchronizer in an illegal state. This exception must be thrown in a consistent fashion for synchronization to work correctly. UnsupportedOperationException if shared mode is not supported
	7:	java.util.concurrent.locks.AbstractQueuedLongSynchronizer protected boolean tryAcquire (long arg) Attempts to acquire in exclusive mode. This method should query if the state of the object permits it to be acquired in the exclusive mode, and if so to acquire it. This method is always invoked by the thread performing acquire. If this method reports failure, the acquire method may queue the thread, if it is not already queued, until it is signalled by a release from some other thread. This can be used to implement method tryLock(). The default implementation throws UnsupportedOperationException. Parameters arg the acquire argument. This value is always the one passed to an acquire method, or is the value saved on entry to a condition wait. The value is otherwise uninterpreted and can represent anything you like. Returns true if successful. Upon success, this object has been acquired. Throws IllegalMonitorStateException if acquiring would place this synchronizer in an illegal state. This exception must be thrown in a consistent fashion for synchronization to work correctly. UnsupportedOperationException if exclusive mode is not supported
	8:	java.util.concurrent.locks.AbstractQueuedSynchronizer protected boolean tryAcquire (int arg) Attempts to acquire in exclusive mode. This method should query if the state of the object permits it to be acquired in the exclusive mode, and if so to acquire it. This method is always invoked by the thread performing acquire. If this method reports failure, the acquire method may queue the thread, if it is not already queued, until it is signalled by a release from some other thread. This can be used to implement method tryLock(). The default implementation throws UnsupportedOperationException. Parameters arg the acquire argument. This value is always the one passed to an acquire method, or is the value saved on entry to a condition wait. The value is otherwise uninterpreted and can represent anything you like. Returns true if successful. Upon success, this object has been acquired. Throws IllegalMonitorStateException if acquiring would place this synchronizer in an illegal state. This exception must be thrown in a consistent fashion for synchronization to work correctly. UnsupportedOperationException if exclusive mode is not supported
	9:	java.util.concurrent.locks.AbstractQueuedLongSynchronizer protected boolean tryRelease (long arg) Attempts to set the state to reflect a release in exclusive mode. This method is always invoked by the thread performing release. The default implementation throws UnsupportedOperationException. Parameters arg the release argument. This value is always the one passed to a release method, or the current state value upon entry to a condition wait. The value is otherwise uninterpreted and can represent anything you like. Returns true if this object is now in a fully released state, so that any waiting threads may attempt to acquire; and false otherwise. Throws IllegalMonitorStateException if releasing would place this synchronizer in an illegal state. This exception must be thrown in a consistent fashion for synchronization to work correctly. UnsupportedOperationException if exclusive mode is not supported
keyPressed
Called when a key is pressed
	0:	android.graphics.Paint public float getTextSkewX () Return the paint's horizontal skew factor for text. The default value is 0. Returns the paint's skew factor in X for drawing text.
	1:	android.graphics.Paint public float getTextScaleX () Return the paint's horizontal scale factor for text. The default value is 1.0. Returns the paint's scale factor in X for drawing/measuring text
	2:	android.view.animation.DecelerateInterpolator public DecelerateInterpolator (float factor) Constructor Parameters factor Degree to which the animation should be eased. Setting factor to 1.0f produces an upside-down y=x^2 parabola. Increasing factor above 1.0f makes exaggerates the ease-out effect (i.e., it starts even faster and ends evens slower)
	3:	android.view.accessibility.CaptioningManager.CaptioningChangeListener public void onFontScaleChanged (float fontScale) Called when the captioning font scaling factor changes. Parameters fontScale the preferred font scaling factor See Also getFontScale()
	4:	java.sql.DatabaseMetaData public abstract ResultSet getVersionColumns (String catalog, String schema, String table) Returns which of a table's columns are automatically updated when any value in a row is updated. The result is laid-out in the following columns: SCOPE - short - not used COLUMN_NAME - String - Column name DATA_TYPE - int - The SQL data type, as defined in java.sql.Types TYPE_NAME - String - The SQL type name, data source dependent COLUMN_SIZE - int - Precision for numeric types BUFFER_LENGTH - int - Length of a column value in bytes DECIMAL_DIGITS - short - Number of digits after the decimal point PSEUDO_COLUMN - short - If this is a pseudo-column (for example, an Oracle ROWID): DatabaseMetaData.bestRowUnknown - don't know whether this is a pseudo column DatabaseMetaData.bestRowNotPseudo - column is not pseudo DatabaseMetaData.bestRowPseudo - column is a pseudo column Parameters catalog a catalog name. null is used to imply no narrowing of the search using catalog name. Otherwise, the name must match a catalog name held in the database, with "" used to retrieve those without a catalog name. schema a schema name pattern. null is used to imply no narrowing of the search using schema names. Otherwise, the name must match a schema name in the database, with "" used to retrieve those without a schema name. table a table name. It must match the name of a table in the database. Returns a ResultSet containing the descriptions, one row for each column, in the format defined above. Throws SQLException a database error occurred.
	5:	java.sql.DatabaseMetaData public abstract ResultSet getIndexInfo (String catalog, String schema, String table, boolean unique, boolean approximate) Returns a list of indices and statistics for a specified table. The list is returned as a ResultSet, with one row for each index or statistic. The list is ordered by NON_UNIQUE, TYPE, INDEX_NAME, and ORDINAL_POSITION. Each row has the following format: TABLE_CAT - String - table catalog name (possibly null) TABLE_SCHEM - String - table schema name (possibly null) TABLE_NAME - String - The table name NON_UNIQUE - boolean - true when index values can be non-unique. Must be false when the TYPE is tableIndexStatistic INDEX_QUALIFIER - String : index catalog name. null when the TYPE is 'tableIndexStatistic' INDEX_NAME - String : index name. null when TYPE is 'tableIndexStatistic' TYPE - short - the index type. One of: DatabaseMetaData.tableIndexStatistic - table statistics returned with Index descriptions DatabaseMetaData.tableIndexClustered - a clustered Index DatabaseMetaData.tableIndexHashed - a hashed Index DatabaseMetaData.tableIndexOther - other style of Index ORDINAL_POSITION - short - column sequence within Index. 0 when TYPE is tableIndexStatistic COLUMN_NAME - String - the column name. null when TYPE is tableIndexStatistic ASC_OR_DESC - String - column sort sequence. null if sequencing not supported or TYPE is tableIndexStatistic; otherwise "A" means sort ascending and "D" means sort descending. CARDINALITY - int - Number of unique values in the Index. If TYPE is tableIndexStatistic, this is number of rows in the table. PAGES - int - Number of pages for current Index. If TYPE is tableIndexStatistic, this is number of pages used for the table. FILTER_CONDITION - String - Filter condition. (possibly null) Parameters catalog a catalog name. null is used to imply no narrowing of the search by catalog name. Otherwise, the name must match a catalog name held in the database, with "" used to retrieve those without a catalog name. schema a schema name. null is used to imply no narrowing of the search by schema name. Otherwise, the name must match a schema name in the database, with "" used to retrieve those without a schema name. table a table name, which must match the name of a table in the database. unique true means only return indices for unique values, false implies that they can be returned even if not unique. approximate true implies that the list can contain approximate or "out of data" values, false implies that all values must be precisely accurate Returns a ResultSet containing the list of indices and statistics for the table, in the format defined above. Throws SQLException a database error occurred.
	6:	android.widget.BaseExpandableListAdapter public void onGroupCollapsed (int groupPosition) Called when a group is collapsed. Parameters groupPosition The group being collapsed.
	7:	android.widget.BaseExpandableListAdapter public void onGroupExpanded (int groupPosition) Called when a group is expanded. Parameters groupPosition The group being expanded.
	8:	android.widget.CursorTreeAdapter public void onGroupCollapsed (int groupPosition) Called when a group is collapsed. Parameters groupPosition The group being collapsed.
	9:	android.widget.ExpandableListAdapter public abstract void onGroupCollapsed (int groupPosition) Called when a group is collapsed. Parameters groupPosition The group being collapsed.
keyRepeated
Called when a key is repeated (held down)
	0:	android.widget.Gallery public boolean onDown (MotionEvent e) Notified when a tap occurs with the down MotionEvent that triggered it. This will be triggered immediately for every down event. All other events should be preceded by this. Parameters e The down motion event.
	1:	android.view.GestureDetector.SimpleOnGestureListener public boolean onDown (MotionEvent e) Notified when a tap occurs with the down MotionEvent that triggered it. This will be triggered immediately for every down event. All other events should be preceded by this. Parameters e The down motion event.
	2:	android.widget.AutoCompleteTextView public void setThreshold (int threshold) Specifies the minimum number of characters the user has to type in the edit box before the drop down list is shown. When threshold is less than or equals 0, a threshold of 1 is applied. Related XML Attributes android:completionThreshold Parameters threshold the number of characters to type before the drop down is shown See Also getThreshold()
	3:	android.view.animation.DecelerateInterpolator public DecelerateInterpolator (float factor) Constructor Parameters factor Degree to which the animation should be eased. Setting factor to 1.0f produces an upside-down y=x^2 parabola. Increasing factor above 1.0f makes exaggerates the ease-out effect (i.e., it starts even faster and ends evens slower)
	4:	android.view.GestureDetector.OnGestureListener public abstract boolean onDown (MotionEvent e) Notified when a tap occurs with the down MotionEvent that triggered it. This will be triggered immediately for every down event. All other events should be preceded by this. Parameters e The down motion event.
	5:	android.widget.Gallery public void onLongPress (MotionEvent e) Notified when a long press occurs with the initial on down MotionEvent that trigged it. Parameters e The initial on down motion event that started the longpress.
	6:	android.view.GestureDetector.OnGestureListener public abstract void onLongPress (MotionEvent e) Notified when a long press occurs with the initial on down MotionEvent that trigged it. Parameters e The initial on down motion event that started the longpress.
	7:	android.view.GestureDetector.SimpleOnGestureListener public void onLongPress (MotionEvent e) Notified when a long press occurs with the initial on down MotionEvent that trigged it. Parameters e The initial on down motion event that started the longpress.
	8:	android.inputmethodservice.KeyboardView.OnKeyboardActionListener public abstract void swipeDown () Called when the user quickly moves the finger from up to down.
	9:	android.inputmethodservice.KeyboardView.OnKeyboardActionListener public abstract void swipeUp () Called when the user quickly moves the finger from down to up.
keyReleased
Called when a key is released
	0:	android.graphics.Paint public float getTextSkewX () Return the paint's horizontal skew factor for text. The default value is 0. Returns the paint's skew factor in X for drawing text.
	1:	android.graphics.Paint public float getTextScaleX () Return the paint's horizontal scale factor for text. The default value is 1.0. Returns the paint's scale factor in X for drawing/measuring text
	2:	android.view.animation.DecelerateInterpolator public DecelerateInterpolator (float factor) Constructor Parameters factor Degree to which the animation should be eased. Setting factor to 1.0f produces an upside-down y=x^2 parabola. Increasing factor above 1.0f makes exaggerates the ease-out effect (i.e., it starts even faster and ends evens slower)
	3:	android.view.accessibility.CaptioningManager.CaptioningChangeListener public void onFontScaleChanged (float fontScale) Called when the captioning font scaling factor changes. Parameters fontScale the preferred font scaling factor See Also getFontScale()
	4:	java.sql.DatabaseMetaData public abstract ResultSet getVersionColumns (String catalog, String schema, String table) Returns which of a table's columns are automatically updated when any value in a row is updated. The result is laid-out in the following columns: SCOPE - short - not used COLUMN_NAME - String - Column name DATA_TYPE - int - The SQL data type, as defined in java.sql.Types TYPE_NAME - String - The SQL type name, data source dependent COLUMN_SIZE - int - Precision for numeric types BUFFER_LENGTH - int - Length of a column value in bytes DECIMAL_DIGITS - short - Number of digits after the decimal point PSEUDO_COLUMN - short - If this is a pseudo-column (for example, an Oracle ROWID): DatabaseMetaData.bestRowUnknown - don't know whether this is a pseudo column DatabaseMetaData.bestRowNotPseudo - column is not pseudo DatabaseMetaData.bestRowPseudo - column is a pseudo column Parameters catalog a catalog name. null is used to imply no narrowing of the search using catalog name. Otherwise, the name must match a catalog name held in the database, with "" used to retrieve those without a catalog name. schema a schema name pattern. null is used to imply no narrowing of the search using schema names. Otherwise, the name must match a schema name in the database, with "" used to retrieve those without a schema name. table a table name. It must match the name of a table in the database. Returns a ResultSet containing the descriptions, one row for each column, in the format defined above. Throws SQLException a database error occurred.
	5:	java.sql.DatabaseMetaData public abstract ResultSet getIndexInfo (String catalog, String schema, String table, boolean unique, boolean approximate) Returns a list of indices and statistics for a specified table. The list is returned as a ResultSet, with one row for each index or statistic. The list is ordered by NON_UNIQUE, TYPE, INDEX_NAME, and ORDINAL_POSITION. Each row has the following format: TABLE_CAT - String - table catalog name (possibly null) TABLE_SCHEM - String - table schema name (possibly null) TABLE_NAME - String - The table name NON_UNIQUE - boolean - true when index values can be non-unique. Must be false when the TYPE is tableIndexStatistic INDEX_QUALIFIER - String : index catalog name. null when the TYPE is 'tableIndexStatistic' INDEX_NAME - String : index name. null when TYPE is 'tableIndexStatistic' TYPE - short - the index type. One of: DatabaseMetaData.tableIndexStatistic - table statistics returned with Index descriptions DatabaseMetaData.tableIndexClustered - a clustered Index DatabaseMetaData.tableIndexHashed - a hashed Index DatabaseMetaData.tableIndexOther - other style of Index ORDINAL_POSITION - short - column sequence within Index. 0 when TYPE is tableIndexStatistic COLUMN_NAME - String - the column name. null when TYPE is tableIndexStatistic ASC_OR_DESC - String - column sort sequence. null if sequencing not supported or TYPE is tableIndexStatistic; otherwise "A" means sort ascending and "D" means sort descending. CARDINALITY - int - Number of unique values in the Index. If TYPE is tableIndexStatistic, this is number of rows in the table. PAGES - int - Number of pages for current Index. If TYPE is tableIndexStatistic, this is number of pages used for the table. FILTER_CONDITION - String - Filter condition. (possibly null) Parameters catalog a catalog name. null is used to imply no narrowing of the search by catalog name. Otherwise, the name must match a catalog name held in the database, with "" used to retrieve those without a catalog name. schema a schema name. null is used to imply no narrowing of the search by schema name. Otherwise, the name must match a schema name in the database, with "" used to retrieve those without a schema name. table a table name, which must match the name of a table in the database. unique true means only return indices for unique values, false implies that they can be returned even if not unique. approximate true implies that the list can contain approximate or "out of data" values, false implies that all values must be precisely accurate Returns a ResultSet containing the list of indices and statistics for the table, in the format defined above. Throws SQLException a database error occurred.
	6:	android.widget.BaseExpandableListAdapter public void onGroupCollapsed (int groupPosition) Called when a group is collapsed. Parameters groupPosition The group being collapsed.
	7:	android.widget.BaseExpandableListAdapter public void onGroupExpanded (int groupPosition) Called when a group is expanded. Parameters groupPosition The group being expanded.
	8:	android.widget.CursorTreeAdapter public void onGroupCollapsed (int groupPosition) Called when a group is collapsed. Parameters groupPosition The group being collapsed.
	9:	android.widget.ExpandableListAdapter public abstract void onGroupCollapsed (int groupPosition) Called when a group is collapsed. Parameters groupPosition The group being collapsed.
pointerPressed
Called when the pointer is pressed
	0:	android.widget.PopupWindow public void setSplitTouchEnabled (boolean enabled) Allows the popup window to split touches across other windows that also support split touch. When this flag is false, the first pointer that goes down determines the window to which all subsequent touches go until all pointers go up. When this flag is true, each pointer (not necessarily the first) that goes down determines the window to which all subsequent touches of that pointer will go until that pointer goes up thereby enabling touches with multiple pointers to be split across multiple windows. Parameters enabled true if the split touches should be enabled, false otherwise See Also isSplitTouchEnabled()
	1:	android.view.MotionEvent.PointerProperties public MotionEvent.PointerProperties () Creates a pointer properties object with an invalid pointer id.
	2:	android.inputmethodservice.KeyboardView public boolean onHoverEvent (MotionEvent event) Implement this method to handle hover events. This method is called whenever a pointer is hovering into, over, or out of the bounds of a view and the view is not currently being touched. Hover events are represented as pointer events with action ACTION_HOVER_ENTER, ACTION_HOVER_MOVE, or ACTION_HOVER_EXIT. The view receives a hover event with action ACTION_HOVER_ENTER when the pointer enters the bounds of the view. The view receives a hover event with action ACTION_HOVER_MOVE when the pointer has already entered the bounds of the view and has moved. The view receives a hover event with action ACTION_HOVER_EXIT when the pointer has exited the bounds of the view or when the pointer is about to go down due to a button click, tap, or similar user action that causes the view to be touched. The view should implement this method to return true to indicate that it is handling the hover event, such as by changing its drawable state. The default implementation calls setHovered(boolean) to update the hovered state of the view when a hover enter or hover exit event is received, if the view is enabled and is clickable. The default implementation also sends hover accessibility events. Parameters event The motion event that describes the hover. Returns True if the view handled the hover event.
	3:	android.view.MotionEvent.PointerProperties public MotionEvent.PointerProperties (MotionEvent.PointerProperties other) Creates a pointer properties object as a copy of the contents of another pointer properties object.
	4:	android.view.MotionEvent public final void getPointerProperties (int pointerIndex, MotionEvent.PointerProperties outPointerProperties) Populates a MotionEvent.PointerProperties object with pointer properties for the specified pointer index. Parameters pointerIndex Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to getPointerCount()-1. outPointerProperties The pointer properties object to populate. See Also MotionEvent.PointerProperties
	5:	android.view.MotionEvent.PointerCoords public MotionEvent.PointerCoords (MotionEvent.PointerCoords other) Creates a pointer coords object as a copy of the contents of another pointer coords object. Parameters other The pointer coords object to copy.
	6:	android.view.MotionEvent public final int findPointerIndex (int pointerId) Given a pointer identifier, find the index of its data in the event. Parameters pointerId The identifier of the pointer to be found. Returns Returns either the index of the pointer (for use with getX(int) et al.), or -1 if there is no data available for that pointer identifier.
	7:	android.view.MotionEvent.PointerProperties public void clear () Resets the pointer properties to their initial values.
	8:	android.view.MotionEvent public final float getOrientation () getOrientation(int) for the first pointer index (may be an arbitrary pointer identifier). See Also AXIS_ORIENTATION
	9:	android.view.MotionEvent public final float getPressure () getPressure(int) for the first pointer index (may be an arbitrary pointer identifier). See Also AXIS_PRESSURE
pointerReleased
Called when the pointer is released
	0:	android.widget.PopupWindow public void setSplitTouchEnabled (boolean enabled) Allows the popup window to split touches across other windows that also support split touch. When this flag is false, the first pointer that goes down determines the window to which all subsequent touches go until all pointers go up. When this flag is true, each pointer (not necessarily the first) that goes down determines the window to which all subsequent touches of that pointer will go until that pointer goes up thereby enabling touches with multiple pointers to be split across multiple windows. Parameters enabled true if the split touches should be enabled, false otherwise See Also isSplitTouchEnabled()
	1:	android.view.MotionEvent.PointerProperties public MotionEvent.PointerProperties () Creates a pointer properties object with an invalid pointer id.
	2:	android.inputmethodservice.KeyboardView public boolean onHoverEvent (MotionEvent event) Implement this method to handle hover events. This method is called whenever a pointer is hovering into, over, or out of the bounds of a view and the view is not currently being touched. Hover events are represented as pointer events with action ACTION_HOVER_ENTER, ACTION_HOVER_MOVE, or ACTION_HOVER_EXIT. The view receives a hover event with action ACTION_HOVER_ENTER when the pointer enters the bounds of the view. The view receives a hover event with action ACTION_HOVER_MOVE when the pointer has already entered the bounds of the view and has moved. The view receives a hover event with action ACTION_HOVER_EXIT when the pointer has exited the bounds of the view or when the pointer is about to go down due to a button click, tap, or similar user action that causes the view to be touched. The view should implement this method to return true to indicate that it is handling the hover event, such as by changing its drawable state. The default implementation calls setHovered(boolean) to update the hovered state of the view when a hover enter or hover exit event is received, if the view is enabled and is clickable. The default implementation also sends hover accessibility events. Parameters event The motion event that describes the hover. Returns True if the view handled the hover event.
	3:	android.view.MotionEvent.PointerProperties public MotionEvent.PointerProperties (MotionEvent.PointerProperties other) Creates a pointer properties object as a copy of the contents of another pointer properties object.
	4:	android.view.MotionEvent public final void getPointerProperties (int pointerIndex, MotionEvent.PointerProperties outPointerProperties) Populates a MotionEvent.PointerProperties object with pointer properties for the specified pointer index. Parameters pointerIndex Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to getPointerCount()-1. outPointerProperties The pointer properties object to populate. See Also MotionEvent.PointerProperties
	5:	android.view.MotionEvent.PointerCoords public MotionEvent.PointerCoords (MotionEvent.PointerCoords other) Creates a pointer coords object as a copy of the contents of another pointer coords object. Parameters other The pointer coords object to copy.
	6:	android.view.MotionEvent public final int findPointerIndex (int pointerId) Given a pointer identifier, find the index of its data in the event. Parameters pointerId The identifier of the pointer to be found. Returns Returns either the index of the pointer (for use with getX(int) et al.), or -1 if there is no data available for that pointer identifier.
	7:	android.view.MotionEvent.PointerProperties public void clear () Resets the pointer properties to their initial values.
	8:	android.view.MotionEvent public final float getOrientation () getOrientation(int) for the first pointer index (may be an arbitrary pointer identifier). See Also AXIS_ORIENTATION
	9:	android.view.MotionEvent public final float getPressure () getPressure(int) for the first pointer index (may be an arbitrary pointer identifier). See Also AXIS_PRESSURE
pointerDragged
Called when the pointer is dragged
	0:	android.widget.PopupWindow public void setSplitTouchEnabled (boolean enabled) Allows the popup window to split touches across other windows that also support split touch. When this flag is false, the first pointer that goes down determines the window to which all subsequent touches go until all pointers go up. When this flag is true, each pointer (not necessarily the first) that goes down determines the window to which all subsequent touches of that pointer will go until that pointer goes up thereby enabling touches with multiple pointers to be split across multiple windows. Parameters enabled true if the split touches should be enabled, false otherwise See Also isSplitTouchEnabled()
	1:	android.view.MotionEvent.PointerProperties public MotionEvent.PointerProperties () Creates a pointer properties object with an invalid pointer id.
	2:	android.inputmethodservice.KeyboardView public boolean onHoverEvent (MotionEvent event) Implement this method to handle hover events. This method is called whenever a pointer is hovering into, over, or out of the bounds of a view and the view is not currently being touched. Hover events are represented as pointer events with action ACTION_HOVER_ENTER, ACTION_HOVER_MOVE, or ACTION_HOVER_EXIT. The view receives a hover event with action ACTION_HOVER_ENTER when the pointer enters the bounds of the view. The view receives a hover event with action ACTION_HOVER_MOVE when the pointer has already entered the bounds of the view and has moved. The view receives a hover event with action ACTION_HOVER_EXIT when the pointer has exited the bounds of the view or when the pointer is about to go down due to a button click, tap, or similar user action that causes the view to be touched. The view should implement this method to return true to indicate that it is handling the hover event, such as by changing its drawable state. The default implementation calls setHovered(boolean) to update the hovered state of the view when a hover enter or hover exit event is received, if the view is enabled and is clickable. The default implementation also sends hover accessibility events. Parameters event The motion event that describes the hover. Returns True if the view handled the hover event.
	3:	android.view.MotionEvent.PointerProperties public MotionEvent.PointerProperties (MotionEvent.PointerProperties other) Creates a pointer properties object as a copy of the contents of another pointer properties object.
	4:	android.view.MotionEvent public final void getPointerProperties (int pointerIndex, MotionEvent.PointerProperties outPointerProperties) Populates a MotionEvent.PointerProperties object with pointer properties for the specified pointer index. Parameters pointerIndex Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to getPointerCount()-1. outPointerProperties The pointer properties object to populate. See Also MotionEvent.PointerProperties
	5:	android.view.MotionEvent.PointerCoords public MotionEvent.PointerCoords (MotionEvent.PointerCoords other) Creates a pointer coords object as a copy of the contents of another pointer coords object. Parameters other The pointer coords object to copy.
	6:	android.view.MotionEvent public final int findPointerIndex (int pointerId) Given a pointer identifier, find the index of its data in the event. Parameters pointerId The identifier of the pointer to be found. Returns Returns either the index of the pointer (for use with getX(int) et al.), or -1 if there is no data available for that pointer identifier.
	7:	android.view.MotionEvent.PointerProperties public void clear () Resets the pointer properties to their initial values.
	8:	android.view.MotionEvent public final float getOrientation () getOrientation(int) for the first pointer index (may be an arbitrary pointer identifier). See Also AXIS_ORIENTATION
	9:	android.view.MotionEvent public final float getPressure () getPressure(int) for the first pointer index (may be an arbitrary pointer identifier). See Also AXIS_PRESSURE
repaint
Requests a repaint for the specified region of the Canvas
	0:	org.apache.http.impl.auth.RFC2617Scheme public String getRealm () Returns authentication realm. The realm may not be null. Returns the authentication realm
	1:	org.apache.http.auth.AuthScheme public abstract String getRealm () Returns authentication realm. If the concept of an authentication realm is not applicable to the given authentication scheme, returns null. Returns the authentication realm
	2:	org.apache.http.auth.AuthScope public String getRealm () Returns the realm name
	3:	android.location.Address public String getSubLocality () Returns the sub-locality of the address, or null if it is unknown. For example, this may correspond to the neighborhood of the locality.
	4:	android.graphics.Region public Region (Region region) Return a copy of the specified region
	5:	android.graphics.Region public boolean set (Region region) Set the region to the specified region.
	6:	android.graphics.Region public boolean setPath (Path path, Region clip) Set the region to the area described by the path and clip. Return true if the resulting region is non-empty. This produces a region that is identical to the pixels that would be drawn by the path (with no antialiasing).
	7:	android.view.MenuItem public abstract int getGroupId () Return the group identifier that this menu item is part of. The group identifier can not be changed after the menu is created. Returns The menu item's group identifier.
	8:	android.graphics.Region public Region () Create an empty region
	9:	org.apache.http.auth.AuthScope public AuthScope (String host, int port, String realm) Creates a new credentials scope for the given host, port, realm, and any authentication scheme. Parameters host the host the credentials apply to. May be set to null if credenticals are applicable to any host. port the port the credentials apply to. May be set to negative value if credenticals are applicable to any port. realm the realm the credentials apply to. May be set to null if credenticals are applicable to any realm.
repaint
Requests a repaint for the entire Canvas
	0:	android.widget.AbsListView protected int computeVerticalScrollRange () Compute the vertical range that the vertical scrollbar represents. The range is expressed in arbitrary units that must be the same as the units used by computeVerticalScrollExtent() and computeVerticalScrollOffset(). Returns the total vertical range represented by the vertical scrollbar The default range is the drawing height of this view.
	1:	android.widget.Gallery protected int computeHorizontalScrollRange () Compute the horizontal range that the horizontal scrollbar represents. The range is expressed in arbitrary units that must be the same as the units used by computeHorizontalScrollExtent() and computeHorizontalScrollOffset(). The default range is the drawing width of this view. Returns the total horizontal range represented by the horizontal scrollbar
	2:	android.widget.GridView protected int computeVerticalScrollRange () Compute the vertical range that the vertical scrollbar represents. The range is expressed in arbitrary units that must be the same as the units used by computeVerticalScrollExtent() and computeVerticalScrollOffset(). Returns the total vertical range represented by the vertical scrollbar The default range is the drawing height of this view.
	3:	android.widget.NumberPicker protected int computeVerticalScrollRange () Compute the vertical range that the vertical scrollbar represents. The range is expressed in arbitrary units that must be the same as the units used by computeVerticalScrollExtent() and computeVerticalScrollOffset(). Returns the total vertical range represented by the vertical scrollbar The default range is the drawing height of this view.
	4:	android.accounts.AuthenticatorDescription public AuthenticatorDescription (String type, String packageName, int labelId, int iconId, int smallIconId, int prefId, boolean customTokens) A constructor for a full AuthenticatorDescription
	5:	android.media.MediaPlayer public void deselectTrack (int index) Deselect a track. Currently, the track must be a timed text track and no audio or video tracks can be deselected. If the timed text track identified by index has not been selected before, it throws an exception. Parameters index the index of the track to be deselected. The valid range of the index is 0..total number of tracks - 1. The total number of tracks as well as the type of each individual track can be found by calling getTrackInfo() method. Throws IllegalStateException if called in an invalid state. See Also getTrackInfo()
	6:	android.widget.HeterogeneousExpandableList public abstract int getChildTypeCount () Returns the number of types of child Views that will be created by getChildView(int, int, boolean, View, ViewGroup) . Each type represents a set of views that can be converted in getChildView(int, int, boolean, View, ViewGroup) , for any group. If the adapter always returns the same type of View for all child items, this method should return 1. This method will only be called when the adapter is set on the AdapterView. Returns The total number of types of child Views that will be created by this adapter. See Also getGroupTypeCount() getChildType(int, int)
	7:	android.inputmethodservice.Keyboard public int getHeight () Returns the total height of the keyboard Returns the total height of the keyboard
	8:	android.view.KeyCharacterMap public int getKeyboardType () Gets the keyboard type. Returns NUMERIC, PREDICTIVE, ALPHA, FULL or SPECIAL_FUNCTION. Different keyboard types have different semantics. Refer to the documentation associated with the keyboard type constants for details. Returns The keyboard type.
	9:	android.widget.EdgeEffect public boolean draw (Canvas canvas) Draw into the provided canvas. Assumes that the canvas has been rotated accordingly and the size has been set. The effect will be drawn the full width of X=0 to X=width, beginning from Y=0 and extending to some factor < 1.f of height. Parameters canvas Canvas to draw into Returns true if drawing should continue beyond this frame to continue the animation
serviceRepaints
Forces any pending repaint requests to be serviced immediately
	0:	android.graphics.Rect public boolean contains (int left, int top, int right, int bottom) Returns true iff the 4 specified sides of a rectangle are inside or equal to this rectangle. i.e. is this rectangle a superset of the specified rectangle. An empty rectangle never contains another rectangle. Parameters left The left side of the rectangle being tested for containment top The top of the rectangle being tested for containment right The right side of the rectangle being tested for containment bottom The bottom of the rectangle being tested for containment Returns true iff the the 4 specified sides of a rectangle are inside or equal to this rectangle
	1:	android.graphics.RectF public boolean contains (float left, float top, float right, float bottom) Returns true iff the 4 specified sides of a rectangle are inside or equal to this rectangle. i.e. is this rectangle a superset of the specified rectangle. An empty rectangle never contains another rectangle. Parameters left The left side of the rectangle being tested for containment top The top of the rectangle being tested for containment right The right side of the rectangle being tested for containment bottom The bottom of the rectangle being tested for containment Returns true iff the the 4 specified sides of a rectangle are inside or equal to this rectangle
	2:	android.support.v4.app.NotificationCompat.Builder public NotificationCompat.Builder setLights (int argb, int onMs, int offMs) Set the argb value that you would like the LED on the device to blnk, as well as the rate. The rate is specified in terms of the number of milliseconds to be on and then the number of milliseconds to be off.
	3:	android.app.backup.BackupAgent public abstract void onRestore (BackupDataInput data, int appVersionCode, ParcelFileDescriptor newState) The application is being restored from backup and should replace any existing data with the contents of the backup. The backup data is provided through the data parameter. Once the restore is finished, the application should write a representation of the final state to the newState file descriptor. The application is responsible for properly erasing its old data and replacing it with the data supplied to this method. No "clear user data" operation will be performed automatically by the operating system. The exception to this is in the case of a failed restore attempt: if onRestore() throws an exception, the OS will assume that the application's data may now be in an incoherent state, and will clear it before proceeding. Parameters data A structured wrapper around an open, read-only file descriptor pointing to a full snapshot of the application's data. The application should consume every entity represented in this data stream. appVersionCode The value of the android:versionCode manifest attribute, from the application that backed up this particular data set. This makes it possible for an application's agent to distinguish among any possible older data versions when asked to perform the restore operation. newState An open, read/write ParcelFileDescriptor pointing to an empty file. The application should record the final backup state here after restoring its data from the data stream. When a full-backup dataset is being restored, this will be null. Throws IOException
	4:	android.graphics.Canvas public void drawLines (float[] pts, int offset, int count, Paint paint) Draw a series of lines. Each line is taken from 4 consecutive values in the pts array. Thus to draw 1 line, the array must contain at least 4 values. This is logically the same as drawing the array as follows: drawLine(pts[0], pts[1], pts[2], pts[3]) followed by drawLine(pts[4], pts[5], pts[6], pts[7]) and so on. Parameters pts Array of points to draw [x0 y0 x1 y1 x2 y2 ...] offset Number of values in the array to skip before drawing. count The number of values in the array to process, after skipping "offset" of them. Since each line uses 4 values, the number of "lines" that are drawn is really (count >> 2). paint The paint used to draw the points
	5:	android.support.v7.media.MediaRouter public void addCallback (MediaRouteSelector selector, MediaRouter.Callback callback, int flags) Registers a callback to discover routes that match the selector and to receive events when they change. The selector describes the kinds of routes that the application wants to discover. For example, if the application wants to use live audio routes then it should include the live audio media control intent category in its selector when it adds a callback to the media router. The selector may include any number of categories. If the callback has already been registered, then the selector is added to the set of selectors being monitored by the callback. By default, the callback will only be invoked for events that affect routes that match the specified selector. Event filtering may be disabled by specifying the CALLBACK_FLAG_UNFILTERED_EVENTS flag when the callback is registered. Example public class MyActivity extends Activity { private MediaRouter mRouter; private MediaRouter.Callback mCallback; private MediaRouteSelector mSelector; protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); mRouter = Mediarouter.getInstance(this); mCallback = new MyCallback(); mSelector = new MediaRouteSelector.Builder() .addControlCategory(MediaControlIntent.CATEGORY_LIVE_AUDIO) .addControlCategory(MediaControlIntent.CATEGORY_REMOTE_PLAYBACK) .build(); } // Add the callback on start to tell the media router what kinds of routes // the application is interested in so that it can try to discover suitable ones. public void onStart() { super.onStart(); mediaRouter.addCallback(mSelector, mCallback, MediaRouter.CALLBACK_FLAG_REQUEST_DISCOVERY); MediaRouter.RouteInfo route = mediaRouter.updateSelectedRoute(mSelector); // do something with the route... } // Remove the selector on stop to tell the media router that it no longer // needs to invest effort trying to discover routes of these kinds for now. public void onStop() { super.onStop(); mediaRouter.removeCallback(mCallback); } private final class MyCallback extends MediaRouter.Callback { // Implement callback methods as needed. } } Parameters selector A route selector that indicates the kinds of routes that the callback would like to discover. callback The callback to add. flags Flags to control the behavior of the callback. May be zero or a combination of CALLBACK_FLAG_PERFORM_ACTIVE_SCAN and CALLBACK_FLAG_UNFILTERED_EVENTS. See Also removeCallback(MediaRouter.Callback)
	6:	android.inputmethodservice.KeyboardView public void invalidateKey (int keyIndex) Invalidates a key so that it will be redrawn on the next repaint. Use this method if only one key is changing it's content. Any changes that affect the position or size of the key may not be honored. Parameters keyIndex the index of the key in the attached Keyboard. See Also invalidateAllKeys()
	7:	android.app.backup.RestoreObserver public void onUpdate (int nowBeingRestored, String currentPackage) An indication of which package is being restored currently, out of the total number provided in the restoreStarting(int) callback. This method is not guaranteed to be called: if the transport is unable to obtain data for one or more of the requested packages, no onUpdate() call will occur for those packages. Parameters nowBeingRestored The index, between 1 and the numPackages parameter to the restoreStarting(int) callback, of the package now being restored. This may be non-monotonic; it is intended purely as a rough indication of the backup manager's progress through the overall restore process. currentPackage The name of the package now being restored.
	8:	android.content.ContentResolver public final ContentProviderClient acquireUnstableContentProviderClient (Uri uri) Like acquireContentProviderClient(Uri), but for use when you do not trust the stability of the target content provider. This turns off the mechanism in the platform clean up processes that are dependent on a content provider if that content provider's process goes away. Normally you can safely assume that once you have acquired a provider, you can freely use it as needed and it won't disappear, even if your process is in the background. If using this method, you need to take care to deal with any failures when communicating with the provider, and be sure to close it so that it can be re-opened later. In particular, catching a DeadObjectException from the calls there will let you know that the content provider has gone away; at that point the current ContentProviderClient object is invalid, and you should release it. You can acquire a new one if you would like to try to restart the provider and perform new operations on it.
	9:	android.content.ContentResolver public final ContentProviderClient acquireUnstableContentProviderClient (String name) Like acquireContentProviderClient(String), but for use when you do not trust the stability of the target content provider. This turns off the mechanism in the platform clean up processes that are dependent on a content provider if that content provider's process goes away. Normally you can safely assume that once you have acquired a provider, you can freely use it as needed and it won't disappear, even if your process is in the background. If using this method, you need to take care to deal with any failures when communicating with the provider, and be sure to close it so that it can be re-opened later. In particular, catching a DeadObjectException from the calls there will let you know that the content provider has gone away; at that point the current ContentProviderClient object is invalid, and you should release it. You can acquire a new one if you would like to try to restart the provider and perform new operations on it.
showNotify
The implementation calls showNotify() immediately prior to this Canvas being made visible on the display
	0:	android.view.inputmethod.InputMethodSubtype public boolean isAuxiliary () Returns true if this subtype is auxiliary, false otherwise. An auxiliary subtype will not be shown in the list of enabled IMEs for choosing the current IME in the Settings even when this subtype is enabled. Please note that this subtype will still be shown in the list of IMEs in the IME switcher to allow the user to tentatively switch to this subtype while an IME is shown. The framework will never switch the current IME to this subtype by switchToLastInputMethod(IBinder). The intent of having this flag is to allow for IMEs that are invoked in a one-shot way as auxiliary input mode, and return to the previous IME once it is finished (e.g. voice input).
	1:	java.util.concurrent.Executors public static ExecutorService newSingleThreadExecutor () Creates an Executor that uses a single worker thread operating off an unbounded queue. (Note however that if this single thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks.) Tasks are guaranteed to execute sequentially, and no more than one task will be active at any given time. Unlike the otherwise equivalent newFixedThreadPool(1) the returned executor is guaranteed not to be reconfigurable to use additional threads. Returns the newly created single-threaded Executor
	2:	android.app.AlarmManager public void setInexactRepeating (int type, long triggerAtMillis, long intervalMillis, PendingIntent operation) Schedule a repeating alarm that has inexact trigger time requirements; for example, an alarm that repeats every hour, but not necessarily at the top of every hour. These alarms are more power-efficient than the strict recurrences traditionally supplied by setRepeating(int, long, long, PendingIntent), since the system can adjust alarms' delivery times to cause them to fire simultaneously, avoiding waking the device from sleep more than necessary. Your alarm's first trigger will not be before the requested time, but it might not occur for almost a full interval after that time. In addition, while the overall period of the repeating alarm will be as requested, the time between any two successive firings of the alarm may vary. If your application demands very low jitter, use one-shot alarms with an appropriate window instead; see setWindow(int, long, long, PendingIntent) and setExact(int, long, PendingIntent). As of API 19, all repeating alarms are inexact. Because this method has been available since API 3, your application can safely call it and be assured that it will get similar behavior on both current and older versions of Android. Parameters type One of ELAPSED_REALTIME, ELAPSED_REALTIME_WAKEUP, RTC, or RTC_WAKEUP. triggerAtMillis time in milliseconds that the alarm should first go off, using the appropriate clock (depending on the alarm type). This is inexact: the alarm will not fire before this time, but there may be a delay of almost an entire alarm interval before the first invocation of the alarm. intervalMillis interval in milliseconds between subsequent repeats of the alarm. Prior to API 19, if this is one of INTERVAL_FIFTEEN_MINUTES, INTERVAL_HALF_HOUR, INTERVAL_HOUR, INTERVAL_HALF_DAY, or INTERVAL_DAY then the alarm will be phase-aligned with other alarms to reduce the number of wakeups. Otherwise, the alarm will be set as though the application had called setRepeating(int, long, long, PendingIntent). As of API 19, all repeating alarms will be inexact and subject to batching with other alarms regardless of their stated repeat interval. operation Action to perform when the alarm goes off; typically comes from IntentSender.getBroadcast(). See Also Handler set(int, long, PendingIntent) cancel(PendingIntent) sendBroadcast(Intent) registerReceiver(BroadcastReceiver, IntentFilter) filterEquals(Intent) ELAPSED_REALTIME ELAPSED_REALTIME_WAKEUP RTC RTC_WAKEUP INTERVAL_FIFTEEN_MINUTES INTERVAL_HALF_HOUR INTERVAL_HOUR INTERVAL_HALF_DAY INTERVAL_DAY
	3:	java.util.concurrent.Executors public static ExecutorService newFixedThreadPool (int nThreads) Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue. At any point, at most nThreads threads will be active processing tasks. If additional tasks are submitted when all threads are active, they will wait in the queue until a thread is available. If any thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks. The threads in the pool will exist until it is explicitly shutdown. Parameters nThreads the number of threads in the pool Returns the newly created thread pool Throws IllegalArgumentException if nThreads <= 0
	4:	java.util.concurrent.ScheduledExecutorService public abstract ScheduledFuture<?> schedule (Runnable command, long delay, TimeUnit unit) Creates and executes a one-shot action that becomes enabled after the given delay. Parameters command the task to execute delay the time from now to delay execution unit the time unit of the delay parameter Returns a ScheduledFuture representing pending completion of the task and whose get() method will return null upon completion Throws RejectedExecutionException if the task cannot be scheduled for execution NullPointerException if command is null
	5:	java.util.concurrent.ScheduledThreadPoolExecutor public ScheduledFuture<?> schedule (Runnable command, long delay, TimeUnit unit) Creates and executes a one-shot action that becomes enabled after the given delay. Parameters command the task to execute delay the time from now to delay execution unit the time unit of the delay parameter Returns a ScheduledFuture representing pending completion of the task and whose get() method will return null upon completion Throws RejectedExecutionException NullPointerException
	6:	android.app.FragmentManager public abstract FragmentTransaction beginTransaction () Start a series of edit operations on the Fragments associated with this FragmentManager. Note: A fragment transaction can only be created/committed prior to an activity saving its state. If you try to commit a transaction after Activity.onSaveInstanceState() (and prior to a following Activity.onStart or Activity.onResume(), you will get an error. This is because the framework takes care of saving your current fragments in the state, and if changes are made after the state is saved then they will be lost.
	7:	android.support.v4.app.FragmentManager public abstract FragmentTransaction beginTransaction () Start a series of edit operations on the Fragments associated with this FragmentManager. Note: A fragment transaction can only be created/committed prior to an activity saving its state. If you try to commit a transaction after FragmentActivity.onSaveInstanceState() (and prior to a following FragmentActivity.onStart or FragmentActivity.onResume(), you will get an error. This is because the framework takes care of saving your current fragments in the state, and if changes are made after the state is saved then they will be lost.
	8:	android.text.format.DateUtils public static final CharSequence formatSameDayTime (long then, long now, int dateStyle, int timeStyle) Format a date / time such that if the then is on the same day as now, it shows just the time and if it's a different day, it shows just the date. The parameters dateFormat and timeFormat should each be one of DEFAULT, FULL, LONG, MEDIUM or SHORT Parameters then the date to format now the base time dateStyle how to format the date portion. timeStyle how to format the time portion.
	9:	android.support.v4.widget.ContentLoadingProgressBar public void show () Show the progress view after waiting for a minimum delay. If during that time, hide() is called, the view is never made visible.
hideNotify
The implementation calls hideNotify() shortly after the Canvas has been removed from the display
	0:	java.util.logging.LogManager public void readConfiguration (InputStream ins) Re-initialize the properties and configuration from the given InputStream Notice : No PropertyChangeEvent are fired. Parameters ins the input stream Throws IOException if any IO related problems happened.
	1:	android.media.AudioTrack public int write (short[] audioData, int offsetInShorts, int sizeInShorts) Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode). In streaming mode, will block until all data has been written to the audio sink. In static buffer mode, copies the data to the buffer starting at offset 0. Note that the actual playback of this data might occur after this function returns. This function is thread safe with respect to stop() calls, in which case all of the specified data might not be written to the audio sink. Parameters audioData the array that holds the data to play. offsetInShorts the offset expressed in shorts in audioData where the data to play starts. sizeInShorts the number of shorts to read in audioData after the offset. Returns the number of shorts that were written or ERROR_INVALID_OPERATION if the object wasn't properly initialized, or ERROR_BAD_VALUE if the parameters don't resolve to valid data and indexes.
	2:	java.io.RandomAccessFile public final short readShort () Reads a big-endian 16-bit short from the current position in this file. Blocks until two bytes have been read, the end of the file is reached or an exception is thrown. Returns the next short value from this file. Throws EOFException if the end of this file is detected. IOException if this file is closed or another I/O error occurs. See Also writeShort(int)
	3:	java.io.ObjectInputStream public short readShort () Reads a short (16 bit) from the source stream. Returns the short value read from the source stream. Throws IOException if an error occurs while reading from the source stream.
	4:	android.text.format.DateUtils public static final CharSequence formatSameDayTime (long then, long now, int dateStyle, int timeStyle) Format a date / time such that if the then is on the same day as now, it shows just the time and if it's a different day, it shows just the date. The parameters dateFormat and timeFormat should each be one of DEFAULT, FULL, LONG, MEDIUM or SHORT Parameters then the date to format now the base time dateStyle how to format the date portion. timeStyle how to format the time portion.
	5:	java.io.RandomAccessFile public final int readUnsignedShort () Reads an unsigned big-endian 16-bit short from the current position in this file and returns it as an integer. Blocks until two bytes have been read, the end of the file is reached or an exception is thrown. Returns the next unsigned short value from this file as an int. Throws EOFException if the end of this file is detected. IOException if this file is closed or another I/O error occurs. See Also writeShort(int)
	6:	java.util.Scanner public short nextShort () Returns the next token as a short in the current radix. This method may block for more input. Throws IllegalStateException if this Scanner has been closed. NoSuchElementException if input has been exhausted. InputMismatchException if the next token can not be translated into a valid short value.
	7:	android.database.DatabaseUtils public static void cursorShortToContentValuesIfPresent (Cursor cursor, ContentValues values, String column) Reads a Short out of a column in a Cursor and writes it to a ContentValues. Adds nothing to the ContentValues if the column isn't present or if its value is null. Parameters cursor The cursor to read from values The ContentValues to put the value into column The column to read
	8:	android.media.AudioRecord public int read (short[] audioData, int offsetInShorts, int sizeInShorts) Reads audio data from the audio hardware for recording into a buffer. Parameters audioData the array to which the recorded audio data is written. offsetInShorts index in audioData from which the data is written expressed in shorts. sizeInShorts the number of requested shorts. Returns the number of shorts that were read or or ERROR_INVALID_OPERATION if the object wasn't properly initialized, or ERROR_BAD_VALUE if the parameters don't resolve to valid data and indexes. The number of shorts will not exceed sizeInShorts.
	9:	java.text.DateFormat public static final DateFormat getDateTimeInstance (int dateStyle, int timeStyle, Locale locale) Returns a DateFormat instance for formatting and parsing dates and time values in the specified styles for the specified locale. Parameters dateStyle one of SHORT, MEDIUM, LONG, FULL, or DEFAULT. timeStyle one of SHORT, MEDIUM, LONG, FULL, or DEFAULT. locale the locale. Returns the DateFormat instance for dateStyle, timeStyle and locale. Throws IllegalArgumentException if dateStyle or timeStyle is not one of SHORT, MEDIUM, LONG, FULL, or DEFAULT.
paint
Renders the Canvas
	0:	android.graphics.Paint public Paint (Paint paint) Create a new paint, initialized with the attributes in the specified paint parameter. Parameters paint Existing paint used to initialized the attributes of the new paint.
	1:	android.graphics.Paint public Paint () Create a new paint with default settings.
	2:	android.graphics.Canvas public void drawPaint (Paint paint) Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint. Parameters paint The paint used to draw onto the canvas
	3:	android.graphics.LayerRasterizer public void addLayer (Paint paint) 
	4:	android.graphics.drawable.shapes.ArcShape public void draw (Canvas canvas, Paint paint) Draw this shape into the provided Canvas, with the provided Paint. Before calling this, you must call resize(float, float). Parameters canvas the Canvas within which this shape should be drawn paint the Paint object that defines this shape's characteristics
	5:	android.graphics.Bitmap public Bitmap extractAlpha (Paint paint, int[] offsetXY) Returns a new bitmap that captures the alpha values of the original. These values may be affected by the optional Paint parameter, which can contain its own alpha, and may also contain a MaskFilter which could change the actual dimensions of the resulting bitmap (e.g. a blur maskfilter might enlarge the resulting bitmap). If offsetXY is not null, it returns the amount to offset the returned bitmap so that it will logically align with the original. For example, if the paint contains a blur of radius 2, then offsetXY[] would contains -2, -2, so that drawing the alpha bitmap offset by (-2, -2) and then drawing the original would result in the blur visually aligning with the original. The initial density of the returned bitmap is the same as the original's. Parameters paint Optional paint used to modify the alpha values in the resulting bitmap. Pass null for default behavior. offsetXY Optional array that returns the X (index 0) and Y (index 1) offset needed to position the returned bitmap so that it visually lines up with the original. Returns new bitmap containing the (optionally modified by paint) alpha channel of the original bitmap. This may be drawn with Canvas.drawBitmap(), where the color(s) will be taken from the paint that is passed to the draw call.
	6:	android.graphics.Canvas public void drawLines (float[] pts, Paint paint) 
	7:	android.graphics.Canvas public void drawOval (RectF oval, Paint paint) Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint. Parameters oval The rectangle bounds of the oval to be drawn
	8:	android.graphics.Canvas public void drawPath (Path path, Paint paint) Draw the specified path using the specified paint. The path will be filled or framed based on the Style in the paint. Parameters path The path to be drawn paint The paint used to draw the path
	9:	android.graphics.Canvas public void drawPoints (float[] pts, Paint paint) Helper for drawPoints() that assumes you want to draw the entire array
sizeChanged
Called when the drawable area of the Canvas has been changed
	0:	android.hardware.Camera.Parameters public List<Camera.Area> getFocusAreas () Gets the current focus areas. Camera driver uses the areas to decide focus. Before using this API or setFocusAreas(List), apps should call getMaxNumFocusAreas() to know the maximum number of focus areas first. If the value is 0, focus area is not supported. Each focus area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of setDisplayOrientation(int). Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of focus areas cannot be 0 or negative. The weight must range from 1 to 1000. The weight should be interpreted as a per-pixel weight - all pixels in the area have the specified weight. This means a small area with the same weight as a larger area will have less influence on the focusing than the larger area. Focus areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null focus area list means the driver is free to select focus targets as it wants. For example, the driver may use more signals to select focus areas and change them dynamically. Apps can set the focus area list to null if they want the driver to completely control focusing. Focus areas are relative to the current field of view (getZoom()). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The focus area cannot be set to be outside the current field of view, even when using zoom. Focus area only has effect if the current focus mode is FOCUS_MODE_AUTO, FOCUS_MODE_MACRO, FOCUS_MODE_CONTINUOUS_VIDEO, or FOCUS_MODE_CONTINUOUS_PICTURE. Returns a list of current focus areas
	1:	android.hardware.Camera.Parameters public List<Camera.Area> getMeteringAreas () Gets the current metering areas. Camera driver uses these areas to decide exposure. Before using this API or setMeteringAreas(List), apps should call getMaxNumMeteringAreas() to know the maximum number of metering areas first. If the value is 0, metering area is not supported. Each metering area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of setDisplayOrientation(int). Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of metering areas cannot be 0 or negative. The weight must range from 1 to 1000, and represents a weight for every pixel in the area. This means that a large metering area with the same weight as a smaller area will have more effect in the metering result. Metering areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null metering area list means the driver is free to meter as it chooses. For example, the driver may use more signals to select metering areas and change them dynamically. Apps can set the metering area list to null if they want the driver to completely control metering. Metering areas are relative to the current field of view (getZoom()). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The metering area cannot be set to be outside the current field of view, even when using zoom. No matter what metering areas are, the final exposure are compensated by setExposureCompensation(int). Returns a list of current metering areas
	2:	android.widget.ListView public void setOverscrollFooter (Drawable footer) Sets the drawable that will be drawn below all other list content. This area can become visible when the user overscrolls the list, or when the list's content does not fully fill the container area. Parameters footer The drawable to use
	3:	android.net.NetworkInfo public boolean isAvailable () Indicates whether network connectivity is possible. A network is unavailable when a persistent or semi-persistent condition prevents the possibility of connecting to that network. Examples include The device is out of the coverage area for any network of this type. The device is on a network other than the home network (i.e., roaming), and data roaming has been disabled. The device's radio is turned off, e.g., because airplane mode is enabled. Returns true if the network is available, false otherwise
	4:	android.inputmethodservice.InputMethodService public View onCreateInputView () Create and return the view hierarchy used for the input area (such as a soft keyboard). This will be called once, when the input area is first displayed. You can return null to have no input area; the default implementation returns null. To control when the input view is displayed, implement onEvaluateInputViewShown(). To change the input view after the first one is created by this function, use setInputView(View).
	5:	android.widget.ListView public void setOverscrollHeader (Drawable header) Sets the drawable that will be drawn above all other list content. This area can become visible when the user overscrolls the list. Parameters header The drawable to use
	6:	android.inputmethodservice.InputMethodService public void onUpdateExtractingVisibility (EditorInfo ei) Called when the fullscreen-mode extracting editor info has changed, to determine whether the extracting (extract text and candidates) portion of the UI should be shown. The standard implementation hides or shows the extract area depending on whether it makes sense for the current editor. In particular, a TYPE_NULL input type or IME_FLAG_NO_EXTRACT_UI flag will turn off the extract area since there is no text to be shown.
	7:	android.hardware.Camera.Area public Camera.Area (Rect rect, int weight) Create an area with specified rectangle and weight. Parameters rect the bounds of the area. weight the weight of the area.
	8:	android.location.LocationManager public void addProximityAlert (double latitude, double longitude, float radius, long expiration, PendingIntent intent) Set a proximity alert for the location given by the position (latitude, longitude) and the given radius. When the device detects that it has entered or exited the area surrounding the location, the given PendingIntent will be used to create an Intent to be fired. The fired Intent will have a boolean extra added with key KEY_PROXIMITY_ENTERING. If the value is true, the device is entering the proximity region; if false, it is exiting. Due to the approximate nature of position estimation, if the device passes through the given area briefly, it is possible that no Intent will be fired. Similarly, an Intent could be fired if the device passes very close to the given area but does not actually enter it. After the number of milliseconds given by the expiration parameter, the location manager will delete this proximity alert and no longer monitor it. A value of -1 indicates that there should be no expiration time. Internally, this method uses both NETWORK_PROVIDER and GPS_PROVIDER. Before API version 17, this method could be used with ACCESS_FINE_LOCATION or ACCESS_COARSE_LOCATION. From API version 17 and onwards, this method requires ACCESS_FINE_LOCATION permission. Parameters latitude the latitude of the central point of the alert region longitude the longitude of the central point of the alert region radius the radius of the central point of the alert region, in meters expiration time for this proximity alert, in milliseconds, or -1 to indicate no expiration intent a PendingIntent that will be used to generate an Intent to fire when entry to or exit from the alert region is detected Throws SecurityException if ACCESS_FINE_LOCATION permission is not present
	9:	android.graphics.Region public boolean setPath (Path path, Region clip) Set the region to the area described by the path and clip. Return true if the resulting region is non-empty. This produces a region that is identical to the pixels that would be drawn by the path (with no antialiasing).
