Sprite
Creates a new non-animated Sprite using the provided Image
	0:	javax.xml.datatype.Duration public Duration multiply (int factor) Computes a new duration whose value is factor times longer than the value of this duration. This method is provided for the convenience. It is functionally equivalent to the following code: multiply(new BigDecimal(String.valueOf(factor))) Parameters factor Factor times longer of new Duration to create. Returns New Duration that is factortimes longer than this Duration. See Also multiply(BigDecimal)
	1:	android.preference.PreferenceActivity public boolean onPreferenceTreeClick (PreferenceScreen preferenceScreen, Preference preference) This method was deprecated in API level 11. This function is not relevant for a modern fragment-based PreferenceActivity.
	2:	java.lang.reflect.ParameterizedType public abstract Type getRawType () Returns the declaring type of this parameterized type. The raw type of Set field; is Set. Returns the raw type of this parameterized type
	3:	android.test.mock.MockPackageManager public void addPackageToPreferred (String packageName) This method is deprecated. This function no longer does anything; it was an old approach to managing preferred activities, which has been superseded by (and conflicts with) the modern activity-based preferences.
	4:	android.test.mock.MockPackageManager public void removePackageFromPreferred (String packageName) This method is deprecated. This function no longer does anything; it was an old approach to managing preferred activities, which has been superseded by (and conflicts with) the modern activity-based preferences.
	5:	android.preference.PreferenceActivity public PreferenceManager getPreferenceManager () This method was deprecated in API level 11. This function is not relevant for a modern fragment-based PreferenceActivity. Returns the PreferenceManager used by this activity. Returns The PreferenceManager.
	6:	android.preference.PreferenceActivity public PreferenceScreen getPreferenceScreen () This method was deprecated in API level 11. This function is not relevant for a modern fragment-based PreferenceActivity. Gets the root of the preference hierarchy that this activity is showing. Returns The PreferenceScreen that is the root of the preference hierarchy.
	7:	android.preference.PreferenceActivity public Preference findPreference (CharSequence key) This method was deprecated in API level 11. This function is not relevant for a modern fragment-based PreferenceActivity. Finds a Preference based on its key. Parameters key The key of the preference to retrieve. Returns The Preference with the key, or null. See Also findPreference(CharSequence)
	8:	android.content.res.Resources public int getDimensionPixelSize (int id) Retrieve a dimensional for a particular resource ID for use as a size in raw pixels. This is the same as getDimension(int), except the returned value is converted to integer pixels for use as a size. A size conversion involves rounding the base value, and ensuring that a non-zero base value is at least one pixel in size. Parameters id The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier. Returns Resource dimension value multiplied by the appropriate metric and truncated to integer pixels. Throws Resources.NotFoundException Throws NotFoundException if the given ID does not exist. See Also getDimension(int) getDimensionPixelOffset(int)
	9:	android.content.IntentFilter public final void addDataSchemeSpecificPart (String ssp, int type) Add a new Intent data "scheme specific part" to match against. The filter must include one or more schemes (via addDataScheme(String)) for the scheme specific part to be considered. If any scheme specific parts are included in the filter, then an Intent's data must match one of them. If no scheme specific parts are included, then only the scheme must match. The "scheme specific part" that this matches against is the string returned by Uri.getSchemeSpecificPart. For Uris that contain a path, this kind of matching is not generally of interest, since addDataAuthority(String, String) and addDataPath(String, int) can provide a better mechanism for matching them. However, for Uris that do not contain a path, the authority and path are empty, so this is the only way to match against the non-scheme part. Parameters ssp Either a raw string that must exactly match the scheme specific part path, or a simple pattern, depending on type. type Determines how ssp will be compared to determine a match: either PATTERN_LITERAL, PATTERN_PREFIX, or PATTERN_SIMPLE_GLOB. See Also matchData(String, String, Uri) addDataScheme(String)
Sprite
Creates a new animated Sprite using frames contained in the provided Image
	0:	javax.xml.datatype.Duration public Duration multiply (int factor) Computes a new duration whose value is factor times longer than the value of this duration. This method is provided for the convenience. It is functionally equivalent to the following code: multiply(new BigDecimal(String.valueOf(factor))) Parameters factor Factor times longer of new Duration to create. Returns New Duration that is factortimes longer than this Duration. See Also multiply(BigDecimal)
	1:	android.preference.PreferenceActivity public boolean onPreferenceTreeClick (PreferenceScreen preferenceScreen, Preference preference) This method was deprecated in API level 11. This function is not relevant for a modern fragment-based PreferenceActivity.
	2:	android.print.PrintJob public PrintJobInfo getInfo () Gets the PrintJobInfo that describes this job. Node:The returned info object is a snapshot of the current print job state. Every call to this method returns a fresh info object that reflects the current print job state. Returns The print job info.
	3:	android.printservice.PrintJob public PrintJobInfo getInfo () Gets the PrintJobInfo that describes this job. Node:The returned info object is a snapshot of the current print job state. Every call to this method returns a fresh info object that reflects the current print job state. Returns The print job info.
	4:	android.renderscript.Allocation public static Allocation createSized (RenderScript rs, Element e, int count) Creates an Allocation with a specified number of given elements Parameters rs Context to which the Allocation will belong. e Element to use in the Allocation count the number of Elements in the Allocation Returns allocation
	5:	android.support.v8.renderscript.Allocation public static Allocation createSized (RenderScript rs, Element e, int count) Creates an Allocation with a specified number of given elements Parameters rs Context to which the Allocation will belong. e Element to use in the Allocation count the number of Elements in the Allocation Returns allocation
	6:	java.lang.reflect.ParameterizedType public abstract Type getRawType () Returns the declaring type of this parameterized type. The raw type of Set field; is Set. Returns the raw type of this parameterized type
	7:	android.test.mock.MockPackageManager public void addPackageToPreferred (String packageName) This method is deprecated. This function no longer does anything; it was an old approach to managing preferred activities, which has been superseded by (and conflicts with) the modern activity-based preferences.
	8:	android.test.mock.MockPackageManager public void removePackageFromPreferred (String packageName) This method is deprecated. This function no longer does anything; it was an old approach to managing preferred activities, which has been superseded by (and conflicts with) the modern activity-based preferences.
	9:	android.preference.PreferenceActivity public PreferenceManager getPreferenceManager () This method was deprecated in API level 11. This function is not relevant for a modern fragment-based PreferenceActivity. Returns the PreferenceManager used by this activity. Returns The PreferenceManager.
Sprite
Creates a new Sprite from another Sprite
	0:	java.lang.reflect.ParameterizedType public abstract Type getRawType () Returns the declaring type of this parameterized type. The raw type of Set field; is Set. Returns the raw type of this parameterized type
	1:	android.content.ClipData.Item public CharSequence coerceToText (Context context) Turn this item into text, regardless of the type of data it actually contains. The algorithm for deciding what text to return is: If getText() is non-null, return that. If getUri() is non-null, try to retrieve its data as a text stream from its content provider. If this succeeds, copy the text into a String and return it. If it is not a content: URI or the content provider does not supply a text representation, return the raw URI as a string. If getIntent() is non-null, convert that to an intent: URI and return it. Otherwise, return an empty string. Parameters context The caller's Context, from which its ContentResolver and other things can be retrieved. Returns Returns the item's textual representation.
	2:	android.bluetooth.BluetoothDevice public ParcelUuid[] getUuids () Returns the supported features (UUIDs) of the remote device. This method does not start a service discovery procedure to retrieve the UUIDs from the remote device. Instead, the local cached copy of the service UUIDs are returned. Use fetchUuidsWithSdp() if fresh UUIDs are desired. Requires BLUETOOTH. Returns the supported features (UUIDs) of the remote device, or null on error
	3:	android.accounts.AccountManager public AccountManagerFuture<Bundle> getAuthToken (Account account, String authTokenType, boolean notifyAuthFailure, AccountManagerCallback<Bundle> callback, Handler handler) This method was deprecated in API level 14. use getAuthToken(Account, String, android.os.Bundle, boolean, AccountManagerCallback, android.os.Handler) instead Gets an auth token of the specified type for a particular account, optionally raising a notification if the user must enter credentials. This method is intended for background tasks and services where the user should not be immediately interrupted with a password prompt. If a previously generated auth token is cached for this account and type, then it is returned. Otherwise, if a saved password is available, it is sent to the server to generate a new auth token. Otherwise, an Intent is returned which, when started, will prompt the user for a password. If the notifyAuthFailure parameter is set, a status bar notification is also created with the same Intent, alerting the user that they need to enter a password at some point. In that case, you may need to wait until the user responds, which could take hours or days or forever. When the user does respond and supply a new password, the account manager will broadcast the LOGIN_ACCOUNTS_CHANGED_ACTION Intent, which applications can use to try again. If notifyAuthFailure is not set, it is the application's responsibility to launch the returned Intent at some point. Either way, the result from this call will not wait for user action. Some authenticators have auth token types, whose value is authenticator-dependent. Some services use different token types to access different functionality -- for example, Google uses different auth tokens to access Gmail and Google Calendar for the same account. This method may be called from any thread, but the returned AccountManagerFuture must not be used on the main thread. This method requires the caller to hold the permission USE_CREDENTIALS. Parameters account The account to fetch an auth token for authTokenType The auth token type, an authenticator-dependent string token, must not be null notifyAuthFailure True to add a notification to prompt the user for a password if necessary, false to leave that to the caller callback Callback to invoke when the request completes, null for no callback handler Handler identifying the callback thread, null for the main thread Returns An AccountManagerFuture which resolves to a Bundle with at least the following fields on success: KEY_ACCOUNT_NAME - the name of the account you supplied KEY_ACCOUNT_TYPE - the type of the account KEY_AUTHTOKEN - the auth token you wanted (Other authenticator-specific values may be returned.) If the user must enter credentials, the returned Bundle contains only KEY_INTENT with the Intent needed to launch a prompt. If an error occurred, getResult() throws: AuthenticatorException if the authenticator failed to respond OperationCanceledException if the operation is canceled for any reason, incluidng the user canceling a credential request IOException if the authenticator experienced an I/O problem creating a new auth token, usually because of network trouble If the account is no longer present on the device, the return value is authenticator-dependent. The caller should verify the validity of the account before requesting an auth token.
	4:	android.accounts.AccountManager public AccountManagerFuture<Bundle> getAuthToken (Account account, String authTokenType, Bundle options, boolean notifyAuthFailure, AccountManagerCallback<Bundle> callback, Handler handler) Gets an auth token of the specified type for a particular account, optionally raising a notification if the user must enter credentials. This method is intended for background tasks and services where the user should not be immediately interrupted with a password prompt. If a previously generated auth token is cached for this account and type, then it is returned. Otherwise, if a saved password is available, it is sent to the server to generate a new auth token. Otherwise, an Intent is returned which, when started, will prompt the user for a password. If the notifyAuthFailure parameter is set, a status bar notification is also created with the same Intent, alerting the user that they need to enter a password at some point. In that case, you may need to wait until the user responds, which could take hours or days or forever. When the user does respond and supply a new password, the account manager will broadcast the LOGIN_ACCOUNTS_CHANGED_ACTION Intent, which applications can use to try again. If notifyAuthFailure is not set, it is the application's responsibility to launch the returned Intent at some point. Either way, the result from this call will not wait for user action. Some authenticators have auth token types, whose value is authenticator-dependent. Some services use different token types to access different functionality -- for example, Google uses different auth tokens to access Gmail and Google Calendar for the same account. This method may be called from any thread, but the returned AccountManagerFuture must not be used on the main thread. This method requires the caller to hold the permission USE_CREDENTIALS. Parameters account The account to fetch an auth token for authTokenType The auth token type, an authenticator-dependent string token, must not be null options Authenticator-specific options for the request, may be null or empty notifyAuthFailure True to add a notification to prompt the user for a password if necessary, false to leave that to the caller callback Callback to invoke when the request completes, null for no callback handler Handler identifying the callback thread, null for the main thread Returns An AccountManagerFuture which resolves to a Bundle with at least the following fields on success: KEY_ACCOUNT_NAME - the name of the account you supplied KEY_ACCOUNT_TYPE - the type of the account KEY_AUTHTOKEN - the auth token you wanted (Other authenticator-specific values may be returned.) If the user must enter credentials, the returned Bundle contains only KEY_INTENT with the Intent needed to launch a prompt. If an error occurred, getResult() throws: AuthenticatorException if the authenticator failed to respond OperationCanceledException if the operation is canceled for any reason, incluidng the user canceling a credential request IOException if the authenticator experienced an I/O problem creating a new auth token, usually because of network trouble If the account is no longer present on the device, the return value is authenticator-dependent. The caller should verify the validity of the account before requesting an auth token.
	5:	android.accounts.AccountManager public AccountManagerFuture<Bundle> getAuthToken (Account account, String authTokenType, Bundle options, Activity activity, AccountManagerCallback<Bundle> callback, Handler handler) Gets an auth token of the specified type for a particular account, prompting the user for credentials if necessary. This method is intended for applications running in the foreground where it makes sense to ask the user directly for a password. If a previously generated auth token is cached for this account and type, then it is returned. Otherwise, if a saved password is available, it is sent to the server to generate a new auth token. Otherwise, the user is prompted to enter a password. Some authenticators have auth token types, whose value is authenticator-dependent. Some services use different token types to access different functionality -- for example, Google uses different auth tokens to access Gmail and Google Calendar for the same account. This method may be called from any thread, but the returned AccountManagerFuture must not be used on the main thread. This method requires the caller to hold the permission USE_CREDENTIALS. Parameters account The account to fetch an auth token for authTokenType The auth token type, an authenticator-dependent string token, must not be null options Authenticator-specific options for the request, may be null or empty activity The Activity context to use for launching a new authenticator-defined sub-Activity to prompt the user for a password if necessary; used only to call startActivity(); must not be null. callback Callback to invoke when the request completes, null for no callback handler Handler identifying the callback thread, null for the main thread Returns An AccountManagerFuture which resolves to a Bundle with at least the following fields: KEY_ACCOUNT_NAME - the name of the account you supplied KEY_ACCOUNT_TYPE - the type of the account KEY_AUTHTOKEN - the auth token you wanted (Other authenticator-specific values may be returned.) If an auth token could not be fetched, getResult() throws: AuthenticatorException if the authenticator failed to respond OperationCanceledException if the operation is canceled for any reason, incluidng the user canceling a credential request IOException if the authenticator experienced an I/O problem creating a new auth token, usually because of network trouble If the account is no longer present on the device, the return value is authenticator-dependent. The caller should verify the validity of the account before requesting an auth token.
	6:	android.preference.PreferenceActivity public void addPreferencesFromIntent (Intent intent) This method was deprecated in API level 11. This function is not relevant for a modern fragment-based PreferenceActivity. Adds preferences from activities that match the given Intent. Parameters intent The Intent to query activities.
	7:	android.support.v13.app.FragmentPagerAdapter public Object instantiateItem (ViewGroup container, int position) Create the page for the given position. The adapter is responsible for adding the view to the container given here, although it only must ensure this is done by the time it returns from finishUpdate(ViewGroup). Parameters container The containing View in which the page will be shown. position The page position to be instantiated. Returns Returns an Object representing the new page. This does not need to be a View, but can be some other container of the page.
	8:	android.support.v4.app.FragmentPagerAdapter public Object instantiateItem (ViewGroup container, int position) Create the page for the given position. The adapter is responsible for adding the view to the container given here, although it only must ensure this is done by the time it returns from finishUpdate(ViewGroup). Parameters container The containing View in which the page will be shown. position The page position to be instantiated. Returns Returns an Object representing the new page. This does not need to be a View, but can be some other container of the page.
	9:	android.support.v13.app.FragmentStatePagerAdapter public Object instantiateItem (ViewGroup container, int position) Create the page for the given position. The adapter is responsible for adding the view to the container given here, although it only must ensure this is done by the time it returns from finishUpdate(ViewGroup). Parameters container The containing View in which the page will be shown. position The page position to be instantiated. Returns Returns an Object representing the new page. This does not need to be a View, but can be some other container of the page.
defineReferencePixel
Defines the reference pixel for this Sprite
	0:	java.net.InetAddress public byte[] getAddress () Returns the IP address represented by this InetAddress instance as a byte array. The elements are in network order (the highest order address byte is in the zeroth element). Returns the address in form of a byte array.
	1:	android.text.util.Rfc822Token public void setAddress (String address) Changes the address to the specified address.
	2:	android.view.ScaleGestureDetector public float getFocusX () Get the X coordinate of the current gesture's focal point. If a gesture is in progress, the focal point is between each of the pointers forming the gesture. If isInProgress() would return false, the result of this function is undefined. Returns X coordinate of the focal point in pixels.
	3:	android.view.ScaleGestureDetector public float getFocusY () Get the Y coordinate of the current gesture's focal point. If a gesture is in progress, the focal point is between each of the pointers forming the gesture. If isInProgress() would return false, the result of this function is undefined. Returns Y coordinate of the focal point in pixels.
	4:	java.net.InetSocketAddress public final InetAddress getAddress () Returns this socket address' address.
	5:	java.net.Proxy public SocketAddress address () Gets the address of this Proxy instance. Returns the stored proxy address or null if the proxy type is DIRECT.
	6:	android.graphics.Point public Point (Point src) 
	7:	android.graphics.Canvas public void drawPoints (float[] pts, int offset, int count, Paint paint) Draw a series of points. Each point is centered at the coordinate specified by pts[], and its diameter is specified by the paint's stroke width (as transformed by the canvas' CTM), with special treatment for a stroke width of 0, which always draws exactly 1 pixel (or at most 4 if antialiasing is enabled). The shape of the point is controlled by the paint's Cap type. The shape is a square, unless the cap type is Round, in which case the shape is a circle. Parameters pts Array of points to draw [x0 y0 x1 y1 x2 y2 ...] offset Number of values to skip before starting to draw. count The number of values to process, after skipping offset of them. Since one point uses two values, the number of "points" that are drawn is really (count >> 1). paint The paint used to draw the points
	8:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	9:	android.view.Display public void getRectSize (Rect outSize) Gets the size of the display as a rectangle, in pixels. Parameters outSize A Rect object to receive the size information. See Also getSize(Point)
setRefPixelPosition
Sets this Sprite's position such that its reference pixel is located at (x,y) in the painter's coordinate system
	0:	android.graphics.Matrix public boolean setPolyToPoly (float[] src, int srcIndex, float[] dst, int dstIndex, int pointCount) Set the matrix such that the specified src points would map to the specified dst points. The "points" are represented as an array of floats, order [x0, y0, x1, y1, ...], where each "point" is 2 float values. Parameters src The array of src [x,y] pairs (points) srcIndex Index of the first pair of src values dst The array of dst [x,y] pairs (points) dstIndex Index of the first pair of dst values pointCount The number of pairs/points to be used. Must be [0..4] Returns true if the matrix was set to the specified transformation
	1:	android.location.Address public void setPhone (String phone) Sets the phone number associated with this address.
	2:	android.graphics.Paint public void getTextPath (char[] text, int index, int count, float x, float y, Path path) Return the path (outline) for the specified text. Note: just like Canvas.drawText, this will respect the Align setting in the paint. Parameters text The text to retrieve the path from index The index of the first character in text count The number of characterss starting with index x The x coordinate of the text's origin y The y coordinate of the text's origin path The path to receive the data describing the text. Must be allocated by the caller.
	3:	android.graphics.Bitmap public void setPixels (int[] pixels, int offset, int stride, int x, int y, int width, int height) Replace pixels in the bitmap with the colors in the array. Each element in the array is a packed int prepresenting a non-premultiplied ARGB Color. Parameters pixels The colors to write to the bitmap offset The index of the first color to read from pixels[] stride The number of colors in pixels[] to skip between rows. Normally this value will be the same as the width of the bitmap, but it can be larger (or negative). x The x coordinate of the first pixel to write to in the bitmap. y The y coordinate of the first pixel to write to in the bitmap. width The number of colors to copy from pixels[] per row height The number of rows to write to the bitmap Throws IllegalStateException if the bitmap is not mutable IllegalArgumentException if x, y, width, height are outside of the bitmap's bounds. ArrayIndexOutOfBoundsException if the pixels array is too small to receive the specified number of pixels.
	4:	android.graphics.Matrix public void mapPoints (float[] dst, int dstIndex, float[] src, int srcIndex, int pointCount) Apply this matrix to the array of 2D points specified by src, and write the transformed points into the array of points specified by dst. The two arrays represent their "points" as pairs of floats [x, y]. Parameters dst The array of dst points (x,y pairs) dstIndex The index of the first [x,y] pair of dst floats src The array of src points (x,y pairs) srcIndex The index of the first [x,y] pair of src floats pointCount The number of points (x,y pairs) to transform
	5:	android.graphics.Point public void set (int x, int y) Set the point's x and y coordinates
	6:	android.graphics.PointF public final void set (float x, float y) Set the point's x and y coordinates
	7:	android.location.Address public void setAddressLine (int index, String line) Sets the line of the address numbered by index (starting at 0) to the given String, which may be null. Throws IllegalArgumentException if index < 0
	8:	android.renderscript.Element public static Element createPixel (RenderScript rs, Element.DataType dt, Element.DataKind dk) Create a new pixel Element type. A matching DataType and DataKind must be provided. The DataType and DataKind must contain the same number of components. Vector size will be set to 1. Parameters rs The context associated with the new Element. dt The DataType for the new element. dk The DataKind to specify the mapping of each component in the DataType. Returns Element
	9:	android.support.v8.renderscript.Element public static Element createPixel (RenderScript rs, Element.DataType dt, Element.DataKind dk) Create a new pixel Element type. A matching DataType and DataKind must be provided. The DataType and DataKind must contain the same number of components. Vector size will be set to 1. Parameters rs The context associated with the new Element. dt The DataType for the new element. dk The DataKind to specify the mapping of each component in the DataType. Returns Element
getRefPixelX
Gets the horizontal position of this Sprite's reference pixel in the painter's coordinate system
	0:	android.location.Address public void setPhone (String phone) Sets the phone number associated with this address.
	1:	android.location.Geocoder public List<Address> getFromLocationName (String locationName, int maxResults) Returns an array of Addresses that are known to describe the named location, which may be a place name such as "Dalvik, Iceland", an address such as "1600 Amphitheatre Parkway, Mountain View, CA", an airport code such as "SFO", etc.. The returned addresses will be localized for the locale provided to this class's constructor. The query will block and returned values will be obtained by means of a network lookup. The results are a best guess and are not guaranteed to be meaningful or correct. It may be useful to call this method from a thread separate from your primary UI thread. Parameters locationName a user-supplied description of a location maxResults max number of results to return. Smaller numbers (1 to 5) are recommended Returns a list of Address objects. Returns null or empty list if no matches were found or there is no backend service available. Throws IllegalArgumentException if locationName is null IOException if the network is unavailable or any other I/O problem occurs
	2:	java.net.InetAddress public byte[] getAddress () Returns the IP address represented by this InetAddress instance as a byte array. The elements are in network order (the highest order address byte is in the zeroth element). Returns the address in form of a byte array.
	3:	java.net.NetworkInterface public boolean isVirtual () Returns true if this interface is a virtual interface (also called a sub-interface). Virtual interfaces are, on some systems, interfaces created as a child of a physical interface and given different settings (like address or MTU). Usually the name of the interface will the name of the parent followed by a colon (:) and a number identifying the child, since there can be several virtual interfaces attached to a single physical interface. Returns true if this interface is a virtual interface.
	4:	android.location.Geocoder public List<Address> getFromLocationName (String locationName, int maxResults, double lowerLeftLatitude, double lowerLeftLongitude, double upperRightLatitude, double upperRightLongitude) Returns an array of Addresses that are known to describe the named location, which may be a place name such as "Dalvik, Iceland", an address such as "1600 Amphitheatre Parkway, Mountain View, CA", an airport code such as "SFO", etc.. The returned addresses will be localized for the locale provided to this class's constructor. You may specify a bounding box for the search results by including the Latitude and Longitude of the Lower Left point and Upper Right point of the box. The query will block and returned values will be obtained by means of a network lookup. The results are a best guess and are not guaranteed to be meaningful or correct. It may be useful to call this method from a thread separate from your primary UI thread. Parameters locationName a user-supplied description of a location maxResults max number of addresses to return. Smaller numbers (1 to 5) are recommended lowerLeftLatitude the latitude of the lower left corner of the bounding box lowerLeftLongitude the longitude of the lower left corner of the bounding box upperRightLatitude the latitude of the upper right corner of the bounding box upperRightLongitude the longitude of the upper right corner of the bounding box Returns a list of Address objects. Returns null or empty list if no matches were found or there is no backend service available. Throws IllegalArgumentException if locationName is null IllegalArgumentException if any latitude is less than -90 or greater than 90 IllegalArgumentException if any longitude is less than -180 or greater than 180 IOException if the network is unavailable or any other I/O problem occurs
	5:	java.net.Inet4Address public boolean isLinkLocalAddress () Returns whether this address is a link-local address or not. Valid IPv6 link-local addresses have the prefix fe80::/10. RFC 3484 "Default Address Selection for Internet Protocol Version 6 (IPv6)" states that both IPv4 auto-configuration addresses (prefix 169.254/16) and IPv4 loopback addresses (prefix 127/8) have link-local scope, but Inet4Address only considers the auto-configuration addresses to have link-local scope. That is: the IPv4 loopback address returns false.
	6:	java.net.Inet6Address public boolean isLinkLocalAddress () Returns whether this address is a link-local address or not. Valid IPv6 link-local addresses have the prefix fe80::/10. RFC 3484 "Default Address Selection for Internet Protocol Version 6 (IPv6)" states that both IPv4 auto-configuration addresses (prefix 169.254/16) and IPv4 loopback addresses (prefix 127/8) have link-local scope, but Inet4Address only considers the auto-configuration addresses to have link-local scope. That is: the IPv4 loopback address returns false.
	7:	java.net.InetAddress public boolean isLinkLocalAddress () Returns whether this address is a link-local address or not. Valid IPv6 link-local addresses have the prefix fe80::/10. RFC 3484 "Default Address Selection for Internet Protocol Version 6 (IPv6)" states that both IPv4 auto-configuration addresses (prefix 169.254/16) and IPv4 loopback addresses (prefix 127/8) have link-local scope, but Inet4Address only considers the auto-configuration addresses to have link-local scope. That is: the IPv4 loopback address returns false.
	8:	android.renderscript.Element public static Element createPixel (RenderScript rs, Element.DataType dt, Element.DataKind dk) Create a new pixel Element type. A matching DataType and DataKind must be provided. The DataType and DataKind must contain the same number of components. Vector size will be set to 1. Parameters rs The context associated with the new Element. dt The DataType for the new element. dk The DataKind to specify the mapping of each component in the DataType. Returns Element
	9:	android.support.v8.renderscript.Element public static Element createPixel (RenderScript rs, Element.DataType dt, Element.DataKind dk) Create a new pixel Element type. A matching DataType and DataKind must be provided. The DataType and DataKind must contain the same number of components. Vector size will be set to 1. Parameters rs The context associated with the new Element. dt The DataType for the new element. dk The DataKind to specify the mapping of each component in the DataType. Returns Element
getRefPixelY
Gets the vertical position of this Sprite's reference pixel in the painter's coordinate system
	0:	android.location.Address public void setPhone (String phone) Sets the phone number associated with this address.
	1:	android.location.Geocoder public List<Address> getFromLocationName (String locationName, int maxResults) Returns an array of Addresses that are known to describe the named location, which may be a place name such as "Dalvik, Iceland", an address such as "1600 Amphitheatre Parkway, Mountain View, CA", an airport code such as "SFO", etc.. The returned addresses will be localized for the locale provided to this class's constructor. The query will block and returned values will be obtained by means of a network lookup. The results are a best guess and are not guaranteed to be meaningful or correct. It may be useful to call this method from a thread separate from your primary UI thread. Parameters locationName a user-supplied description of a location maxResults max number of results to return. Smaller numbers (1 to 5) are recommended Returns a list of Address objects. Returns null or empty list if no matches were found or there is no backend service available. Throws IllegalArgumentException if locationName is null IOException if the network is unavailable or any other I/O problem occurs
	2:	java.net.InetAddress public byte[] getAddress () Returns the IP address represented by this InetAddress instance as a byte array. The elements are in network order (the highest order address byte is in the zeroth element). Returns the address in form of a byte array.
	3:	java.net.NetworkInterface public boolean isVirtual () Returns true if this interface is a virtual interface (also called a sub-interface). Virtual interfaces are, on some systems, interfaces created as a child of a physical interface and given different settings (like address or MTU). Usually the name of the interface will the name of the parent followed by a colon (:) and a number identifying the child, since there can be several virtual interfaces attached to a single physical interface. Returns true if this interface is a virtual interface.
	4:	android.location.Geocoder public List<Address> getFromLocationName (String locationName, int maxResults, double lowerLeftLatitude, double lowerLeftLongitude, double upperRightLatitude, double upperRightLongitude) Returns an array of Addresses that are known to describe the named location, which may be a place name such as "Dalvik, Iceland", an address such as "1600 Amphitheatre Parkway, Mountain View, CA", an airport code such as "SFO", etc.. The returned addresses will be localized for the locale provided to this class's constructor. You may specify a bounding box for the search results by including the Latitude and Longitude of the Lower Left point and Upper Right point of the box. The query will block and returned values will be obtained by means of a network lookup. The results are a best guess and are not guaranteed to be meaningful or correct. It may be useful to call this method from a thread separate from your primary UI thread. Parameters locationName a user-supplied description of a location maxResults max number of addresses to return. Smaller numbers (1 to 5) are recommended lowerLeftLatitude the latitude of the lower left corner of the bounding box lowerLeftLongitude the longitude of the lower left corner of the bounding box upperRightLatitude the latitude of the upper right corner of the bounding box upperRightLongitude the longitude of the upper right corner of the bounding box Returns a list of Address objects. Returns null or empty list if no matches were found or there is no backend service available. Throws IllegalArgumentException if locationName is null IllegalArgumentException if any latitude is less than -90 or greater than 90 IllegalArgumentException if any longitude is less than -180 or greater than 180 IOException if the network is unavailable or any other I/O problem occurs
	5:	java.net.Inet4Address public boolean isLinkLocalAddress () Returns whether this address is a link-local address or not. Valid IPv6 link-local addresses have the prefix fe80::/10. RFC 3484 "Default Address Selection for Internet Protocol Version 6 (IPv6)" states that both IPv4 auto-configuration addresses (prefix 169.254/16) and IPv4 loopback addresses (prefix 127/8) have link-local scope, but Inet4Address only considers the auto-configuration addresses to have link-local scope. That is: the IPv4 loopback address returns false.
	6:	java.net.Inet6Address public boolean isLinkLocalAddress () Returns whether this address is a link-local address or not. Valid IPv6 link-local addresses have the prefix fe80::/10. RFC 3484 "Default Address Selection for Internet Protocol Version 6 (IPv6)" states that both IPv4 auto-configuration addresses (prefix 169.254/16) and IPv4 loopback addresses (prefix 127/8) have link-local scope, but Inet4Address only considers the auto-configuration addresses to have link-local scope. That is: the IPv4 loopback address returns false.
	7:	java.net.InetAddress public boolean isLinkLocalAddress () Returns whether this address is a link-local address or not. Valid IPv6 link-local addresses have the prefix fe80::/10. RFC 3484 "Default Address Selection for Internet Protocol Version 6 (IPv6)" states that both IPv4 auto-configuration addresses (prefix 169.254/16) and IPv4 loopback addresses (prefix 127/8) have link-local scope, but Inet4Address only considers the auto-configuration addresses to have link-local scope. That is: the IPv4 loopback address returns false.
	8:	android.renderscript.Element public static Element createPixel (RenderScript rs, Element.DataType dt, Element.DataKind dk) Create a new pixel Element type. A matching DataType and DataKind must be provided. The DataType and DataKind must contain the same number of components. Vector size will be set to 1. Parameters rs The context associated with the new Element. dt The DataType for the new element. dk The DataKind to specify the mapping of each component in the DataType. Returns Element
	9:	android.support.v8.renderscript.Element public static Element createPixel (RenderScript rs, Element.DataType dt, Element.DataKind dk) Create a new pixel Element type. A matching DataType and DataKind must be provided. The DataType and DataKind must contain the same number of components. Vector size will be set to 1. Parameters rs The context associated with the new Element. dt The DataType for the new element. dk The DataKind to specify the mapping of each component in the DataType. Returns Element
setFrame
Selects the current frame in the frame sequence
	0:	android.graphics.drawable.AnimationDrawable public int getNumberOfFrames () Returns The number of frames in the animation
	1:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	2:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	3:	android.hardware.Camera.Parameters public int getPreviewFrameRate () This method was deprecated in API level 9. replaced by getPreviewFpsRange(int[]) Returns the setting for the rate at which preview frames are received. This is the target frame rate. The actual frame rate depends on the driver. Returns the frame rate setting (frames per second)
	4:	android.hardware.Camera.Parameters public void setPreviewFrameRate (int fps) This method was deprecated in API level 9. replaced by setPreviewFpsRange(int, int) Sets the rate at which preview frames are received. This is the target frame rate. The actual frame rate depends on the driver. Parameters fps the frame rate (frames per second)
	5:	android.opengl.GLSurfaceView.Renderer public abstract void onDrawFrame (GL10 gl) Called to draw the current frame. This method is responsible for drawing the current frame. The implementation of this method typically looks like this: void onDrawFrame(GL10 gl) { gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT); //... other gl calls to render the scene ... } Parameters gl the GL interface. Use instanceof to test if the interface supports GL11 or higher interfaces.
	6:	android.media.AudioRecord public int getNotificationMarkerPosition () Returns the notification marker position expressed in frames.
	7:	android.media.AudioRecord public int getPositionNotificationPeriod () Returns the notification update period expressed in frames.
	8:	android.view.Choreographer public void postFrameCallback (Choreographer.FrameCallback callback) Posts a frame callback to run on the next frame. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. See Also postFrameCallbackDelayed(Choreographer.FrameCallback, long) removeFrameCallback(Choreographer.FrameCallback)
	9:	android.view.Choreographer public void postFrameCallbackDelayed (Choreographer.FrameCallback callback, long delayMillis) Posts a frame callback to run on the next frame after the specified delay. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. delayMillis The delay time in milliseconds. See Also postFrameCallback(Choreographer.FrameCallback) removeFrameCallback(Choreographer.FrameCallback)
getFrame
Gets the current index in the frame sequence
	0:	android.graphics.drawable.AnimationDrawable public int getNumberOfFrames () Returns The number of frames in the animation
	1:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	2:	android.graphics.drawable.AnimationDrawable public Drawable getFrame (int index) Returns The Drawable at the specified frame index
	3:	android.graphics.drawable.AnimationDrawable public int getDuration (int i) Returns The duration in milliseconds of the frame at the specified index
	4:	android.media.AudioTrack public int setLoopPoints (int startInFrames, int endInFrames, int loopCount) Sets the loop points and the loop count. The loop can be infinite. Similarly to setPlaybackHeadPosition, the track must be stopped or paused for the loop points to be changed, and must use the MODE_STATIC mode. Parameters startInFrames loop start marker expressed in frames Zero corresponds to start of buffer. The start marker must not be greater than or equal to the buffer size in frames, or negative. endInFrames loop end marker expressed in frames The total buffer size in frames corresponds to end of buffer. The end marker must not be greater than the buffer size in frames. For looping, the end marker must not be less than or equal to the start marker, but to disable looping it is permitted for start marker, end marker, and loop count to all be 0. loopCount the number of times the loop is looped. A value of -1 means infinite looping, and 0 disables looping. Returns error code or success, see SUCCESS, ERROR_BAD_VALUE, ERROR_INVALID_OPERATION
	5:	android.graphics.Interpolator public void setKeyFrame (int index, int msec, float[] values) Assign the keyFrame (specified by index) a time value and an array of key values (with an implicity blend array of [0, 0, 1, 1] giving linear transition to the next set of key values). Parameters index The index of the key frame to assign msec The time (in mililiseconds) for this key frame. Based on the SystemClock.uptimeMillis() clock values Array of values associated with theis key frame
	6:	android.graphics.Interpolator public void setKeyFrame (int index, int msec, float[] values, float[] blend) Assign the keyFrame (specified by index) a time value and an array of key values and blend array. Parameters index The index of the key frame to assign msec The time (in mililiseconds) for this key frame. Based on the SystemClock.uptimeMillis() clock values Array of values associated with theis key frame blend (may be null) Optional array of 4 blend values
	7:	java.text.ChoiceFormat public Number parse (String string, ParsePosition position) Parses a double from the specified string starting at the index specified by position. The string is compared to the strings of this ChoiceFormat and if a match occurs then the lower bound of the corresponding range in the limits array is returned. If the string is successfully parsed then the index of the ParsePosition passed to this method is updated to the index following the parsed text. If one of the format strings of this ChoiceFormat instance is found in string starting at position.getIndex() then the index in position is set to the index following the parsed text; the Double corresponding to the format string is returned. If none of the format strings is found in string then the error index in position is set to the current index in position; Double.NaN is returned. Parameters string the source string to parse. position input/output parameter, specifies the start index in string from where to start parsing. See the Returns section for a description of the output values. Returns a Double resulting from the parse, or Double.NaN if there is an error
	8:	android.view.MotionEvent public final int getPointerId (int pointerIndex) Return the pointer identifier associated with a particular pointer data index is this event. The identifier tells you the actual pointer number associated with the data, accounting for individual pointers going up and down since the start of the current gesture. Parameters pointerIndex Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to getPointerCount()-1.
	9:	java.text.NumberFormat public abstract Number parse (String string, ParsePosition position) Parses a Number from the specified string starting at the index specified by position. If the string is successfully parsed then the index of the ParsePosition is updated to the index following the parsed text. On error, the index is unchanged and the error index of ParsePosition is set to the index where the error occurred. Parameters string the string to parse. position input/output parameter, specifies the start index in string from where to start parsing. If parsing is successful, it is updated with the index following the parsed text; on error, the index is unchanged and the error index is set to the index where the error occurred. Returns the Number resulting from the parse or null if there is an error.
getRawFrameCount
Gets the number of raw frames for this Sprite
	0:	android.telephony.PhoneNumberUtils public static String formatNumber (String source) Breaks the given number down and formats it according to the rules for the country the number is from. Parameters source The phone number to format Returns A locally acceptable formatting of the input, or the raw input if formatting rules aren't known for the number
	1:	android.widget.QuickContactBadge public void assignContactFromPhone (String phoneNumber, boolean lazyLookup, Bundle extras) Assign a contact based on a phone number. This should only be used when the contact's URI is not available, as an extra query will have to be performed to lookup the URI based on the phone number. Parameters phoneNumber The phone number of the contact. lazyLookup If this is true, the lookup query will not be performed until this view is clicked. extras A bundle of extras to populate the contact edit page with if the contact is not found and the user chooses to add the phone number to an existing contact or create a new contact. Uses the same string constants as those found in ContactsContract.Intents.Insert
	2:	java.util.Collections public static void shuffle (List<?> list, Random random) Moves every element of the list to a random new position in the list using the specified random number generator. Parameters list the list to shuffle. random the random number generator. Throws UnsupportedOperationException when replacing an element in the list is not supported.
	3:	android.view.MotionEvent public final int getPointerId (int pointerIndex) Return the pointer identifier associated with a particular pointer data index is this event. The identifier tells you the actual pointer number associated with the data, accounting for individual pointers going up and down since the start of the current gesture. Parameters pointerIndex Raw index of pointer to retrieve. Value may be from 0 (the first pointer that is down) to getPointerCount()-1.
	4:	java.util.concurrent.ScheduledThreadPoolExecutor public ScheduledThreadPoolExecutor (int corePoolSize) Creates a new ScheduledThreadPoolExecutor with the given core pool size. Parameters corePoolSize the number of threads to keep in the pool, even if they are idle, unless allowCoreThreadTimeOut is set Throws IllegalArgumentException if corePoolSize < 0
	5:	java.io.LineNumberInputStream public LineNumberInputStream (InputStream in) Constructs a new LineNumberInputStream on the InputStream in. Line numbers are counted for all data read from this stream. Warning: passing a null source creates an invalid LineNumberInputStream. All operations on such a stream will fail. Parameters in The non-null input stream to count line numbers.
	6:	android.app.backup.BackupDataOutput public int writeEntityData (byte[] data, int size) Write a chunk of data under the current entity to the backup transport. Parameters data A raw data buffer to send size The number of bytes to be sent in this chunk Returns the number of bytes written Throws IOException if the write failed
	7:	android.database.CursorWindow public boolean setNumColumns (int columnNum) Sets the number of columns in this window. This method must be called before any rows are added to the window, otherwise it will fail to set the number of columns if it differs from the current number of columns. Parameters columnNum The new number of columns. Returns True if successful.
	8:	android.location.Address public void setPhone (String phone) Sets the phone number associated with this address.
	9:	java.sql.ResultSet public abstract boolean relative (int rows) Moves the cursor position up or down by a specified number of rows. If the new position is beyond the start row (or end row), the cursor position is set before the first row (or, respectively, after the last row). Parameters rows a number of rows to move the cursor - may be positive or negative Returns true if the new cursor position is on a row, false otherwise Throws SQLException if a database error happens.
getFrameSequenceLength
Gets the number of elements in the frame sequence
	0:	android.graphics.drawable.AnimationDrawable public int getNumberOfFrames () Returns The number of frames in the animation
	1:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	2:	java.util.BitSet public int length () Returns the number of bits up to and including the highest bit set. This is unrelated to the size() of the BitSet.
	3:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	4:	android.telephony.PhoneNumberUtils public static boolean isEmergencyNumber (String number) Checks a given number against the list of emergency numbers provided by the RIL and SIM card. Parameters number the number to look up. Returns true if the number is in the list of emergency numbers listed in the RIL / SIM, otherwise return false.
	5:	android.location.Address public void setPhone (String phone) Sets the phone number associated with this address.
	6:	android.view.KeyEvent public final int getRepeatCount () Retrieve the repeat count of the event. For both key up and key down events, this is the number of times the key has repeated with the first down starting at 0 and counting up from there. For multiple key events, this is the number of down/up pairs that have occurred. Returns The number of times the key has repeated.
	7:	android.media.AudioTrack public int setLoopPoints (int startInFrames, int endInFrames, int loopCount) Sets the loop points and the loop count. The loop can be infinite. Similarly to setPlaybackHeadPosition, the track must be stopped or paused for the loop points to be changed, and must use the MODE_STATIC mode. Parameters startInFrames loop start marker expressed in frames Zero corresponds to start of buffer. The start marker must not be greater than or equal to the buffer size in frames, or negative. endInFrames loop end marker expressed in frames The total buffer size in frames corresponds to end of buffer. The end marker must not be greater than the buffer size in frames. For looping, the end marker must not be less than or equal to the start marker, but to disable looping it is permitted for start marker, end marker, and loop count to all be 0. loopCount the number of times the loop is looped. A value of -1 means infinite looping, and 0 disables looping. Returns error code or success, see SUCCESS, ERROR_BAD_VALUE, ERROR_INVALID_OPERATION
	8:	android.widget.NumberPicker public void setOnLongPressUpdateInterval (long intervalMillis) Sets the speed at which the numbers be incremented and decremented when the up and down buttons are long pressed respectively. The default value is 300 ms. Parameters intervalMillis The speed (in milliseconds) at which the numbers will be incremented and decremented.
	9:	android.animation.AnimatorSet.Builder public AnimatorSet.Builder after (long delay) Sets up the animation supplied in the play(Animator) call that created this Builder object to play when the given amount of time elapses. Parameters delay The number of milliseconds that should elapse before the animation starts.
nextFrame
Selects the next frame in the frame sequence
	0:	android.view.Choreographer public void postFrameCallback (Choreographer.FrameCallback callback) Posts a frame callback to run on the next frame. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. See Also postFrameCallbackDelayed(Choreographer.FrameCallback, long) removeFrameCallback(Choreographer.FrameCallback)
	1:	android.view.Choreographer public void postFrameCallbackDelayed (Choreographer.FrameCallback callback, long delayMillis) Posts a frame callback to run on the next frame after the specified delay. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. delayMillis The delay time in milliseconds. See Also postFrameCallback(Choreographer.FrameCallback) removeFrameCallback(Choreographer.FrameCallback)
	2:	android.graphics.drawable.AnimationDrawable public int getNumberOfFrames () Returns The number of frames in the animation
	3:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	4:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	5:	android.hardware.Camera.Parameters public int getPreviewFrameRate () This method was deprecated in API level 9. replaced by getPreviewFpsRange(int[]) Returns the setting for the rate at which preview frames are received. This is the target frame rate. The actual frame rate depends on the driver. Returns the frame rate setting (frames per second)
	6:	android.hardware.Camera.Parameters public void setPreviewFrameRate (int fps) This method was deprecated in API level 9. replaced by setPreviewFpsRange(int, int) Sets the rate at which preview frames are received. This is the target frame rate. The actual frame rate depends on the driver. Parameters fps the frame rate (frames per second)
	7:	android.graphics.Interpolator public void setKeyFrame (int index, int msec, float[] values) Assign the keyFrame (specified by index) a time value and an array of key values (with an implicity blend array of [0, 0, 1, 1] giving linear transition to the next set of key values). Parameters index The index of the key frame to assign msec The time (in mililiseconds) for this key frame. Based on the SystemClock.uptimeMillis() clock values Array of values associated with theis key frame
	8:	android.media.AudioRecord public int getNotificationMarkerPosition () Returns the notification marker position expressed in frames.
	9:	android.media.AudioRecord public int getPositionNotificationPeriod () Returns the notification update period expressed in frames.
prevFrame
Selects the previous frame in the frame sequence
	0:	android.graphics.drawable.AnimationDrawable public int getNumberOfFrames () Returns The number of frames in the animation
	1:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	2:	android.view.Choreographer public void removeFrameCallback (Choreographer.FrameCallback callback) Removes a previously posted frame callback. Parameters callback The frame callback to remove. See Also postFrameCallback(Choreographer.FrameCallback) postFrameCallbackDelayed(Choreographer.FrameCallback, long)
	3:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	4:	android.hardware.Camera.Parameters public int getPreviewFrameRate () This method was deprecated in API level 9. replaced by getPreviewFpsRange(int[]) Returns the setting for the rate at which preview frames are received. This is the target frame rate. The actual frame rate depends on the driver. Returns the frame rate setting (frames per second)
	5:	android.hardware.Camera.Parameters public void setPreviewFrameRate (int fps) This method was deprecated in API level 9. replaced by setPreviewFpsRange(int, int) Sets the rate at which preview frames are received. This is the target frame rate. The actual frame rate depends on the driver. Parameters fps the frame rate (frames per second)
	6:	android.media.AudioRecord public int getNotificationMarkerPosition () Returns the notification marker position expressed in frames.
	7:	android.media.AudioRecord public int getPositionNotificationPeriod () Returns the notification update period expressed in frames.
	8:	android.view.Choreographer public void postFrameCallback (Choreographer.FrameCallback callback) Posts a frame callback to run on the next frame. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. See Also postFrameCallbackDelayed(Choreographer.FrameCallback, long) removeFrameCallback(Choreographer.FrameCallback)
	9:	android.view.Choreographer public void postFrameCallbackDelayed (Choreographer.FrameCallback callback, long delayMillis) Posts a frame callback to run on the next frame after the specified delay. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. delayMillis The delay time in milliseconds. See Also postFrameCallback(Choreographer.FrameCallback) removeFrameCallback(Choreographer.FrameCallback)
paint
Draws the Sprite
	0:	android.graphics.Paint public Paint (Paint paint) Create a new paint, initialized with the attributes in the specified paint parameter. Parameters paint Existing paint used to initialized the attributes of the new paint.
	1:	android.graphics.Paint public Paint () Create a new paint with default settings.
	2:	android.graphics.Canvas public void drawPaint (Paint paint) Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint. Parameters paint The paint used to draw onto the canvas
	3:	android.graphics.LayerRasterizer public void addLayer (Paint paint) 
	4:	android.graphics.drawable.shapes.ArcShape public void draw (Canvas canvas, Paint paint) Draw this shape into the provided Canvas, with the provided Paint. Before calling this, you must call resize(float, float). Parameters canvas the Canvas within which this shape should be drawn paint the Paint object that defines this shape's characteristics
	5:	android.graphics.Bitmap public Bitmap extractAlpha (Paint paint, int[] offsetXY) Returns a new bitmap that captures the alpha values of the original. These values may be affected by the optional Paint parameter, which can contain its own alpha, and may also contain a MaskFilter which could change the actual dimensions of the resulting bitmap (e.g. a blur maskfilter might enlarge the resulting bitmap). If offsetXY is not null, it returns the amount to offset the returned bitmap so that it will logically align with the original. For example, if the paint contains a blur of radius 2, then offsetXY[] would contains -2, -2, so that drawing the alpha bitmap offset by (-2, -2) and then drawing the original would result in the blur visually aligning with the original. The initial density of the returned bitmap is the same as the original's. Parameters paint Optional paint used to modify the alpha values in the resulting bitmap. Pass null for default behavior. offsetXY Optional array that returns the X (index 0) and Y (index 1) offset needed to position the returned bitmap so that it visually lines up with the original. Returns new bitmap containing the (optionally modified by paint) alpha channel of the original bitmap. This may be drawn with Canvas.drawBitmap(), where the color(s) will be taken from the paint that is passed to the draw call.
	6:	android.graphics.Canvas public void drawLines (float[] pts, Paint paint) 
	7:	android.graphics.Canvas public void drawOval (RectF oval, Paint paint) Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint. Parameters oval The rectangle bounds of the oval to be drawn
	8:	android.graphics.Canvas public void drawPath (Path path, Paint paint) Draw the specified path using the specified paint. The path will be filled or framed based on the Style in the paint. Parameters path The path to be drawn paint The paint used to draw the path
	9:	android.graphics.Canvas public void drawPoints (float[] pts, Paint paint) Helper for drawPoints() that assumes you want to draw the entire array
setFrameSequence
Set the frame sequence for this Sprite
	0:	android.hardware.Camera.Parameters public int getPreviewFrameRate () This method was deprecated in API level 9. replaced by getPreviewFpsRange(int[]) Returns the setting for the rate at which preview frames are received. This is the target frame rate. The actual frame rate depends on the driver. Returns the frame rate setting (frames per second)
	1:	android.hardware.Camera.Parameters public void setPreviewFrameRate (int fps) This method was deprecated in API level 9. replaced by setPreviewFpsRange(int, int) Sets the rate at which preview frames are received. This is the target frame rate. The actual frame rate depends on the driver. Parameters fps the frame rate (frames per second)
	2:	android.media.MediaRecorder public void setCaptureRate (double fps) Set video frame capture rate. This can be used to set a different video frame capture rate than the recorded video's playback rate. This method also sets the recording mode to time lapse. In time lapse video recording, only video is recorded. Audio related parameters are ignored when a time lapse recording session starts, if an application sets them. Parameters fps Rate at which frames should be captured in frames per second. The fps can go as low as desired. However the fastest fps will be limited by the hardware. For resolutions that can be captured by the video camera, the fastest fps can be computed using getPreviewFpsRange(int[]). For higher resolutions the fastest fps may be more restrictive. Note that the recorder cannot guarantee that frames will be captured at the given rate due to camera/encoder limitations. However it tries to be as close as possible.
	3:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	4:	android.view.Choreographer.FrameCallback public abstract void doFrame (long frameTimeNanos) Called when a new display frame is being rendered. This method provides the time in nanoseconds when the frame started being rendered. The frame time provides a stable time base for synchronizing animations and drawing. It should be used instead of uptimeMillis() or nanoTime() for animations and drawing in the UI. Using the frame time helps to reduce inter-frame jitter because the frame time is fixed at the time the frame was scheduled to start, regardless of when the animations or drawing callback actually runs. All callbacks that run as part of rendering a frame will observe the same frame time so using the frame time also helps to synchronize effects that are performed by different callbacks. Please note that the framework already takes care to process animations and drawing using the frame time as a stable time base. Most applications should not need to use the frame time information directly. Parameters frameTimeNanos The time in nanoseconds when the frame started being rendered, in the nanoTime() timebase. Divide this value by 1000000 to convert it to the uptimeMillis() time base.
	5:	android.hardware.Camera.Parameters public List<Integer> getSupportedPreviewFrameRates () This method was deprecated in API level 9. replaced by getSupportedPreviewFpsRange() Gets the supported preview frame rates. Returns a list of supported preview frame rates. null if preview frame rate setting is not supported.
	6:	android.support.v4.app.ActionBarDrawerToggle.Delegate public abstract void setActionBarUpIndicator (Drawable upDrawable, int contentDescRes) Set the Action Bar's up indicator drawable and content description. Parameters upDrawable - Drawable to set as up indicator contentDescRes - Content description to set
	7:	android.opengl.GLSurfaceView public void requestRender () Request that the renderer render a frame. This method is typically used when the render mode has been set to RENDERMODE_WHEN_DIRTY, so that frames are only rendered on demand. May be called from any thread. Must not be called before a renderer has been set.
	8:	android.hardware.Camera.Parameters public List<int[]> getSupportedPreviewFpsRange () Gets the supported preview fps (frame-per-second) ranges. Each range contains a minimum fps and maximum fps. If minimum fps equals to maximum fps, the camera outputs frames in fixed frame rate. If not, the camera outputs frames in auto frame rate. The actual frame rate fluctuates between the minimum and the maximum. The values are multiplied by 1000 and represented in integers. For example, if frame rate is 26.623 frames per second, the value is 26623. Returns a list of supported preview fps ranges. This method returns a list with at least one element. Every element is an int array of two values - minimum fps and maximum fps. The list is sorted from small to large (first by maximum fps and then minimum fps). See Also PREVIEW_FPS_MIN_INDEX PREVIEW_FPS_MAX_INDEX
	9:	android.view.Gravity public static void apply (int gravity, int w, int h, Rect container, int xAdj, int yAdj, Rect outRect) Apply a gravity constant to an object. Parameters gravity The desired placement of the object, as defined by the constants in this class. w The horizontal size of the object. h The vertical size of the object. container The frame of the containing space, in which the object will be placed. Should be large enough to contain the width and height of the object. xAdj Offset to apply to the X axis. If gravity is LEFT this pushes it to the right; if gravity is RIGHT it pushes it to the left; if gravity is CENTER_HORIZONTAL it pushes it to the right or left; otherwise it is ignored. yAdj Offset to apply to the Y axis. If gravity is TOP this pushes it down; if gravity is BOTTOM it pushes it up; if gravity is CENTER_VERTICAL it pushes it down or up; otherwise it is ignored. outRect Receives the computed frame of the object in its container.
setImage
Changes the Image containing the Sprite's frames
	0:	android.renderscript.Matrix4f public void loadProjectionNormalized (int w, int h) Helper function to set the current values to a perspective projection matrix with aspect ratio defined by the parameters and (near, far), (bottom, top) mapping to (-1, 1) at z = 0 Parameters w screen width h screen height
	1:	android.support.v8.renderscript.Matrix4f public void loadProjectionNormalized (int w, int h) Helper function to set the current values to a perspective projection matrix with aspect ratio defined by the parameters and (near, far), (bottom, top) mapping to (-1, 1) at z = 0 Parameters w screen width h screen height
	2:	android.speech.RecognitionService protected abstract void onStartListening (Intent recognizerIntent, RecognitionService.Callback listener) Notifies the service that it should start listening for speech. Parameters recognizerIntent contains parameters for the recognition to be performed. The intent may also contain optional extras, see RecognizerIntent. If these values are not set explicitly, default values should be used by the recognizer. listener that will receive the service's callbacks
	3:	android.support.v4.app.NotificationCompat.Builder public NotificationCompat.Builder addAction (int icon, CharSequence title, PendingIntent intent) Add an action to this notification. Actions are typically displayed by the system as a button adjacent to the notification content. Action buttons won't appear on platforms prior to Android 4.1. Action buttons depend on expanded notifications, which are only available in Android 4.1 and later. To ensure that an action button's functionality is always available, first implement the functionality in the Activity that starts when a user clicks the notification (see setContentIntent()), and then enhance the notification by implementing the same functionality with addAction(). Parameters icon Resource ID of a drawable that represents the action. title Text describing the action. intent PendingIntent to be fired when the action is invoked.
	4:	android.provider.CalendarContract.EventDays public static final Cursor query (ContentResolver cr, int startDay, int numDays, String[] projection) Retrieves the days with events for the Julian days starting at "startDay" for "numDays". It returns a cursor containing startday and endday representing the max range of days for all events beginning on each startday.This is a blocking function and should not be done on the UI thread. Parameters cr the ContentResolver startDay the first Julian day in the range numDays the number of days to load (must be at least 1) projection the columns to return in the cursor Returns a database cursor containing a list of start and end days for events
	5:	android.provider.CalendarContract.Instances public static final Cursor query (ContentResolver cr, String[] projection, long begin, long end) Performs a query to return all visible instances in the given range. This is a blocking function and should not be done on the UI thread. This will cause an expansion of recurring events to fill this time range if they are not already expanded and will slow down for larger time ranges with many recurring events. Parameters cr The ContentResolver to use for the query projection The columns to return begin The start of the time range to query in UTC millis since epoch end The end of the time range to query in UTC millis since epoch Returns A Cursor containing all instances in the given range
	6:	android.speech.RecognitionService protected abstract void onCancel (RecognitionService.Callback listener) Notifies the service that it should cancel the speech recognition.
	7:	android.content.CursorLoader public void setProjection (String[] projection) 
	8:	android.support.v4.content.CursorLoader public void setProjection (String[] projection) 
	9:	android.speech.RecognitionService protected abstract void onStopListening (RecognitionService.Callback listener) Notifies the service that it should stop listening for speech. Speech captured so far should be recognized as if the user had stopped speaking at this point. This method is only called if the application calls it explicitly.
defineCollisionRectangle
Defines the Sprite's bounding rectangle that is used for collision detection purposes
	0:	org.apache.http.impl.DefaultConnectionReuseStrategy protected TokenIterator createTokenIterator (HeaderIterator hit) Creates a token iterator from a header iterator. This method can be overridden to replace the implementation of the token iterator. Parameters hit the header iterator Returns the token iterator
	1:	android.app.Instrumentation public boolean checkMonitorHit (Instrumentation.ActivityMonitor monitor, int minHits) Test whether an existing Instrumentation.ActivityMonitor has been hit. If the monitor has been hit at least minHits times, then it will be removed from the activity monitor list and true returned. Otherwise it is left as-is and false is returned. Parameters monitor The ActivityMonitor to check. minHits The minimum number of hits required. Returns True if the hit count has been reached, else false. See Also addMonitor(Instrumentation.ActivityMonitor)
	2:	android.app.Instrumentation.ActivityMonitor public final int getHits () Retrieve the number of times the monitor has been hit so far.
	3:	java.util.concurrent.locks.AbstractQueuedLongSynchronizer protected boolean tryAcquire (long arg) Attempts to acquire in exclusive mode. This method should query if the state of the object permits it to be acquired in the exclusive mode, and if so to acquire it. This method is always invoked by the thread performing acquire. If this method reports failure, the acquire method may queue the thread, if it is not already queued, until it is signalled by a release from some other thread. This can be used to implement method tryLock(). The default implementation throws UnsupportedOperationException. Parameters arg the acquire argument. This value is always the one passed to an acquire method, or is the value saved on entry to a condition wait. The value is otherwise uninterpreted and can represent anything you like. Returns true if successful. Upon success, this object has been acquired. Throws IllegalMonitorStateException if acquiring would place this synchronizer in an illegal state. This exception must be thrown in a consistent fashion for synchronization to work correctly. UnsupportedOperationException if exclusive mode is not supported
	4:	java.util.concurrent.locks.AbstractQueuedSynchronizer protected boolean tryAcquire (int arg) Attempts to acquire in exclusive mode. This method should query if the state of the object permits it to be acquired in the exclusive mode, and if so to acquire it. This method is always invoked by the thread performing acquire. If this method reports failure, the acquire method may queue the thread, if it is not already queued, until it is signalled by a release from some other thread. This can be used to implement method tryLock(). The default implementation throws UnsupportedOperationException. Parameters arg the acquire argument. This value is always the one passed to an acquire method, or is the value saved on entry to a condition wait. The value is otherwise uninterpreted and can represent anything you like. Returns true if successful. Upon success, this object has been acquired. Throws IllegalMonitorStateException if acquiring would place this synchronizer in an illegal state. This exception must be thrown in a consistent fashion for synchronization to work correctly. UnsupportedOperationException if exclusive mode is not supported
	5:	android.app.Instrumentation public Activity waitForMonitor (Instrumentation.ActivityMonitor monitor) Wait for an existing Instrumentation.ActivityMonitor to be hit. Once the monitor has been hit, it is removed from the activity monitor list and the first created Activity object that matched it is returned. Parameters monitor The ActivityMonitor to wait for. Returns The Activity object that matched the monitor.
	6:	java.util.concurrent.locks.AbstractQueuedLongSynchronizer protected long tryAcquireShared (long arg) Attempts to acquire in shared mode. This method should query if the state of the object permits it to be acquired in the shared mode, and if so to acquire it. This method is always invoked by the thread performing acquire. If this method reports failure, the acquire method may queue the thread, if it is not already queued, until it is signalled by a release from some other thread. The default implementation throws UnsupportedOperationException. Parameters arg the acquire argument. This value is always the one passed to an acquire method, or is the value saved on entry to a condition wait. The value is otherwise uninterpreted and can represent anything you like. Returns a negative value on failure; zero if acquisition in shared mode succeeded but no subsequent shared-mode acquire can succeed; and a positive value if acquisition in shared mode succeeded and subsequent shared-mode acquires might also succeed, in which case a subsequent waiting thread must check availability. (Support for three different return values enables this method to be used in contexts where acquires only sometimes act exclusively.) Upon success, this object has been acquired. Throws IllegalMonitorStateException if acquiring would place this synchronizer in an illegal state. This exception must be thrown in a consistent fashion for synchronization to work correctly. UnsupportedOperationException if shared mode is not supported
	7:	java.util.concurrent.locks.AbstractQueuedSynchronizer protected int tryAcquireShared (int arg) Attempts to acquire in shared mode. This method should query if the state of the object permits it to be acquired in the shared mode, and if so to acquire it. This method is always invoked by the thread performing acquire. If this method reports failure, the acquire method may queue the thread, if it is not already queued, until it is signalled by a release from some other thread. The default implementation throws UnsupportedOperationException. Parameters arg the acquire argument. This value is always the one passed to an acquire method, or is the value saved on entry to a condition wait. The value is otherwise uninterpreted and can represent anything you like. Returns a negative value on failure; zero if acquisition in shared mode succeeded but no subsequent shared-mode acquire can succeed; and a positive value if acquisition in shared mode succeeded and subsequent shared-mode acquires might also succeed, in which case a subsequent waiting thread must check availability. (Support for three different return values enables this method to be used in contexts where acquires only sometimes act exclusively.) Upon success, this object has been acquired. Throws IllegalMonitorStateException if acquiring would place this synchronizer in an illegal state. This exception must be thrown in a consistent fashion for synchronization to work correctly. UnsupportedOperationException if shared mode is not supported
	8:	android.print.PrintDocumentAdapter public abstract void onLayout (PrintAttributes oldAttributes, PrintAttributes newAttributes, CancellationSignal cancellationSignal, PrintDocumentAdapter.LayoutResultCallback callback, Bundle extras) Called when the print attributes (page size, density, etc) changed giving you a chance to layout the content such that it matches the new constraints. This method is invoked on the main thread. After you are done laying out, you must invoke: onLayoutFinished(PrintDocumentInfo, boolean) with the last argument true or false depending on whether the layout changed the content or not, respectively; or onLayoutFailed(CharSequence), if an error occurred; or onLayoutCancelled() if layout was cancelled in a response to a cancellation request via the passed in CancellationSignal. Note that you must call one of the methods of the given callback for this method to be considered complete which is you will not receive any calls to this adapter until the current layout operation is complete by invoking a method on the callback instance. The callback methods can be invoked from an arbitrary thread. One of the arguments passed to this method is a CancellationSignal which is used to propagate requests from the system to your application for canceling the current layout operation. For example, a cancellation may be requested if the user changes a print option that may affect layout while you are performing a layout operation. In such a case the system will make an attempt to cancel the current layout as another one will have to be performed. Typically, you should register a cancellation callback in the cancellation signal. The cancellation callback will not be made on the main thread and can be registered as follows: cancellationSignal.setOnCancelListener(new OnCancelListener() { @Override public void onCancel() { // Cancel layout } }); Note: If the content is large and a layout will be performed, it is a good practice to schedule the work on a dedicated thread and register an observer in the provided CancellationSignal upon invocation of which you should stop the layout. Parameters oldAttributes The old print attributes. newAttributes The new print attributes. cancellationSignal Signal for observing cancel layout requests. callback Callback to inform the system for the layout result. extras Additional information about how to layout the content. See Also PrintDocumentAdapter.LayoutResultCallback CancellationSignal EXTRA_PRINT_PREVIEW
	9:	android.app.Instrumentation public Activity waitForMonitorWithTimeout (Instrumentation.ActivityMonitor monitor, long timeOut) Wait for an existing Instrumentation.ActivityMonitor to be hit till the timeout expires. Once the monitor has been hit, it is removed from the activity monitor list and the first created Activity object that matched it is returned. If the timeout expires, a null object is returned. Parameters monitor The ActivityMonitor to wait for. timeOut The timeout value in secs. Returns The Activity object that matched the monitor.
setTransform
Sets the transform for this Sprite
	0:	javax.crypto.Cipher public static final int getMaxAllowedKeyLength (String transformation) Returns the maximum key length for the specified transformation. Parameters transformation the transformation name. Returns the maximum key length, currently Integer.MAX_VALUE. Throws NoSuchAlgorithmException if no provider for the specified transformation can be found. NullPointerException if transformation is null.
	1:	android.view.MotionEvent public final void transform (Matrix matrix) Applies a transformation matrix to all of the points in the event. Parameters matrix The transformation matrix to apply.
	2:	javax.crypto.Cipher public static final Cipher getInstance (String transformation) Creates a new Cipher for the specified transformation. The installed providers are searched in order for an implementation of the specified transformation. The first found provider providing the transformation is used to create the cipher. If no provider is found an exception is thrown. Parameters transformation the name of the transformation to create a cipher for. Returns a cipher for the requested transformation. Throws NoSuchAlgorithmException if no installed provider can provide the transformation, or it is null, empty or in an invalid format. NoSuchPaddingException if no installed provider can provide the padding scheme in the transformation.
	3:	javax.crypto.Cipher public static final Cipher getInstance (String transformation, String provider) Creates a new cipher for the specified transformation provided by the specified provider. Parameters transformation the name of the transformation to create a cipher for. provider the name of the provider to ask for the transformation. Returns a cipher for the requested transformation. Throws NoSuchAlgorithmException if the specified provider can not provide the transformation, or it is null, empty or in an invalid format. NoSuchProviderException if no provider with the specified name can be found. NoSuchPaddingException if the requested padding scheme in the transformation is not available. IllegalArgumentException if the specified provider is null.
	4:	javax.crypto.Cipher public static final Cipher getInstance (String transformation, Provider provider) Creates a new cipher for the specified transformation. Parameters transformation the name of the transformation to create a cipher for. provider the provider to ask for the transformation. Returns a cipher for the requested transformation. Throws NoSuchAlgorithmException if the specified provider can not provide the transformation, or it is null, empty or in an invalid format. NoSuchPaddingException if the requested padding scheme in the transformation is not available. IllegalArgumentException if the provider is null.
	5:	android.graphics.Path public void transform (Matrix matrix) Transform the points in this path by matrix. Parameters matrix The matrix to apply to the path
	6:	android.view.animation.AlphaAnimation protected void applyTransformation (float interpolatedTime, Transformation t) Changes the alpha property of the supplied Transformation Parameters interpolatedTime The value of the normalized time (0.0 to 1.0) after it has been run through the interpolation function. t The Transformation object to fill in with the current transforms.
	7:	android.graphics.Camera public Camera () Creates a new camera, with empty transformations.
	8:	android.graphics.Matrix public boolean mapRect (RectF dst, RectF src) Apply this matrix to the src rectangle, and write the transformed rectangle into dst. This is accomplished by transforming the 4 corners of src, and then setting dst to the bounds of those points. Parameters dst Where the transformed rectangle is written. src The original rectangle to be transformed. Returns the result of calling rectStaysRect()
	9:	javax.crypto.Cipher public static final AlgorithmParameterSpec getMaxAllowedParameterSpec (String transformation) Returns the maximum cipher parameter value for the specified transformation. If there is no maximum limit, null is returned. Parameters transformation the transformation name. Returns a parameter spec holding the maximum value or null. Currently null. Throws NoSuchAlgorithmException if no provider for the specified transformation can be found. NullPointerException if transformation is null.
collidesWith
Checks for a collision between this Sprite and the specified Sprite
	0:	java.util.BitSet public void and (BitSet bs) Logically ands the bits of this BitSet with bs.
	1:	android.media.FaceDetector.Face public float confidence () Returns a confidence factor between 0 and 1. This indicates how certain what has been found is actually a face. A confidence factor above 0.3 is usually good enough.
	2:	java.io.File public boolean renameTo (File newPath) Renames this file to newPath. This operation is supported for both files and directories. Many failures are possible. Some of the more likely failures include: Write permission is required on the directories containing both the source and destination paths. Search permission is required for all parents of both paths. Both paths be on the same mount point. On Android, applications are most likely to hit this restriction when attempting to copy between internal storage and an SD card. Note that this method does not throw IOException on failure. Callers must check the return value. Parameters newPath the new path. Returns true on success.
	3:	org.apache.http.impl.DefaultConnectionReuseStrategy protected TokenIterator createTokenIterator (HeaderIterator hit) Creates a token iterator from a header iterator. This method can be overridden to replace the implementation of the token iterator. Parameters hit the header iterator Returns the token iterator
	4:	android.app.Instrumentation public boolean checkMonitorHit (Instrumentation.ActivityMonitor monitor, int minHits) Test whether an existing Instrumentation.ActivityMonitor has been hit. If the monitor has been hit at least minHits times, then it will be removed from the activity monitor list and true returned. Otherwise it is left as-is and false is returned. Parameters monitor The ActivityMonitor to check. minHits The minimum number of hits required. Returns True if the hit count has been reached, else false. See Also addMonitor(Instrumentation.ActivityMonitor)
	5:	android.app.Instrumentation.ActivityMonitor public final int getHits () Retrieve the number of times the monitor has been hit so far.
	6:	android.app.Instrumentation public Activity waitForMonitor (Instrumentation.ActivityMonitor monitor) Wait for an existing Instrumentation.ActivityMonitor to be hit. Once the monitor has been hit, it is removed from the activity monitor list and the first created Activity object that matched it is returned. Parameters monitor The ActivityMonitor to wait for. Returns The Activity object that matched the monitor.
	7:	javax.microedition.khronos.opengles.GL10 public abstract void glPolygonOffset (float factor, float units) 
	8:	javax.microedition.khronos.opengles.GL10 public abstract void glPolygonOffsetx (int factor, int units) 
	9:	android.opengl.GLES10 public static void glPolygonOffset (float factor, float units) 
collidesWith
Checks for a collision between this Sprite and the specified TiledLayer
	0:	java.util.BitSet public void and (BitSet bs) Logically ands the bits of this BitSet with bs.
	1:	android.media.FaceDetector.Face public float confidence () Returns a confidence factor between 0 and 1. This indicates how certain what has been found is actually a face. A confidence factor above 0.3 is usually good enough.
	2:	java.io.File public boolean renameTo (File newPath) Renames this file to newPath. This operation is supported for both files and directories. Many failures are possible. Some of the more likely failures include: Write permission is required on the directories containing both the source and destination paths. Search permission is required for all parents of both paths. Both paths be on the same mount point. On Android, applications are most likely to hit this restriction when attempting to copy between internal storage and an SD card. Note that this method does not throw IOException on failure. Callers must check the return value. Parameters newPath the new path. Returns true on success.
	3:	org.apache.http.impl.DefaultConnectionReuseStrategy protected TokenIterator createTokenIterator (HeaderIterator hit) Creates a token iterator from a header iterator. This method can be overridden to replace the implementation of the token iterator. Parameters hit the header iterator Returns the token iterator
	4:	android.app.Instrumentation public boolean checkMonitorHit (Instrumentation.ActivityMonitor monitor, int minHits) Test whether an existing Instrumentation.ActivityMonitor has been hit. If the monitor has been hit at least minHits times, then it will be removed from the activity monitor list and true returned. Otherwise it is left as-is and false is returned. Parameters monitor The ActivityMonitor to check. minHits The minimum number of hits required. Returns True if the hit count has been reached, else false. See Also addMonitor(Instrumentation.ActivityMonitor)
	5:	android.app.Instrumentation.ActivityMonitor public final int getHits () Retrieve the number of times the monitor has been hit so far.
	6:	android.app.Instrumentation public Activity waitForMonitor (Instrumentation.ActivityMonitor monitor) Wait for an existing Instrumentation.ActivityMonitor to be hit. Once the monitor has been hit, it is removed from the activity monitor list and the first created Activity object that matched it is returned. Parameters monitor The ActivityMonitor to wait for. Returns The Activity object that matched the monitor.
	7:	javax.microedition.khronos.opengles.GL10 public abstract void glPolygonOffset (float factor, float units) 
	8:	javax.microedition.khronos.opengles.GL10 public abstract void glPolygonOffsetx (int factor, int units) 
	9:	android.opengl.GLES10 public static void glPolygonOffset (float factor, float units) 
collidesWith
Checks for a collision between this Sprite and the specified Image with its upper left corner at the specified location
	0:	android.location.Geocoder public List<Address> getFromLocationName (String locationName, int maxResults, double lowerLeftLatitude, double lowerLeftLongitude, double upperRightLatitude, double upperRightLongitude) Returns an array of Addresses that are known to describe the named location, which may be a place name such as "Dalvik, Iceland", an address such as "1600 Amphitheatre Parkway, Mountain View, CA", an airport code such as "SFO", etc.. The returned addresses will be localized for the locale provided to this class's constructor. You may specify a bounding box for the search results by including the Latitude and Longitude of the Lower Left point and Upper Right point of the box. The query will block and returned values will be obtained by means of a network lookup. The results are a best guess and are not guaranteed to be meaningful or correct. It may be useful to call this method from a thread separate from your primary UI thread. Parameters locationName a user-supplied description of a location maxResults max number of addresses to return. Smaller numbers (1 to 5) are recommended lowerLeftLatitude the latitude of the lower left corner of the bounding box lowerLeftLongitude the longitude of the lower left corner of the bounding box upperRightLatitude the latitude of the upper right corner of the bounding box upperRightLongitude the longitude of the upper right corner of the bounding box Returns a list of Address objects. Returns null or empty list if no matches were found or there is no backend service available. Throws IllegalArgumentException if locationName is null IllegalArgumentException if any latitude is less than -90 or greater than 90 IllegalArgumentException if any longitude is less than -180 or greater than 180 IOException if the network is unavailable or any other I/O problem occurs
	1:	android.graphics.drawable.GradientDrawable public void setCornerRadii (float[] radii) Specify radii for each of the 4 corners. For each corner, the array contains 2 values, [X_radius, Y_radius]. The corners are ordered top-left, top-right, bottom-right, bottom-left. This property is honored only when the shape is of type RECTANGLE. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters radii 4 pairs of X and Y radius for each corner, specified in pixels. The length of this array must be >= 8 See Also mutate() setCornerRadii(float[]) setShape(int)
	2:	android.widget.PopupWindow public void showAsDropDown (View anchor) Display the content view in a popup window anchored to the bottom-left corner of the anchor view. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled, the bottom-left corner of the popup is pinned at the top left corner of the anchor view. Parameters anchor the view on which to pin the popup window See Also dismiss()
	3:	android.app.Instrumentation public boolean checkMonitorHit (Instrumentation.ActivityMonitor monitor, int minHits) Test whether an existing Instrumentation.ActivityMonitor has been hit. If the monitor has been hit at least minHits times, then it will be removed from the activity monitor list and true returned. Otherwise it is left as-is and false is returned. Parameters monitor The ActivityMonitor to check. minHits The minimum number of hits required. Returns True if the hit count has been reached, else false. See Also addMonitor(Instrumentation.ActivityMonitor)
	4:	android.view.OrientationListener public void onSensorChanged (int sensor, float[] values) Called when sensor values have changed. The length and contents of the values array vary depending on which sensor is being monitored. See SensorManager for details on possible sensor types. Definition of the coordinate system used below. The X axis refers to the screen's horizontal axis (the small edge in portrait mode, the long edge in landscape mode) and points to the right. The Y axis refers to the screen's vertical axis and points towards the top of the screen (the origin is in the lower-left corner). The Z axis points toward the sky when the device is lying on its back on a table. IMPORTANT NOTE: The axis are swapped when the device's screen orientation changes. To access the unswapped values, use indices 3, 4 and 5 in values[]. SENSOR_ORIENTATION, SENSOR_ORIENTATION_RAW: All values are angles in degrees. values[0]: Azimuth, rotation around the Z axis (0<=azimuth<360). 0 = North, 90 = East, 180 = South, 270 = West values[1]: Pitch, rotation around X axis (-180<=pitch<=180), with positive values when the z-axis moves toward the y-axis. values[2]: Roll, rotation around Y axis (-90<=roll<=90), with positive values when the z-axis moves toward the x-axis. Note that this definition of yaw, pitch and roll is different from the traditional definition used in aviation where the X axis is along the long side of the plane (tail to nose). SENSOR_ACCELEROMETER: All values are in SI units (m/s^2) and measure contact forces. values[0]: force applied by the device on the x-axis values[1]: force applied by the device on the y-axis values[2]: force applied by the device on the z-axis Examples: When the device is pushed on its left side toward the right, the x acceleration value is negative (the device applies a reaction force to the push toward the left) When the device lies flat on a table, the acceleration value is -STANDARD_GRAVITY, which correspond to the force the device applies on the table in reaction to gravity. SENSOR_MAGNETIC_FIELD: All values are in micro-Tesla (uT) and measure the ambient magnetic field in the X, Y and -Z axis. Note: the magnetic field's Z axis is inverted. Parameters sensor The ID of the sensor being monitored values The new values for the sensor.
	5:	android.view.animation.ScaleAnimation public ScaleAnimation (float fromX, float toX, float fromY, float toY, float pivotX, float pivotY) Constructor to use when building a ScaleAnimation from code Parameters fromX Horizontal scaling factor to apply at the start of the animation toX Horizontal scaling factor to apply at the end of the animation fromY Vertical scaling factor to apply at the start of the animation toY Vertical scaling factor to apply at the end of the animation pivotX The X coordinate of the point about which the object is being scaled, specified as an absolute number where 0 is the left edge. (This point remains fixed while the object changes size.) pivotY The Y coordinate of the point about which the object is being scaled, specified as an absolute number where 0 is the top edge. (This point remains fixed while the object changes size.)
	6:	android.graphics.drawable.PaintDrawable public void setCornerRadii (float[] radii) Specify radii for each of the 4 corners. For each corner, the array contains 2 values, [X_radius, Y_radius]. The corners are ordered top-left, top-right, bottom-right, bottom-left Parameters radii the x and y radii of the corners
	7:	android.widget.PopupWindow public void showAsDropDown (View anchor, int xoff, int yoff, int gravity) Display the content view in a popup window anchored to the bottom-left corner of the anchor view offset by the specified x and y coordinates. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled, the bottom-left corner of the popup is pinned at the top left corner of the anchor view. If the view later scrolls to move anchor to a different location, the popup will be moved correspondingly. Parameters anchor the view on which to pin the popup window xoff A horizontal offset from the anchor in pixels yoff A vertical offset from the anchor in pixels gravity Alignment of the popup relative to the anchor See Also dismiss()
	8:	android.widget.PopupWindow public void showAsDropDown (View anchor, int xoff, int yoff) Display the content view in a popup window anchored to the bottom-left corner of the anchor view offset by the specified x and y coordinates. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled, the bottom-left corner of the popup is pinned at the top left corner of the anchor view. If the view later scrolls to move anchor to a different location, the popup will be moved correspondingly. Parameters anchor the view on which to pin the popup window xoff A horizontal offset from the anchor in pixels yoff A vertical offset from the anchor in pixels See Also dismiss()
	9:	android.view.animation.ScaleAnimation public ScaleAnimation (float fromX, float toX, float fromY, float toY, int pivotXType, float pivotXValue, int pivotYType, float pivotYValue) Constructor to use when building a ScaleAnimation from code Parameters fromX Horizontal scaling factor to apply at the start of the animation toX Horizontal scaling factor to apply at the end of the animation fromY Vertical scaling factor to apply at the start of the animation toY Vertical scaling factor to apply at the end of the animation pivotXType Specifies how pivotXValue should be interpreted. One of Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT. pivotXValue The X coordinate of the point about which the object is being scaled, specified as an absolute number where 0 is the left edge. (This point remains fixed while the object changes size.) This value can either be an absolute number if pivotXType is ABSOLUTE, or a percentage (where 1.0 is 100%) otherwise. pivotYType Specifies how pivotYValue should be interpreted. One of Animation.ABSOLUTE, Animation.RELATIVE_TO_SELF, or Animation.RELATIVE_TO_PARENT. pivotYValue The Y coordinate of the point about which the object is being scaled, specified as an absolute number where 0 is the top edge. (This point remains fixed while the object changes size.) This value can either be an absolute number if pivotYType is ABSOLUTE, or a percentage (where 1.0 is 100%) otherwise.
