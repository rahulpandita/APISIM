GameCanvas
Creates a new instance of a GameCanvas
	0:	java.lang.reflect.ParameterizedType public abstract Type getRawType () Returns the declaring type of this parameterized type. The raw type of Set field; is Set. Returns the raw type of this parameterized type
	1:	javax.microedition.khronos.opengles.GL10 public abstract void glPolygonOffset (float factor, float units) 
	2:	javax.microedition.khronos.opengles.GL10 public abstract void glPolygonOffsetx (int factor, int units) 
	3:	android.opengl.GLES10 public static void glPolygonOffset (float factor, float units) 
	4:	android.opengl.GLES10 public static void glPolygonOffsetx (int factor, int units) 
	5:	android.opengl.GLES11Ext public static void glPolygonOffsetxOES (int factor, int units) 
	6:	android.opengl.GLES20 public static void glPolygonOffset (float factor, float units) 
	7:	javax.xml.datatype.Duration public Duration multiply (int factor) Computes a new duration whose value is factor times longer than the value of this duration. This method is provided for the convenience. It is functionally equivalent to the following code: multiply(new BigDecimal(String.valueOf(factor))) Parameters factor Factor times longer of new Duration to create. Returns New Duration that is factortimes longer than this Duration. See Also multiply(BigDecimal)
	8:	org.w3c.dom.ls.LSOutput public abstract Writer getCharacterStream () An attribute of a language and binding dependent type that represents a writable stream to which 16-bit units can be output.
	9:	org.w3c.dom.ls.LSOutput public abstract void setCharacterStream (Writer characterStream) An attribute of a language and binding dependent type that represents a writable stream to which 16-bit units can be output.
getGraphics
Obtains the Graphics object for rendering a GameCanvas
	0:	android.mtp.MtpObjectInfo public final int getParent () Returns the object handle for the object's parent Will be zero for the root directory of a storage unit Returns the object's parent
	1:	android.mtp.MtpDevice public long getStorageId (int objectHandle) Retrieves the ID of the storage unit containing the given object on the device. Parameters objectHandle handle of the object to query Returns the object's storage unit ID
	2:	android.media.RemoteControlClient.MetadataEditor public synchronized RemoteControlClient.MetadataEditor putBitmap (int key, Bitmap bitmap) Sets the album / artwork picture to be displayed on the remote control. Parameters key the identifier of the bitmap to set. The only valid value is BITMAP_KEY_ARTWORK bitmap The bitmap for the artwork, or null if there isn't any. Returns Returns a reference to the same MetadataEditor object, so you can chain put calls together. Throws IllegalArgumentException IllegalArgumentException See Also Bitmap
	3:	android.opengl.GLUtils public static void texImage2D (int target, int level, Bitmap bitmap, int border) A version of texImage2D that determines the internalFormat and type automatically.
	4:	android.mtp.MtpObjectInfo public final int getStorageId () Returns the storage ID for the MTP object's storage unit Returns the storage ID
	5:	org.apache.http.ProtocolVersion public final boolean equals (Object obj) Checks equality of this protocol version with an object. The object is equal if it is a protocl version with the same protocol name, major version number, and minor version number. The specific class of the object is not relevant, instances of derived classes with identical attributes are equal to instances of the base class and vice versa. Parameters obj the object to compare with Returns true if the argument is the same protocol version, false otherwise
	6:	android.opengl.GLUtils public static void texImage2D (int target, int level, int internalformat, Bitmap bitmap, int type, int border) A version of texImage2D() that takes an explicit type parameter as defined by the OpenGL ES specification. The actual type and internalformat of the bitmap must be compatible with the specified type and internalformat parameters.
	7:	org.w3c.dom.Document public abstract ProcessingInstruction createProcessingInstruction (String target, String data) Creates a ProcessingInstruction node given the specified name and data strings. Parameters target The target part of the processing instruction.Unlike Document.createElementNS or Document.createAttributeNS, no namespace well-formed checking is done on the target name. Applications should invoke Document.normalizeDocument() with the parameter " namespaces" set to true in order to ensure that the target name is namespace well-formed. data The data for the node. Returns The new ProcessingInstruction object. Throws DOMException INVALID_CHARACTER_ERR: Raised if the specified target is not an XML name according to the XML version in use specified in the Document.xmlVersion attribute. NOT_SUPPORTED_ERR: Raised if this document is an HTML document.
	8:	android.mtp.MtpDevice public int[] getObjectHandles (int storageId, int format, int objectHandle) Returns the list of object handles for all objects on the given storage unit, with the given format and parent. Information about each object can be accessed via getObjectInfo(int). Parameters storageId the storage unit to query format the format of the object to return, or zero for all formats objectHandle the parent object to query, or zero for the storage root Returns the object handles
	9:	java.util.concurrent.Delayed public abstract long getDelay (TimeUnit unit) Returns the remaining delay associated with this object, in the given time unit. Parameters unit the time unit Returns the remaining delay; zero or negative values indicate that the delay has already elapsed
getKeyStates
Gets the states of the physical game keys
	0:	java.security.KeyStore.SecretKeyEntry public SecretKey getSecretKey () Returns the secret key. Returns the secret key.
	1:	org.apache.http.impl.conn.tsccm.BasicPoolEntryRef public final HttpRoute getRoute () Obtain the planned route for the referenced entry. The planned route is still available, even if the entry is gone. Returns the planned route
	2:	org.apache.http.conn.routing.BasicRouteDirector protected int firstStep (RouteInfo plan) Determines the first step to establish a route. Parameters plan the planned route Returns the first step
	3:	javax.crypto.KeyGenerator public final SecretKey generateKey () Generates a secret key. Returns the generated secret key.
	4:	javax.crypto.KeyGeneratorSpi protected abstract SecretKey engineGenerateKey () Generates a secret key. Returns the generated secret key.
	5:	javax.crypto.KeyAgreement public final byte[] generateSecret () Generates the shared secret. Returns the generated shared secret. Throws IllegalStateException if this key agreement is not complete.
	6:	javax.crypto.KeyAgreementSpi protected abstract byte[] engineGenerateSecret () Generates the shared secret. Returns the generated shared secret. Throws IllegalStateException if this key agreement is not complete.
	7:	org.apache.http.conn.routing.BasicRouteDirector public int nextStep (RouteInfo plan, RouteInfo fact) Provides the next step. Parameters plan the planned route fact the currently established route, or null if nothing is established Returns one of the constants defined in this class, indicating either the next step to perform, or success, or failure. 0 is for success, a negative value for failure.
	8:	org.apache.http.conn.routing.BasicRouteDirector protected int directStep (RouteInfo plan, RouteInfo fact) Determines the next step to establish a direct connection. Parameters plan the planned route fact the currently established route Returns one of the constants defined in this class, indicating either the next step to perform, or success, or failure
	9:	org.apache.http.conn.routing.BasicRouteDirector protected int proxiedStep (RouteInfo plan, RouteInfo fact) Determines the next step to establish a connection via proxy. Parameters plan the planned route fact the currently established route Returns one of the constants defined in this class, indicating either the next step to perform, or success, or failure
paint
Paints this GameCanvas
	0:	android.graphics.Paint public Paint (Paint paint) Create a new paint, initialized with the attributes in the specified paint parameter. Parameters paint Existing paint used to initialized the attributes of the new paint.
	1:	android.graphics.Paint public Paint () Create a new paint with default settings.
	2:	android.graphics.Canvas public void drawPaint (Paint paint) Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint. Parameters paint The paint used to draw onto the canvas
	3:	android.graphics.LayerRasterizer public void addLayer (Paint paint) 
	4:	android.graphics.drawable.shapes.ArcShape public void draw (Canvas canvas, Paint paint) Draw this shape into the provided Canvas, with the provided Paint. Before calling this, you must call resize(float, float). Parameters canvas the Canvas within which this shape should be drawn paint the Paint object that defines this shape's characteristics
	5:	android.graphics.Bitmap public Bitmap extractAlpha (Paint paint, int[] offsetXY) Returns a new bitmap that captures the alpha values of the original. These values may be affected by the optional Paint parameter, which can contain its own alpha, and may also contain a MaskFilter which could change the actual dimensions of the resulting bitmap (e.g. a blur maskfilter might enlarge the resulting bitmap). If offsetXY is not null, it returns the amount to offset the returned bitmap so that it will logically align with the original. For example, if the paint contains a blur of radius 2, then offsetXY[] would contains -2, -2, so that drawing the alpha bitmap offset by (-2, -2) and then drawing the original would result in the blur visually aligning with the original. The initial density of the returned bitmap is the same as the original's. Parameters paint Optional paint used to modify the alpha values in the resulting bitmap. Pass null for default behavior. offsetXY Optional array that returns the X (index 0) and Y (index 1) offset needed to position the returned bitmap so that it visually lines up with the original. Returns new bitmap containing the (optionally modified by paint) alpha channel of the original bitmap. This may be drawn with Canvas.drawBitmap(), where the color(s) will be taken from the paint that is passed to the draw call.
	6:	android.graphics.Canvas public void drawLines (float[] pts, Paint paint) 
	7:	android.graphics.Canvas public void drawOval (RectF oval, Paint paint) Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint. Parameters oval The rectangle bounds of the oval to be drawn
	8:	android.graphics.Canvas public void drawPath (Path path, Paint paint) Draw the specified path using the specified paint. The path will be filled or framed based on the Style in the paint. Parameters path The path to be drawn paint The paint used to draw the path
	9:	android.graphics.Canvas public void drawPoints (float[] pts, Paint paint) Helper for drawPoints() that assumes you want to draw the entire array
flushGraphics
Flushes the specified region of the off-screen buffer to the display
	0:	android.inputmethodservice.KeyboardView public void invalidateAllKeys () Requests a redraw of the entire keyboard. Calling invalidate() is not sufficient because the keyboard renders the keys to an off-screen buffer and an invalidate() only draws the cached buffer. See Also invalidateKey(int)
	1:	android.inputmethodservice.InputMethodService public void onUpdateExtractingViews (EditorInfo ei) Called when the fullscreen-mode extracting editor info has changed, to update the state of its UI such as the action buttons shown. You do not need to deal with this if you are using the standard full screen extract UI. If replacing it, you will need to re-implement this to put the appropriate action button in your own UI and handle it, and perform any other changes. The standard implementation turns on or off its accessory area depending on whether there is an action button, and hides or shows the entire extract area depending on whether it makes sense for the current editor. In particular, a TYPE_NULL or TYPE_TEXT_VARIATION_FILTER input type will turn off the extract area since there is no text to be shown.
	2:	android.media.MediaPlayer public void setScreenOnWhilePlaying (boolean screenOn) Control whether we should use the attached SurfaceHolder to keep the screen on while video playback is occurring. This is the preferred method over setWakeMode(Context, int) where possible, since it doesn't require that the application have permission for low-level wake lock access. Parameters screenOn Supply true to keep the screen on, false to allow it to turn off.
	3:	android.renderscript.Allocation public void copy1DRangeFromUnchecked (int off, int count, byte[] d) Copy an array into part of this Allocation. This method does not guarantee that the Allocation is compatible with the input buffer. Parameters off The offset of the first element to be copied. count The number of elements to be copied. d the source data array
	4:	android.renderscript.Allocation public void copy1DRangeFromUnchecked (int off, int count, short[] d) Copy an array into part of this Allocation. This method does not guarantee that the Allocation is compatible with the input buffer. Parameters off The offset of the first element to be copied. count The number of elements to be copied. d the source data array
	5:	android.renderscript.Allocation public void copy1DRangeFromUnchecked (int off, int count, float[] d) Copy an array into part of this Allocation. This method does not guarantee that the Allocation is compatible with the input buffer. Parameters off The offset of the first element to be copied. count The number of elements to be copied. d the source data array
	6:	android.renderscript.Allocation public void copy1DRangeFromUnchecked (int off, int count, int[] d) Copy an array into part of this Allocation. This method does not guarantee that the Allocation is compatible with the input buffer. Parameters off The offset of the first element to be copied. count The number of elements to be copied. d the source data array
	7:	android.support.v8.renderscript.Allocation public void copy1DRangeFromUnchecked (int off, int count, byte[] d) Copy an array into part of this Allocation. This method does not guarantee that the Allocation is compatible with the input buffer. Parameters off The offset of the first element to be copied. count The number of elements to be copied. d the source data array
	8:	android.support.v8.renderscript.Allocation public void copy1DRangeFromUnchecked (int off, int count, short[] d) Copy an array into part of this Allocation. This method does not guarantee that the Allocation is compatible with the input buffer. Parameters off The offset of the first element to be copied. count The number of elements to be copied. d the source data array
	9:	android.support.v8.renderscript.Allocation public void copy1DRangeFromUnchecked (int off, int count, float[] d) Copy an array into part of this Allocation. This method does not guarantee that the Allocation is compatible with the input buffer. Parameters off The offset of the first element to be copied. count The number of elements to be copied. d the source data array
flushGraphics
Flushes the off-screen buffer to the display
	0:	android.inputmethodservice.KeyboardView public void invalidateAllKeys () Requests a redraw of the entire keyboard. Calling invalidate() is not sufficient because the keyboard renders the keys to an off-screen buffer and an invalidate() only draws the cached buffer. See Also invalidateKey(int)
	1:	android.media.MediaPlayer public void setScreenOnWhilePlaying (boolean screenOn) Control whether we should use the attached SurfaceHolder to keep the screen on while video playback is occurring. This is the preferred method over setWakeMode(Context, int) where possible, since it doesn't require that the application have permission for low-level wake lock access. Parameters screenOn Supply true to keep the screen on, false to allow it to turn off.
	2:	android.widget.MediaController public void show () Show the controller on screen. It will go away automatically after 3 seconds of inactivity.
	3:	android.widget.PopupWindow public boolean isShowing () Indicate whether this popup window is showing on screen. Returns true if the popup is showing, false otherwise
	4:	android.inputmethodservice.InputMethodService public void onUpdateExtractingViews (EditorInfo ei) Called when the fullscreen-mode extracting editor info has changed, to update the state of its UI such as the action buttons shown. You do not need to deal with this if you are using the standard full screen extract UI. If replacing it, you will need to re-implement this to put the appropriate action button in your own UI and handle it, and perform any other changes. The standard implementation turns on or off its accessory area depending on whether there is an action button, and hides or shows the entire extract area depending on whether it makes sense for the current editor. In particular, a TYPE_NULL or TYPE_TEXT_VARIATION_FILTER input type will turn off the extract area since there is no text to be shown.
	5:	android.hardware.Camera public final void setPreviewCallbackWithBuffer (Camera.PreviewCallback cb) Installs a callback to be invoked for every preview frame, using buffers supplied with addCallbackBuffer(byte[]), in addition to displaying them on the screen. The callback will be repeatedly called for as long as preview is active and buffers are available. Any other preview callbacks are overridden. The purpose of this method is to improve preview efficiency and frame rate by allowing preview frame memory reuse. You must call addCallbackBuffer(byte[]) at some point -- before or after calling this method -- or no callbacks will received. The buffer queue will be cleared if this method is called with a null callback, setPreviewCallback(Camera.PreviewCallback) is called, or setOneShotPreviewCallback(Camera.PreviewCallback) is called. If you are using the preview data to create video or still images, strongly consider using MediaActionSound to properly indicate image capture or recording start/stop to the user. Parameters cb a callback object that receives a copy of the preview frame, or null to stop receiving callbacks and clear the buffer queue. See Also addCallbackBuffer(byte[]) MediaActionSound
	6:	android.app.KeyguardManager public boolean inKeyguardRestrictedInputMode () If keyguard screen is showing or in restricted key input mode (i.e. in keyguard password emergency screen). When in such mode, certain keys, such as the Home key and the right soft keys, don't work. Returns true if in keyguard restricted input mode. See Also inKeyguardRestrictedKeyInputMode()
	7:	android.renderscript.Allocation public Surface getSurface () Returns the handle to a raw buffer that is being managed by the screen compositor. This operation is only valid for Allocations with USAGE_IO_INPUT. Returns Surface object associated with allocation
	8:	android.widget.PopupWindow public void setClippingEnabled (boolean enabled) Allows the popup window to extend beyond the bounds of the screen. By default the window is clipped to the screen boundaries. Setting this to false will allow windows to be accurately positioned. If the popup is showing, calling this method will take effect only the next time the popup is shown or through a manual call to one of the update() methods. Parameters enabled false if the window should be allowed to extend outside of the screen See Also isShowing() isClippingEnabled() update()
	9:	android.os.PowerManager.WakeLock public void release () Releases the wake lock. This method releases your claim to the CPU or screen being on. The screen may turn off shortly after you release the wake lock, or it may not if there are other wake locks still held.
