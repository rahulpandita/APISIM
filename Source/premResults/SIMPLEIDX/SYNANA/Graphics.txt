drawString
(x,y)
(LEFT, HCENTER, RIGHT)
(TOP, BASELINE, BOTTOM)
OR
TOP | LEFT

Vertical centering of the text is not specified since it is not considered useful, it is hard to specify, and it is burdensome to implement
	0:	android.graphics.Rect public void set (int left, int top, int right, int bottom) Set the rectangle's coordinates to the specified values. Note: no range checking is performed, so it is up to the caller to ensure that left <= right and top <= bottom. Parameters left The X coordinate of the left side of the rectangle top The Y coordinate of the top of the rectangle right The X coordinate of the right side of the rectangle bottom The Y coordinate of the bottom of the rectangle
	1:	android.graphics.RectF public void set (float left, float top, float right, float bottom) Set the rectangle's coordinates to the specified values. Note: no range checking is performed, so it is up to the caller to ensure that left <= right and top <= bottom. Parameters left The X coordinate of the left side of the rectangle top The Y coordinate of the top of the rectangle right The X coordinate of the right side of the rectangle bottom The Y coordinate of the bottom of the rectangle
	2:	android.graphics.Rect public String flattenToString () Return a string representation of the rectangle in a well-defined format. You can later recover the Rect from this string through unflattenFromString(String). Returns Returns a new String of the form "left top right bottom"
	3:	android.text.style.BulletSpan public void drawLeadingMargin (Canvas c, Paint p, int x, int dir, int top, int baseline, int bottom, CharSequence text, int start, int end, boolean first, Layout l) Renders the leading margin. This is called before the margin has been adjusted by the value returned by getLeadingMargin(boolean). Parameters c the canvas p the paint. The this should be left unchanged on exit. x the current position of the margin dir the base direction of the paragraph; if negative, the margin is to the right of the text, otherwise it is to the left. top the top of the line baseline the baseline of the line bottom the bottom of the line text the text start the start of the line end the end of the line first true if this is the first line of its paragraph l the layout containing this line
	4:	android.text.style.DrawableMarginSpan public void drawLeadingMargin (Canvas c, Paint p, int x, int dir, int top, int baseline, int bottom, CharSequence text, int start, int end, boolean first, Layout layout) Renders the leading margin. This is called before the margin has been adjusted by the value returned by getLeadingMargin(boolean). Parameters c the canvas p the paint. The this should be left unchanged on exit. x the current position of the margin dir the base direction of the paragraph; if negative, the margin is to the right of the text, otherwise it is to the left. top the top of the line baseline the baseline of the line bottom the bottom of the line text the text start the start of the line end the end of the line first true if this is the first line of its paragraph layout the layout containing this line
	5:	android.text.style.IconMarginSpan public void drawLeadingMargin (Canvas c, Paint p, int x, int dir, int top, int baseline, int bottom, CharSequence text, int start, int end, boolean first, Layout layout) Renders the leading margin. This is called before the margin has been adjusted by the value returned by getLeadingMargin(boolean). Parameters c the canvas p the paint. The this should be left unchanged on exit. x the current position of the margin dir the base direction of the paragraph; if negative, the margin is to the right of the text, otherwise it is to the left. top the top of the line baseline the baseline of the line bottom the bottom of the line text the text start the start of the line end the end of the line first true if this is the first line of its paragraph layout the layout containing this line
	6:	android.text.style.LeadingMarginSpan public abstract void drawLeadingMargin (Canvas c, Paint p, int x, int dir, int top, int baseline, int bottom, CharSequence text, int start, int end, boolean first, Layout layout) Renders the leading margin. This is called before the margin has been adjusted by the value returned by getLeadingMargin(boolean). Parameters c the canvas p the paint. The this should be left unchanged on exit. x the current position of the margin dir the base direction of the paragraph; if negative, the margin is to the right of the text, otherwise it is to the left. top the top of the line baseline the baseline of the line bottom the bottom of the line text the text start the start of the line end the end of the line first true if this is the first line of its paragraph layout the layout containing this line
	7:	android.text.style.LeadingMarginSpan.Standard public void drawLeadingMargin (Canvas c, Paint p, int x, int dir, int top, int baseline, int bottom, CharSequence text, int start, int end, boolean first, Layout layout) Renders the leading margin. This is called before the margin has been adjusted by the value returned by getLeadingMargin(boolean). Parameters c the canvas p the paint. The this should be left unchanged on exit. x the current position of the margin dir the base direction of the paragraph; if negative, the margin is to the right of the text, otherwise it is to the left. top the top of the line baseline the baseline of the line bottom the bottom of the line text the text start the start of the line end the end of the line first true if this is the first line of its paragraph layout the layout containing this line
	8:	android.text.style.QuoteSpan public void drawLeadingMargin (Canvas c, Paint p, int x, int dir, int top, int baseline, int bottom, CharSequence text, int start, int end, boolean first, Layout layout) Renders the leading margin. This is called before the margin has been adjusted by the value returned by getLeadingMargin(boolean). Parameters c the canvas p the paint. The this should be left unchanged on exit. x the current position of the margin dir the base direction of the paragraph; if negative, the margin is to the right of the text, otherwise it is to the left. top the top of the line baseline the baseline of the line bottom the bottom of the line text the text start the start of the line end the end of the line first true if this is the first line of its paragraph layout the layout containing this line
	9:	android.widget.AdapterViewAnimator protected void onLayout (boolean changed, int left, int top, int right, int bottom) Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children. Parameters changed This is a new size or position for this view left Left position, relative to parent top Top position, relative to parent right Right position, relative to parent bottom Bottom position, relative to parent
drawString

translate
Translates the origin of the graphics context to the point (x, y) in the current coordinate system
	0:	android.graphics.Path public void transform (Matrix matrix) Transform the points in this path by matrix. Parameters matrix The matrix to apply to the path
	1:	android.opengl.GLSurfaceView public void setRenderer (GLSurfaceView.Renderer renderer) Set the renderer associated with this view. Also starts the thread that will call the renderer, which in turn causes the rendering to start. This method should be called once and only once in the life-cycle of a GLSurfaceView. The following GLSurfaceView methods can only be called before setRenderer is called: setEGLConfigChooser(boolean) setEGLConfigChooser(EGLConfigChooser) setEGLConfigChooser(int, int, int, int, int, int) The following GLSurfaceView methods can only be called after setRenderer is called: getRenderMode() onPause() onResume() queueEvent(Runnable) requestRender() setRenderMode(int) Parameters renderer the renderer to use to perform OpenGL drawing.
	2:	android.graphics.Path public void transform (Matrix matrix, Path dst) Transform the points in this path by matrix, and write the answer into dst. If dst is null, then the the original path is modified. Parameters matrix The matrix to apply to the path dst The transformed path is written here. If dst is null, then the the original path is modified
	3:	android.view.MotionEvent public final void transform (Matrix matrix) Applies a transformation matrix to all of the points in the event. Parameters matrix The transformation matrix to apply.
	4:	android.view.animation.Animation public boolean getTransformation (long currentTime, Transformation outTransformation) Gets the transformation to apply at a specified point in time. Implementations of this method should always replace the specified Transformation or document they are doing otherwise. Parameters currentTime Where we are in the animation. This is wall clock time. outTransformation A transformation object that is provided by the caller and will be filled in by the animation. Returns True if the animation is still running
	5:	android.view.animation.AlphaAnimation protected void applyTransformation (float interpolatedTime, Transformation t) Changes the alpha property of the supplied Transformation Parameters interpolatedTime The value of the normalized time (0.0 to 1.0) after it has been run through the interpolation function. t The Transformation object to fill in with the current transforms.
	6:	android.view.animation.Animation protected void applyTransformation (float interpolatedTime, Transformation t) Helper for getTransformation. Subclasses should implement this to apply their transforms given an interpolation value. Implementations of this method should always replace the specified Transformation or document they are doing otherwise. Parameters interpolatedTime The value of the normalized time (0.0 to 1.0) after it has been run through the interpolation function. t The Transformation object to fill in with the current transforms.
	7:	android.view.animation.RotateAnimation protected void applyTransformation (float interpolatedTime, Transformation t) Helper for getTransformation. Subclasses should implement this to apply their transforms given an interpolation value. Implementations of this method should always replace the specified Transformation or document they are doing otherwise. Parameters interpolatedTime The value of the normalized time (0.0 to 1.0) after it has been run through the interpolation function. t The Transformation object to fill in with the current transforms.
	8:	android.view.animation.ScaleAnimation protected void applyTransformation (float interpolatedTime, Transformation t) Helper for getTransformation. Subclasses should implement this to apply their transforms given an interpolation value. Implementations of this method should always replace the specified Transformation or document they are doing otherwise. Parameters interpolatedTime The value of the normalized time (0.0 to 1.0) after it has been run through the interpolation function. t The Transformation object to fill in with the current transforms.
	9:	javax.crypto.Cipher public static final int getMaxAllowedKeyLength (String transformation) Returns the maximum key length for the specified transformation. Parameters transformation the transformation name. Returns the maximum key length, currently Integer.MAX_VALUE. Throws NoSuchAlgorithmException if no provider for the specified transformation can be found. NullPointerException if transformation is null.
getTranslateX
Gets the X coordinate of the translated origin of this graphics context
	0:	android.text.BoringLayout public int getLineDescent (int line) Return the descent of the specified line(0…getLineCount() - 1).
	1:	android.text.DynamicLayout public int getLineDescent (int line) Return the descent of the specified line(0…getLineCount() - 1).
	2:	android.text.Layout public abstract int getLineDescent (int line) Return the descent of the specified line(0…getLineCount() - 1).
	3:	android.text.BoringLayout public int getBottomPadding () Returns the number of extra pixels of descent padding in the bottom line of the Layout.
	4:	android.text.DynamicLayout public int getBottomPadding () Returns the number of extra pixels of descent padding in the bottom line of the Layout.
	5:	android.text.Layout public abstract int getBottomPadding () Returns the number of extra pixels of descent padding in the bottom line of the Layout.
	6:	android.view.LayoutInflater public abstract LayoutInflater cloneInContext (Context newContext) Create a copy of the existing LayoutInflater object, with the copy pointing to a different Context than the original. This is used by ContextThemeWrapper to create a new LayoutInflater to go along with the new Context theme. Parameters newContext The new Context to associate with the new LayoutInflater. May be the same as the original Context if desired. Returns Returns a brand spanking new LayoutInflater object associated with the given Context.
	7:	android.graphics.LinearGradient public LinearGradient (float x0, float y0, float x1, float y1, int color0, int color1, Shader.TileMode tile) Create a shader that draws a linear gradient along a line. Parameters x0 The x-coordinate for the start of the gradient line y0 The y-coordinate for the start of the gradient line x1 The x-coordinate for the end of the gradient line y1 The y-coordinate for the end of the gradient line color0 The color at the start of the gradient line. color1 The color at the end of the gradient line. tile The Shader tiling mode
	8:	android.text.Layout public final Layout.Alignment getParagraphAlignment (int line) Get the alignment of the specified paragraph, taking into account markup attached to it.
	9:	org.apache.http.impl.DefaultHttpResponseFactory public HttpResponse newHttpResponse (StatusLine statusline, HttpContext context) Creates a new response from a status line. Parameters statusline the status line context the context from which to determine the locale for looking up a reason phrase if the status code is updated, or null to use the default locale Returns the new response with the argument status line
getTranslateY
Gets the Y coordinate of the translated origin of this graphics context
	0:	android.text.BoringLayout public int getBottomPadding () Returns the number of extra pixels of descent padding in the bottom line of the Layout.
	1:	android.text.DynamicLayout public int getBottomPadding () Returns the number of extra pixels of descent padding in the bottom line of the Layout.
	2:	android.text.Layout public abstract int getBottomPadding () Returns the number of extra pixels of descent padding in the bottom line of the Layout.
	3:	android.text.BoringLayout public int getLineDescent (int line) Return the descent of the specified line(0…getLineCount() - 1).
	4:	android.text.DynamicLayout public int getLineDescent (int line) Return the descent of the specified line(0…getLineCount() - 1).
	5:	android.text.Layout public abstract int getLineDescent (int line) Return the descent of the specified line(0…getLineCount() - 1).
	6:	org.xml.sax.SAXParseException public int getLineNumber () The line number of the end of the text where the exception occurred. The first line is line 1. Returns An integer representing the line number, or -1 if none is available. See Also getLineNumber()
	7:	java.io.LineNumberInputStream public int getLineNumber () Returns the current line number for this stream. Numbering starts at 0. Returns the current line number.
	8:	java.io.LineNumberReader public int getLineNumber () Returns the current line number for this reader. Numbering starts at 0. Returns the current line number.
	9:	android.graphics.LinearGradient public LinearGradient (float x0, float y0, float x1, float y1, int color0, int color1, Shader.TileMode tile) Create a shader that draws a linear gradient along a line. Parameters x0 The x-coordinate for the start of the gradient line y0 The y-coordinate for the start of the gradient line x1 The x-coordinate for the end of the gradient line y1 The y-coordinate for the end of the gradient line color0 The color at the start of the gradient line. color1 The color at the end of the gradient line. tile The Shader tiling mode
getColor
Gets the current color
	0:	android.graphics.drawable.ColorDrawable public int getColor () Gets the drawable's color value. Returns int The color to draw.
	1:	android.graphics.Paint public int getColor () Return the paint's color. Note that the color is a 32bit value containing alpha as well as r,g,b. This 32bit value is not premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b. See the Color class for more details. Returns the paint's color (and alpha).
	2:	android.test.mock.MockResources public int getColor (int id) Return a color integer associated with a particular resource ID. If the resource holds a complex ColorStateList, then the default color from the set is returned. Parameters id The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier. Returns Returns a single color value in the form 0xAARRGGBB. Throws Resources.NotFoundException
	3:	android.content.res.Resources public int getColor (int id) Return a color integer associated with a particular resource ID. If the resource holds a complex ColorStateList, then the default color from the set is returned. Parameters id The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier. Returns Returns a single color value in the form 0xAARRGGBB. Throws Resources.NotFoundException Throws NotFoundException if the given ID does not exist.
	4:	android.text.style.QuoteSpan public int getColor () 
	5:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	6:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	7:	android.hardware.Camera.Parameters public void setColorEffect (String value) Sets the current color effect setting. Parameters value new color effect. See Also getColorEffect()
	8:	android.hardware.Camera.Parameters public String getColorEffect () Gets the current color effect setting. Returns current color effect. null if color effect setting is not supported. See Also EFFECT_NONE EFFECT_MONO EFFECT_NEGATIVE EFFECT_SOLARIZE EFFECT_SEPIA EFFECT_POSTERIZE EFFECT_WHITEBOARD EFFECT_BLACKBOARD EFFECT_AQUA
	9:	android.support.v4.view.PagerTabStrip public int getTabIndicatorColor () Returns The current tab indicator color as an 0xRRGGBB value.
getRedComponent
Gets the red component of the current color
	0:	android.graphics.Color public static int red (int color) Return the red component of a color int. This is the same as saying (color >> 16) & 0xFF
	1:	android.graphics.Color public static int argb (int alpha, int red, int green, int blue) Return a color-int from alpha, red, green, blue components. These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters alpha Alpha component [0..255] of the color red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	2:	android.graphics.Color public static int rgb (int red, int green, int blue) Return a color-int from red, green, blue components. The alpha component is implicity 255 (fully opaque). These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	3:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	4:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.graphics.Color public static void RGBToHSV (int red, int green, int blue, float[] hsv) Convert RGB components to HSV. hsv[0] is Hue [0 .. 360) hsv[1] is Saturation [0...1] hsv[2] is Value [0...1] Parameters red red component value [0..255] green green component value [0..255] blue blue component value [0..255] hsv 3 element array which holds the resulting HSV components.
	6:	android.graphics.ColorMatrix public void setRotate (int axis, float degrees) Set the rotation on a color axis by the specified values. axis=0 correspond to a rotation around the RED color axis=1 correspond to a rotation around the GREEN color axis=2 correspond to a rotation around the BLUE color
	7:	android.graphics.Paint public void setARGB (int a, int r, int g, int b) Helper to setColor(), that takes a,r,g,b and constructs the color int Parameters a The new alpha component (0..255) of the paint's color. r The new red component (0..255) of the paint's color. g The new green component (0..255) of the paint's color. b The new blue component (0..255) of the paint's color.
	8:	android.graphics.Color public static int parseColor (String colorString) Parse the color string, and return the corresponding color-int. If the string cannot be parsed, throws an IllegalArgumentException exception. Supported formats are: #RRGGBB #AARRGGBB 'red', 'blue', 'green', 'black', 'white', 'gray', 'cyan', 'magenta', 'yellow', 'lightgray', 'darkgray', 'grey', 'lightgrey', 'darkgrey', 'aqua', 'fuschia', 'lime', 'maroon', 'navy', 'olive', 'purple', 'silver', 'teal'
	9:	android.renderscript.ScriptIntrinsicColorMatrix public void setAdd (float r, float g, float b, float a) Set the value to be added after the color matrix has been applied. The default value is {0, 0, 0, 0} Parameters r The red add value. g The green add value. b The blue add value. a The alpha add value.
getGreenComponent
Gets the green component of the current color
	0:	android.graphics.Color public static int green (int color) Return the green component of a color int. This is the same as saying (color >> 8) & 0xFF
	1:	android.graphics.Color public static int argb (int alpha, int red, int green, int blue) Return a color-int from alpha, red, green, blue components. These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters alpha Alpha component [0..255] of the color red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	2:	android.graphics.Color public static int rgb (int red, int green, int blue) Return a color-int from red, green, blue components. The alpha component is implicity 255 (fully opaque). These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	3:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	4:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.graphics.Color public static void RGBToHSV (int red, int green, int blue, float[] hsv) Convert RGB components to HSV. hsv[0] is Hue [0 .. 360) hsv[1] is Saturation [0...1] hsv[2] is Value [0...1] Parameters red red component value [0..255] green green component value [0..255] blue blue component value [0..255] hsv 3 element array which holds the resulting HSV components.
	6:	android.graphics.ColorMatrix public void setRotate (int axis, float degrees) Set the rotation on a color axis by the specified values. axis=0 correspond to a rotation around the RED color axis=1 correspond to a rotation around the GREEN color axis=2 correspond to a rotation around the BLUE color
	7:	android.graphics.Paint public void setARGB (int a, int r, int g, int b) Helper to setColor(), that takes a,r,g,b and constructs the color int Parameters a The new alpha component (0..255) of the paint's color. r The new red component (0..255) of the paint's color. g The new green component (0..255) of the paint's color. b The new blue component (0..255) of the paint's color.
	8:	android.graphics.Color public static int parseColor (String colorString) Parse the color string, and return the corresponding color-int. If the string cannot be parsed, throws an IllegalArgumentException exception. Supported formats are: #RRGGBB #AARRGGBB 'red', 'blue', 'green', 'black', 'white', 'gray', 'cyan', 'magenta', 'yellow', 'lightgray', 'darkgray', 'grey', 'lightgrey', 'darkgrey', 'aqua', 'fuschia', 'lime', 'maroon', 'navy', 'olive', 'purple', 'silver', 'teal'
	9:	android.renderscript.ScriptIntrinsicColorMatrix public void setAdd (float r, float g, float b, float a) Set the value to be added after the color matrix has been applied. The default value is {0, 0, 0, 0} Parameters r The red add value. g The green add value. b The blue add value. a The alpha add value.
getBlueComponent
Gets the blue component of the current color
	0:	android.graphics.Color public static int blue (int color) Return the blue component of a color int. This is the same as saying color & 0xFF
	1:	android.graphics.Color public static int argb (int alpha, int red, int green, int blue) Return a color-int from alpha, red, green, blue components. These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters alpha Alpha component [0..255] of the color red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	2:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	3:	android.graphics.Color public static int rgb (int red, int green, int blue) Return a color-int from red, green, blue components. The alpha component is implicity 255 (fully opaque). These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	4:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.graphics.ColorMatrix public void setRotate (int axis, float degrees) Set the rotation on a color axis by the specified values. axis=0 correspond to a rotation around the RED color axis=1 correspond to a rotation around the GREEN color axis=2 correspond to a rotation around the BLUE color
	6:	android.graphics.Color public static void RGBToHSV (int red, int green, int blue, float[] hsv) Convert RGB components to HSV. hsv[0] is Hue [0 .. 360) hsv[1] is Saturation [0...1] hsv[2] is Value [0...1] Parameters red red component value [0..255] green green component value [0..255] blue blue component value [0..255] hsv 3 element array which holds the resulting HSV components.
	7:	android.graphics.Paint public void setARGB (int a, int r, int g, int b) Helper to setColor(), that takes a,r,g,b and constructs the color int Parameters a The new alpha component (0..255) of the paint's color. r The new red component (0..255) of the paint's color. g The new green component (0..255) of the paint's color. b The new blue component (0..255) of the paint's color.
	8:	java.util.logging.LogManager public void readConfiguration (InputStream ins) Re-initialize the properties and configuration from the given InputStream Notice : No PropertyChangeEvent are fired. Parameters ins the input stream Throws IOException if any IO related problems happened.
	9:	android.graphics.Color public static int parseColor (String colorString) Parse the color string, and return the corresponding color-int. If the string cannot be parsed, throws an IllegalArgumentException exception. Supported formats are: #RRGGBB #AARRGGBB 'red', 'blue', 'green', 'black', 'white', 'gray', 'cyan', 'magenta', 'yellow', 'lightgray', 'darkgray', 'grey', 'lightgrey', 'darkgrey', 'aqua', 'fuschia', 'lime', 'maroon', 'navy', 'olive', 'purple', 'silver', 'teal'
getGrayScale
Gets the current grayscale value of the color being used for rendering operations
	0:	android.print.PrinterCapabilitiesInfo.Builder public PrinterCapabilitiesInfo.Builder setColorModes (int colorModes, int defaultColorMode) Sets the color modes. Required: Yes Parameters colorModes The color mode bit mask. defaultColorMode The default color mode. Returns This builder. Note: On platform version 19 (Kitkat) specifying only PrintAttributes#COLOR_MODE_MONOCHROME leads to a print spooler crash. Hence, you should declare either both color modes or PrintAttributes#COLOR_MODE_COLOR. Throws IllegalArgumentException If color modes contains an invalid mode bit or if the default color mode is invalid. See Also COLOR_MODE_COLOR COLOR_MODE_MONOCHROME
	1:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	2:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	3:	android.hardware.Camera.Parameters public void setColorEffect (String value) Sets the current color effect setting. Parameters value new color effect. See Also getColorEffect()
	4:	android.hardware.Camera.Parameters public String getColorEffect () Gets the current color effect setting. Returns current color effect. null if color effect setting is not supported. See Also EFFECT_NONE EFFECT_MONO EFFECT_NEGATIVE EFFECT_SOLARIZE EFFECT_SEPIA EFFECT_POSTERIZE EFFECT_WHITEBOARD EFFECT_BLACKBOARD EFFECT_AQUA
	5:	android.support.v4.view.PagerTabStrip public int getTabIndicatorColor () Returns The current tab indicator color as an 0xRRGGBB value.
	6:	android.graphics.drawable.GradientDrawable public void setColor (int argb) Changes this drawbale to use a single color instead of a gradient. Note: changing color will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the color. Parameters argb The color used to fill the shape See Also mutate() setColors(int[])
	7:	android.graphics.Paint public int getColor () Return the paint's color. Note that the color is a 32bit value containing alpha as well as r,g,b. This 32bit value is not premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b. See the Color class for more details. Returns the paint's color (and alpha).
	8:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	9:	android.graphics.drawable.GradientDrawable public void setColors (int[] colors) Sets the colors used to draw the gradient. Each color is specified as an ARGB integer and the array must contain at least 2 colors. Note: changing orientation will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the orientation. Parameters colors 2 or more ARGB colors See Also mutate() setColor(int)
setColor
Sets the current color to the specified RGB values
	0:	android.graphics.drawable.ColorDrawable public void setColor (int color) Sets the drawable's color value. This action will clobber the results of prior calls to setAlpha(int) on this object, which side-affected the underlying color. Parameters color The color to draw.
	1:	android.graphics.drawable.GradientDrawable public void setColor (int argb) Changes this drawbale to use a single color instead of a gradient. Note: changing color will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the color. Parameters argb The color used to fill the shape See Also mutate() setColors(int[])
	2:	android.graphics.drawable.GradientDrawable public void setColors (int[] colors) Sets the colors used to draw the gradient. Each color is specified as an ARGB integer and the array must contain at least 2 colors. Note: changing orientation will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the orientation. Parameters colors 2 or more ARGB colors See Also mutate() setColor(int)
	3:	android.graphics.Paint public void setColor (int color) Set the paint's color. Note that the color is an int containing alpha as well as r,g,b. This 32bit value is not premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b. See the Color class for more details. Parameters color The new color (including alpha) to set in the paint.
	4:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.renderscript.ScriptIntrinsicColorMatrix public void setGreyscale () Set a color matrix to convert from RGB to luminance. The alpha channel will be a copy.
	6:	android.support.v8.renderscript.ScriptIntrinsicColorMatrix public void setGreyscale () Set a color matrix to convert from RGB to luminance. The alpha channel will be a copy.
	7:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	8:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	9:	android.graphics.Color public static int rgb (int red, int green, int blue) Return a color-int from red, green, blue components. The alpha component is implicity 255 (fully opaque). These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
setColor
Sets the current color to the specified RGB values
	0:	android.graphics.drawable.ColorDrawable public void setColor (int color) Sets the drawable's color value. This action will clobber the results of prior calls to setAlpha(int) on this object, which side-affected the underlying color. Parameters color The color to draw.
	1:	android.graphics.drawable.GradientDrawable public void setColor (int argb) Changes this drawbale to use a single color instead of a gradient. Note: changing color will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the color. Parameters argb The color used to fill the shape See Also mutate() setColors(int[])
	2:	android.graphics.drawable.GradientDrawable public void setColors (int[] colors) Sets the colors used to draw the gradient. Each color is specified as an ARGB integer and the array must contain at least 2 colors. Note: changing orientation will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the orientation. Parameters colors 2 or more ARGB colors See Also mutate() setColor(int)
	3:	android.graphics.Paint public void setColor (int color) Set the paint's color. Note that the color is an int containing alpha as well as r,g,b. This 32bit value is not premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b. See the Color class for more details. Parameters color The new color (including alpha) to set in the paint.
	4:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.renderscript.ScriptIntrinsicColorMatrix public void setGreyscale () Set a color matrix to convert from RGB to luminance. The alpha channel will be a copy.
	6:	android.support.v8.renderscript.ScriptIntrinsicColorMatrix public void setGreyscale () Set a color matrix to convert from RGB to luminance. The alpha channel will be a copy.
	7:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	8:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	9:	android.graphics.Color public static int rgb (int red, int green, int blue) Return a color-int from red, green, blue components. The alpha component is implicity 255 (fully opaque). These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
setGrayScale
Sets the current grayscale to be used for all subsequent rendering operations
	0:	java.util.concurrent.locks.Condition public abstract long awaitNanos (long nanosTimeout) Causes the current thread to wait until it is signalled or interrupted, or the specified waiting time elapses. The lock associated with this condition is atomically released and the current thread becomes disabled for thread scheduling purposes and lies dormant until one of five things happens: Some other thread invokes the signal() method for this Condition and the current thread happens to be chosen as the thread to be awakened; or Some other thread invokes the signalAll() method for this Condition; or Some other thread interrupts the current thread, and interruption of thread suspension is supported; or The specified waiting time elapses; or A "spurious wakeup" occurs. In all cases, before this method can return the current thread must re-acquire the lock associated with this condition. When the thread returns it is guaranteed to hold this lock. If the current thread: has its interrupted status set on entry to this method; or is interrupted while waiting and interruption of thread suspension is supported, then InterruptedException is thrown and the current thread's interrupted status is cleared. It is not specified, in the first case, whether or not the test for interruption occurs before the lock is released. The method returns an estimate of the number of nanoseconds remaining to wait given the supplied nanosTimeout value upon return, or a value less than or equal to zero if it timed out. This value can be used to determine whether and how long to re-wait in cases where the wait returns but an awaited condition still does not hold. Typical uses of this method take the following form: boolean aMethod(long timeout, TimeUnit unit) { long nanos = unit.toNanos(timeout); lock.lock(); try { while (!conditionBeingWaitedFor()) { if (nanos <= 0L) return false; nanos = theCondition.awaitNanos(nanos); // ... } finally { lock.unlock(); } }} Design note: This method requires a nanosecond argument so as to avoid truncation errors in reporting remaining times. Such precision loss would make it difficult for programmers to ensure that total waiting times are not systematically shorter than specified when re-waits occur. Implementation Considerations The current thread is assumed to hold the lock associated with this Condition when this method is called. It is up to the implementation to determine if this is the case and if not, how to respond. Typically, an exception will be thrown (such as IllegalMonitorStateException) and the implementation must document that fact. An implementation can favor responding to an interrupt over normal method return in response to a signal, or over indicating the elapse of the specified waiting time. In either case the implementation must ensure that the signal is redirected to another waiting thread, if there is one. Parameters nanosTimeout the maximum time to wait, in nanoseconds Returns an estimate of the nanosTimeout value minus the time spent waiting upon return from this method. A positive value may be used as the argument to a subsequent call to this method to finish waiting out the desired time. A value less than or equal to zero indicates that no time remains. Throws InterruptedException if the current thread is interrupted (and interruption of thread suspension is supported)
	1:	java.sql.Connection public abstract void setAutoCommit (boolean autoCommit) Sets this connection's auto-commit mode on or off. Putting a Connection into auto-commit mode means that all associated SQL statements are run and committed as separate transactions. By contrast, setting auto-commit to off means that associated SQL statements get grouped into transactions that need to be completed by explicit calls to either the commit() or rollback() methods. Auto-commit is the default mode for new connection instances. When in this mode, commits will automatically occur upon successful SQL statement completion or upon successful completion of an execute. Statements are not considered successfully completed until all associated ResultSets and output parameters have been obtained or closed. Calling this operation during an uncommitted transaction will result in it being committed. Parameters autoCommit boolean indication of whether to put the target connection into auto-commit mode (true) or not ( false). Throws SQLException if there is a problem accessing the database.
	2:	java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject public final long awaitNanos (long nanosTimeout) Implements timed condition wait. If current thread is interrupted, throw InterruptedException. Save lock state returned by getState(). Invoke release(long) with saved state as argument, throwing IllegalMonitorStateException if it fails. Block until signalled, interrupted, or timed out. Reacquire by invoking specialized version of acquire(long) with saved state as argument. If interrupted while blocked in step 4, throw InterruptedException. Parameters nanosTimeout the maximum time to wait, in nanoseconds Returns an estimate of the nanosTimeout value minus the time spent waiting upon return from this method. A positive value may be used as the argument to a subsequent call to this method to finish waiting out the desired time. A value less than or equal to zero indicates that no time remains. Throws InterruptedException
	3:	java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject public final long awaitNanos (long nanosTimeout) Implements timed condition wait. If current thread is interrupted, throw InterruptedException. Save lock state returned by getState(). Invoke release(int) with saved state as argument, throwing IllegalMonitorStateException if it fails. Block until signalled, interrupted, or timed out. Reacquire by invoking specialized version of acquire(int) with saved state as argument. If interrupted while blocked in step 4, throw InterruptedException. Parameters nanosTimeout the maximum time to wait, in nanoseconds Returns an estimate of the nanosTimeout value minus the time spent waiting upon return from this method. A positive value may be used as the argument to a subsequent call to this method to finish waiting out the desired time. A value less than or equal to zero indicates that no time remains. Throws InterruptedException
	4:	java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject public final boolean awaitUntil (Date deadline) Implements absolute timed condition wait. If current thread is interrupted, throw InterruptedException. Save lock state returned by getState(). Invoke release(long) with saved state as argument, throwing IllegalMonitorStateException if it fails. Block until signalled, interrupted, or timed out. Reacquire by invoking specialized version of acquire(long) with saved state as argument. If interrupted while blocked in step 4, throw InterruptedException. If timed out while blocked in step 4, return false, else true. Parameters deadline the absolute time to wait until Returns false if the deadline has elapsed upon return, else true Throws InterruptedException
	5:	java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject public final boolean awaitUntil (Date deadline) Implements absolute timed condition wait. If current thread is interrupted, throw InterruptedException. Save lock state returned by getState(). Invoke release(int) with saved state as argument, throwing IllegalMonitorStateException if it fails. Block until signalled, interrupted, or timed out. Reacquire by invoking specialized version of acquire(int) with saved state as argument. If interrupted while blocked in step 4, throw InterruptedException. If timed out while blocked in step 4, return false, else true. Parameters deadline the absolute time to wait until Returns false if the deadline has elapsed upon return, else true Throws InterruptedException
	6:	java.util.regex.MatchResult public abstract int end () Returns the index of the first character following the text that matched the whole regular expression.
	7:	java.util.concurrent.locks.Condition public abstract boolean awaitUntil (Date deadline) Causes the current thread to wait until it is signalled or interrupted, or the specified deadline elapses. The lock associated with this condition is atomically released and the current thread becomes disabled for thread scheduling purposes and lies dormant until one of five things happens: Some other thread invokes the signal() method for this Condition and the current thread happens to be chosen as the thread to be awakened; or Some other thread invokes the signalAll() method for this Condition; or Some other thread interrupts the current thread, and interruption of thread suspension is supported; or The specified deadline elapses; or A "spurious wakeup" occurs. In all cases, before this method can return the current thread must re-acquire the lock associated with this condition. When the thread returns it is guaranteed to hold this lock. If the current thread: has its interrupted status set on entry to this method; or is interrupted while waiting and interruption of thread suspension is supported, then InterruptedException is thrown and the current thread's interrupted status is cleared. It is not specified, in the first case, whether or not the test for interruption occurs before the lock is released. The return value indicates whether the deadline has elapsed, which can be used as follows: boolean aMethod(Date deadline) { boolean stillWaiting = true; lock.lock(); try { while (!conditionBeingWaitedFor()) { if (!stillWaiting) return false; stillWaiting = theCondition.awaitUntil(deadline); // ... } finally { lock.unlock(); } }} Implementation Considerations The current thread is assumed to hold the lock associated with this Condition when this method is called. It is up to the implementation to determine if this is the case and if not, how to respond. Typically, an exception will be thrown (such as IllegalMonitorStateException) and the implementation must document that fact. An implementation can favor responding to an interrupt over normal method return in response to a signal, or over indicating the passing of the specified deadline. In either case the implementation must ensure that the signal is redirected to another waiting thread, if there is one. Parameters deadline the absolute time to wait until Returns false if the deadline has elapsed upon return, else true Throws InterruptedException if the current thread is interrupted (and interruption of thread suspension is supported)
	8:	dalvik.system.BaseDexClassLoader protected synchronized Package getPackage (String name) Returns package information for the given package. Unfortunately, instances of this class don't really have this information, and as a non-secure ClassLoader, it isn't even required to, according to the spec. Yet, we want to provide it, in order to make all those hopeful callers of myClass.getPackage().getName() happy. Thus we construct a Package object the first time it is being requested and fill most of the fields with dummy values. The Package object is then put into the ClassLoader's package cache, so we see the same one next time. We don't create Package objects for null arguments or for the default package. There is a limited chance that we end up with multiple Package objects representing the same package: It can happen when when a package is scattered across different JAR files which were loaded by different ClassLoader instances. This is rather unlikely, and given that this whole thing is more or less a workaround, probably not worth the effort to address. Parameters name the name of the class Returns the package information for the class, or null if there is no package information available for it
	9:	java.lang.Runtime public long maxMemory () Returns the maximum number of bytes the heap can expand to. See totalMemory() for the current number of bytes taken by the heap, and freeMemory() for the current number of those bytes actually used by live objects.
getFont
Gets the current font
	0:	android.renderscript.Element public static Element FONT (RenderScript rs) 
	1:	android.view.accessibility.CaptioningManager.CaptioningChangeListener public void onFontScaleChanged (float fontScale) Called when the captioning font scaling factor changes. Parameters fontScale the preferred font scaling factor See Also getFontScale()
	2:	android.view.accessibility.CaptioningManager public final float getFontScale () Returns the user's preferred font scaling factor for video captions, or 1 if not specified
	3:	android.graphics.Paint public float getFontMetrics (Paint.FontMetrics metrics) Return the font's recommended interline spacing, given the Paint's settings for typeface, textSize, etc. If metrics is not null, return the fontmetric values in it. Parameters metrics If this object is not null, its fields are filled with the appropriate values given the paint's text attributes. Returns the font's recommended interline spacing.
	4:	java.io.PipedOutputStream public void write (int oneByte) Writes a single byte to this stream. Only the least significant byte of the integer oneByte is written. The written byte can then be read from the connected input stream. Separate threads should be used to write to a PipedOutputStream and to read from the connected PipedInputStream. If the same thread is used, a deadlock may occur. Parameters oneByte the byte to write. Throws InterruptedIOException if the pipe is full and the current thread is interrupted waiting for space to write data. This case is not currently handled correctly. IOException if this stream is not connected, if the target stream is closed or if the thread reading from the target stream is no longer alive. This case is currently not handled correctly.
	5:	android.app.Notification.Builder public Notification.Builder setNumber (int number) Set the large number at the right-hand side of the notification. This is equivalent to setContentInfo, although it might show the number in a different font size for readability.
	6:	android.support.v4.app.NotificationCompat.Builder public NotificationCompat.Builder setNumber (int number) Set the large number at the right-hand side of the notification. This is equivalent to setContentInfo, although it might show the number in a different font size for readability.
	7:	android.graphics.Paint public Typeface getTypeface () Get the paint's typeface object. The typeface object identifies which font to use when drawing or measuring text. Returns the paint's typeface (or null)
	8:	android.graphics.Paint public int getFontMetricsInt (Paint.FontMetricsInt fmi) Return the font's interline spacing, given the Paint's settings for typeface, textSize, etc. If metrics is not null, return the fontmetric values in it. Note: all values have been converted to integers from floats, in such a way has to make the answers useful for both spacing and clipping. If you want more control over the rounding, call getFontMetrics(). Returns the font's interline spacing.
	9:	android.app.Activity public void recreate () Cause this Activity to be recreated with a new instance. This results in essentially the same flow as when the Activity is created due to a configuration change -- the current instance will go through its lifecycle to onDestroy() and a new instance then created after it.
setStrokeStyle
Sets the stroke style used for drawing lines, arcs, rectangles, and rounded rectangles
	0:	android.graphics.DashPathEffect public DashPathEffect (float[] intervals, float phase) The intervals array must contain an even number of entries (>=2), with the even indices specifying the "on" intervals, and the odd indices specifying the "off" intervals. phase is an offset into the intervals array (mod the sum of all of the intervals). The intervals array controls the length of the dashes. The paint's strokeWidth controls the thickness of the dashes. Note: this patheffect only affects drawing with the paint's style is set to STROKE or FILL_AND_STROKE. It is ignored if the drawing is done with style == FILL. Parameters intervals array of ON and OFF distances phase offset into the intervals array
	1:	android.graphics.Paint public float getStrokeWidth () Return the width for stroking. A value of 0 strokes in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Returns the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	2:	android.graphics.Paint public void setStrokeWidth (float width) Set the width for stroking. Pass 0 to stroke in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Parameters width set the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	3:	android.graphics.Paint public Paint.Cap getStrokeCap () Return the paint's Cap, controlling how the start and end of stroked lines and paths are treated. Returns the line cap style for the paint, used whenever the paint's style is Stroke or StrokeAndFill.
	4:	android.graphics.PathDashPathEffect public PathDashPathEffect (Path shape, float advance, float phase, PathDashPathEffect.Style style) Dash the drawn path by stamping it with the specified shape. This only applies to drawings when the paint's style is STROKE or STROKE_AND_FILL. If the paint's style is FILL, then this effect is ignored. The paint's strokeWidth does not affect the results. Parameters shape The path to stamp along advance spacing between each stamp of shape phase amount to offset before the first shape is stamped style how to transform the shape at each position as it is stamped
	5:	android.graphics.Paint public float getStrokeMiter () Return the paint's stroke miter value. Used to control the behavior of miter joins when the joins angle is sharp. Returns the paint's miter limit, used whenever the paint's style is Stroke or StrokeAndFill.
	6:	android.graphics.Paint public void setStrokeJoin (Paint.Join join) Set the paint's Join. Parameters join set the paint's Join, used whenever the paint's style is Stroke or StrokeAndFill.
	7:	android.graphics.Paint public Paint.Style getStyle () Return the paint's style, used for controlling how primitives' geometries are interpreted (except for drawBitmap, which always assumes FILL_STYLE). Returns the paint's style setting (Fill, Stroke, StrokeAndFill)
	8:	android.graphics.Paint public void setStrokeCap (Paint.Cap cap) Set the paint's Cap. Parameters cap set the paint's line cap style, used whenever the paint's style is Stroke or StrokeAndFill.
	9:	android.graphics.drawable.GradientDrawable public void setStroke (int width, int color, float dashWidth, float dashGap) Set the stroke width and color for the drawable. If width is zero, then no stroke is drawn. This method can also be used to dash the stroke. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters width The width in pixels of the stroke color The color of the stroke dashWidth The length in pixels of the dashes, set to 0 to disable dashes dashGap The gap in pixels between dashes See Also mutate() setStroke(int, int)
getStrokeStyle
Gets the stroke style used for drawing operations
	0:	android.graphics.DashPathEffect public DashPathEffect (float[] intervals, float phase) The intervals array must contain an even number of entries (>=2), with the even indices specifying the "on" intervals, and the odd indices specifying the "off" intervals. phase is an offset into the intervals array (mod the sum of all of the intervals). The intervals array controls the length of the dashes. The paint's strokeWidth controls the thickness of the dashes. Note: this patheffect only affects drawing with the paint's style is set to STROKE or FILL_AND_STROKE. It is ignored if the drawing is done with style == FILL. Parameters intervals array of ON and OFF distances phase offset into the intervals array
	1:	android.graphics.Paint public float getStrokeWidth () Return the width for stroking. A value of 0 strokes in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Returns the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	2:	android.graphics.Paint public void setStrokeWidth (float width) Set the width for stroking. Pass 0 to stroke in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Parameters width set the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	3:	android.graphics.Paint public Paint.Cap getStrokeCap () Return the paint's Cap, controlling how the start and end of stroked lines and paths are treated. Returns the line cap style for the paint, used whenever the paint's style is Stroke or StrokeAndFill.
	4:	android.graphics.PathDashPathEffect public PathDashPathEffect (Path shape, float advance, float phase, PathDashPathEffect.Style style) Dash the drawn path by stamping it with the specified shape. This only applies to drawings when the paint's style is STROKE or STROKE_AND_FILL. If the paint's style is FILL, then this effect is ignored. The paint's strokeWidth does not affect the results. Parameters shape The path to stamp along advance spacing between each stamp of shape phase amount to offset before the first shape is stamped style how to transform the shape at each position as it is stamped
	5:	android.graphics.Paint public float getStrokeMiter () Return the paint's stroke miter value. Used to control the behavior of miter joins when the joins angle is sharp. Returns the paint's miter limit, used whenever the paint's style is Stroke or StrokeAndFill.
	6:	android.graphics.Paint public void setStrokeJoin (Paint.Join join) Set the paint's Join. Parameters join set the paint's Join, used whenever the paint's style is Stroke or StrokeAndFill.
	7:	android.graphics.Paint public Paint.Style getStyle () Return the paint's style, used for controlling how primitives' geometries are interpreted (except for drawBitmap, which always assumes FILL_STYLE). Returns the paint's style setting (Fill, Stroke, StrokeAndFill)
	8:	android.graphics.Paint public void setStrokeCap (Paint.Cap cap) Set the paint's Cap. Parameters cap set the paint's line cap style, used whenever the paint's style is Stroke or StrokeAndFill.
	9:	android.graphics.drawable.GradientDrawable public void setStroke (int width, int color, float dashWidth, float dashGap) Set the stroke width and color for the drawable. If width is zero, then no stroke is drawn. This method can also be used to dash the stroke. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters width The width in pixels of the stroke color The color of the stroke dashWidth The length in pixels of the dashes, set to 0 to disable dashes dashGap The gap in pixels between dashes See Also mutate() setStroke(int, int)
setFont
Sets the font for all subsequent text rendering operations
	0:	android.graphics.Paint public float getFontMetrics (Paint.FontMetrics metrics) Return the font's recommended interline spacing, given the Paint's settings for typeface, textSize, etc. If metrics is not null, return the fontmetric values in it. Parameters metrics If this object is not null, its fields are filled with the appropriate values given the paint's text attributes. Returns the font's recommended interline spacing.
	1:	android.graphics.Paint public void setTextLocale (Locale locale) Set the text locale. The text locale affects how the text is drawn for some languages. For example, if the locale is CHINESE or CHINA, then the text renderer will prefer to draw text using a Chinese font. Likewise, if the locale is JAPANESE or JAPAN, then the text renderer will prefer to draw text using a Japanese font. This distinction is important because Chinese and Japanese text both use many of the same Unicode code points but their appearance is subtly different for each language. By default, the text locale is initialized to the system locale (as returned by getDefault()). This assumes that the text to be rendered will most likely be in the user's preferred language. If the actual language of the text is known, then it can be provided to the text renderer using this method. The text renderer may attempt to guess the language script based on the contents of the text to be drawn independent of the text locale here. Specifying the text locale just helps it do a better job in certain ambiguous cases Parameters locale the paint's locale value for drawing text, must not be null.
	2:	android.graphics.Paint public Typeface getTypeface () Get the paint's typeface object. The typeface object identifies which font to use when drawing or measuring text. Returns the paint's typeface (or null)
	3:	java.util.regex.MatchResult public abstract int end () Returns the index of the first character following the text that matched the whole regular expression.
	4:	java.util.regex.MatchResult public abstract String group () Returns the text that matched the whole regular expression.
	5:	java.util.regex.MatchResult public abstract int start () Returns the index of the first character of the text that matched the whole regular expression.
	6:	android.widget.AutoCompleteTextView protected void replaceText (CharSequence text) Performs the text completion by replacing the current text by the selected item. Subclasses should override this method to avoid replacing the whole content of the edit box. Parameters text the selected suggestion in the drop down list
	7:	android.text.Layout protected Layout (CharSequence text, TextPaint paint, int width, Layout.Alignment align, float spacingMult, float spacingAdd) Subclasses of Layout use this constructor to set the display text, width, and other standard properties. Parameters text the text to render paint the default paint for the layout. Styles can override various attributes of the paint. width the wrapping width for the text. align whether to left, right, or center the text. Styles can override the alignment. spacingMult factor by which to scale the font size to get the default line spacing spacingAdd amount to add to the default line spacing
	8:	java.util.regex.Matcher public String group () Returns the text that matched the whole regular expression. Throws IllegalStateException if no successful match has been made.
	9:	java.util.regex.Matcher public int start () Returns the index of the first character of the text that matched the whole regular expression. Throws IllegalStateException if no successful match has been made.
getClipX
Gets the X offset of the current clipping area, relative to the coordinate system origin of this graphics context
	0:	android.hardware.Camera.Parameters public List<Camera.Area> getMeteringAreas () Gets the current metering areas. Camera driver uses these areas to decide exposure. Before using this API or setMeteringAreas(List), apps should call getMaxNumMeteringAreas() to know the maximum number of metering areas first. If the value is 0, metering area is not supported. Each metering area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of setDisplayOrientation(int). Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of metering areas cannot be 0 or negative. The weight must range from 1 to 1000, and represents a weight for every pixel in the area. This means that a large metering area with the same weight as a smaller area will have more effect in the metering result. Metering areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null metering area list means the driver is free to meter as it chooses. For example, the driver may use more signals to select metering areas and change them dynamically. Apps can set the metering area list to null if they want the driver to completely control metering. Metering areas are relative to the current field of view (getZoom()). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The metering area cannot be set to be outside the current field of view, even when using zoom. No matter what metering areas are, the final exposure are compensated by setExposureCompensation(int). Returns a list of current metering areas
	1:	android.hardware.Camera.Parameters public List<Camera.Area> getFocusAreas () Gets the current focus areas. Camera driver uses the areas to decide focus. Before using this API or setFocusAreas(List), apps should call getMaxNumFocusAreas() to know the maximum number of focus areas first. If the value is 0, focus area is not supported. Each focus area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of setDisplayOrientation(int). Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of focus areas cannot be 0 or negative. The weight must range from 1 to 1000. The weight should be interpreted as a per-pixel weight - all pixels in the area have the specified weight. This means a small area with the same weight as a larger area will have less influence on the focusing than the larger area. Focus areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null focus area list means the driver is free to select focus targets as it wants. For example, the driver may use more signals to select focus areas and change them dynamically. Apps can set the focus area list to null if they want the driver to completely control focusing. Focus areas are relative to the current field of view (getZoom()). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The focus area cannot be set to be outside the current field of view, even when using zoom. Focus area only has effect if the current focus mode is FOCUS_MODE_AUTO, FOCUS_MODE_MACRO, FOCUS_MODE_CONTINUOUS_VIDEO, or FOCUS_MODE_CONTINUOUS_PICTURE. Returns a list of current focus areas
	2:	android.support.v4.content.ContextCompat public static boolean startActivities (Context context, Intent[] intents) Start a set of activities as a synthesized task stack, if able. In API level 11 (Android 3.0/Honeycomb) the recommended conventions for app navigation using the back key changed. The back key's behavior is local to the current task and does not capture navigation across different tasks. Navigating across tasks and easily reaching the previous task is accomplished through the "recents" UI, accessible through the software-provided Recents key on the navigation or system bar. On devices with the older hardware button configuration the recents UI can be accessed with a long press on the Home key. When crossing from one task stack to another post-Android 3.0, the application should synthesize a back stack/history for the new task so that the user may navigate out of the new task and back to the Launcher by repeated presses of the back key. Back key presses should not navigate across task stacks. startActivities provides a mechanism for constructing a synthetic task stack of multiple activities. If the underlying API is not available on the system this method will return false. Parameters context Start activities using this activity as the starting context intents Array of intents defining the activities that will be started. The element length-1 will correspond to the top activity on the resulting task stack. Returns true if the underlying API was available and the call was successful, false otherwise
	3:	android.graphics.Region public boolean setPath (Path path, Region clip) Set the region to the area described by the path and clip. Return true if the resulting region is non-empty. This produces a region that is identical to the pixels that would be drawn by the path (with no antialiasing).
	4:	java.io.LineNumberInputStream public int getLineNumber () Returns the current line number for this stream. Numbering starts at 0. Returns the current line number.
	5:	java.io.LineNumberReader public int getLineNumber () Returns the current line number for this reader. Numbering starts at 0. Returns the current line number.
	6:	android.view.MotionEvent public static MotionEvent obtain (long downTime, long eventTime, int action, float x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags) Create a new MotionEvent, filling in all of the basic values that define the motion. Parameters downTime The time (in ms) when the user originally pressed down to start a stream of position events. This must be obtained from uptimeMillis(). eventTime The the time (in ms) when this specific event was generated. This must be obtained from uptimeMillis(). action The kind of action being performed, such as ACTION_DOWN. x The X coordinate of this event. y The Y coordinate of this event. pressure The current pressure of this event. The pressure generally ranges from 0 (no pressure at all) to 1 (normal pressure), however values higher than 1 may be generated depending on the calibration of the input device. size A scaled value of the approximate size of the area being pressed when touched with the finger. The actual value in pixels corresponding to the finger touch is normalized with a device specific range of values and scaled to a value between 0 and 1. metaState The state of any meta / modifier keys that were in effect when the event was generated. xPrecision The precision of the X coordinate being reported. yPrecision The precision of the Y coordinate being reported. deviceId The id for the device that this event came from. An id of zero indicates that the event didn't come from a physical device; other numbers are arbitrary and you shouldn't depend on the values. edgeFlags A bitfield indicating which edges, if any, were touched by this MotionEvent.
	7:	android.view.MotionEvent public static MotionEvent obtain (long downTime, long eventTime, int action, int pointerCount, float x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags) This method was deprecated in API level 9. Use obtain(long, long, int, float, float, float, float, int, float, float, int, int) instead. Create a new MotionEvent, filling in all of the basic values that define the motion. Parameters downTime The time (in ms) when the user originally pressed down to start a stream of position events. This must be obtained from uptimeMillis(). eventTime The the time (in ms) when this specific event was generated. This must be obtained from uptimeMillis(). action The kind of action being performed, such as ACTION_DOWN. pointerCount The number of pointers that are active in this event. x The X coordinate of this event. y The Y coordinate of this event. pressure The current pressure of this event. The pressure generally ranges from 0 (no pressure at all) to 1 (normal pressure), however values higher than 1 may be generated depending on the calibration of the input device. size A scaled value of the approximate size of the area being pressed when touched with the finger. The actual value in pixels corresponding to the finger touch is normalized with a device specific range of values and scaled to a value between 0 and 1. metaState The state of any meta / modifier keys that were in effect when the event was generated. xPrecision The precision of the X coordinate being reported. yPrecision The precision of the Y coordinate being reported. deviceId The id for the device that this event came from. An id of zero indicates that the event didn't come from a physical device; other numbers are arbitrary and you shouldn't depend on the values. edgeFlags A bitfield indicating which edges, if any, were touched by this MotionEvent.
	8:	android.support.v4.content.ContextCompat public static boolean startActivities (Context context, Intent[] intents, Bundle options) Start a set of activities as a synthesized task stack, if able. In API level 11 (Android 3.0/Honeycomb) the recommended conventions for app navigation using the back key changed. The back key's behavior is local to the current task and does not capture navigation across different tasks. Navigating across tasks and easily reaching the previous task is accomplished through the "recents" UI, accessible through the software-provided Recents key on the navigation or system bar. On devices with the older hardware button configuration the recents UI can be accessed with a long press on the Home key. When crossing from one task stack to another post-Android 3.0, the application should synthesize a back stack/history for the new task so that the user may navigate out of the new task and back to the Launcher by repeated presses of the back key. Back key presses should not navigate across task stacks. startActivities provides a mechanism for constructing a synthetic task stack of multiple activities. If the underlying API is not available on the system this method will return false. Parameters context Start activities using this activity as the starting context intents Array of intents defining the activities that will be started. The element length-1 will correspond to the top activity on the resulting task stack. options Additional options for how the Activity should be started. See {@link android.content.Context#startActivity(Intent, Bundle) Returns true if the underlying API was available and the call was successful, false otherwise
	9:	android.widget.HorizontalScrollView public boolean fullScroll (int direction) Handles scrolling in response to a "home/end" shortcut press. This method will scroll the view to the left or right and give the focus to the leftmost/rightmost component in the new visible area. If no component is a good candidate for focus, this scrollview reclaims the focus. Parameters direction the scroll direction: FOCUS_LEFT to go the left of the view or FOCUS_RIGHT to go the right Returns true if the key event is consumed by this method, false otherwise
getClipY
Gets the Y offset of the current clipping area, relative to the coordinate system origin of this graphics context
	0:	android.hardware.Camera.Parameters public List<Camera.Area> getMeteringAreas () Gets the current metering areas. Camera driver uses these areas to decide exposure. Before using this API or setMeteringAreas(List), apps should call getMaxNumMeteringAreas() to know the maximum number of metering areas first. If the value is 0, metering area is not supported. Each metering area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of setDisplayOrientation(int). Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of metering areas cannot be 0 or negative. The weight must range from 1 to 1000, and represents a weight for every pixel in the area. This means that a large metering area with the same weight as a smaller area will have more effect in the metering result. Metering areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null metering area list means the driver is free to meter as it chooses. For example, the driver may use more signals to select metering areas and change them dynamically. Apps can set the metering area list to null if they want the driver to completely control metering. Metering areas are relative to the current field of view (getZoom()). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The metering area cannot be set to be outside the current field of view, even when using zoom. No matter what metering areas are, the final exposure are compensated by setExposureCompensation(int). Returns a list of current metering areas
	1:	android.hardware.Camera.Parameters public List<Camera.Area> getFocusAreas () Gets the current focus areas. Camera driver uses the areas to decide focus. Before using this API or setFocusAreas(List), apps should call getMaxNumFocusAreas() to know the maximum number of focus areas first. If the value is 0, focus area is not supported. Each focus area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of setDisplayOrientation(int). Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of focus areas cannot be 0 or negative. The weight must range from 1 to 1000. The weight should be interpreted as a per-pixel weight - all pixels in the area have the specified weight. This means a small area with the same weight as a larger area will have less influence on the focusing than the larger area. Focus areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null focus area list means the driver is free to select focus targets as it wants. For example, the driver may use more signals to select focus areas and change them dynamically. Apps can set the focus area list to null if they want the driver to completely control focusing. Focus areas are relative to the current field of view (getZoom()). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The focus area cannot be set to be outside the current field of view, even when using zoom. Focus area only has effect if the current focus mode is FOCUS_MODE_AUTO, FOCUS_MODE_MACRO, FOCUS_MODE_CONTINUOUS_VIDEO, or FOCUS_MODE_CONTINUOUS_PICTURE. Returns a list of current focus areas
	2:	java.io.LineNumberInputStream public int getLineNumber () Returns the current line number for this stream. Numbering starts at 0. Returns the current line number.
	3:	java.io.LineNumberReader public int getLineNumber () Returns the current line number for this reader. Numbering starts at 0. Returns the current line number.
	4:	android.text.BoringLayout public int getBottomPadding () Returns the number of extra pixels of descent padding in the bottom line of the Layout.
	5:	android.text.DynamicLayout public int getBottomPadding () Returns the number of extra pixels of descent padding in the bottom line of the Layout.
	6:	android.text.Layout public abstract int getBottomPadding () Returns the number of extra pixels of descent padding in the bottom line of the Layout.
	7:	android.support.v4.content.ContextCompat public static boolean startActivities (Context context, Intent[] intents) Start a set of activities as a synthesized task stack, if able. In API level 11 (Android 3.0/Honeycomb) the recommended conventions for app navigation using the back key changed. The back key's behavior is local to the current task and does not capture navigation across different tasks. Navigating across tasks and easily reaching the previous task is accomplished through the "recents" UI, accessible through the software-provided Recents key on the navigation or system bar. On devices with the older hardware button configuration the recents UI can be accessed with a long press on the Home key. When crossing from one task stack to another post-Android 3.0, the application should synthesize a back stack/history for the new task so that the user may navigate out of the new task and back to the Launcher by repeated presses of the back key. Back key presses should not navigate across task stacks. startActivities provides a mechanism for constructing a synthetic task stack of multiple activities. If the underlying API is not available on the system this method will return false. Parameters context Start activities using this activity as the starting context intents Array of intents defining the activities that will be started. The element length-1 will correspond to the top activity on the resulting task stack. Returns true if the underlying API was available and the call was successful, false otherwise
	8:	android.graphics.Region public boolean setPath (Path path, Region clip) Set the region to the area described by the path and clip. Return true if the resulting region is non-empty. This produces a region that is identical to the pixels that would be drawn by the path (with no antialiasing).
	9:	android.view.MotionEvent public static MotionEvent obtain (long downTime, long eventTime, int action, int pointerCount, float x, float y, float pressure, float size, int metaState, float xPrecision, float yPrecision, int deviceId, int edgeFlags) This method was deprecated in API level 9. Use obtain(long, long, int, float, float, float, float, int, float, float, int, int) instead. Create a new MotionEvent, filling in all of the basic values that define the motion. Parameters downTime The time (in ms) when the user originally pressed down to start a stream of position events. This must be obtained from uptimeMillis(). eventTime The the time (in ms) when this specific event was generated. This must be obtained from uptimeMillis(). action The kind of action being performed, such as ACTION_DOWN. pointerCount The number of pointers that are active in this event. x The X coordinate of this event. y The Y coordinate of this event. pressure The current pressure of this event. The pressure generally ranges from 0 (no pressure at all) to 1 (normal pressure), however values higher than 1 may be generated depending on the calibration of the input device. size A scaled value of the approximate size of the area being pressed when touched with the finger. The actual value in pixels corresponding to the finger touch is normalized with a device specific range of values and scaled to a value between 0 and 1. metaState The state of any meta / modifier keys that were in effect when the event was generated. xPrecision The precision of the X coordinate being reported. yPrecision The precision of the Y coordinate being reported. deviceId The id for the device that this event came from. An id of zero indicates that the event didn't come from a physical device; other numbers are arbitrary and you shouldn't depend on the values. edgeFlags A bitfield indicating which edges, if any, were touched by this MotionEvent.
getClipWidth
Gets the width of the current clipping area
	0:	android.hardware.Camera.Parameters public List<Camera.Area> getFocusAreas () Gets the current focus areas. Camera driver uses the areas to decide focus. Before using this API or setFocusAreas(List), apps should call getMaxNumFocusAreas() to know the maximum number of focus areas first. If the value is 0, focus area is not supported. Each focus area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of setDisplayOrientation(int). Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of focus areas cannot be 0 or negative. The weight must range from 1 to 1000. The weight should be interpreted as a per-pixel weight - all pixels in the area have the specified weight. This means a small area with the same weight as a larger area will have less influence on the focusing than the larger area. Focus areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null focus area list means the driver is free to select focus targets as it wants. For example, the driver may use more signals to select focus areas and change them dynamically. Apps can set the focus area list to null if they want the driver to completely control focusing. Focus areas are relative to the current field of view (getZoom()). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The focus area cannot be set to be outside the current field of view, even when using zoom. Focus area only has effect if the current focus mode is FOCUS_MODE_AUTO, FOCUS_MODE_MACRO, FOCUS_MODE_CONTINUOUS_VIDEO, or FOCUS_MODE_CONTINUOUS_PICTURE. Returns a list of current focus areas
	1:	android.hardware.Camera.Parameters public List<Camera.Area> getMeteringAreas () Gets the current metering areas. Camera driver uses these areas to decide exposure. Before using this API or setMeteringAreas(List), apps should call getMaxNumMeteringAreas() to know the maximum number of metering areas first. If the value is 0, metering area is not supported. Each metering area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of setDisplayOrientation(int). Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of metering areas cannot be 0 or negative. The weight must range from 1 to 1000, and represents a weight for every pixel in the area. This means that a large metering area with the same weight as a smaller area will have more effect in the metering result. Metering areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null metering area list means the driver is free to meter as it chooses. For example, the driver may use more signals to select metering areas and change them dynamically. Apps can set the metering area list to null if they want the driver to completely control metering. Metering areas are relative to the current field of view (getZoom()). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The metering area cannot be set to be outside the current field of view, even when using zoom. No matter what metering areas are, the final exposure are compensated by setExposureCompensation(int). Returns a list of current metering areas
	2:	android.graphics.Region public boolean setPath (Path path, Region clip) Set the region to the area described by the path and clip. Return true if the resulting region is non-empty. This produces a region that is identical to the pixels that would be drawn by the path (with no antialiasing).
	3:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	4:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	5:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
	6:	android.graphics.Canvas public boolean clipRegion (Region region, Region.Op op) Modify the current clip with the specified region. Note that unlike clipRect() and clipPath() which transform their arguments by the current matrix, clipRegion() assumes its argument is already in the coordinate system of the current layer's bitmap, and so not transformation is performed. Parameters region The region to operate on the current clip, based on op op How the clip is modified Returns true if the resulting is non-empty
	7:	android.graphics.Canvas public boolean clipRegion (Region region) Intersect the current clip with the specified region. Note that unlike clipRect() and clipPath() which transform their arguments by the current matrix, clipRegion() assumes its argument is already in the coordinate system of the current layer's bitmap, and so not transformation is performed. Parameters region The region to operate on the current clip, based on op Returns true if the resulting is non-empty
	8:	android.inputmethodservice.InputMethodService public void updateInputViewShown () Re-evaluate whether the soft input area should currently be shown, and update its UI if this has changed since the last time it was evaluated. This will call onEvaluateInputViewShown() to determine whether the input view should currently be shown. You can use isInputViewShown() to determine if the input view is currently shown.
	9:	android.graphics.Canvas public int getWidth () Returns the width of the current drawing layer Returns the width of the current drawing layer
getClipHeight
Gets the height of the current clipping area
	0:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	1:	android.hardware.Camera.Parameters public List<Camera.Area> getFocusAreas () Gets the current focus areas. Camera driver uses the areas to decide focus. Before using this API or setFocusAreas(List), apps should call getMaxNumFocusAreas() to know the maximum number of focus areas first. If the value is 0, focus area is not supported. Each focus area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of setDisplayOrientation(int). Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of focus areas cannot be 0 or negative. The weight must range from 1 to 1000. The weight should be interpreted as a per-pixel weight - all pixels in the area have the specified weight. This means a small area with the same weight as a larger area will have less influence on the focusing than the larger area. Focus areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null focus area list means the driver is free to select focus targets as it wants. For example, the driver may use more signals to select focus areas and change them dynamically. Apps can set the focus area list to null if they want the driver to completely control focusing. Focus areas are relative to the current field of view (getZoom()). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The focus area cannot be set to be outside the current field of view, even when using zoom. Focus area only has effect if the current focus mode is FOCUS_MODE_AUTO, FOCUS_MODE_MACRO, FOCUS_MODE_CONTINUOUS_VIDEO, or FOCUS_MODE_CONTINUOUS_PICTURE. Returns a list of current focus areas
	2:	android.hardware.Camera.Parameters public List<Camera.Area> getMeteringAreas () Gets the current metering areas. Camera driver uses these areas to decide exposure. Before using this API or setMeteringAreas(List), apps should call getMaxNumMeteringAreas() to know the maximum number of metering areas first. If the value is 0, metering area is not supported. Each metering area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of setDisplayOrientation(int). Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of metering areas cannot be 0 or negative. The weight must range from 1 to 1000, and represents a weight for every pixel in the area. This means that a large metering area with the same weight as a smaller area will have more effect in the metering result. Metering areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null metering area list means the driver is free to meter as it chooses. For example, the driver may use more signals to select metering areas and change them dynamically. Apps can set the metering area list to null if they want the driver to completely control metering. Metering areas are relative to the current field of view (getZoom()). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The metering area cannot be set to be outside the current field of view, even when using zoom. No matter what metering areas are, the final exposure are compensated by setExposureCompensation(int). Returns a list of current metering areas
	3:	android.graphics.Region public boolean setPath (Path path, Region clip) Set the region to the area described by the path and clip. Return true if the resulting region is non-empty. This produces a region that is identical to the pixels that would be drawn by the path (with no antialiasing).
	4:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	5:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	6:	android.graphics.Canvas public boolean clipRect (int left, int top, int right, int bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	7:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	8:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
	9:	android.print.pdf.PrintedPdfDocument public Rect getPageContentRect () Gets the content rectangle. This is the area of the page that contains printed data and is relative to the page top left. Returns The content rectangle.
clipRect
Intersects the current clip with the specified rectangle
	0:	android.graphics.Canvas public boolean clipRect (RectF rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	1:	android.graphics.Canvas public boolean clipRect (Rect rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	2:	android.graphics.Canvas public boolean clipRect (Rect rect, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. op How the clip is modified Returns true if the resulting clip is non-empty
	3:	android.graphics.Canvas public boolean clipRect (RectF rect, Region.Op op) Modify the current clip with the specified rectangle. Parameters rect The rect to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	4:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	5:	android.graphics.Canvas public boolean clipRect (int left, int top, int right, int bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	6:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	7:	android.content.ClipboardManager public void setPrimaryClip (ClipData clip) Sets the current primary clip on the clipboard. This is the clip that is involved in normal cut and paste operations. Parameters clip The clipped data item to set.
	8:	android.graphics.Canvas public final Rect getClipBounds () Retrieve the bounds of the current clip (in local coordinates). Returns the clip bounds, or [0, 0, 0, 0] if the clip is empty.
	9:	android.content.ClipboardManager public ClipData getPrimaryClip () Returns the current primary clip on the clipboard.
setClip
Sets the current clip to the rectangle specified by the given coordinates
	0:	android.content.ClipboardManager public void setPrimaryClip (ClipData clip) Sets the current primary clip on the clipboard. This is the clip that is involved in normal cut and paste operations. Parameters clip The clipped data item to set.
	1:	android.inputmethodservice.ExtractEditText public boolean onTextContextMenuItem (int id) Called when a context menu option for the text view is selected. Currently this will be one of selectAll, cut, copy or paste. Returns true if the context menu item action was performed.
	2:	android.view.inputmethod.InputConnection public abstract boolean performContextMenuAction (int id) Perform a context menu action on the field. The given id may be one of: selectAll, startSelectingText, stopSelectingText, cut, copy, paste, copyUrl, or switchInputMethod
	3:	android.view.inputmethod.InputConnectionWrapper public boolean performContextMenuAction (int id) Perform a context menu action on the field. The given id may be one of: selectAll, startSelectingText, stopSelectingText, cut, copy, paste, copyUrl, or switchInputMethod
	4:	android.renderscript.Matrix4f public void loadOrthoWindow (int w, int h) Set current values to be an orthographic projection matrix with the right and bottom clipping planes set to the given values. Left and top clipping planes are set to 0. Near and far are set to -1, 1 respectively Parameters w location of the right vertical clipping plane h location of the bottom horizontal clipping plane
	5:	android.support.v8.renderscript.Matrix4f public void loadOrthoWindow (int w, int h) Set current values to be an orthographic projection matrix with the right and bottom clipping planes set to the given values. Left and top clipping planes are set to 0. Near and far are set to -1, 1 respectively Parameters w location of the right vertical clipping plane h location of the bottom horizontal clipping plane
	6:	android.graphics.Canvas public final Rect getClipBounds () Retrieve the bounds of the current clip (in local coordinates). Returns the clip bounds, or [0, 0, 0, 0] if the clip is empty.
	7:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	8:	android.content.ClipboardManager public ClipData getPrimaryClip () Returns the current primary clip on the clipboard.
	9:	android.content.ClipboardManager public boolean hasPrimaryClip () Returns true if there is currently a primary clip on the clipboard.
drawLine
Draws a line between the coordinates (x1,y1) and (x2,y2) using the current color and stroke style
	0:	android.graphics.CornerPathEffect public CornerPathEffect (float radius) Transforms geometries that are drawn (either STROKE or FILL styles) by replacing any sharp angles between line segments into rounded angles of the specified radius. Parameters radius Amount to round sharp angles between line segments.
	1:	android.graphics.LinearGradient public LinearGradient (float x0, float y0, float x1, float y1, int color0, int color1, Shader.TileMode tile) Create a shader that draws a linear gradient along a line. Parameters x0 The x-coordinate for the start of the gradient line y0 The y-coordinate for the start of the gradient line x1 The x-coordinate for the end of the gradient line y1 The y-coordinate for the end of the gradient line color0 The color at the start of the gradient line. color1 The color at the end of the gradient line. tile The Shader tiling mode
	2:	android.graphics.Paint public Paint.Cap getStrokeCap () Return the paint's Cap, controlling how the start and end of stroked lines and paths are treated. Returns the line cap style for the paint, used whenever the paint's style is Stroke or StrokeAndFill.
	3:	android.graphics.LinearGradient public LinearGradient (float x0, float y0, float x1, float y1, int[] colors, float[] positions, Shader.TileMode tile) Create a shader that draws a linear gradient along a line. Parameters x0 The x-coordinate for the start of the gradient line y0 The y-coordinate for the start of the gradient line x1 The x-coordinate for the end of the gradient line y1 The y-coordinate for the end of the gradient line colors The colors to be distributed along the gradient line positions May be null. The relative positions [0..1] of each corresponding color in the colors array. If this is null, the the colors are distributed evenly along the gradient line. tile The Shader tiling mode
	4:	org.xmlpull.v1.sax2.Driver public int getLineNumber () Return the line number where the current document event ends. Lines are delimited by line ends, which are defined in the XML specification. Warning: The return value from the method is intended only as an approximation for the sake of diagnostics; it is not intended to provide sufficient information to edit the character content of the original XML document. In some cases, these "line" numbers match what would be displayed as columns, and in others they may not match the source text due to internal entity expansion. The return value is an approximation of the line number in the document entity or external parsed entity where the markup triggering the event appears. If possible, the SAX driver should provide the line position of the first character after the text associated with the document event. The first line is line 1. Returns The line number, or -1 if none is available.
	5:	org.xml.sax.Locator public abstract int getLineNumber () Return the line number where the current document event ends. Lines are delimited by line ends, which are defined in the XML specification. Warning: The return value from the method is intended only as an approximation for the sake of diagnostics; it is not intended to provide sufficient information to edit the character content of the original XML document. In some cases, these "line" numbers match what would be displayed as columns, and in others they may not match the source text due to internal entity expansion. The return value is an approximation of the line number in the document entity or external parsed entity where the markup triggering the event appears. If possible, the SAX driver should provide the line position of the first character after the text associated with the document event. The first line is line 1. Returns The line number, or -1 if none is available. See Also getColumnNumber()
	6:	org.apache.http.message.BasicLineParser public RequestLine parseRequestLine (CharArrayBuffer buffer, ParserCursor cursor) Parses a request line. Parameters buffer a buffer holding the line to parse cursor the parser cursor containing the current position and the bounds within the buffer for the parsing operation Returns the parsed request line Throws ParseException in case of a parse error
	7:	org.apache.http.message.BasicLineParser public StatusLine parseStatusLine (CharArrayBuffer buffer, ParserCursor cursor) Parses a status line. Parameters buffer a buffer holding the line to parse cursor the parser cursor containing the current position and the bounds within the buffer for the parsing operation Returns the parsed status line Throws ParseException
	8:	org.apache.http.message.LineParser public abstract RequestLine parseRequestLine (CharArrayBuffer buffer, ParserCursor cursor) Parses a request line. Parameters buffer a buffer holding the line to parse cursor the parser cursor containing the current position and the bounds within the buffer for the parsing operation Returns the parsed request line Throws ParseException in case of a parse error
	9:	org.apache.http.message.LineParser public abstract StatusLine parseStatusLine (CharArrayBuffer buffer, ParserCursor cursor) Parses a status line. Parameters buffer a buffer holding the line to parse cursor the parser cursor containing the current position and the bounds within the buffer for the parsing operation Returns the parsed status line Throws ParseException in case of a parse error
fillRect
Fills the specified rectangle with the current color
	0:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	1:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	2:	android.hardware.Camera.Parameters public void setColorEffect (String value) Sets the current color effect setting. Parameters value new color effect. See Also getColorEffect()
	3:	android.hardware.Camera.Parameters public String getColorEffect () Gets the current color effect setting. Returns current color effect. null if color effect setting is not supported. See Also EFFECT_NONE EFFECT_MONO EFFECT_NEGATIVE EFFECT_SOLARIZE EFFECT_SEPIA EFFECT_POSTERIZE EFFECT_WHITEBOARD EFFECT_BLACKBOARD EFFECT_AQUA
	4:	android.support.v4.view.PagerTabStrip public int getTabIndicatorColor () Returns The current tab indicator color as an 0xRRGGBB value.
	5:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	6:	java.util.logging.LogManager public void readConfiguration (InputStream ins) Re-initialize the properties and configuration from the given InputStream Notice : No PropertyChangeEvent are fired. Parameters ins the input stream Throws IOException if any IO related problems happened.
	7:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	8:	android.view.animation.Animation public void setBackgroundColor (int bg) Set background behind animation. Parameters bg The background color. If 0, no background. Currently must be black, with any desired alpha level.
	9:	android.graphics.Color public Color () 
drawRect
Draws the outline of the specified rectangle using the current color and stroke style
	0:	android.graphics.Canvas public void drawRect (RectF rect, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters rect The rect to be drawn paint The paint used to draw the rect
	1:	android.graphics.Canvas public void drawRect (Rect r, Paint paint) Draw the specified Rect using the specified Paint. The rectangle will be filled or framed based on the Style in the paint. Parameters r The rectangle to be drawn. paint The paint used to draw the rectangle
	2:	android.graphics.Canvas public void drawRect (float left, float top, float right, float bottom, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters left The left side of the rectangle to be drawn top The top side of the rectangle to be drawn right The right side of the rectangle to be drawn bottom The bottom side of the rectangle to be drawn paint The paint used to draw the rect
	3:	android.graphics.drawable.GradientDrawable public void setStroke (int width, int color, float dashWidth, float dashGap) Set the stroke width and color for the drawable. If width is zero, then no stroke is drawn. This method can also be used to dash the stroke. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters width The width in pixels of the stroke color The color of the stroke dashWidth The length in pixels of the dashes, set to 0 to disable dashes dashGap The gap in pixels between dashes See Also mutate() setStroke(int, int)
	4:	android.graphics.Paint public float getStrokeWidth () Return the width for stroking. A value of 0 strokes in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Returns the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	5:	android.graphics.Paint public void setStrokeWidth (float width) Set the width for stroking. Pass 0 to stroke in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Parameters width set the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	6:	android.graphics.Paint public Paint.Cap getStrokeCap () Return the paint's Cap, controlling how the start and end of stroked lines and paths are treated. Returns the line cap style for the paint, used whenever the paint's style is Stroke or StrokeAndFill.
	7:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	8:	android.graphics.drawable.GradientDrawable public void setStroke (int width, int color) Set the stroke width and color for the drawable. If width is zero, then no stroke is drawn. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters width The width in pixels of the stroke color The color of the stroke See Also mutate() setStroke(int, int, float, float)
	9:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
drawRoundRect
Draws the outline of the specified rounded corner rectangle using the current color and stroke style
	0:	android.graphics.Canvas public void drawRoundRect (RectF rect, float rx, float ry, Paint paint) Draw the specified round-rect using the specified paint. The roundrect will be filled or framed based on the Style in the paint. Parameters rect The rectangular bounds of the roundRect to be drawn rx The x-radius of the oval used to round the corners ry The y-radius of the oval used to round the corners paint The paint used to draw the roundRect
	1:	android.graphics.drawable.GradientDrawable public void setStroke (int width, int color, float dashWidth, float dashGap) Set the stroke width and color for the drawable. If width is zero, then no stroke is drawn. This method can also be used to dash the stroke. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters width The width in pixels of the stroke color The color of the stroke dashWidth The length in pixels of the dashes, set to 0 to disable dashes dashGap The gap in pixels between dashes See Also mutate() setStroke(int, int)
	2:	android.graphics.Paint public float getStrokeWidth () Return the width for stroking. A value of 0 strokes in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Returns the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	3:	android.graphics.Paint public void setStrokeWidth (float width) Set the width for stroking. Pass 0 to stroke in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Parameters width set the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	4:	android.graphics.Paint public Paint.Cap getStrokeCap () Return the paint's Cap, controlling how the start and end of stroked lines and paths are treated. Returns the line cap style for the paint, used whenever the paint's style is Stroke or StrokeAndFill.
	5:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	6:	android.graphics.drawable.GradientDrawable public void setStroke (int width, int color) Set the stroke width and color for the drawable. If width is zero, then no stroke is drawn. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters width The width in pixels of the stroke color The color of the stroke See Also mutate() setStroke(int, int, float, float)
	7:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, float left, float top, Paint paint) Draw the specified bitmap, with its top/left corner at (x,y), using the specified paint, transformed by the current matrix. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. If the bitmap and canvas have different densities, this function will take care of automatically scaling the bitmap to draw at the same density as the canvas. Parameters bitmap The bitmap to be drawn left The position of the left side of the bitmap being drawn top The position of the top side of the bitmap being drawn paint The paint used to draw the bitmap (may be null)
	8:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	9:	android.graphics.PathDashPathEffect public PathDashPathEffect (Path shape, float advance, float phase, PathDashPathEffect.Style style) Dash the drawn path by stamping it with the specified shape. This only applies to drawings when the paint's style is STROKE or STROKE_AND_FILL. If the paint's style is FILL, then this effect is ignored. The paint's strokeWidth does not affect the results. Parameters shape The path to stamp along advance spacing between each stamp of shape phase amount to offset before the first shape is stamped style how to transform the shape at each position as it is stamped
fillRoundRect
Fills the specified rounded corner rectangle with the current color
	0:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, float left, float top, Paint paint) Draw the specified bitmap, with its top/left corner at (x,y), using the specified paint, transformed by the current matrix. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. If the bitmap and canvas have different densities, this function will take care of automatically scaling the bitmap to draw at the same density as the canvas. Parameters bitmap The bitmap to be drawn left The position of the left side of the bitmap being drawn top The position of the top side of the bitmap being drawn paint The paint used to draw the bitmap (may be null)
	1:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	2:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	3:	android.hardware.Camera.Parameters public void setColorEffect (String value) Sets the current color effect setting. Parameters value new color effect. See Also getColorEffect()
	4:	android.hardware.Camera.Parameters public String getColorEffect () Gets the current color effect setting. Returns current color effect. null if color effect setting is not supported. See Also EFFECT_NONE EFFECT_MONO EFFECT_NEGATIVE EFFECT_SOLARIZE EFFECT_SEPIA EFFECT_POSTERIZE EFFECT_WHITEBOARD EFFECT_BLACKBOARD EFFECT_AQUA
	5:	android.support.v4.view.PagerTabStrip public int getTabIndicatorColor () Returns The current tab indicator color as an 0xRRGGBB value.
	6:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	7:	java.util.logging.LogManager public void readConfiguration (InputStream ins) Re-initialize the properties and configuration from the given InputStream Notice : No PropertyChangeEvent are fired. Parameters ins the input stream Throws IOException if any IO related problems happened.
	8:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	9:	android.graphics.drawable.PaintDrawable public void setCornerRadii (float[] radii) Specify radii for each of the 4 corners. For each corner, the array contains 2 values, [X_radius, Y_radius]. The corners are ordered top-left, top-right, bottom-right, bottom-left Parameters radii the x and y radii of the corners
fillArc
Fills a circular or elliptical arc covering the specified rectangle
	0:	android.graphics.Path public void addArc (RectF oval, float startAngle, float sweepAngle) Add the specified arc to the path as a new contour. Parameters oval The bounds of oval defining the shape and size of the arc startAngle Starting angle (in degrees) where the arc begins sweepAngle Sweep angle (in degrees) measured clockwise
	1:	android.graphics.Path public void arcTo (RectF oval, float startAngle, float sweepAngle) Append the specified arc to the path as a new contour. If the start of the path is different from the path's current last point, then an automatic lineTo() is added to connect the current contour to the start of the arc. However, if the path is empty, then we call moveTo() with the first point of the arc. Parameters oval The bounds of oval defining shape and size of the arc startAngle Starting angle (in degrees) where the arc begins sweepAngle Sweep angle (in degrees) measured clockwise
	2:	android.graphics.Path public void arcTo (RectF oval, float startAngle, float sweepAngle, boolean forceMoveTo) Append the specified arc to the path as a new contour. If the start of the path is different from the path's current last point, then an automatic lineTo() is added to connect the current contour to the start of the arc. However, if the path is empty, then we call moveTo() with the first point of the arc. The sweep angle is tread mod 360. Parameters oval The bounds of oval defining shape and size of the arc startAngle Starting angle (in degrees) where the arc begins sweepAngle Sweep angle (in degrees) measured clockwise, treated mod 360. forceMoveTo If true, always begin a new contour with the arc
	3:	android.graphics.Canvas public void drawArc (RectF oval, float startAngle, float sweepAngle, boolean useCenter, Paint paint) Draw the specified arc, which will be scaled to fit inside the specified oval. If the start angle is negative or >= 360, the start angle is treated as start angle modulo 360. If the sweep angle is >= 360, then the oval is drawn completely. Note that this differs slightly from SkPath::arcTo, which treats the sweep angle modulo 360. If the sweep angle is negative, the sweep angle is treated as sweep angle modulo 360 The arc is drawn clockwise. An angle of 0 degrees correspond to the geometric angle of 0 degrees (3 o'clock on a watch.) Parameters oval The bounds of oval used to define the shape and size of the arc startAngle Starting angle (in degrees) where the arc begins sweepAngle Sweep angle (in degrees) measured clockwise useCenter If true, include the center of the oval in the arc, and close it if it is being stroked. This will draw a wedge paint The paint used to draw the arc
	4:	android.graphics.drawable.shapes.ArcShape public ArcShape (float startAngle, float sweepAngle) ArcShape constructor. Parameters startAngle the angle (in degrees) where the arc begins sweepAngle the sweep angle (in degrees). Anything equal to or greater than 360 results in a complete circle/oval.
	5:	java.lang.Math public static double acos (double d) Returns the closest double approximation of the arc cosine of the argument within the range [0..pi]. The returned result is within 1 ulp (unit in the last place) of the real result. Special cases: acos((anything > 1) = NaN acos((anything < -1) = NaN acos(NaN) = NaN Parameters d the value to compute arc cosine of. Returns the arc cosine of the argument.
	6:	java.lang.Math public static double asin (double d) Returns the closest double approximation of the arc sine of the argument within the range [-pi/2..pi/2]. The returned result is within 1 ulp (unit in the last place) of the real result. Special cases: asin((anything > 1)) = NaN asin((anything < -1)) = NaN asin(NaN) = NaN Parameters d the value whose arc sine has to be computed. Returns the arc sine of the argument.
	7:	java.lang.Math public static double atan (double d) Returns the closest double approximation of the arc tangent of the argument within the range [-pi/2..pi/2]. The returned result is within 1 ulp (unit in the last place) of the real result. Special cases: atan(+0.0) = +0.0 atan(-0.0) = -0.0 atan(+infinity) = +pi/2 atan(-infinity) = -pi/2 atan(NaN) = NaN Parameters d the value whose arc tangent has to be computed. Returns the arc tangent of the argument.
	8:	android.graphics.Canvas public void drawRoundRect (RectF rect, float rx, float ry, Paint paint) Draw the specified round-rect using the specified paint. The roundrect will be filled or framed based on the Style in the paint. Parameters rect The rectangular bounds of the roundRect to be drawn rx The x-radius of the oval used to round the corners ry The y-radius of the oval used to round the corners paint The paint used to draw the roundRect
	9:	java.lang.Math public static double atan2 (double y, double x) Returns the closest double approximation of the arc tangent of y/x within the range [-pi..pi]. This is the angle of the polar representation of the rectangular coordinates (x,y). The returned result is within 2 ulps (units in the last place) of the real result. Special cases: atan2((anything), NaN ) = NaN; atan2(NaN , (anything) ) = NaN; atan2(+0.0, +(anything but NaN)) = +0.0 atan2(-0.0, +(anything but NaN)) = -0.0 atan2(+0.0, -(anything but NaN)) = +pi atan2(-0.0, -(anything but NaN)) = -pi atan2(+(anything but 0 and NaN), 0) = +pi/2 atan2(-(anything but 0 and NaN), 0) = -pi/2 atan2(+(anything but infinity and NaN), +infinity) = +0.0 atan2(-(anything but infinity and NaN), +infinity) = -0.0 atan2(+(anything but infinity and NaN), -infinity) = +pi atan2(-(anything but infinity and NaN), -infinity) = -pi atan2(+infinity, +infinity ) = +pi/4 atan2(-infinity, +infinity ) = -pi/4 atan2(+infinity, -infinity ) = +3pi/4 atan2(-infinity, -infinity ) = -3pi/4 atan2(+infinity, (anything but,0, NaN, and infinity)) = +pi/2 atan2(-infinity, (anything but,0, NaN, and infinity)) = -pi/2 Parameters y the numerator of the value whose atan has to be computed. x the denominator of the value whose atan has to be computed. Returns the arc tangent of y/x.
drawArc
Draws the outline of a circular or elliptical arc covering the specified rectangle, using the current color and stroke style
	0:	android.graphics.Canvas public void drawArc (RectF oval, float startAngle, float sweepAngle, boolean useCenter, Paint paint) Draw the specified arc, which will be scaled to fit inside the specified oval. If the start angle is negative or >= 360, the start angle is treated as start angle modulo 360. If the sweep angle is >= 360, then the oval is drawn completely. Note that this differs slightly from SkPath::arcTo, which treats the sweep angle modulo 360. If the sweep angle is negative, the sweep angle is treated as sweep angle modulo 360 The arc is drawn clockwise. An angle of 0 degrees correspond to the geometric angle of 0 degrees (3 o'clock on a watch.) Parameters oval The bounds of oval used to define the shape and size of the arc startAngle Starting angle (in degrees) where the arc begins sweepAngle Sweep angle (in degrees) measured clockwise useCenter If true, include the center of the oval in the arc, and close it if it is being stroked. This will draw a wedge paint The paint used to draw the arc
	1:	android.graphics.Path public void arcTo (RectF oval, float startAngle, float sweepAngle) Append the specified arc to the path as a new contour. If the start of the path is different from the path's current last point, then an automatic lineTo() is added to connect the current contour to the start of the arc. However, if the path is empty, then we call moveTo() with the first point of the arc. Parameters oval The bounds of oval defining shape and size of the arc startAngle Starting angle (in degrees) where the arc begins sweepAngle Sweep angle (in degrees) measured clockwise
	2:	android.graphics.Path public void arcTo (RectF oval, float startAngle, float sweepAngle, boolean forceMoveTo) Append the specified arc to the path as a new contour. If the start of the path is different from the path's current last point, then an automatic lineTo() is added to connect the current contour to the start of the arc. However, if the path is empty, then we call moveTo() with the first point of the arc. The sweep angle is tread mod 360. Parameters oval The bounds of oval defining shape and size of the arc startAngle Starting angle (in degrees) where the arc begins sweepAngle Sweep angle (in degrees) measured clockwise, treated mod 360. forceMoveTo If true, always begin a new contour with the arc
	3:	android.graphics.drawable.GradientDrawable public void setStroke (int width, int color, float dashWidth, float dashGap) Set the stroke width and color for the drawable. If width is zero, then no stroke is drawn. This method can also be used to dash the stroke. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters width The width in pixels of the stroke color The color of the stroke dashWidth The length in pixels of the dashes, set to 0 to disable dashes dashGap The gap in pixels between dashes See Also mutate() setStroke(int, int)
	4:	android.graphics.Path public void addArc (RectF oval, float startAngle, float sweepAngle) Add the specified arc to the path as a new contour. Parameters oval The bounds of oval defining the shape and size of the arc startAngle Starting angle (in degrees) where the arc begins sweepAngle Sweep angle (in degrees) measured clockwise
	5:	java.math.MathContext public MathContext (int precision) Constructs a new MathContext with the specified precision and with the rounding mode HALF_UP. If the precision passed is zero, then this implies that the computations have to be performed exact, the rounding mode in this case is irrelevant. Parameters precision the precision for the new MathContext. Throws IllegalArgumentException if precision < 0.
	6:	android.graphics.CornerPathEffect public CornerPathEffect (float radius) Transforms geometries that are drawn (either STROKE or FILL styles) by replacing any sharp angles between line segments into rounded angles of the specified radius. Parameters radius Amount to round sharp angles between line segments.
	7:	android.graphics.Paint public float getStrokeWidth () Return the width for stroking. A value of 0 strokes in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Returns the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	8:	android.graphics.Paint public void setStrokeWidth (float width) Set the width for stroking. Pass 0 to stroke in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Parameters width set the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	9:	java.math.MathContext public MathContext (int precision, RoundingMode roundingMode) Constructs a new MathContext with the specified precision and with the specified rounding mode. If the precision passed is zero, then this implies that the computations have to be performed exact, the rounding mode in this case is irrelevant. Parameters precision the precision for the new MathContext. roundingMode the rounding mode for the new MathContext. Throws IllegalArgumentException if precision < 0. NullPointerException if roundingMode is null.
drawString
Draws the specified String using the current font and color
	0:	android.hardware.Camera.Parameters public void setColorEffect (String value) Sets the current color effect setting. Parameters value new color effect. See Also getColorEffect()
	1:	android.hardware.Camera.Parameters public String getColorEffect () Gets the current color effect setting. Returns current color effect. null if color effect setting is not supported. See Also EFFECT_NONE EFFECT_MONO EFFECT_NEGATIVE EFFECT_SOLARIZE EFFECT_SEPIA EFFECT_POSTERIZE EFFECT_WHITEBOARD EFFECT_BLACKBOARD EFFECT_AQUA
	2:	java.lang.Boolean public Boolean (String string) Constructs a new Boolean with its boolean value specified by string. If string is not null and is equal to "true" using a non-case sensitive comparison, the result will be a Boolean representing the primitive value true, otherwise it will be a Boolean representing the primitive value false. Parameters string the string representing a boolean value.
	3:	android.hardware.Camera.Parameters public List<String> getSupportedColorEffects () Gets the supported color effects. Returns a list of supported color effects. null if color effect setting is not supported. See Also getColorEffect()
	4:	java.io.ByteArrayOutputStream public String toString (String charsetName) Returns the contents of this ByteArrayOutputStream as a string converted according to the encoding declared in charsetName. Parameters charsetName a string representing the encoding to use when translating this stream to a string. Returns this stream's current contents as an encoded string. Throws UnsupportedEncodingException if the provided encoding is not supported.
	5:	org.xml.sax.helpers.NamespaceSupport public String getURI (String prefix) Look up a prefix and get the currently-mapped Namespace URI. This method looks up the prefix in the current context. Use the empty string ("") for the default Namespace. Parameters prefix The prefix to look up. Returns The associated Namespace URI, or null if the prefix is undeclared in this context. See Also getPrefix(String) getPrefixes()
	6:	android.renderscript.RSDriverException public RSDriverException (String string) 
	7:	android.renderscript.RSIllegalArgumentException public RSIllegalArgumentException (String string) 
	8:	android.renderscript.RSInvalidStateException public RSInvalidStateException (String string) 
	9:	android.renderscript.RSRuntimeException public RSRuntimeException (String string) 
drawSubstring
Draws the specified String using the current font and color
	0:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	1:	android.hardware.Camera.Parameters public void setColorEffect (String value) Sets the current color effect setting. Parameters value new color effect. See Also getColorEffect()
	2:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	3:	android.hardware.Camera.Parameters public String getColorEffect () Gets the current color effect setting. Returns current color effect. null if color effect setting is not supported. See Also EFFECT_NONE EFFECT_MONO EFFECT_NEGATIVE EFFECT_SOLARIZE EFFECT_SEPIA EFFECT_POSTERIZE EFFECT_WHITEBOARD EFFECT_BLACKBOARD EFFECT_AQUA
	4:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.graphics.Canvas public void drawVertices (Canvas.VertexMode mode, int vertexCount, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, Paint paint) Draw the array of vertices, interpreted as triangles (based on mode). The verts array is required, and specifies the x,y pairs for each vertex. If texs is non-null, then it is used to specify the coordinate in shader coordinates to use at each vertex (the paint must have a shader in this case). If there is no texs array, but there is a color array, then each color is interpolated across its corresponding triangle in a gradient. If both texs and colors arrays are present, then they behave as before, but the resulting color at each pixels is the result of multiplying the colors from the shader and the color-gradient together. The indices array is optional, but if it is present, then it is used to specify the index of each triangle, rather than just walking through the arrays in order. Parameters mode How to interpret the array of vertices vertexCount The number of values in the vertices array (and corresponding texs and colors arrays if non-null). Each logical vertex is two values (x, y), vertexCount must be a multiple of 2. verts Array of vertices for the mesh vertOffset Number of values in the verts to skip before drawing. texs May be null. If not null, specifies the coordinates to sample into the current shader (e.g. bitmap tile or gradient) texOffset Number of values in texs to skip before drawing. colors May be null. If not null, specifies a color for each vertex, to be interpolated across the triangle. colorOffset Number of values in colors to skip before drawing. indices If not null, array of indices to reference into the vertex (texs, colors) array. indexCount number of entries in the indices array (if not null). paint Specifies the shader to use if the texs array is non-null.
	6:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	7:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	8:	android.graphics.drawable.ColorDrawable public void setColor (int color) Sets the drawable's color value. This action will clobber the results of prior calls to setAlpha(int) on this object, which side-affected the underlying color. Parameters color The color to draw.
	9:	android.graphics.LinearGradient public LinearGradient (float x0, float y0, float x1, float y1, int[] colors, float[] positions, Shader.TileMode tile) Create a shader that draws a linear gradient along a line. Parameters x0 The x-coordinate for the start of the gradient line y0 The y-coordinate for the start of the gradient line x1 The x-coordinate for the end of the gradient line y1 The y-coordinate for the end of the gradient line colors The colors to be distributed along the gradient line positions May be null. The relative positions [0..1] of each corresponding color in the colors array. If this is null, the the colors are distributed evenly along the gradient line. tile The Shader tiling mode
drawChar
Draws the specified character using the current font and color
	0:	android.graphics.Canvas public void drawVertices (Canvas.VertexMode mode, int vertexCount, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, Paint paint) Draw the array of vertices, interpreted as triangles (based on mode). The verts array is required, and specifies the x,y pairs for each vertex. If texs is non-null, then it is used to specify the coordinate in shader coordinates to use at each vertex (the paint must have a shader in this case). If there is no texs array, but there is a color array, then each color is interpolated across its corresponding triangle in a gradient. If both texs and colors arrays are present, then they behave as before, but the resulting color at each pixels is the result of multiplying the colors from the shader and the color-gradient together. The indices array is optional, but if it is present, then it is used to specify the index of each triangle, rather than just walking through the arrays in order. Parameters mode How to interpret the array of vertices vertexCount The number of values in the vertices array (and corresponding texs and colors arrays if non-null). Each logical vertex is two values (x, y), vertexCount must be a multiple of 2. verts Array of vertices for the mesh vertOffset Number of values in the verts to skip before drawing. texs May be null. If not null, specifies the coordinates to sample into the current shader (e.g. bitmap tile or gradient) texOffset Number of values in texs to skip before drawing. colors May be null. If not null, specifies a color for each vertex, to be interpolated across the triangle. colorOffset Number of values in colors to skip before drawing. indices If not null, array of indices to reference into the vertex (texs, colors) array. indexCount number of entries in the indices array (if not null). paint Specifies the shader to use if the texs array is non-null.
	1:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	2:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	3:	android.bluetooth.BluetoothHealthAppConfiguration public int getRole () Return the role associated with this application configuration. Returns One of SOURCE_ROLE or SINK_ROLE
	4:	android.hardware.Camera.Parameters public void setColorEffect (String value) Sets the current color effect setting. Parameters value new color effect. See Also getColorEffect()
	5:	android.hardware.Camera.Parameters public String getColorEffect () Gets the current color effect setting. Returns current color effect. null if color effect setting is not supported. See Also EFFECT_NONE EFFECT_MONO EFFECT_NEGATIVE EFFECT_SOLARIZE EFFECT_SEPIA EFFECT_POSTERIZE EFFECT_WHITEBOARD EFFECT_BLACKBOARD EFFECT_AQUA
	6:	android.support.v4.view.PagerTabStrip public int getTabIndicatorColor () Returns The current tab indicator color as an 0xRRGGBB value.
	7:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	8:	android.renderscript.Element public static Element FONT (RenderScript rs) 
	9:	java.util.logging.LogManager public void readConfiguration (InputStream ins) Re-initialize the properties and configuration from the given InputStream Notice : No PropertyChangeEvent are fired. Parameters ins the input stream Throws IOException if any IO related problems happened.
drawChars
Draws the specified characters using the current font and color
	0:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	1:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	2:	android.hardware.Camera.Parameters public void setColorEffect (String value) Sets the current color effect setting. Parameters value new color effect. See Also getColorEffect()
	3:	android.graphics.Canvas public void drawVertices (Canvas.VertexMode mode, int vertexCount, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, Paint paint) Draw the array of vertices, interpreted as triangles (based on mode). The verts array is required, and specifies the x,y pairs for each vertex. If texs is non-null, then it is used to specify the coordinate in shader coordinates to use at each vertex (the paint must have a shader in this case). If there is no texs array, but there is a color array, then each color is interpolated across its corresponding triangle in a gradient. If both texs and colors arrays are present, then they behave as before, but the resulting color at each pixels is the result of multiplying the colors from the shader and the color-gradient together. The indices array is optional, but if it is present, then it is used to specify the index of each triangle, rather than just walking through the arrays in order. Parameters mode How to interpret the array of vertices vertexCount The number of values in the vertices array (and corresponding texs and colors arrays if non-null). Each logical vertex is two values (x, y), vertexCount must be a multiple of 2. verts Array of vertices for the mesh vertOffset Number of values in the verts to skip before drawing. texs May be null. If not null, specifies the coordinates to sample into the current shader (e.g. bitmap tile or gradient) texOffset Number of values in texs to skip before drawing. colors May be null. If not null, specifies a color for each vertex, to be interpolated across the triangle. colorOffset Number of values in colors to skip before drawing. indices If not null, array of indices to reference into the vertex (texs, colors) array. indexCount number of entries in the indices array (if not null). paint Specifies the shader to use if the texs array is non-null.
	4:	android.hardware.Camera.Parameters public String getColorEffect () Gets the current color effect setting. Returns current color effect. null if color effect setting is not supported. See Also EFFECT_NONE EFFECT_MONO EFFECT_NEGATIVE EFFECT_SOLARIZE EFFECT_SEPIA EFFECT_POSTERIZE EFFECT_WHITEBOARD EFFECT_BLACKBOARD EFFECT_AQUA
	5:	android.support.v4.view.PagerTabStrip public int getTabIndicatorColor () Returns The current tab indicator color as an 0xRRGGBB value.
	6:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	7:	android.renderscript.Element public static Element FONT (RenderScript rs) 
	8:	java.util.logging.LogManager public void readConfiguration (InputStream ins) Re-initialize the properties and configuration from the given InputStream Notice : No PropertyChangeEvent are fired. Parameters ins the input stream Throws IOException if any IO related problems happened.
	9:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
drawImage
Draws the specified image by using the anchor point
	0:	android.widget.PopupWindow public void showAsDropDown (View anchor) Display the content view in a popup window anchored to the bottom-left corner of the anchor view. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled, the bottom-left corner of the popup is pinned at the top left corner of the anchor view. Parameters anchor the view on which to pin the popup window See Also dismiss()
	1:	android.widget.PopupWindow public void showAsDropDown (View anchor, int xoff, int yoff, int gravity) Display the content view in a popup window anchored to the bottom-left corner of the anchor view offset by the specified x and y coordinates. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled, the bottom-left corner of the popup is pinned at the top left corner of the anchor view. If the view later scrolls to move anchor to a different location, the popup will be moved correspondingly. Parameters anchor the view on which to pin the popup window xoff A horizontal offset from the anchor in pixels yoff A vertical offset from the anchor in pixels gravity Alignment of the popup relative to the anchor See Also dismiss()
	2:	android.support.v7.widget.PopupMenu public void show () Show the menu popup anchored to the view specified during construction. See Also dismiss()
	3:	android.widget.PopupMenu public void show () Show the menu popup anchored to the view specified during construction. See Also dismiss()
	4:	android.widget.PopupWindow public void showAsDropDown (View anchor, int xoff, int yoff) Display the content view in a popup window anchored to the bottom-left corner of the anchor view offset by the specified x and y coordinates. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled, the bottom-left corner of the popup is pinned at the top left corner of the anchor view. If the view later scrolls to move anchor to a different location, the popup will be moved correspondingly. Parameters anchor the view on which to pin the popup window xoff A horizontal offset from the anchor in pixels yoff A vertical offset from the anchor in pixels See Also dismiss()
	5:	android.widget.RelativeLayout.LayoutParams public void addRule (int verb, int anchor) Adds a layout rule to be interpreted by the RelativeLayout. Use this for verbs that take a target, such as a sibling (ALIGN_RIGHT) or a boolean value (VISIBLE). Parameters verb One of the verbs defined by RelativeLayout, such as ALIGN_WITH_PARENT_LEFT. anchor The id of another view to use as an anchor, or a boolean value(represented as TRUE) for true or 0 for false). For verbs that don't refer to another sibling (for example, ALIGN_WITH_PARENT_BOTTOM) just use -1. See Also addRule(int)
	6:	android.widget.PopupWindow public boolean isAboveAnchor () Indicates whether the popup is showing above (the y coordinate of the popup's bottom is less than the y coordinate of the anchor) or below the anchor view (the y coordinate of the popup is greater than y coordinate of the anchor's bottom). The value returned by this method is meaningful only after showAsDropDown(android.view.View) or showAsDropDown(android.view.View, int, int) was invoked. Returns True if this popup is showing above the anchor view, false otherwise.
	7:	android.graphics.Point public Point (Point src) 
	8:	android.widget.AutoCompleteTextView public void setDropDownAnchor (int id) Sets the view to which the auto-complete drop down list should anchor. The view corresponding to this id will not be loaded until the next time it is needed to avoid loading a view which is not yet instantiated. Related XML Attributes android:dropDownAnchor Parameters id the id to anchor the drop down list view to
	9:	android.view.ScaleGestureDetector public float getFocusX () Get the X coordinate of the current gesture's focal point. If a gesture is in progress, the focal point is between each of the pointers forming the gesture. If isInProgress() would return false, the result of this function is undefined. Returns X coordinate of the focal point in pixels.
drawRegion
Copies a region of the specified source image to a location within the destination, possibly transforming (rotating and reflecting) the image data using the chosen transform function
	0:	java.sql.DatabaseMetaData public abstract String getStringFunctions () Returns a list of string functions available with the database. These functions are used in JDBC function escape clause and follow the Open Group CLI string function names definition. Returns a String containing the list of string functions in comma separated format. Throws SQLException a database error occurred.
	1:	java.sql.DatabaseMetaData public abstract String getSystemFunctions () Returns a list of system functions available with the database. These are names used in the JDBC function escape clause and are Open Group CLI function names. Returns a String containing the list of system functions in a comma separated format. Throws SQLException a database error occurred.
	2:	java.sql.DatabaseMetaData public abstract String getNumericFunctions () Returns a list of the math functions available with this database. These are used in the JDBC function escape clause and are the Open Group CLI math function names. Returns a String which contains the list of math functions as a comma separated list. Throws SQLException a database error occurred.
	3:	android.animation.PropertyValuesHolder public void setPropertyName (String propertyName) Sets the name of the property that will be animated. This name is used to derive a setter function that will be called to set animated values. For example, a property name of foo will result in a call to the function setFoo() on the target object. If either valueFrom or valueTo is null, then a getter function will also be derived and called. Note that the setter function derived from this property name must take the same parameter type as the valueFrom and valueTo properties, otherwise the call to the setter function will fail. Parameters propertyName The name of the property being animated.
	4:	android.view.Menu public abstract int addIntentOptions (int groupId, int itemId, int order, ComponentName caller, Intent[] specifics, Intent intent, int flags, MenuItem[] outSpecificItems) Add a group of menu items corresponding to actions that can be performed for a particular Intent. The Intent is most often configured with a null action, the data that the current activity is working with, and includes either the CATEGORY_ALTERNATIVE or CATEGORY_SELECTED_ALTERNATIVE to find activities that have said they would like to be included as optional action. You can, however, use any Intent you want. See queryIntentActivityOptions(ComponentName, Intent[], Intent, int) for more * details on the caller, specifics, and intent arguments. The list returned by that function is used to populate the resulting menu items. All of the menu items of possible options for the intent will be added with the given group and id. You can use the group to control ordering of the items in relation to other items in the menu. Normally this function will automatically remove any existing items in the menu in the same group and place a divider above and below the added items; this behavior can be modified with the flags parameter. For each of the generated items setIntent(Intent) is called to associate the appropriate Intent with the item; this means the activity will automatically be started for you without having to do anything else. Parameters groupId The group identifier that the items should be part of. This can also be used to define groups of items for batch state changes. Normally use NONE if the items should not be in a group. itemId Unique item ID. Use NONE if you do not need a unique ID. order The order for the items. Use NONE if you do not care about the order. See getOrder(). caller The current activity component name as defined by queryIntentActivityOptions(). specifics Specific items to place first as defined by queryIntentActivityOptions(). intent Intent describing the kinds of items to populate in the list as defined by queryIntentActivityOptions(). flags Additional options controlling how the items are added. outSpecificItems Optional array in which to place the menu items that were generated for each of the specifics that were requested. Entries may be null if no activity was found for that specific action. Returns The number of menu items that were added. See Also FLAG_APPEND_TO_GROUP setIntent(Intent) queryIntentActivityOptions(ComponentName, Intent[], Intent, int)
	5:	android.animation.ObjectAnimator public void setPropertyName (String propertyName) Sets the name of the property that will be animated. This name is used to derive a setter function that will be called to set animated values. For example, a property name of foo will result in a call to the function setFoo() on the target object. If either valueFrom or valueTo is null, then a getter function will also be derived and called. For best performance of the mechanism that calls the setter function determined by the name of the property being animated, use float or int typed values, and make the setter function for those properties have a void return value. This will cause the code to take an optimized path for these constrained circumstances. Other property types and return types will work, but will have more overhead in processing the requests due to normal reflection mechanisms. Note that the setter function derived from this property name must take the same parameter type as the valueFrom and valueTo properties, otherwise the call to the setter function will fail. If this ObjectAnimator has been set up to animate several properties together, using more than one PropertyValuesHolder objects, then setting the propertyName simply sets the propertyName in the first of those PropertyValuesHolder objects. Parameters propertyName The name of the property being animated. Should not be null.
	6:	javax.crypto.spec.OAEPParameterSpec public String getMGFAlgorithm () Returns the algorithm name of the mask generation function. Returns the algorithm name of the mask generation function.
	7:	java.security.spec.PSSParameterSpec public String getMGFAlgorithm () Returns the name of the mask generation function algorithm. Returns the name of the mask generation function algorithm.
	8:	android.content.BroadcastReceiver public final BroadcastReceiver.PendingResult goAsync () This can be called by an application in onReceive(Context, Intent) to allow it to keep the broadcast active after returning from that function. This does not change the expectation of being relatively responsive to the broadcast (finishing it within 10s), but does allow the implementation to move work related to it over to another thread to avoid glitching the main UI thread due to disk IO. Returns Returns a BroadcastReceiver.PendingResult representing the result of the active broadcast. The BroadcastRecord itself is no longer active; all data and other interaction must go through BroadcastReceiver.PendingResult APIs. The PendingResult.finish() method must be called once processing of the broadcast is done.
	9:	java.sql.DatabaseMetaData public abstract ResultSet getFunctionColumns (String catalog, String schemaPattern, String functionNamePattern, String columnNamePattern) Returns a description according to the given catalog's system or user function parameters and return type. Parameters catalog the given catalong schemaPattern the schema pattern functionNamePattern the function name pattern columnNamePattern the column name pattern Returns a description of user functions Throws SQLException if any error occurs
copyArea
Copies the contents of a rectangular area (x_src, y_src, width, height) to a destination area, whose anchor point identified by anchor is located at (x_dest, y_dest)
	0:	android.widget.PopupWindow public void update (View anchor, int xoff, int yoff, int width, int height) Updates the position and the dimension of the popup window. Width and height can be set to -1 to update location only. Calling this function also updates the window with the current popup state as described for update(). If the view later scrolls to move anchor to a different location, the popup will be moved correspondingly. Parameters anchor the popup's anchor view xoff x offset from the view's left edge yoff y offset from the view's bottom edge width the new width, can be -1 to ignore height the new height, can be -1 to ignore
	1:	android.widget.PopupWindow public void showAsDropDown (View anchor, int xoff, int yoff, int gravity) Display the content view in a popup window anchored to the bottom-left corner of the anchor view offset by the specified x and y coordinates. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled, the bottom-left corner of the popup is pinned at the top left corner of the anchor view. If the view later scrolls to move anchor to a different location, the popup will be moved correspondingly. Parameters anchor the view on which to pin the popup window xoff A horizontal offset from the anchor in pixels yoff A vertical offset from the anchor in pixels gravity Alignment of the popup relative to the anchor See Also dismiss()
	2:	android.widget.PopupWindow public void showAsDropDown (View anchor, int xoff, int yoff) Display the content view in a popup window anchored to the bottom-left corner of the anchor view offset by the specified x and y coordinates. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled, the bottom-left corner of the popup is pinned at the top left corner of the anchor view. If the view later scrolls to move anchor to a different location, the popup will be moved correspondingly. Parameters anchor the view on which to pin the popup window xoff A horizontal offset from the anchor in pixels yoff A vertical offset from the anchor in pixels See Also dismiss()
	3:	android.hardware.Camera.Parameters public List<Camera.Area> getFocusAreas () Gets the current focus areas. Camera driver uses the areas to decide focus. Before using this API or setFocusAreas(List), apps should call getMaxNumFocusAreas() to know the maximum number of focus areas first. If the value is 0, focus area is not supported. Each focus area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of setDisplayOrientation(int). Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of focus areas cannot be 0 or negative. The weight must range from 1 to 1000. The weight should be interpreted as a per-pixel weight - all pixels in the area have the specified weight. This means a small area with the same weight as a larger area will have less influence on the focusing than the larger area. Focus areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null focus area list means the driver is free to select focus targets as it wants. For example, the driver may use more signals to select focus areas and change them dynamically. Apps can set the focus area list to null if they want the driver to completely control focusing. Focus areas are relative to the current field of view (getZoom()). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The focus area cannot be set to be outside the current field of view, even when using zoom. Focus area only has effect if the current focus mode is FOCUS_MODE_AUTO, FOCUS_MODE_MACRO, FOCUS_MODE_CONTINUOUS_VIDEO, or FOCUS_MODE_CONTINUOUS_PICTURE. Returns a list of current focus areas
	4:	android.hardware.Camera.Parameters public List<Camera.Area> getMeteringAreas () Gets the current metering areas. Camera driver uses these areas to decide exposure. Before using this API or setMeteringAreas(List), apps should call getMaxNumMeteringAreas() to know the maximum number of metering areas first. If the value is 0, metering area is not supported. Each metering area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of setDisplayOrientation(int). Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of metering areas cannot be 0 or negative. The weight must range from 1 to 1000, and represents a weight for every pixel in the area. This means that a large metering area with the same weight as a smaller area will have more effect in the metering result. Metering areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null metering area list means the driver is free to meter as it chooses. For example, the driver may use more signals to select metering areas and change them dynamically. Apps can set the metering area list to null if they want the driver to completely control metering. Metering areas are relative to the current field of view (getZoom()). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The metering area cannot be set to be outside the current field of view, even when using zoom. No matter what metering areas are, the final exposure are compensated by setExposureCompensation(int). Returns a list of current metering areas
	5:	android.graphics.Matrix public boolean setPolyToPoly (float[] src, int srcIndex, float[] dst, int dstIndex, int pointCount) Set the matrix such that the specified src points would map to the specified dst points. The "points" are represented as an array of floats, order [x0, y0, x1, y1, ...], where each "point" is 2 float values. Parameters src The array of src [x,y] pairs (points) srcIndex Index of the first pair of src values dst The array of dst [x,y] pairs (points) dstIndex Index of the first pair of dst values pointCount The number of pairs/points to be used. Must be [0..4] Returns true if the matrix was set to the specified transformation
	6:	android.graphics.Matrix public void mapPoints (float[] dst, int dstIndex, float[] src, int srcIndex, int pointCount) Apply this matrix to the array of 2D points specified by src, and write the transformed points into the array of points specified by dst. The two arrays represent their "points" as pairs of floats [x, y]. Parameters dst The array of dst points (x,y pairs) dstIndex The index of the first [x,y] pair of dst floats src The array of src points (x,y pairs) srcIndex The index of the first [x,y] pair of src floats pointCount The number of points (x,y pairs) to transform
	7:	android.widget.PopupWindow public boolean isAboveAnchor () Indicates whether the popup is showing above (the y coordinate of the popup's bottom is less than the y coordinate of the anchor) or below the anchor view (the y coordinate of the popup is greater than y coordinate of the anchor's bottom). The value returned by this method is meaningful only after showAsDropDown(android.view.View) or showAsDropDown(android.view.View, int, int) was invoked. Returns True if this popup is showing above the anchor view, false otherwise.
	8:	android.widget.ListPopupWindow public void setAnchorView (View anchor) Sets the popup's anchor view. This popup will always be positioned relative to the anchor view when shown. Parameters anchor The view to use as an anchor.
	9:	android.view.animation.ScaleAnimation public ScaleAnimation (float fromX, float toX, float fromY, float toY, float pivotX, float pivotY) Constructor to use when building a ScaleAnimation from code Parameters fromX Horizontal scaling factor to apply at the start of the animation toX Horizontal scaling factor to apply at the end of the animation fromY Vertical scaling factor to apply at the start of the animation toY Vertical scaling factor to apply at the end of the animation pivotX The X coordinate of the point about which the object is being scaled, specified as an absolute number where 0 is the left edge. (This point remains fixed while the object changes size.) pivotY The Y coordinate of the point about which the object is being scaled, specified as an absolute number where 0 is the top edge. (This point remains fixed while the object changes size.)
fillTriangle
Fills the specified triangle will the current color
	0:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	1:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	2:	android.hardware.Camera.Parameters public void setColorEffect (String value) Sets the current color effect setting. Parameters value new color effect. See Also getColorEffect()
	3:	android.hardware.Camera.Parameters public String getColorEffect () Gets the current color effect setting. Returns current color effect. null if color effect setting is not supported. See Also EFFECT_NONE EFFECT_MONO EFFECT_NEGATIVE EFFECT_SOLARIZE EFFECT_SEPIA EFFECT_POSTERIZE EFFECT_WHITEBOARD EFFECT_BLACKBOARD EFFECT_AQUA
	4:	android.support.v4.view.PagerTabStrip public int getTabIndicatorColor () Returns The current tab indicator color as an 0xRRGGBB value.
	5:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	6:	java.util.logging.LogManager public void readConfiguration (InputStream ins) Re-initialize the properties and configuration from the given InputStream Notice : No PropertyChangeEvent are fired. Parameters ins the input stream Throws IOException if any IO related problems happened.
	7:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	8:	android.view.animation.Animation public void setBackgroundColor (int bg) Set background behind animation. Parameters bg The background color. If 0, no background. Currently must be black, with any desired alpha level.
	9:	android.graphics.Color public Color () 
drawRGB
Renders a series of device-independent RGB+transparency values in a specified region
	0:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	1:	android.security.KeyPairGeneratorSpec.Builder public KeyPairGeneratorSpec.Builder setSerialNumber (BigInteger serialNumber) Sets the serial number used for the self-signed certificate of the generated key pair.
	2:	java.util.regex.MatchResult public abstract String group (int group) Returns the text that matched a given group of the regular expression. Explicit capturing groups in the pattern are numbered left to right in order of their opening parenthesis, starting at 1. The special group 0 represents the entire match (as if the entire pattern is surrounded by an implicit capturing group). For example, "a((b)c)" matching "abc" would give the following groups: 0 "abc" 1 "bc" 2 "b" An optional capturing group that failed to match as part of an overall successful match (for example, "a(b)?c" matching "ac") returns null. A capturing group that matched the empty string (for example, "a(b?)c" matching "ac") returns the empty string.
	3:	javax.microedition.khronos.opengles.GL10 public abstract void glPolygonOffset (float factor, float units) 
	4:	javax.microedition.khronos.opengles.GL10 public abstract void glPolygonOffsetx (int factor, int units) 
	5:	android.opengl.GLES10 public static void glPolygonOffset (float factor, float units) 
	6:	android.opengl.GLES10 public static void glPolygonOffsetx (int factor, int units) 
	7:	android.opengl.GLES11Ext public static void glPolygonOffsetxOES (int factor, int units) 
	8:	android.opengl.GLES20 public static void glPolygonOffset (float factor, float units) 
	9:	java.util.regex.Matcher public String group (int group) Returns the text that matched a given group of the regular expression. Explicit capturing groups in the pattern are numbered left to right in order of their opening parenthesis, starting at 1. The special group 0 represents the entire match (as if the entire pattern is surrounded by an implicit capturing group). For example, "a((b)c)" matching "abc" would give the following groups: 0 "abc" 1 "bc" 2 "b" An optional capturing group that failed to match as part of an overall successful match (for example, "a(b)?c" matching "ac") returns null. A capturing group that matched the empty string (for example, "a(b?)c" matching "ac") returns the empty string. Throws IllegalStateException if no successful match has been made.
P

getDisplayColor
Gets the color that will be displayed if the specified color is requested
	0:	android.widget.CalendarView public void setWeekNumberColor (int color) Sets the color for the week numbers. Related XML Attributes android:weekNumberColor Parameters color The week number color.
	1:	android.widget.CalendarView public int getWeekNumberColor () Gets the color for the week numbers. Related XML Attributes android:weekNumberColor Returns The week number color.
	2:	android.graphics.Color public Color () 
	3:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	4:	android.support.v4.view.PagerTabStrip public void setBackgroundColor (int color) Sets the background color for this view. Parameters color the color of the background
	5:	android.widget.AbsListView public void setCacheColorHint (int color) When set to a non-zero value, the cache color hint indicates that this list is always drawn on top of a solid, single-color, opaque background. Zero means that what's behind this object is translucent (non solid) or is not made of a single color. This hint will not affect any existing background drawable set on this view ( typically set via setBackgroundDrawable(Drawable)). Parameters color The background color
	6:	android.widget.ListView public void setCacheColorHint (int color) When set to a non-zero value, the cache color hint indicates that this list is always drawn on top of a solid, single-color, opaque background. Zero means that what's behind this object is translucent (non solid) or is not made of a single color. This hint will not affect any existing background drawable set on this view ( typically set via setBackgroundDrawable(Drawable)). Parameters color The background color
	7:	android.text.style.BackgroundColorSpan public BackgroundColorSpan (int color) 
	8:	android.widget.CalendarView public void setSelectedWeekBackgroundColor (int color) Sets the background color for the selected week. Related XML Attributes android:selectedWeekBackgroundColor Parameters color The week background color.
	9:	android.text.style.ForegroundColorSpan public ForegroundColorSpan (int color) 
