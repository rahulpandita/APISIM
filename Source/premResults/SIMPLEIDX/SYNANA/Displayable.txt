getTitle
Gets the title of the Displayable
	0:	java.net.InetAddress public byte[] getAddress () Returns the IP address represented by this InetAddress instance as a byte array. The elements are in network order (the highest order address byte is in the zeroth element). Returns the address in form of a byte array.
	1:	android.text.util.Rfc822Token public void setAddress (String address) Changes the address to the specified address.
	2:	android.app.Notification.Builder public Notification.Builder setStyle (Notification.Style style) Add a rich notification style to be applied at build time. Parameters style Object responsible for modifying the notification style.
	3:	android.os.PowerManager.WakeLock public void release () Releases the wake lock. This method releases your claim to the CPU or screen being on. The screen may turn off shortly after you release the wake lock, or it may not if there are other wake locks still held.
	4:	android.test.mock.MockResources public int getIdentifier (String name, String defType, String defPackage) Return a resource identifier for the given resource name. A fully qualified resource name is of the form "package:type/entry". The first two components (package and type) are optional if defType and defPackage, respectively, are specified here. Note: use of this function is discouraged. It is much more efficient to retrieve resources by identifier than by name. Parameters name The name of the desired resource. defType Optional default resource type to find, if "type/" is not included in the name. Can be null to require an explicit type. defPackage Optional default package to find, if "package:" is not included in the name. Can be null to require an explicit package. Returns int The associated resource identifier. Returns 0 if no such resource was found. (0 is not a valid resource ID.)
	5:	android.content.res.Resources public int getIdentifier (String name, String defType, String defPackage) Return a resource identifier for the given resource name. A fully qualified resource name is of the form "package:type/entry". The first two components (package and type) are optional if defType and defPackage, respectively, are specified here. Note: use of this function is discouraged. It is much more efficient to retrieve resources by identifier than by name. Parameters name The name of the desired resource. defType Optional default resource type to find, if "type/" is not included in the name. Can be null to require an explicit type. defPackage Optional default package to find, if "package:" is not included in the name. Can be null to require an explicit package. Returns int The associated resource identifier. Returns 0 if no such resource was found. (0 is not a valid resource ID.)
	6:	java.net.InetSocketAddress public final InetAddress getAddress () Returns this socket address' address.
	7:	java.net.Proxy public SocketAddress address () Gets the address of this Proxy instance. Returns the stored proxy address or null if the proxy type is DIRECT.
	8:	android.support.v4.app.NotificationCompat.Builder public NotificationCompat.Builder setStyle (NotificationCompat.Style style) Add a rich notification style to be applied at build time. If the platform does not provide rich notification styles, this method has no effect. The user will always see the normal notification style. Parameters style Object responsible for modifying the notification style.
	9:	android.gesture.GestureLibrary public void setOrientationStyle (int style) 
setTitle
Sets the title of the Displayable
	0:	java.net.InetAddress public byte[] getAddress () Returns the IP address represented by this InetAddress instance as a byte array. The elements are in network order (the highest order address byte is in the zeroth element). Returns the address in form of a byte array.
	1:	android.text.util.Rfc822Token public void setAddress (String address) Changes the address to the specified address.
	2:	android.app.Notification.Builder public Notification.Builder setStyle (Notification.Style style) Add a rich notification style to be applied at build time. Parameters style Object responsible for modifying the notification style.
	3:	android.os.PowerManager.WakeLock public void release () Releases the wake lock. This method releases your claim to the CPU or screen being on. The screen may turn off shortly after you release the wake lock, or it may not if there are other wake locks still held.
	4:	android.test.mock.MockResources public int getIdentifier (String name, String defType, String defPackage) Return a resource identifier for the given resource name. A fully qualified resource name is of the form "package:type/entry". The first two components (package and type) are optional if defType and defPackage, respectively, are specified here. Note: use of this function is discouraged. It is much more efficient to retrieve resources by identifier than by name. Parameters name The name of the desired resource. defType Optional default resource type to find, if "type/" is not included in the name. Can be null to require an explicit type. defPackage Optional default package to find, if "package:" is not included in the name. Can be null to require an explicit package. Returns int The associated resource identifier. Returns 0 if no such resource was found. (0 is not a valid resource ID.)
	5:	android.content.res.Resources public int getIdentifier (String name, String defType, String defPackage) Return a resource identifier for the given resource name. A fully qualified resource name is of the form "package:type/entry". The first two components (package and type) are optional if defType and defPackage, respectively, are specified here. Note: use of this function is discouraged. It is much more efficient to retrieve resources by identifier than by name. Parameters name The name of the desired resource. defType Optional default resource type to find, if "type/" is not included in the name. Can be null to require an explicit type. defPackage Optional default package to find, if "package:" is not included in the name. Can be null to require an explicit package. Returns int The associated resource identifier. Returns 0 if no such resource was found. (0 is not a valid resource ID.)
	6:	java.net.InetSocketAddress public final InetAddress getAddress () Returns this socket address' address.
	7:	java.net.Proxy public SocketAddress address () Gets the address of this Proxy instance. Returns the stored proxy address or null if the proxy type is DIRECT.
	8:	android.support.v4.app.NotificationCompat.Builder public NotificationCompat.Builder setStyle (NotificationCompat.Style style) Add a rich notification style to be applied at build time. If the platform does not provide rich notification styles, this method has no effect. The user will always see the normal notification style. Parameters style Object responsible for modifying the notification style.
	9:	android.gesture.GestureLibrary public void setOrientationStyle (int style) 
getTicker
Gets the ticker used by this Displayable
	0:	android.support.v4.app.NotificationCompat.Builder public NotificationCompat.Builder setLargeIcon (Bitmap icon) Set the large icon that is shown in the ticker and notification.
	1:	android.app.Notification.Builder public Notification.Builder setTicker (CharSequence tickerText) Set the "ticker" text which is displayed in the status bar when the notification first arrives. See Also tickerText
	2:	android.support.v4.app.NotificationCompat.Builder public NotificationCompat.Builder setOnlyAlertOnce (boolean onlyAlertOnce) Set this flag if you would only like the sound, vibrate and ticker to be played if the notification is not already showing.
	3:	android.app.Notification.Builder public Notification.Builder setOnlyAlertOnce (boolean onlyAlertOnce) Set this flag if you would only like the sound, vibrate and ticker to be played if the notification is not already showing. See Also FLAG_ONLY_ALERT_ONCE
	4:	android.app.Notification.Builder public Notification.Builder setLargeIcon (Bitmap icon) Add a large icon to the notification (and the ticker on some devices). In the platform template, this image will be shown on the left of the notification view in place of the small icon (which will move to the right side). See Also largeIcon
	5:	java.text.FieldPosition public int getEndIndex () Returns the index one past the end of the field.
	6:	android.media.Rating public boolean hasHeart () Return whether the rating is "heart selected". Returns true if the rating is "heart selected", false if the rating is "heart unselected", if the rating style is not RATING_HEART or if it is unrated.
	7:	android.media.Rating public static Rating newHeartRating (boolean hasHeart) Return a Rating instance with a heart-based rating. Create and return a new Rating instance with a rating style of RATING_HEART, and a heart-based rating. Parameters hasHeart true for a "heart selected" rating, false for "heart unselected". Returns a new Rating instance.
	8:	java.text.CharacterIterator public abstract int getEndIndex () Returns the end index. Returns the index one past the last character of the iteration.
	9:	java.text.CharacterIterator public abstract char current () Returns the character at the current index. Returns the current character, or DONE if the current index is past the beginning or end of the sequence.
setTicker
Sets a ticker for use with this Displayable, replacing any previous ticker
	0:	android.support.v4.app.NotificationCompat.Builder public NotificationCompat.Builder setLargeIcon (Bitmap icon) Set the large icon that is shown in the ticker and notification.
	1:	android.app.Notification.Builder public Notification.Builder setTicker (CharSequence tickerText) Set the "ticker" text which is displayed in the status bar when the notification first arrives. See Also tickerText
	2:	android.support.v4.app.NotificationCompat.Builder public NotificationCompat.Builder setOnlyAlertOnce (boolean onlyAlertOnce) Set this flag if you would only like the sound, vibrate and ticker to be played if the notification is not already showing.
	3:	android.app.Notification.Builder public Notification.Builder setOnlyAlertOnce (boolean onlyAlertOnce) Set this flag if you would only like the sound, vibrate and ticker to be played if the notification is not already showing. See Also FLAG_ONLY_ALERT_ONCE
	4:	android.app.Notification.Builder public Notification.Builder setLargeIcon (Bitmap icon) Add a large icon to the notification (and the ticker on some devices). In the platform template, this image will be shown on the left of the notification view in place of the small icon (which will move to the right side). See Also largeIcon
	5:	android.media.Rating public boolean hasHeart () Return whether the rating is "heart selected". Returns true if the rating is "heart selected", false if the rating is "heart unselected", if the rating style is not RATING_HEART or if it is unrated.
	6:	android.media.Rating public static Rating newHeartRating (boolean hasHeart) Return a Rating instance with a heart-based rating. Create and return a new Rating instance with a rating style of RATING_HEART, and a heart-based rating. Parameters hasHeart true for a "heart selected" rating, false for "heart unselected". Returns a new Rating instance.
	7:	android.database.Cursor public abstract void setNotificationUri (ContentResolver cr, Uri uri) Register to watch a content URI for changes. This can be the URI of a specific data row (for example, "content://my_provider_type/23"), or a a generic URI for a content type. Parameters cr The content resolver from the caller's context. The listener attached to this resolver will be notified. uri The content URI to watch.
	8:	android.database.CursorWrapper public void setNotificationUri (ContentResolver cr, Uri uri) Register to watch a content URI for changes. This can be the URI of a specific data row (for example, "content://my_provider_type/23"), or a a generic URI for a content type. Parameters cr The content resolver from the caller's context. The listener attached to this resolver will be notified. uri The content URI to watch.
	9:	android.test.mock.MockCursor public void setNotificationUri (ContentResolver cr, Uri uri) Register to watch a content URI for changes. This can be the URI of a specific data row (for example, "content://my_provider_type/23"), or a a generic URI for a content type. Parameters cr The content resolver from the caller's context. The listener attached to this resolver will be notified. uri The content URI to watch.
isShown
Checks if the Displayable is actually visible on the display
	0:	android.hardware.Camera.Parameters public List<Camera.Size> getSupportedVideoSizes () Gets the supported video frame sizes that can be used by MediaRecorder. If the returned list is not null, the returned list will contain at least one Size and one of the sizes in the returned list must be passed to MediaRecorder.setVideoSize() for camcorder application if camera is used as the video source. In this case, the size of the preview can be different from the resolution of the recorded video during video recording. Returns a list of Size object if camera has separate preview and video output; otherwise, null is returned. See Also getPreferredPreviewSizeForVideo()
	1:	android.media.MediaPlayer public void setVideoScalingMode (int mode) Sets video scaling mode. To make the target video scaling mode effective during playback, this method must be called after data source is set. If not called, the default video scaling mode is VIDEO_SCALING_MODE_SCALE_TO_FIT. The supported video scaling modes are: VIDEO_SCALING_MODE_SCALE_TO_FIT VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING Parameters mode target video scaling mode. Most be one of the supported video scaling modes; otherwise, IllegalArgumentException will be thrown. See Also VIDEO_SCALING_MODE_SCALE_TO_FIT VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING
	2:	android.text.Html public static Spanned fromHtml (String source) Returns displayable styled text from the provided HTML string. Any <img> tags in the HTML will display as a generic replacement image which your program can then go through and replace with real images. This uses TagSoup to handle real HTML, including all of the brokenness found in the wild.
	3:	android.text.Html public static Spanned fromHtml (String source, Html.ImageGetter imageGetter, Html.TagHandler tagHandler) Returns displayable styled text from the provided HTML string. Any <img> tags in the HTML will use the specified ImageGetter to request a representation of the image (use null if you don't want this) and the specified TagHandler to handle unknown tags (specify null if you don't want this). This uses TagSoup to handle real HTML, including all of the brokenness found in the wild.
	4:	java.util.logging.LogManager public void readConfiguration (InputStream ins) Re-initialize the properties and configuration from the given InputStream Notice : No PropertyChangeEvent are fired. Parameters ins the input stream Throws IOException if any IO related problems happened.
	5:	android.widget.ListPopupWindow public void setInputMethodMode (int mode) Control how the popup operates with an input method: one of INPUT_METHOD_FROM_FOCUSABLE, INPUT_METHOD_NEEDED, or INPUT_METHOD_NOT_NEEDED. If the popup is showing, calling this method will take effect only the next time the popup is shown or through a manual call to the show() method. See Also getInputMethodMode() show()
	6:	android.widget.PopupWindow public void setInputMethodMode (int mode) Control how the popup operates with an input method: one of INPUT_METHOD_FROM_FOCUSABLE, INPUT_METHOD_NEEDED, or INPUT_METHOD_NOT_NEEDED. If the popup is showing, calling this method will take effect only the next time the popup is shown or through a manual call to one of the update() methods. See Also getInputMethodMode() update()
	7:	android.widget.LinearLayout public void setShowDividers (int showDividers) Set how dividers should be shown between items in this layout Parameters showDividers One or more of SHOW_DIVIDER_BEGINNING, SHOW_DIVIDER_MIDDLE, or SHOW_DIVIDER_END, or SHOW_DIVIDER_NONE to show no dividers.
	8:	android.hardware.Camera public final void setDisplayOrientation (int degrees) Set the clockwise rotation of preview display in degrees. This affects the preview frames and the picture displayed after snapshot. This method is useful for portrait mode applications. Note that preview display of front-facing cameras is flipped horizontally before the rotation, that is, the image is reflected along the central vertical axis of the camera sensor. So the users can see themselves as looking into a mirror. This does not affect the order of byte array passed in onPreviewFrame(byte[], Camera), JPEG pictures, or recorded videos. This method is not allowed to be called during preview. If you want to make the camera image show in the same orientation as the display, you can use the following code. public static void setCameraDisplayOrientation(Activity activity, int cameraId, android.hardware.Camera camera) { android.hardware.Camera.CameraInfo info = new android.hardware.Camera.CameraInfo(); android.hardware.Camera.getCameraInfo(cameraId, info); int rotation = activity.getWindowManager().getDefaultDisplay() .getRotation(); int degrees = 0; switch (rotation) { case Surface.ROTATION_0: degrees = 0; break; case Surface.ROTATION_90: degrees = 90; break; case Surface.ROTATION_180: degrees = 180; break; case Surface.ROTATION_270: degrees = 270; break; } int result; if (info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) { result = (info.orientation + degrees) % 360; result = (360 - result) % 360; // compensate the mirror } else { // back-facing result = (info.orientation - degrees + 360) % 360; } camera.setDisplayOrientation(result); } Starting from API level 14, this method can be called when preview is active. Parameters degrees the angle that the picture will be rotated clockwise. Valid values are 0, 90, 180, and 270. The starting position is 0 (landscape). See Also setPreviewDisplay(SurfaceHolder)
	9:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime () Call this method after setDataSource(). This method finds a representative frame at any time position if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source. Call this method if one does not care about where the frame is located; otherwise, please call getFrameAtTime(long) or getFrameAtTime(long, int) Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved. See Also getFrameAtTime(long) getFrameAtTime(long, int)
addCommand
Adds a command to the Displayable
	0:	java.sql.Connection public abstract Statement createStatement () Returns a new instance of Statement for issuing SQL commands to the remote database. ResultSets generated by the returned statement will default to type ResultSet.TYPE_FORWARD_ONLY and concurrency level ResultSet.CONCUR_READ_ONLY. Returns a Statement object with default settings. Throws SQLException if there is a problem accessing the database. See Also ResultSet
	1:	android.text.Layout public final float getSpacingAdd () Return the number of units of leading that are added to each line.
	2:	java.sql.DatabaseMetaData public abstract boolean supportsGroupByUnrelated () Determines whether the database supports using a column name in a GROUP BY clause that is not in the SELECT statement. Returns true if GROUP BY clause can use a column name not in the SELECT statement, false otherwise. Throws SQLException a database error occurred.
	3:	junit.runner.BaseTestRunner protected String processArguments (String[] args) Processes the command line arguments and returns the name of the suite class to run or null
	4:	java.util.concurrent.ScheduledExecutorService public abstract ScheduledFuture<?> schedule (Runnable command, long delay, TimeUnit unit) Creates and executes a one-shot action that becomes enabled after the given delay. Parameters command the task to execute delay the time from now to delay execution unit the time unit of the delay parameter Returns a ScheduledFuture representing pending completion of the task and whose get() method will return null upon completion Throws RejectedExecutionException if the task cannot be scheduled for execution NullPointerException if command is null
	5:	android.opengl.GLES20 public static String glGetActiveAttrib (int program, int index, IntBuffer size, IntBuffer type) 
	6:	android.opengl.GLES20 public static String glGetActiveUniform (int program, int index, IntBuffer size, IntBuffer type) 
	7:	android.opengl.GLES30 public static String glGetTransformFeedbackVarying (int program, int index, IntBuffer size, IntBuffer type) 
	8:	java.sql.DatabaseMetaData public abstract boolean supportsGroupByBeyondSelect () Determines whether the database supports using a column name in a GROUP BY clause not included in the SELECT statement as long as all of the columns in the SELECT statement are used in the GROUP BY clause. Returns true if GROUP BY clauses can use column names in this way, false otherwise. Throws SQLException a database error occurred.
	9:	java.util.concurrent.ScheduledThreadPoolExecutor public ScheduledFuture<?> schedule (Runnable command, long delay, TimeUnit unit) Creates and executes a one-shot action that becomes enabled after the given delay. Parameters command the task to execute delay the time from now to delay execution unit the time unit of the delay parameter Returns a ScheduledFuture representing pending completion of the task and whose get() method will return null upon completion Throws RejectedExecutionException NullPointerException
removeCommand
Removes a command from the Displayable
	0:	java.util.concurrent.ScheduledExecutorService public abstract ScheduledFuture<?> schedule (Runnable command, long delay, TimeUnit unit) Creates and executes a one-shot action that becomes enabled after the given delay. Parameters command the task to execute delay the time from now to delay execution unit the time unit of the delay parameter Returns a ScheduledFuture representing pending completion of the task and whose get() method will return null upon completion Throws RejectedExecutionException if the task cannot be scheduled for execution NullPointerException if command is null
	1:	java.util.concurrent.ScheduledThreadPoolExecutor public ScheduledFuture<?> schedule (Runnable command, long delay, TimeUnit unit) Creates and executes a one-shot action that becomes enabled after the given delay. Parameters command the task to execute delay the time from now to delay execution unit the time unit of the delay parameter Returns a ScheduledFuture representing pending completion of the task and whose get() method will return null upon completion Throws RejectedExecutionException NullPointerException
	2:	android.view.animation.GridLayoutAnimationController public GridLayoutAnimationController (Context context, AttributeSet attrs) Creates a new grid layout animation controller from external resources. Parameters context the Context the view group is running in, through which it can access the resources attrs the attributes of the XML tag that is inflating the layout animation controller
	3:	android.view.animation.LayoutAnimationController public LayoutAnimationController (Context context, AttributeSet attrs) Creates a new layout animation controller from external resources. Parameters context the Context the view group is running in, through which it can access the resources attrs the attributes of the XML tag that is inflating the layout animation controller
	4:	java.sql.Connection public abstract Statement createStatement () Returns a new instance of Statement for issuing SQL commands to the remote database. ResultSets generated by the returned statement will default to type ResultSet.TYPE_FORWARD_ONLY and concurrency level ResultSet.CONCUR_READ_ONLY. Returns a Statement object with default settings. Throws SQLException if there is a problem accessing the database. See Also ResultSet
	5:	java.sql.Connection public abstract PreparedStatement prepareStatement (String sql) Returns a new instance of PreparedStatement that may be used any number of times to execute parameterized requests on the database server. Subject to JDBC driver support, this operation will attempt to send the precompiled version of the statement to the database. If the driver does not support precompiled statements, the statement will not reach the database server until it is executed. This distinction determines the moment when SQLExceptions get raised. By default, ResultSets from the returned object will be TYPE_FORWARD_ONLY type with a CONCUR_READ_ONLY mode of concurrency. Parameters sql the SQL statement. Returns the PreparedStatement containing the supplied SQL statement. Throws SQLException if there is a problem accessing the database.
	6:	java.sql.Connection public abstract PreparedStatement prepareStatement (String sql, String[] columnNames) Creates a default PreparedStatement that can retrieve the auto-generated keys designated by a supplied array. If sql is an SQL INSERT statement, columnNames is expected to hold the names of each column in the statement's associated database table containing the autogenerated-keys of interest. Otherwise columnNames is ignored. Subject to JDBC driver support, this operation will attempt to send the precompiled version of the statement to the database. Alternatively, if the driver is not capable of handling precompiled statements, the statement will not reach the database server until it is executed. This will have a bearing on precisely when SQLException instances get raised. By default, ResultSets from the returned object will be TYPE_FORWARD_ONLY type with a CONCUR_READ_ONLY concurrency mode. Parameters sql the SQL statement. columnNames the names of the columns for which auto-generated keys should be made available. Returns the PreparedStatement containing the supplied SQL statement. Throws SQLException if a problem occurs accessing the database.
	7:	java.sql.Connection public abstract PreparedStatement prepareStatement (String sql, int[] columnIndexes) Creates a default PreparedStatement that can retrieve the auto-generated keys designated by a supplied array. If sql is an SQL INSERT statement, the parameter columnIndexes is expected to hold the index values for each column in the statement's intended database table containing the autogenerated-keys of interest. Otherwise columnIndexes is ignored. Subject to JDBC driver support, this operation will attempt to send the precompiled version of the statement to the database. If the driver does not support precompiled statements, the statement will not reach the database server until it is executed. This distinction determines the moment when SQLExceptions get raised. By default, ResultSets from the returned object will be TYPE_FORWARD_ONLY type with a CONCUR_READ_ONLY concurrency mode. Parameters sql the SQL statement. columnIndexes the indexes of the columns for which auto-generated keys should be made available. Returns the PreparedStatement containing the supplied SQL statement. Throws SQLException if a problem occurs accessing the database.
	8:	android.graphics.Path public void reset () Clear any lines and curves from the path, making it empty. This does NOT change the fill-type setting.
	9:	java.sql.Connection public abstract PreparedStatement prepareStatement (String sql, int autoGeneratedKeys) Creates a default PreparedStatement that can retrieve automatically generated keys. Parameter autoGeneratedKeys may be used to tell the driver whether such keys should be made accessible. This is only relevant when the sql statement is an insert statement. An SQL statement which may have IN parameters can be stored and precompiled in a PreparedStatement. The PreparedStatement can then be then be used to execute the statement multiple times in an efficient way. Subject to JDBC driver support, this operation will attempt to send the precompiled version of the statement to the database. If the driver does not support precompiled statements, the statement will not reach the database server until it is executed. This distinction determines the moment when SQLExceptions get raised. By default, ResultSets from the returned object will be TYPE_FORWARD_ONLY type with a CONCUR_READ_ONLY mode of concurrency. Parameters sql the SQL statement. autoGeneratedKeys one of the following generated key options: RETURN_GENERATED_KEYS NO_GENERATED_KEYS Returns a new PreparedStatement instance representing the input SQL statement. Throws SQLException if there is a problem accessing the database.
setCommandListener
Sets a listener for Commands to this Displayable, replacing any previous CommandListener
	0:	android.widget.ExpandableListAdapter public abstract View getGroupView (int groupPosition, boolean isExpanded, View convertView, ViewGroup parent) Gets a View that displays the given group. This View is only for the group--the Views for the group's children will be fetched using getChildView(int, int, boolean, View, ViewGroup). Parameters groupPosition the position of the group for which the View is returned isExpanded whether the group is expanded or collapsed convertView the old view to reuse, if possible. You should check that this view is non-null and of an appropriate type before using. If it is not possible to convert this view to display the correct data, this method can create a new view. It is not guaranteed that the convertView will have been previously created by getGroupView(int, boolean, View, ViewGroup). parent the parent that this view will eventually be attached to Returns the View corresponding to the group at the specified position
	1:	java.util.concurrent.ScheduledThreadPoolExecutor public ScheduledFuture<?> scheduleAtFixedRate (Runnable command, long initialDelay, long period, TimeUnit unit) Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is executions will commence after initialDelay then initialDelay+period, then initialDelay + 2 * period, and so on. If any execution of the task encounters an exception, subsequent executions are suppressed. Otherwise, the task will only terminate via cancellation or termination of the executor. If any execution of this task takes longer than its period, then subsequent executions may start late, but will not concurrently execute. Parameters command the task to execute initialDelay the time to delay first execution period the period between successive executions unit the time unit of the initialDelay and period parameters Returns a ScheduledFuture representing pending completion of the task, and whose get() method will throw an exception upon cancellation Throws RejectedExecutionException NullPointerException IllegalArgumentException
	2:	android.widget.ExpandableListAdapter public abstract View getChildView (int groupPosition, int childPosition, boolean isLastChild, View convertView, ViewGroup parent) Gets a View that displays the data for the given child within the given group. Parameters groupPosition the position of the group that contains the child childPosition the position of the child (for which the View is returned) within the group isLastChild Whether the child is the last child within the group convertView the old view to reuse, if possible. You should check that this view is non-null and of an appropriate type before using. If it is not possible to convert this view to display the correct data, this method can create a new view. It is not guaranteed that the convertView will have been previously created by getChildView(int, int, boolean, View, ViewGroup). parent the parent that this view will eventually be attached to Returns the View corresponding to the child at the specified position
	3:	java.util.concurrent.ScheduledExecutorService public abstract ScheduledFuture<?> scheduleAtFixedRate (Runnable command, long initialDelay, long period, TimeUnit unit) Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is executions will commence after initialDelay then initialDelay+period, then initialDelay + 2 * period, and so on. If any execution of the task encounters an exception, subsequent executions are suppressed. Otherwise, the task will only terminate via cancellation or termination of the executor. If any execution of this task takes longer than its period, then subsequent executions may start late, but will not concurrently execute. Parameters command the task to execute initialDelay the time to delay first execution period the period between successive executions unit the time unit of the initialDelay and period parameters Returns a ScheduledFuture representing pending completion of the task, and whose get() method will throw an exception upon cancellation Throws RejectedExecutionException if the task cannot be scheduled for execution NullPointerException if command is null IllegalArgumentException if period less than or equal to zero
	4:	java.beans.PropertyChangeEvent public Object getOldValue () Returns the old value that the property had. If the old value is unknown this method returns null. Returns the old property value or null.
	5:	android.app.LocalActivityManager public void dispatchCreate (Bundle state) Restore a state that was previously returned by saveInstanceState(). This adds to the activity group information about all activity IDs that had previously been saved, even if they have not been started yet, so if the user later navigates to them the correct state will be restored. Note: This does not change the current running activity, or start whatever activity was previously running when the state was saved. That is up to the client to do, in whatever way it thinks is best. Parameters state a previously saved state; does nothing if this is null See Also saveInstanceState()
	6:	android.net.ConnectivityManager public void setNetworkPreference (int preference) Specifies the preferred network type. When the device has more than one type available the preferred network type will be used. Note that this made sense when we only had 2 network types, but with more and more default networks we need an array to list their ordering. This will be deprecated soon. Parameters preference the network type to prefer over all others. It is unspecified what happens to the old preferred network in the overall ordering.
	7:	android.os.Parcel public final T[] createTypedArray (Creator<T> c) Read and return a new array containing a particular object type from the parcel at the current dataPosition(). Returns null if the previously written array was null. The array must have previously been written via writeTypedArray(T[], int) with the same object type. Returns A newly created array containing objects with the same data as those that were previously written. See Also writeTypedArray(T[], int)
	8:	android.os.Parcel public final ArrayList<T> createTypedArrayList (Creator<T> c) Read and return a new ArrayList containing a particular object type from the parcel that was written with writeTypedList(List) at the current dataPosition(). Returns null if the previously written list object was null. The list must have previously been written via writeTypedList(List) with the same object type. Returns A newly created ArrayList containing objects with the same data as those that were previously written. See Also writeTypedList(List)
	9:	javax.microedition.khronos.opengles.GL10 public abstract void glPolygonOffset (float factor, float units) 
getWidth
Gets the width in pixels of the displayable area available to the application
	0:	java.util.IllegalFormatWidthException public int getWidth () Returns the width associated with the exception. Returns the width.
	1:	android.graphics.Canvas public int getWidth () Returns the width of the current drawing layer Returns the width of the current drawing layer
	2:	android.opengl.ETC1Util.ETC1Texture public int getWidth () Get the width of the texture in pixels. Returns the width of the texture in pixels.
	3:	android.graphics.NinePatch public int getWidth () Returns the intrinsic width, in pixels, of this NinePatch. This is equivalent to querying the width of the underlying bitmap returned by getBitmap().
	4:	android.widget.PopupWindow public int getWidth () Return this popup's width MeasureSpec Returns the width MeasureSpec of the popup See Also setWidth(int)
	5:	android.graphics.Bitmap public final int getWidth () Returns the bitmap's width
	6:	android.graphics.BitmapRegionDecoder public int getWidth () Returns the original image's width
	7:	android.text.Layout public final int getWidth () Return the width of this layout.
	8:	android.widget.ListPopupWindow public int getWidth () Returns The width of the popup window in pixels.
	9:	android.media.Image public abstract int getWidth () The width of the image in pixels. For formats where some color channels are subsampled, this is the width of the largest-resolution plane.
getHeight
Gets the height in pixels of the displayable area available to the application
	0:	android.app.ActionBar public abstract int getHeight () Retrieve the current height of the ActionBar. Returns The ActionBar's height
	1:	android.support.v7.app.ActionBar public abstract int getHeight () Retrieve the current height of the ActionBar. Returns The ActionBar's height
	2:	android.support.v7.app.ActionBarImplJB public int getHeight () Retrieve the current height of the ActionBar. Returns The ActionBar's height
	3:	android.graphics.Canvas public int getHeight () Returns the height of the current drawing layer Returns the height of the current drawing layer
	4:	android.inputmethodservice.Keyboard public int getHeight () Returns the total height of the keyboard Returns the total height of the keyboard
	5:	android.graphics.NinePatch public int getHeight () Returns the intrinsic height, in pixels, of this NinePatch. This is equivalent to querying the height of the underlying bitmap returned by getBitmap().
	6:	android.widget.PopupWindow public int getHeight () Return this popup's height MeasureSpec Returns the height MeasureSpec of the popup See Also setHeight(int)
	7:	android.graphics.Bitmap public final int getHeight () Returns the bitmap's height
	8:	android.graphics.BitmapRegionDecoder public int getHeight () Returns the original image's height
	9:	android.text.BoringLayout public int getHeight () Return the total height of this layout.
sizeChanged
The implementation calls this method when the available area of the Displayable has been changed
	0:	android.net.NetworkInfo public boolean isAvailable () Indicates whether network connectivity is possible. A network is unavailable when a persistent or semi-persistent condition prevents the possibility of connecting to that network. Examples include The device is out of the coverage area for any network of this type. The device is on a network other than the home network (i.e., roaming), and data roaming has been disabled. The device's radio is turned off, e.g., because airplane mode is enabled. Returns true if the network is available, false otherwise
	1:	android.hardware.Camera.Parameters public List<Camera.Area> getFocusAreas () Gets the current focus areas. Camera driver uses the areas to decide focus. Before using this API or setFocusAreas(List), apps should call getMaxNumFocusAreas() to know the maximum number of focus areas first. If the value is 0, focus area is not supported. Each focus area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of setDisplayOrientation(int). Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of focus areas cannot be 0 or negative. The weight must range from 1 to 1000. The weight should be interpreted as a per-pixel weight - all pixels in the area have the specified weight. This means a small area with the same weight as a larger area will have less influence on the focusing than the larger area. Focus areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null focus area list means the driver is free to select focus targets as it wants. For example, the driver may use more signals to select focus areas and change them dynamically. Apps can set the focus area list to null if they want the driver to completely control focusing. Focus areas are relative to the current field of view (getZoom()). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The focus area cannot be set to be outside the current field of view, even when using zoom. Focus area only has effect if the current focus mode is FOCUS_MODE_AUTO, FOCUS_MODE_MACRO, FOCUS_MODE_CONTINUOUS_VIDEO, or FOCUS_MODE_CONTINUOUS_PICTURE. Returns a list of current focus areas
	2:	android.hardware.Camera.Parameters public List<Camera.Area> getMeteringAreas () Gets the current metering areas. Camera driver uses these areas to decide exposure. Before using this API or setMeteringAreas(List), apps should call getMaxNumMeteringAreas() to know the maximum number of metering areas first. If the value is 0, metering area is not supported. Each metering area is a rectangle with specified weight. The direction is relative to the sensor orientation, that is, what the sensor sees. The direction is not affected by the rotation or mirroring of setDisplayOrientation(int). Coordinates of the rectangle range from -1000 to 1000. (-1000, -1000) is the upper left point. (1000, 1000) is the lower right point. The width and height of metering areas cannot be 0 or negative. The weight must range from 1 to 1000, and represents a weight for every pixel in the area. This means that a large metering area with the same weight as a smaller area will have more effect in the metering result. Metering areas can partially overlap and the driver will add the weights in the overlap region. A special case of a null metering area list means the driver is free to meter as it chooses. For example, the driver may use more signals to select metering areas and change them dynamically. Apps can set the metering area list to null if they want the driver to completely control metering. Metering areas are relative to the current field of view (getZoom()). No matter what the zoom level is, (-1000,-1000) represents the top of the currently visible camera frame. The metering area cannot be set to be outside the current field of view, even when using zoom. No matter what metering areas are, the final exposure are compensated by setExposureCompensation(int). Returns a list of current metering areas
	3:	android.location.LocationManager public void addProximityAlert (double latitude, double longitude, float radius, long expiration, PendingIntent intent) Set a proximity alert for the location given by the position (latitude, longitude) and the given radius. When the device detects that it has entered or exited the area surrounding the location, the given PendingIntent will be used to create an Intent to be fired. The fired Intent will have a boolean extra added with key KEY_PROXIMITY_ENTERING. If the value is true, the device is entering the proximity region; if false, it is exiting. Due to the approximate nature of position estimation, if the device passes through the given area briefly, it is possible that no Intent will be fired. Similarly, an Intent could be fired if the device passes very close to the given area but does not actually enter it. After the number of milliseconds given by the expiration parameter, the location manager will delete this proximity alert and no longer monitor it. A value of -1 indicates that there should be no expiration time. Internally, this method uses both NETWORK_PROVIDER and GPS_PROVIDER. Before API version 17, this method could be used with ACCESS_FINE_LOCATION or ACCESS_COARSE_LOCATION. From API version 17 and onwards, this method requires ACCESS_FINE_LOCATION permission. Parameters latitude the latitude of the central point of the alert region longitude the longitude of the central point of the alert region radius the radius of the central point of the alert region, in meters expiration time for this proximity alert, in milliseconds, or -1 to indicate no expiration intent a PendingIntent that will be used to generate an Intent to fire when entry to or exit from the alert region is detected Throws SecurityException if ACCESS_FINE_LOCATION permission is not present
	4:	android.view.DragEvent public boolean getResult () Returns an indication of the result of the drag and drop operation. This method only returns valid data if the action type is ACTION_DRAG_ENDED. The return value depends on what happens after the user releases the drag shadow. If the user releases the drag shadow on a View that can accept a drop, the system sends an ACTION_DROP event to the View object's drag event listener. If the listener returns true, then getResult() will return true. If the listener returns false, then getResult() returns false. Notice that getResult() also returns false if no ACTION_DROP is sent. This happens, for example, when the user releases the drag shadow over an area outside of the application. In this case, the system sends out ACTION_DRAG_ENDED for the current operation, but never sends out ACTION_DROP. Returns true if a drag event listener returned true in response to ACTION_DROP. If the system did not send ACTION_DROP before ACTION_DRAG_ENDED, or if the listener returned false in response to ACTION_DROP, then false is returned.
	5:	android.widget.ListView public void setOverscrollFooter (Drawable footer) Sets the drawable that will be drawn below all other list content. This area can become visible when the user overscrolls the list, or when the list's content does not fully fill the container area. Parameters footer The drawable to use
	6:	android.view.inputmethod.InputMethodManager public void showSoftInputFromInputMethod (IBinder token, int flags) Show the input method's soft input area, so the user sees the input method window and can interact with it. This can only be called from the currently active input method, as validated by the given token. Parameters token Supplies the identifying token given to an input method when it was started, which allows it to perform this operation on itself. flags Provides additional operating flags. Currently may be 0 or have the SHOW_IMPLICIT or SHOW_FORCED bit set.
	7:	android.view.inputmethod.InputMethodManager public void hideSoftInputFromInputMethod (IBinder token, int flags) Close/hide the input method's soft input area, so the user no longer sees it or can interact with it. This can only be called from the currently active input method, as validated by the given token. Parameters token Supplies the identifying token given to an input method when it was started, which allows it to perform this operation on itself. flags Provides additional operating flags. Currently may be 0 or have the HIDE_IMPLICIT_ONLY, HIDE_NOT_ALWAYS bit set.
	8:	android.inputmethodservice.InputMethodService public View onCreateInputView () Create and return the view hierarchy used for the input area (such as a soft keyboard). This will be called once, when the input area is first displayed. You can return null to have no input area; the default implementation returns null. To control when the input view is displayed, implement onEvaluateInputViewShown(). To change the input view after the first one is created by this function, use setInputView(View).
	9:	android.inputmethodservice.InputMethodService public void setExtractViewShown (boolean shown) Controls the visibility of the extracted text area. This only applies when the input method is in fullscreen mode, and thus showing extracted text. When false, the extracted text will not be shown, allowing some of the application to be seen behind. This is normally set for you by onUpdateExtractingVisibility(EditorInfo). This controls the visibility of both the extracted text and candidate view; the latter since it is not useful if there is no text to see.
