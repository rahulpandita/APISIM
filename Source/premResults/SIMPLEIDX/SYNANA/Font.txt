getFont
Gets the Font used by the high level user interface for the fontSpecifier passed in
	0:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	1:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
	2:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	3:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	4:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	5:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	6:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	7:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	8:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	9:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
getDefaultFont
Gets the default font of the system
	0:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	1:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	2:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	3:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	4:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	5:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	6:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	7:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
	8:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	9:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
getFont
Obtains an object representing a font having the specified face, style, and size
	0:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	1:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	2:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	3:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	4:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	5:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	6:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	7:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
	8:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	9:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
getStyle
Gets the style of the font
	0:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	1:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	2:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	3:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	4:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	5:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	6:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
	7:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	8:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
	9:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
getSize
Gets the size of the font
	0:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	1:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	2:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	3:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	4:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	5:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	6:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
	7:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	8:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
	9:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
getFace
Gets the face of the font
	0:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	1:	android.hardware.Camera.Face public Camera.Face () Create an empty face.
	2:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	3:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	4:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	5:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	6:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	7:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	8:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
	9:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
isPlain
Returns true if the font is plain
	0:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
	1:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	2:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	3:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	4:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	5:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	6:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	7:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	8:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
	9:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
isBold
Returns true if the font is bold
	0:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
	1:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	2:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	3:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	4:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	5:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	6:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	7:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	8:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
	9:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
isItalic
Returns true if the font is italic
	0:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
	1:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	2:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	3:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	4:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	5:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	6:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	7:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	8:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
	9:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
isUnderlined
Returns true if the font is underlined
	0:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
	1:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	2:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	3:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	4:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	5:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	6:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	7:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	8:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
	9:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
getHeight
Gets the standard height of a line of text in this font
	0:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
	1:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	2:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	3:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	4:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	5:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	6:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	7:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	8:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	9:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
getBaselinePosition
Gets the distance in pixels from the top of the text to the text's baseline
	0:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
	1:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	2:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	3:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	4:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	5:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	6:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	7:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	8:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
	9:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
charWidth
Gets the advance width of the specified character in this Font
	0:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
	1:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	2:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	3:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	4:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	5:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	6:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	7:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	8:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	9:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
charsWidth
Returns the advance width of the characters in ch, starting at the specified offset and for the specified number of characters (length)
	0:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
	1:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	2:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	3:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	4:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	5:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	6:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	7:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	8:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
	9:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
stringWidth
Gets the total advance width for showing the specified String in this Font
	0:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
	1:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	2:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	3:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	4:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	5:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	6:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	7:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	8:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	9:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
substringWidth
Gets the total advance width for showing the specified substring in this Font
	0:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count) Transforms the encoding of the text, starting from the character at index start and transforming count characters. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped.
	1:	java.awt.font.NumericShaper public void shape (char[] text, int start, int count, int context) Transforms the encoding of the text, starting from the character at index start and transforming count characters, using the specified context. Parameters text the text to be shaped. start the start offset of the text. count the number of characters to be shaped. context the context to be used for shaping.
	2:	java.awt.font.NumericShaper public int getRanges () Gets the masks for all of the ranges supported by this NumericShaper, packed into an int value using the logical OR logical operation for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. Returns all ranges of this NumericShaper.
	3:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges) Gets the NumericShaper for the specified unicode ranges. The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. Returns the NumericShaper for the specified ranges.
	4:	java.awt.font.NumericShaper public static NumericShaper getShaper (int singleRange) Gets a NumericShaper for the specified unicode range. The NumericShaper supports only a single range and hence is not contextual. Parameters singleRange the specified unicode single range. Returns the NumericShaper for the specified unicode range.
	5:	java.awt.font.NumericShaper public static NumericShaper getContextualShaper (int ranges, int defaultContext) Gets the NumericShaper for the specified unicode ranges and default unicode range. The defaultContext parameter is used as the starting context (which indicates the language/script being used). The OR logical operation should be used for multiple ranges: NumericShaper.DEVANAGARI | NumericShaper.BENGALI. The NumericShaper returned by this method is contextual in that it supports multiple character ranges, depending on the context. Parameters ranges the unicode ranges. defaultContext the default, starting context. Returns the NumericShaper for the specified ranges.
	6:	java.awt.font.NumericShaper public boolean equals (Object obj) Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See Writing a correct equals method if you intend implementing your own equals method. The general contract for the equals and hashCode() methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them. Parameters obj the object to compare this instance with. Returns true if the specified object is equal to this Object; false otherwise.
	7:	java.awt.font.NumericShaper public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	8:	java.awt.font.NumericShaper public boolean isContextual () Checks if this NumericShaper is contextual (supporting multiple script ranges) or not. Returns true, if this NumericShaper is contextual, false otherwise.
	9:	java.awt.font.NumericShaper public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
