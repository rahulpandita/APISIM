Sprite
Creates a new non-animated Sprite using the provided Image
	0:	android.hardware.Camera public final void takePicture (Camera.ShutterCallback shutter, Camera.PictureCallback raw, Camera.PictureCallback postview, Camera.PictureCallback jpeg) Triggers an asynchronous image capture. The camera service will initiate a series of callbacks to the application as the image capture progresses. The shutter callback occurs after the image is captured. This can be used to trigger a sound to let the user know that image has been captured. The raw callback occurs when the raw image data is available (NOTE: the data will be null if there is no raw image callback buffer available or the raw image callback buffer is not large enough to hold the raw image). The postview callback occurs when a scaled, fully processed postview image is available (NOTE: not all hardware supports this). The jpeg callback occurs when the compressed image is available. If the application does not need a particular callback, a null can be passed instead of a callback method. This method is only valid when preview is active (after startPreview()). Preview will be stopped after the image is taken; callers must call startPreview() again if they want to re-start preview or take more pictures. This should not be called between start() and stop(). After calling this method, you must not call startPreview() or take another picture until the JPEG callback has returned. Parameters shutter the callback for image capture moment, or null raw the callback for raw (uncompressed) image data, or null postview callback with postview image data, may be null jpeg the callback for JPEG image data, or null
	1:	android.widget.ImageView public void setImageLevel (int level) Sets the image level, when it is constructed from a LevelListDrawable. Parameters level The new level for the image.
	2:	android.provider.MediaStore.Images.Media public static final String insertImage (ContentResolver cr, String imagePath, String name, String description) Insert an image and create a thumbnail for it. Parameters cr The content resolver to use imagePath The path to the image to insert name The name of the image description The description of the image Returns The URL to the newly created image Throws FileNotFoundException
	3:	android.media.ImageReader public Image acquireNextImage () Acquire the next Image from the ImageReader's queue. Returns null if no new image is available. Warning: Consider using acquireLatestImage() instead, as it will automatically release older images, and allow slower-running processing routines to catch up to the newest frame. Usage of acquireNextImage() is recommended for batch/background processing. Incorrectly using this function can cause images to appear with an ever-increasing delay, followed by a complete stall where no new images seem to appear. This operation will fail by throwing an IllegalStateException if maxImages have been acquired with acquireNextImage() or acquireLatestImage(). In particular a sequence of acquireNextImage() or acquireLatestImage() calls greater than maxImages without calling close() in-between will exhaust the underlying queue. At such a time, IllegalStateException will be thrown until more images are released with close(). Returns a new frame of image data, or null if no image data is available. Throws IllegalStateException if maxImages images are currently acquired See Also acquireLatestImage()
	4:	android.provider.MediaStore.Images.Media public static final String insertImage (ContentResolver cr, Bitmap source, String title, String description) Insert an image and create a thumbnail for it. Parameters cr The content resolver to use source The stream to use for the image title The name of the image description The description of the image Returns The URL to the newly created image, or null if the image failed to be stored for any reason.
	5:	android.media.ImageReader.OnImageAvailableListener public abstract void onImageAvailable (ImageReader reader) Callback that is called when a new image is available from ImageReader. Parameters reader the ImageReader the callback is associated with. See Also ImageReader Image
	6:	android.mtp.MtpObjectInfo public final int getImagePixHeight () Returns the height of the MTP object in pixels Will be zero for non-image objects Returns the image height
	7:	android.mtp.MtpObjectInfo public final int getImagePixWidth () Returns the width of the MTP object in pixels Will be zero for non-image objects Returns the image width
	8:	android.support.v4.print.PrintHelper public void printBitmap (String jobName, Uri imageFile) Prints an image located at the Uri. Image types supported are those of android.graphics.BitmapFactory.decodeStream(java.io.InputStream) Parameters jobName The print job name. imageFile The Uri pointing to an image to print. Throws FileNotFoundException if Uri is not pointing to a valid image.
	9:	android.graphics.BitmapRegionDecoder public static BitmapRegionDecoder newInstance (byte[] data, int offset, int length, boolean isShareable) Create a BitmapRegionDecoder from the specified byte array. Currently only the JPEG and PNG formats are supported. Parameters data byte array of compressed image data. offset offset into data for where the decoder should begin parsing. length the number of bytes, beginning at offset, to parse isShareable If this is true, then the BitmapRegionDecoder may keep a shallow reference to the input. If this is false, then the BitmapRegionDecoder will explicitly make a copy of the input data, and keep that. Even if sharing is allowed, the implementation may still decide to make a deep copy of the input data. If an image is progressively encoded, allowing sharing may degrade the decoding speed. Returns BitmapRegionDecoder, or null if the image data could not be decoded. Throws IOException if the image format is not supported or can not be decoded.
Sprite
Creates a new animated Sprite using frames contained in the provided Image
	0:	android.hardware.Camera public final void takePicture (Camera.ShutterCallback shutter, Camera.PictureCallback raw, Camera.PictureCallback postview, Camera.PictureCallback jpeg) Triggers an asynchronous image capture. The camera service will initiate a series of callbacks to the application as the image capture progresses. The shutter callback occurs after the image is captured. This can be used to trigger a sound to let the user know that image has been captured. The raw callback occurs when the raw image data is available (NOTE: the data will be null if there is no raw image callback buffer available or the raw image callback buffer is not large enough to hold the raw image). The postview callback occurs when a scaled, fully processed postview image is available (NOTE: not all hardware supports this). The jpeg callback occurs when the compressed image is available. If the application does not need a particular callback, a null can be passed instead of a callback method. This method is only valid when preview is active (after startPreview()). Preview will be stopped after the image is taken; callers must call startPreview() again if they want to re-start preview or take more pictures. This should not be called between start() and stop(). After calling this method, you must not call startPreview() or take another picture until the JPEG callback has returned. Parameters shutter the callback for image capture moment, or null raw the callback for raw (uncompressed) image data, or null postview callback with postview image data, may be null jpeg the callback for JPEG image data, or null
	1:	android.provider.MediaStore.Images.Media public static final String insertImage (ContentResolver cr, String imagePath, String name, String description) Insert an image and create a thumbnail for it. Parameters cr The content resolver to use imagePath The path to the image to insert name The name of the image description The description of the image Returns The URL to the newly created image Throws FileNotFoundException
	2:	android.media.ImageReader public Image acquireNextImage () Acquire the next Image from the ImageReader's queue. Returns null if no new image is available. Warning: Consider using acquireLatestImage() instead, as it will automatically release older images, and allow slower-running processing routines to catch up to the newest frame. Usage of acquireNextImage() is recommended for batch/background processing. Incorrectly using this function can cause images to appear with an ever-increasing delay, followed by a complete stall where no new images seem to appear. This operation will fail by throwing an IllegalStateException if maxImages have been acquired with acquireNextImage() or acquireLatestImage(). In particular a sequence of acquireNextImage() or acquireLatestImage() calls greater than maxImages without calling close() in-between will exhaust the underlying queue. At such a time, IllegalStateException will be thrown until more images are released with close(). Returns a new frame of image data, or null if no image data is available. Throws IllegalStateException if maxImages images are currently acquired See Also acquireLatestImage()
	3:	android.provider.MediaStore.Images.Media public static final String insertImage (ContentResolver cr, Bitmap source, String title, String description) Insert an image and create a thumbnail for it. Parameters cr The content resolver to use source The stream to use for the image title The name of the image description The description of the image Returns The URL to the newly created image, or null if the image failed to be stored for any reason.
	4:	android.media.ImageReader.OnImageAvailableListener public abstract void onImageAvailable (ImageReader reader) Callback that is called when a new image is available from ImageReader. Parameters reader the ImageReader the callback is associated with. See Also ImageReader Image
	5:	android.widget.ImageView public void setImageLevel (int level) Sets the image level, when it is constructed from a LevelListDrawable. Parameters level The new level for the image.
	6:	android.opengl.ETC1Util public static ETC1Util.ETC1Texture compressTexture (Buffer input, int width, int height, int pixelSize, int stride) Helper function that compresses an image into an ETC1Texture. Parameters input a native order direct buffer containing the image data width the width of the image in pixels height the height of the image in pixels pixelSize the size of a pixel in bytes (2 or 3) stride the width of a line of the image in bytes Returns the ETC1 texture.
	7:	android.mtp.MtpObjectInfo public final int getImagePixHeight () Returns the height of the MTP object in pixels Will be zero for non-image objects Returns the image height
	8:	android.mtp.MtpObjectInfo public final int getImagePixWidth () Returns the width of the MTP object in pixels Will be zero for non-image objects Returns the image width
	9:	java.lang.ClassLoader protected final Class<?> defineClass (String className, byte[] classRep, int offset, int length, ProtectionDomain protectionDomain) Constructs a new class from an array of bytes containing a class definition in class file format and assigns the specified protection domain to the new class. If the provided protection domain is null then a default protection domain is assigned to the class. Parameters className the expected name of the new class, may be null if not known. classRep the memory image of a class file. offset the offset into classRep. length the length of the class file. protectionDomain the protection domain to assign to the loaded class, may be null. Returns the Class object created from the specified subset of data in classRep. Throws ClassFormatError if classRep does not contain a valid class. IndexOutOfBoundsException if offset < 0, length < 0 or if offset + length is greater than the length of classRep. NoClassDefFoundError if className is not equal to the name of the class contained in classRep.
Sprite
Creates a new Sprite from another Sprite
	0:	android.support.v4.view.AccessibilityDelegateCompat public AccessibilityDelegateCompat () Creates a new instance.
	1:	android.support.v4.view.accessibility.AccessibilityNodeProviderCompat public AccessibilityNodeProviderCompat () Creates a new instance.
	2:	android.accessibilityservice.AccessibilityServiceInfo public AccessibilityServiceInfo () Creates a new instance.
	3:	java.security.acl.AclNotFoundException public AclNotFoundException () Creates a new AclNotFoundException.
	4:	javax.security.cert.Certificate public Certificate () Creates a new Certificate.
	5:	java.security.cert.CertificateEncodingException public CertificateEncodingException () Creates a new CertificateEncodingException.
	6:	javax.security.cert.CertificateEncodingException public CertificateEncodingException () Creates a new CertificateEncodingException.
	7:	java.security.cert.CertificateException public CertificateException () Creates a new CertificateException.
	8:	javax.security.cert.CertificateException public CertificateException () Creates a new CertificateException.
	9:	java.security.cert.CertificateExpiredException public CertificateExpiredException () Creates a new CertificateExpiredException.
defineReferencePixel
Defines the reference pixel for this Sprite
	0:	org.w3c.dom.ls.LSOutput public abstract String getSystemId () The system identifier, a URI reference [IETF RFC 2396], for this output destination. If the system ID is a relative URI reference (see section 5 in [IETF RFC 2396]), the behavior is implementation dependent.
	1:	android.os.PowerManager.WakeLock public void setReferenceCounted (boolean value) Sets whether this WakeLock is reference counted. Wake locks are reference counted by default. If a wake lock is reference counted, then each call to acquire() must be balanced by an equal number of calls to release(). If a wake lock is not reference counted, then one call to release() is sufficient to undo the effect of all previous calls to acquire(). Parameters value True to make the wake lock reference counted, false to make the wake lock non-reference counted.
	2:	org.w3c.dom.ls.LSOutput public abstract void setSystemId (String systemId) The system identifier, a URI reference [IETF RFC 2396], for this output destination. If the system ID is a relative URI reference (see section 5 in [IETF RFC 2396]), the behavior is implementation dependent.
	3:	org.w3c.dom.ls.LSInput public abstract String getSystemId () The system identifier, a URI reference [IETF RFC 2396], for this input source. The system identifier is optional if there is a byte stream, a character stream, or string data. It is still useful to provide one, since the application will use it to resolve any relative URIs and can include it in error messages and warnings. (The LSParser will only attempt to fetch the resource identified by the URI reference if there is no other input available in the input source.) If the application knows the character encoding of the object pointed to by the system identifier, it can set the encoding using the encoding attribute. If the specified system ID is a relative URI reference (see section 5 in [IETF RFC 2396]), the DOM implementation will attempt to resolve the relative URI with the baseURI as the base, if that fails, the behavior is implementation dependent.
	4:	org.w3c.dom.ls.LSInput public abstract void setSystemId (String systemId) The system identifier, a URI reference [IETF RFC 2396], for this input source. The system identifier is optional if there is a byte stream, a character stream, or string data. It is still useful to provide one, since the application will use it to resolve any relative URIs and can include it in error messages and warnings. (The LSParser will only attempt to fetch the resource identified by the URI reference if there is no other input available in the input source.) If the application knows the character encoding of the object pointed to by the system identifier, it can set the encoding using the encoding attribute. If the specified system ID is a relative URI reference (see section 5 in [IETF RFC 2396]), the DOM implementation will attempt to resolve the relative URI with the baseURI as the base, if that fails, the behavior is implementation dependent.
	5:	android.app.FragmentManager public abstract Fragment getFragment (Bundle bundle, String key) Retrieve the current Fragment instance for a reference previously placed with putFragment(Bundle, String, Fragment). Parameters bundle The bundle from which to retrieve the fragment reference. key The name of the entry in the bundle. Returns Returns the current Fragment instance that is associated with the given reference.
	6:	android.support.v4.app.FragmentManager public abstract Fragment getFragment (Bundle bundle, String key) Retrieve the current Fragment instance for a reference previously placed with putFragment(Bundle, String, Fragment). Parameters bundle The bundle from which to retrieve the fragment reference. key The name of the entry in the bundle. Returns Returns the current Fragment instance that is associated with the given reference.
	7:	org.apache.http.impl.conn.tsccm.RefQueueHandler public abstract void handleReference (Reference<?> ref) Invoked when a reference is found on the queue. Parameters ref the reference to handle
	8:	android.app.Notification.Builder public Notification.Builder setExtras (Bundle extras) Set metadata for this notification. A reference to the Bundle is held for the lifetime of this Builder, and the Bundle's current contents are copied into the Notification each time build() is called. Replaces any existing extras values with those from the provided Bundle. Use addExtras(Bundle) to merge in metadata instead. See Also extras
	9:	android.support.v4.app.NotificationCompat.Builder public NotificationCompat.Builder setExtras (Bundle extras) Set metadata for this notification. A reference to the Bundle is held for the lifetime of this Builder, and the Bundle's current contents are copied into the Notification each time build() is called. Replaces any existing extras values with those from the provided Bundle. Use addExtras(Bundle) to merge in metadata instead. See Also extras
setRefPixelPosition
Sets this Sprite's position such that its reference pixel is located at (x,y) in the painter's coordinate system
	0:	android.widget.AbsListView public int pointToPosition (int x, int y) Maps a point to a position in the list. Parameters x X in local coordinate y Y in local coordinate Returns The position of the item which contains the specified point, or INVALID_POSITION if the point does not intersect an item.
	1:	android.widget.AbsSpinner public int pointToPosition (int x, int y) Maps a point to a position in the list. Parameters x X in local coordinate y Y in local coordinate Returns The position of the item which contains the specified point, or INVALID_POSITION if the point does not intersect an item.
	2:	android.graphics.Path public void lineTo (float x, float y) Add a line from the last point to the specified point (x,y). If no moveTo() call has been made for this contour, the first point is automatically set to (0,0). Parameters x The x-coordinate of the end of a line y The y-coordinate of the end of a line
	3:	org.w3c.dom.Node public abstract short compareDocumentPosition (Node other) Compares the reference node, i.e. the node on which this method is being called, with a node, i.e. the one passed as a parameter, with regard to their position in the document and according to the document order. Parameters other The node to compare against the reference node. Returns Returns how the node is positioned relatively to the reference node. Throws DOMException NOT_SUPPORTED_ERR: when the compared nodes are from different DOM implementations that do not coordinate to return consistent implementation-specific results.
	4:	android.graphics.Rect public void union (int x, int y) Update this Rect to enclose itself and the [x,y] coordinate. There is no check to see that this rectangle is non-empty. Parameters x The x coordinate of the point to add to the rectangle y The y coordinate of the point to add to the rectangle
	5:	android.graphics.RectF public void union (float x, float y) Update this Rect to enclose itself and the [x,y] coordinate. There is no check to see that this rectangle is non-empty. Parameters x The x coordinate of the point to add to the rectangle y The y coordinate of the point to add to the rectangle
	6:	org.w3c.dom.ls.LSOutput public abstract String getSystemId () The system identifier, a URI reference [IETF RFC 2396], for this output destination. If the system ID is a relative URI reference (see section 5 in [IETF RFC 2396]), the behavior is implementation dependent.
	7:	android.graphics.drawable.GradientDrawable public void setGradientCenter (float x, float y) Sets the center location of the gradient. The radius is honored only when the gradient type is set to RADIAL_GRADIENT or SWEEP_GRADIENT. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters x The x coordinate of the gradient's center y The y coordinate of the gradient's center See Also mutate() setGradientType(int)
	8:	android.graphics.Bitmap public int getPixel (int x, int y) Returns the Color at the specified location. Throws an exception if x or y are out of bounds (negative or >= to the width or height respectively). The returned color is a non-premultiplied ARGB value. Parameters x The x coordinate (0...width-1) of the pixel to return y The y coordinate (0...height-1) of the pixel to return Returns The argb Color at the specified coordinate Throws IllegalArgumentException if x, y exceed the bitmap's bounds
	9:	android.widget.HorizontalScrollView public void scrollTo (int x, int y) Set the scrolled position of your view. This will cause a call to onScrollChanged(int, int, int, int) and the view will be invalidated. This version also clamps the scrolling to the bounds of our child. Parameters x the x position to scroll to y the y position to scroll to
getRefPixelX
Gets the horizontal position of this Sprite's reference pixel in the painter's coordinate system
	0:	org.w3c.dom.ls.LSOutput public abstract String getSystemId () The system identifier, a URI reference [IETF RFC 2396], for this output destination. If the system ID is a relative URI reference (see section 5 in [IETF RFC 2396]), the behavior is implementation dependent.
	1:	org.w3c.dom.Node public abstract short compareDocumentPosition (Node other) Compares the reference node, i.e. the node on which this method is being called, with a node, i.e. the one passed as a parameter, with regard to their position in the document and according to the document order. Parameters other The node to compare against the reference node. Returns Returns how the node is positioned relatively to the reference node. Throws DOMException NOT_SUPPORTED_ERR: when the compared nodes are from different DOM implementations that do not coordinate to return consistent implementation-specific results.
	2:	org.w3c.dom.ls.LSOutput public abstract void setSystemId (String systemId) The system identifier, a URI reference [IETF RFC 2396], for this output destination. If the system ID is a relative URI reference (see section 5 in [IETF RFC 2396]), the behavior is implementation dependent.
	3:	android.widget.ExpandableListView public static int getPackedPositionGroup (long packedPosition) Gets the group position from a packed position. See getPackedPositionForChild(int, int). Parameters packedPosition The packed position from which the group position will be returned. Returns The group position portion of the packed position. If this does not contain a group, returns -1.
	4:	android.widget.ExpandableListView public static int getPackedPositionType (long packedPosition) Gets the type of a packed position. See getPackedPositionForChild(int, int). Parameters packedPosition The packed position for which to return the type. Returns The type of the position contained within the packed position, either PACKED_POSITION_TYPE_CHILD, PACKED_POSITION_TYPE_GROUP, or PACKED_POSITION_TYPE_NULL.
	5:	android.widget.ExpandableListView public static int getPackedPositionChild (long packedPosition) Gets the child position from a packed position that is of PACKED_POSITION_TYPE_CHILD type (use getPackedPositionType(long)). To get the group that this child belongs to, use getPackedPositionGroup(long). See getPackedPositionForChild(int, int). Parameters packedPosition The packed position from which the child position will be returned. Returns The child position portion of the packed position. If this does not contain a child, returns -1.
	6:	org.apache.http.impl.conn.tsccm.RefQueueHandler public abstract void handleReference (Reference<?> ref) Invoked when a reference is found on the queue. Parameters ref the reference to handle
	7:	java.text.BreakIterator public abstract int next () Sets this iterator's current position to the next boundary after the current position, and returns this position. Returns DONE if no boundary was found after the current position. Returns the position of last boundary.
	8:	org.w3c.dom.ls.LSInput public abstract String getSystemId () The system identifier, a URI reference [IETF RFC 2396], for this input source. The system identifier is optional if there is a byte stream, a character stream, or string data. It is still useful to provide one, since the application will use it to resolve any relative URIs and can include it in error messages and warnings. (The LSParser will only attempt to fetch the resource identified by the URI reference if there is no other input available in the input source.) If the application knows the character encoding of the object pointed to by the system identifier, it can set the encoding using the encoding attribute. If the specified system ID is a relative URI reference (see section 5 in [IETF RFC 2396]), the DOM implementation will attempt to resolve the relative URI with the baseURI as the base, if that fails, the behavior is implementation dependent.
	9:	org.w3c.dom.ls.LSInput public abstract void setSystemId (String systemId) The system identifier, a URI reference [IETF RFC 2396], for this input source. The system identifier is optional if there is a byte stream, a character stream, or string data. It is still useful to provide one, since the application will use it to resolve any relative URIs and can include it in error messages and warnings. (The LSParser will only attempt to fetch the resource identified by the URI reference if there is no other input available in the input source.) If the application knows the character encoding of the object pointed to by the system identifier, it can set the encoding using the encoding attribute. If the specified system ID is a relative URI reference (see section 5 in [IETF RFC 2396]), the DOM implementation will attempt to resolve the relative URI with the baseURI as the base, if that fails, the behavior is implementation dependent.
getRefPixelY
Gets the vertical position of this Sprite's reference pixel in the painter's coordinate system
	0:	org.w3c.dom.ls.LSOutput public abstract String getSystemId () The system identifier, a URI reference [IETF RFC 2396], for this output destination. If the system ID is a relative URI reference (see section 5 in [IETF RFC 2396]), the behavior is implementation dependent.
	1:	android.widget.AbsListView public void setVerticalScrollbarPosition (int position) Set the position of the vertical scroll bar. Should be one of SCROLLBAR_POSITION_DEFAULT, SCROLLBAR_POSITION_LEFT or SCROLLBAR_POSITION_RIGHT. Parameters position Where the vertical scroll bar should be positioned.
	2:	org.w3c.dom.Node public abstract short compareDocumentPosition (Node other) Compares the reference node, i.e. the node on which this method is being called, with a node, i.e. the one passed as a parameter, with regard to their position in the document and according to the document order. Parameters other The node to compare against the reference node. Returns Returns how the node is positioned relatively to the reference node. Throws DOMException NOT_SUPPORTED_ERR: when the compared nodes are from different DOM implementations that do not coordinate to return consistent implementation-specific results.
	3:	org.w3c.dom.ls.LSOutput public abstract void setSystemId (String systemId) The system identifier, a URI reference [IETF RFC 2396], for this output destination. If the system ID is a relative URI reference (see section 5 in [IETF RFC 2396]), the behavior is implementation dependent.
	4:	android.widget.ExpandableListView public static int getPackedPositionGroup (long packedPosition) Gets the group position from a packed position. See getPackedPositionForChild(int, int). Parameters packedPosition The packed position from which the group position will be returned. Returns The group position portion of the packed position. If this does not contain a group, returns -1.
	5:	android.widget.ExpandableListView public static int getPackedPositionType (long packedPosition) Gets the type of a packed position. See getPackedPositionForChild(int, int). Parameters packedPosition The packed position for which to return the type. Returns The type of the position contained within the packed position, either PACKED_POSITION_TYPE_CHILD, PACKED_POSITION_TYPE_GROUP, or PACKED_POSITION_TYPE_NULL.
	6:	android.widget.ExpandableListView public static int getPackedPositionChild (long packedPosition) Gets the child position from a packed position that is of PACKED_POSITION_TYPE_CHILD type (use getPackedPositionType(long)). To get the group that this child belongs to, use getPackedPositionGroup(long). See getPackedPositionForChild(int, int). Parameters packedPosition The packed position from which the child position will be returned. Returns The child position portion of the packed position. If this does not contain a child, returns -1.
	7:	org.apache.http.impl.conn.tsccm.RefQueueHandler public abstract void handleReference (Reference<?> ref) Invoked when a reference is found on the queue. Parameters ref the reference to handle
	8:	java.text.BreakIterator public abstract int next () Sets this iterator's current position to the next boundary after the current position, and returns this position. Returns DONE if no boundary was found after the current position. Returns the position of last boundary.
	9:	org.w3c.dom.ls.LSInput public abstract String getSystemId () The system identifier, a URI reference [IETF RFC 2396], for this input source. The system identifier is optional if there is a byte stream, a character stream, or string data. It is still useful to provide one, since the application will use it to resolve any relative URIs and can include it in error messages and warnings. (The LSParser will only attempt to fetch the resource identified by the URI reference if there is no other input available in the input source.) If the application knows the character encoding of the object pointed to by the system identifier, it can set the encoding using the encoding attribute. If the specified system ID is a relative URI reference (see section 5 in [IETF RFC 2396]), the DOM implementation will attempt to resolve the relative URI with the baseURI as the base, if that fails, the behavior is implementation dependent.
setFrame
Selects the current frame in the frame sequence
	0:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	1:	android.view.Choreographer public void postFrameCallbackDelayed (Choreographer.FrameCallback callback, long delayMillis) Posts a frame callback to run on the next frame after the specified delay. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. delayMillis The delay time in milliseconds. See Also postFrameCallback(Choreographer.FrameCallback) removeFrameCallback(Choreographer.FrameCallback)
	2:	android.view.Choreographer public void postFrameCallback (Choreographer.FrameCallback callback) Posts a frame callback to run on the next frame. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. See Also postFrameCallbackDelayed(Choreographer.FrameCallback, long) removeFrameCallback(Choreographer.FrameCallback)
	3:	android.view.Choreographer.FrameCallback public abstract void doFrame (long frameTimeNanos) Called when a new display frame is being rendered. This method provides the time in nanoseconds when the frame started being rendered. The frame time provides a stable time base for synchronizing animations and drawing. It should be used instead of uptimeMillis() or nanoTime() for animations and drawing in the UI. Using the frame time helps to reduce inter-frame jitter because the frame time is fixed at the time the frame was scheduled to start, regardless of when the animations or drawing callback actually runs. All callbacks that run as part of rendering a frame will observe the same frame time so using the frame time also helps to synchronize effects that are performed by different callbacks. Please note that the framework already takes care to process animations and drawing using the frame time as a stable time base. Most applications should not need to use the frame time information directly. Parameters frameTimeNanos The time in nanoseconds when the frame started being rendered, in the nanoTime() timebase. Divide this value by 1000000 to convert it to the uptimeMillis() time base.
	4:	android.hardware.Camera.Parameters public List<Integer> getSupportedPreviewFrameRates () This method was deprecated in API level 9. replaced by getSupportedPreviewFpsRange() Gets the supported preview frame rates. Returns a list of supported preview frame rates. null if preview frame rate setting is not supported.
	5:	android.view.Choreographer public void removeFrameCallback (Choreographer.FrameCallback callback) Removes a previously posted frame callback. Parameters callback The frame callback to remove. See Also postFrameCallback(Choreographer.FrameCallback) postFrameCallbackDelayed(Choreographer.FrameCallback, long)
	6:	android.graphics.drawable.AnimationDrawable public Drawable getFrame (int index) Returns The Drawable at the specified frame index
	7:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	8:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs) Call this method after setDataSource(). This method finds a representative frame close to the given time position if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source. Call this method if one does not care how the frame is found as long as it is close to the given time; otherwise, please call getFrameAtTime(long, int). Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarentee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved. See Also getFrameAtTime(long, int)
	9:	android.media.AudioTrack protected int getNativeFrameCount () This method was deprecated in API level 19. Only accessible by subclasses, which are not recommended for AudioTrack. See getProperty(String) for key PROPERTY_OUTPUT_FRAMES_PER_BUFFER. Returns the "native frame count", derived from the bufferSizeInBytes specified at creation time and converted to frame units. If track's creation mode is MODE_STATIC, it is equal to the specified bufferSizeInBytes converted to frame units. If track's creation mode is MODE_STREAM, it is typically greater than or equal to the specified bufferSizeInBytes converted to frame units; it may be rounded up to a larger value if needed by the target device implementation.
getFrame
Gets the current index in the frame sequence
	0:	android.graphics.drawable.AnimationDrawable public Drawable getFrame (int index) Returns The Drawable at the specified frame index
	1:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	2:	android.hardware.Camera.Parameters public List<Integer> getSupportedPreviewFrameRates () This method was deprecated in API level 9. replaced by getSupportedPreviewFpsRange() Gets the supported preview frame rates. Returns a list of supported preview frame rates. null if preview frame rate setting is not supported.
	3:	android.view.Choreographer public void postFrameCallbackDelayed (Choreographer.FrameCallback callback, long delayMillis) Posts a frame callback to run on the next frame after the specified delay. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. delayMillis The delay time in milliseconds. See Also postFrameCallback(Choreographer.FrameCallback) removeFrameCallback(Choreographer.FrameCallback)
	4:	android.view.Choreographer.FrameCallback public abstract void doFrame (long frameTimeNanos) Called when a new display frame is being rendered. This method provides the time in nanoseconds when the frame started being rendered. The frame time provides a stable time base for synchronizing animations and drawing. It should be used instead of uptimeMillis() or nanoTime() for animations and drawing in the UI. Using the frame time helps to reduce inter-frame jitter because the frame time is fixed at the time the frame was scheduled to start, regardless of when the animations or drawing callback actually runs. All callbacks that run as part of rendering a frame will observe the same frame time so using the frame time also helps to synchronize effects that are performed by different callbacks. Please note that the framework already takes care to process animations and drawing using the frame time as a stable time base. Most applications should not need to use the frame time information directly. Parameters frameTimeNanos The time in nanoseconds when the frame started being rendered, in the nanoTime() timebase. Divide this value by 1000000 to convert it to the uptimeMillis() time base.
	5:	android.graphics.drawable.AnimationDrawable public int getDuration (int i) Returns The duration in milliseconds of the frame at the specified index
	6:	android.view.Choreographer public void postFrameCallback (Choreographer.FrameCallback callback) Posts a frame callback to run on the next frame. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. See Also postFrameCallbackDelayed(Choreographer.FrameCallback, long) removeFrameCallback(Choreographer.FrameCallback)
	7:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	8:	android.hardware.Camera.Parameters public List<int[]> getSupportedPreviewFpsRange () Gets the supported preview fps (frame-per-second) ranges. Each range contains a minimum fps and maximum fps. If minimum fps equals to maximum fps, the camera outputs frames in fixed frame rate. If not, the camera outputs frames in auto frame rate. The actual frame rate fluctuates between the minimum and the maximum. The values are multiplied by 1000 and represented in integers. For example, if frame rate is 26.623 frames per second, the value is 26623. Returns a list of supported preview fps ranges. This method returns a list with at least one element. Every element is an int array of two values - minimum fps and maximum fps. The list is sorted from small to large (first by maximum fps and then minimum fps). See Also PREVIEW_FPS_MIN_INDEX PREVIEW_FPS_MAX_INDEX
	9:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs) Call this method after setDataSource(). This method finds a representative frame close to the given time position if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source. Call this method if one does not care how the frame is found as long as it is close to the given time; otherwise, please call getFrameAtTime(long, int). Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarentee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved. See Also getFrameAtTime(long, int)
getRawFrameCount
Gets the number of raw frames for this Sprite
	0:	java.util.logging.LogRecord public String getMessage () Gets the raw message. Returns the raw message, may be null.
	1:	java.util.logging.LogRecord public void setMessage (String message) Sets the raw message. When this record is formatted by a logger that has a localization resource bundle that contains an entry for message, then the raw message is replaced with its localized version. Parameters message the raw message to set, may be null.
	2:	android.hardware.Camera public final void takePicture (Camera.ShutterCallback shutter, Camera.PictureCallback raw, Camera.PictureCallback postview, Camera.PictureCallback jpeg) Triggers an asynchronous image capture. The camera service will initiate a series of callbacks to the application as the image capture progresses. The shutter callback occurs after the image is captured. This can be used to trigger a sound to let the user know that image has been captured. The raw callback occurs when the raw image data is available (NOTE: the data will be null if there is no raw image callback buffer available or the raw image callback buffer is not large enough to hold the raw image). The postview callback occurs when a scaled, fully processed postview image is available (NOTE: not all hardware supports this). The jpeg callback occurs when the compressed image is available. If the application does not need a particular callback, a null can be passed instead of a callback method. This method is only valid when preview is active (after startPreview()). Preview will be stopped after the image is taken; callers must call startPreview() again if they want to re-start preview or take more pictures. This should not be called between start() and stop(). After calling this method, you must not call startPreview() or take another picture until the JPEG callback has returned. Parameters shutter the callback for image capture moment, or null raw the callback for raw (uncompressed) image data, or null postview callback with postview image data, may be null jpeg the callback for JPEG image data, or null
	3:	java.lang.reflect.ParameterizedType public abstract Type getRawType () Returns the declaring type of this parameterized type. The raw type of Set field; is Set. Returns the raw type of this parameterized type
	4:	android.content.ClipData.Item public String getHtmlText () Retrieve the raw HTML text contained in this Item.
	5:	android.content.ClipData.Item public Intent getIntent () Retrieve the raw Intent contained in this Item.
	6:	android.content.ClipData.Item public CharSequence getText () Retrieve the raw text contained in this Item.
	7:	android.content.ClipData.Item public Uri getUri () Retrieve the raw URI contained in this Item.
	8:	android.content.res.Resources public InputStream openRawResource (int id) Open a data stream for reading a raw resource. This can only be used with resources whose value is the name of an asset files -- that is, it can be used to open drawable, sound, and raw resources; it will fail on string and color resources. Parameters id The resource identifier to open, as generated by the appt tool. Returns InputStream Access to the resource data. Throws Resources.NotFoundException Throws NotFoundException if the given ID does not exist.
	9:	android.test.mock.MockResources public InputStream openRawResource (int id) Open a data stream for reading a raw resource. This can only be used with resources whose value is the name of an asset files -- that is, it can be used to open drawable, sound, and raw resources; it will fail on string and color resources. Parameters id The resource identifier to open, as generated by the appt tool. Returns InputStream Access to the resource data. Throws Resources.NotFoundException
getFrameSequenceLength
Gets the number of elements in the frame sequence
	0:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	1:	android.hardware.Camera.Parameters public List<Integer> getSupportedPreviewFrameRates () This method was deprecated in API level 9. replaced by getSupportedPreviewFpsRange() Gets the supported preview frame rates. Returns a list of supported preview frame rates. null if preview frame rate setting is not supported.
	2:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	3:	android.view.Choreographer public void removeFrameCallback (Choreographer.FrameCallback callback) Removes a previously posted frame callback. Parameters callback The frame callback to remove. See Also postFrameCallback(Choreographer.FrameCallback) postFrameCallbackDelayed(Choreographer.FrameCallback, long)
	4:	android.view.Choreographer public void postFrameCallbackDelayed (Choreographer.FrameCallback callback, long delayMillis) Posts a frame callback to run on the next frame after the specified delay. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. delayMillis The delay time in milliseconds. See Also postFrameCallback(Choreographer.FrameCallback) removeFrameCallback(Choreographer.FrameCallback)
	5:	android.graphics.drawable.AnimationDrawable public Drawable getFrame (int index) Returns The Drawable at the specified frame index
	6:	android.view.Choreographer public void postFrameCallback (Choreographer.FrameCallback callback) Posts a frame callback to run on the next frame. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. See Also postFrameCallbackDelayed(Choreographer.FrameCallback, long) removeFrameCallback(Choreographer.FrameCallback)
	7:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs) Call this method after setDataSource(). This method finds a representative frame close to the given time position if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source. Call this method if one does not care how the frame is found as long as it is close to the given time; otherwise, please call getFrameAtTime(long, int). Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarentee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved. See Also getFrameAtTime(long, int)
	8:	android.view.Choreographer.FrameCallback public abstract void doFrame (long frameTimeNanos) Called when a new display frame is being rendered. This method provides the time in nanoseconds when the frame started being rendered. The frame time provides a stable time base for synchronizing animations and drawing. It should be used instead of uptimeMillis() or nanoTime() for animations and drawing in the UI. Using the frame time helps to reduce inter-frame jitter because the frame time is fixed at the time the frame was scheduled to start, regardless of when the animations or drawing callback actually runs. All callbacks that run as part of rendering a frame will observe the same frame time so using the frame time also helps to synchronize effects that are performed by different callbacks. Please note that the framework already takes care to process animations and drawing using the frame time as a stable time base. Most applications should not need to use the frame time information directly. Parameters frameTimeNanos The time in nanoseconds when the frame started being rendered, in the nanoTime() timebase. Divide this value by 1000000 to convert it to the uptimeMillis() time base.
	9:	android.graphics.drawable.AnimationDrawable public int getDuration (int i) Returns The duration in milliseconds of the frame at the specified index
nextFrame
Selects the next frame in the frame sequence
	0:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	1:	android.hardware.Camera.Parameters public List<Integer> getSupportedPreviewFrameRates () This method was deprecated in API level 9. replaced by getSupportedPreviewFpsRange() Gets the supported preview frame rates. Returns a list of supported preview frame rates. null if preview frame rate setting is not supported.
	2:	android.view.Choreographer public void postFrameCallbackDelayed (Choreographer.FrameCallback callback, long delayMillis) Posts a frame callback to run on the next frame after the specified delay. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. delayMillis The delay time in milliseconds. See Also postFrameCallback(Choreographer.FrameCallback) removeFrameCallback(Choreographer.FrameCallback)
	3:	android.view.Choreographer public void postFrameCallback (Choreographer.FrameCallback callback) Posts a frame callback to run on the next frame. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. See Also postFrameCallbackDelayed(Choreographer.FrameCallback, long) removeFrameCallback(Choreographer.FrameCallback)
	4:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs) Call this method after setDataSource(). This method finds a representative frame close to the given time position if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source. Call this method if one does not care how the frame is found as long as it is close to the given time; otherwise, please call getFrameAtTime(long, int). Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarentee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved. See Also getFrameAtTime(long, int)
	5:	android.view.Choreographer.FrameCallback public abstract void doFrame (long frameTimeNanos) Called when a new display frame is being rendered. This method provides the time in nanoseconds when the frame started being rendered. The frame time provides a stable time base for synchronizing animations and drawing. It should be used instead of uptimeMillis() or nanoTime() for animations and drawing in the UI. Using the frame time helps to reduce inter-frame jitter because the frame time is fixed at the time the frame was scheduled to start, regardless of when the animations or drawing callback actually runs. All callbacks that run as part of rendering a frame will observe the same frame time so using the frame time also helps to synchronize effects that are performed by different callbacks. Please note that the framework already takes care to process animations and drawing using the frame time as a stable time base. Most applications should not need to use the frame time information directly. Parameters frameTimeNanos The time in nanoseconds when the frame started being rendered, in the nanoTime() timebase. Divide this value by 1000000 to convert it to the uptimeMillis() time base.
	6:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs, int option) Call this method after setDataSource(). This method finds a representative frame close to the given time position by considering the given option if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source or just obtain and display a frame at the given time position. Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarantee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. option a hint on how the frame is found. Use OPTION_PREVIOUS_SYNC if one wants to retrieve a sync frame that has a timestamp earlier than or the same as timeUs. Use OPTION_NEXT_SYNC if one wants to retrieve a sync frame that has a timestamp later than or the same as timeUs. Use OPTION_CLOSEST_SYNC if one wants to retrieve a sync frame that has a timestamp closest to or the same as timeUs. Use OPTION_CLOSEST if one wants to retrieve a frame that may or may not be a sync frame but is closest to or the same as timeUs. OPTION_CLOSEST often has larger performance overhead compared to the other options if there is no sync frame located at timeUs. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved.
	7:	android.view.Choreographer public void removeFrameCallback (Choreographer.FrameCallback callback) Removes a previously posted frame callback. Parameters callback The frame callback to remove. See Also postFrameCallback(Choreographer.FrameCallback) postFrameCallbackDelayed(Choreographer.FrameCallback, long)
	8:	android.hardware.Camera.Parameters public int getPreviewFrameRate () This method was deprecated in API level 9. replaced by getPreviewFpsRange(int[]) Returns the setting for the rate at which preview frames are received. This is the target frame rate. The actual frame rate depends on the driver. Returns the frame rate setting (frames per second)
	9:	android.hardware.Camera.Parameters public void setPreviewFrameRate (int fps) This method was deprecated in API level 9. replaced by setPreviewFpsRange(int, int) Sets the rate at which preview frames are received. This is the target frame rate. The actual frame rate depends on the driver. Parameters fps the frame rate (frames per second)
prevFrame
Selects the previous frame in the frame sequence
	0:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	1:	android.hardware.Camera.Parameters public List<Integer> getSupportedPreviewFrameRates () This method was deprecated in API level 9. replaced by getSupportedPreviewFpsRange() Gets the supported preview frame rates. Returns a list of supported preview frame rates. null if preview frame rate setting is not supported.
	2:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs, int option) Call this method after setDataSource(). This method finds a representative frame close to the given time position by considering the given option if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source or just obtain and display a frame at the given time position. Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarantee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. option a hint on how the frame is found. Use OPTION_PREVIOUS_SYNC if one wants to retrieve a sync frame that has a timestamp earlier than or the same as timeUs. Use OPTION_NEXT_SYNC if one wants to retrieve a sync frame that has a timestamp later than or the same as timeUs. Use OPTION_CLOSEST_SYNC if one wants to retrieve a sync frame that has a timestamp closest to or the same as timeUs. Use OPTION_CLOSEST if one wants to retrieve a frame that may or may not be a sync frame but is closest to or the same as timeUs. OPTION_CLOSEST often has larger performance overhead compared to the other options if there is no sync frame located at timeUs. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved.
	3:	android.view.Choreographer public void removeFrameCallback (Choreographer.FrameCallback callback) Removes a previously posted frame callback. Parameters callback The frame callback to remove. See Also postFrameCallback(Choreographer.FrameCallback) postFrameCallbackDelayed(Choreographer.FrameCallback, long)
	4:	android.view.Choreographer public void postFrameCallbackDelayed (Choreographer.FrameCallback callback, long delayMillis) Posts a frame callback to run on the next frame after the specified delay. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. delayMillis The delay time in milliseconds. See Also postFrameCallback(Choreographer.FrameCallback) removeFrameCallback(Choreographer.FrameCallback)
	5:	android.graphics.drawable.AnimationDrawable public Drawable getFrame (int index) Returns The Drawable at the specified frame index
	6:	android.view.Choreographer public void postFrameCallback (Choreographer.FrameCallback callback) Posts a frame callback to run on the next frame. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. See Also postFrameCallbackDelayed(Choreographer.FrameCallback, long) removeFrameCallback(Choreographer.FrameCallback)
	7:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	8:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs) Call this method after setDataSource(). This method finds a representative frame close to the given time position if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source. Call this method if one does not care how the frame is found as long as it is close to the given time; otherwise, please call getFrameAtTime(long, int). Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarentee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved. See Also getFrameAtTime(long, int)
	9:	android.view.Choreographer.FrameCallback public abstract void doFrame (long frameTimeNanos) Called when a new display frame is being rendered. This method provides the time in nanoseconds when the frame started being rendered. The frame time provides a stable time base for synchronizing animations and drawing. It should be used instead of uptimeMillis() or nanoTime() for animations and drawing in the UI. Using the frame time helps to reduce inter-frame jitter because the frame time is fixed at the time the frame was scheduled to start, regardless of when the animations or drawing callback actually runs. All callbacks that run as part of rendering a frame will observe the same frame time so using the frame time also helps to synchronize effects that are performed by different callbacks. Please note that the framework already takes care to process animations and drawing using the frame time as a stable time base. Most applications should not need to use the frame time information directly. Parameters frameTimeNanos The time in nanoseconds when the frame started being rendered, in the nanoTime() timebase. Divide this value by 1000000 to convert it to the uptimeMillis() time base.
paint
Draws the Sprite
	0:	android.graphics.Paint public Paint (Paint paint) Create a new paint, initialized with the attributes in the specified paint parameter. Parameters paint Existing paint used to initialized the attributes of the new paint.
	1:	android.graphics.Canvas public void drawPaint (Paint paint) Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint. Parameters paint The paint used to draw onto the canvas
	2:	android.graphics.Bitmap public Bitmap extractAlpha (Paint paint, int[] offsetXY) Returns a new bitmap that captures the alpha values of the original. These values may be affected by the optional Paint parameter, which can contain its own alpha, and may also contain a MaskFilter which could change the actual dimensions of the resulting bitmap (e.g. a blur maskfilter might enlarge the resulting bitmap). If offsetXY is not null, it returns the amount to offset the returned bitmap so that it will logically align with the original. For example, if the paint contains a blur of radius 2, then offsetXY[] would contains -2, -2, so that drawing the alpha bitmap offset by (-2, -2) and then drawing the original would result in the blur visually aligning with the original. The initial density of the returned bitmap is the same as the original's. Parameters paint Optional paint used to modify the alpha values in the resulting bitmap. Pass null for default behavior. offsetXY Optional array that returns the X (index 0) and Y (index 1) offset needed to position the returned bitmap so that it visually lines up with the original. Returns new bitmap containing the (optionally modified by paint) alpha channel of the original bitmap. This may be drawn with Canvas.drawBitmap(), where the color(s) will be taken from the paint that is passed to the draw call.
	3:	android.graphics.Canvas public void drawPath (Path path, Paint paint) Draw the specified path using the specified paint. The path will be filled or framed based on the Style in the paint. Parameters path The path to be drawn paint The paint used to draw the path
	4:	android.graphics.Canvas public void drawRect (RectF rect, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters rect The rect to be drawn paint The paint used to draw the rect
	5:	android.graphics.Canvas public void drawRect (Rect r, Paint paint) Draw the specified Rect using the specified Paint. The rectangle will be filled or framed based on the Style in the paint. Parameters r The rectangle to be drawn. paint The paint used to draw the rectangle
	6:	android.graphics.Canvas public void drawOval (RectF oval, Paint paint) Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint. Parameters oval The rectangle bounds of the oval to be drawn
	7:	android.graphics.drawable.shapes.ArcShape public void draw (Canvas canvas, Paint paint) Draw this shape into the provided Canvas, with the provided Paint. Before calling this, you must call resize(float, float). Parameters canvas the Canvas within which this shape should be drawn paint the Paint object that defines this shape's characteristics
	8:	android.graphics.drawable.shapes.OvalShape public void draw (Canvas canvas, Paint paint) Draw this shape into the provided Canvas, with the provided Paint. Before calling this, you must call resize(float, float). Parameters canvas the Canvas within which this shape should be drawn paint the Paint object that defines this shape's characteristics
	9:	android.graphics.drawable.shapes.PathShape public void draw (Canvas canvas, Paint paint) Draw this shape into the provided Canvas, with the provided Paint. Before calling this, you must call resize(float, float). Parameters canvas the Canvas within which this shape should be drawn paint the Paint object that defines this shape's characteristics
setFrameSequence
Set the frame sequence for this Sprite
	0:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	1:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs) Call this method after setDataSource(). This method finds a representative frame close to the given time position if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source. Call this method if one does not care how the frame is found as long as it is close to the given time; otherwise, please call getFrameAtTime(long, int). Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarentee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved. See Also getFrameAtTime(long, int)
	2:	android.graphics.Interpolator public void setKeyFrame (int index, int msec, float[] values) Assign the keyFrame (specified by index) a time value and an array of key values (with an implicity blend array of [0, 0, 1, 1] giving linear transition to the next set of key values). Parameters index The index of the key frame to assign msec The time (in mililiseconds) for this key frame. Based on the SystemClock.uptimeMillis() clock values Array of values associated with theis key frame
	3:	android.view.Choreographer.FrameCallback public abstract void doFrame (long frameTimeNanos) Called when a new display frame is being rendered. This method provides the time in nanoseconds when the frame started being rendered. The frame time provides a stable time base for synchronizing animations and drawing. It should be used instead of uptimeMillis() or nanoTime() for animations and drawing in the UI. Using the frame time helps to reduce inter-frame jitter because the frame time is fixed at the time the frame was scheduled to start, regardless of when the animations or drawing callback actually runs. All callbacks that run as part of rendering a frame will observe the same frame time so using the frame time also helps to synchronize effects that are performed by different callbacks. Please note that the framework already takes care to process animations and drawing using the frame time as a stable time base. Most applications should not need to use the frame time information directly. Parameters frameTimeNanos The time in nanoseconds when the frame started being rendered, in the nanoTime() timebase. Divide this value by 1000000 to convert it to the uptimeMillis() time base.
	4:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs, int option) Call this method after setDataSource(). This method finds a representative frame close to the given time position by considering the given option if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source or just obtain and display a frame at the given time position. Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarantee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. option a hint on how the frame is found. Use OPTION_PREVIOUS_SYNC if one wants to retrieve a sync frame that has a timestamp earlier than or the same as timeUs. Use OPTION_NEXT_SYNC if one wants to retrieve a sync frame that has a timestamp later than or the same as timeUs. Use OPTION_CLOSEST_SYNC if one wants to retrieve a sync frame that has a timestamp closest to or the same as timeUs. Use OPTION_CLOSEST if one wants to retrieve a frame that may or may not be a sync frame but is closest to or the same as timeUs. OPTION_CLOSEST often has larger performance overhead compared to the other options if there is no sync frame located at timeUs. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved.
	5:	android.hardware.Camera.Parameters public int getPreviewFrameRate () This method was deprecated in API level 9. replaced by getPreviewFpsRange(int[]) Returns the setting for the rate at which preview frames are received. This is the target frame rate. The actual frame rate depends on the driver. Returns the frame rate setting (frames per second)
	6:	android.hardware.Camera.Parameters public List<Integer> getSupportedPreviewFrameRates () This method was deprecated in API level 9. replaced by getSupportedPreviewFpsRange() Gets the supported preview frame rates. Returns a list of supported preview frame rates. null if preview frame rate setting is not supported.
	7:	android.opengl.GLSurfaceView public void requestRender () Request that the renderer render a frame. This method is typically used when the render mode has been set to RENDERMODE_WHEN_DIRTY, so that frames are only rendered on demand. May be called from any thread. Must not be called before a renderer has been set.
	8:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	9:	android.view.Choreographer public void postFrameCallbackDelayed (Choreographer.FrameCallback callback, long delayMillis) Posts a frame callback to run on the next frame after the specified delay. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. delayMillis The delay time in milliseconds. See Also postFrameCallback(Choreographer.FrameCallback) removeFrameCallback(Choreographer.FrameCallback)
setImage
Changes the Image containing the Sprite's frames
	0:	android.opengl.ETC1Util public static ETC1Util.ETC1Texture compressTexture (Buffer input, int width, int height, int pixelSize, int stride) Helper function that compresses an image into an ETC1Texture. Parameters input a native order direct buffer containing the image data width the width of the image in pixels height the height of the image in pixels pixelSize the size of a pixel in bytes (2 or 3) stride the width of a line of the image in bytes Returns the ETC1 texture.
	1:	android.hardware.Camera.Parameters public int getPreviewFormat () Returns the image format for preview frames got from Camera.PreviewCallback. Returns the preview format. See Also ImageFormat setPreviewFormat(int)
	2:	android.graphics.BitmapFactory public static Bitmap decodeResource (Resources res, int id) Synonym for decodeResource(Resources, int, android.graphics.BitmapFactory.Options) will null Options. Parameters res The resources object containing the image data id The resource id of the image data Returns The decoded bitmap, or null if the image could not be decoded.
	3:	android.provider.MediaStore.Images.Media public static final String insertImage (ContentResolver cr, String imagePath, String name, String description) Insert an image and create a thumbnail for it. Parameters cr The content resolver to use imagePath The path to the image to insert name The name of the image description The description of the image Returns The URL to the newly created image Throws FileNotFoundException
	4:	android.provider.MediaStore.Images.Media public static final String insertImage (ContentResolver cr, Bitmap source, String title, String description) Insert an image and create a thumbnail for it. Parameters cr The content resolver to use source The stream to use for the image title The name of the image description The description of the image Returns The URL to the newly created image, or null if the image failed to be stored for any reason.
	5:	android.widget.ImageView public void setImageLevel (int level) Sets the image level, when it is constructed from a LevelListDrawable. Parameters level The new level for the image.
	6:	android.mtp.MtpObjectInfo public final int getImagePixHeight () Returns the height of the MTP object in pixels Will be zero for non-image objects Returns the image height
	7:	android.mtp.MtpObjectInfo public final int getImagePixWidth () Returns the width of the MTP object in pixels Will be zero for non-image objects Returns the image width
	8:	android.hardware.Camera.Parameters public int getPictureFormat () Returns the image format for pictures. Returns the picture format See Also ImageFormat
	9:	android.graphics.BitmapFactory public static Bitmap decodeResource (Resources res, int id, BitmapFactory.Options opts) Synonym for opening the given resource and calling decodeResourceStream(Resources, TypedValue, InputStream, Rect, BitmapFactory.Options). Parameters res The resources object containing the image data id The resource id of the image data opts null-ok; Options that control downsampling and whether the image should be completely decoded, or just is size returned. Returns The decoded bitmap, or null if the image data could not be decoded, or, if opts is non-null, if opts requested only the size be returned (in opts.outWidth and opts.outHeight)
defineCollisionRectangle
Defines the Sprite's bounding rectangle that is used for collision detection purposes
	0:	android.hardware.Camera public final void startFaceDetection () Starts the face detection. This should be called after preview is started. The camera will notify Camera.FaceDetectionListener of the detected faces in the preview frame. The detected faces may be the same as the previous ones. Applications should call stopFaceDetection() to stop the face detection. This method is supported if getMaxNumDetectedFaces() returns a number larger than 0. If the face detection has started, apps should not call this again. When the face detection is running, setWhiteBalance(String), setFocusAreas(List), and setMeteringAreas(List) have no effect. The camera uses the detected faces to do auto-white balance, auto exposure, and autofocus. If the apps call autoFocus(AutoFocusCallback), the camera will stop sending face callbacks. The last face callback indicates the areas used to do autofocus. After focus completes, face detection will resume sending face callbacks. If the apps call cancelAutoFocus(), the face callbacks will also resume. After calling takePicture(Camera.ShutterCallback, Camera.PictureCallback, Camera.PictureCallback) or stopPreview(), and then resuming preview with startPreview(), the apps should call this method again to resume face detection. Throws IllegalArgumentException if the face detection is unsupported. RuntimeException if the method fails or the face detection is already running. See Also Camera.FaceDetectionListener stopFaceDetection() getMaxNumDetectedFaces()
	1:	android.hardware.Camera public final void stopFaceDetection () Stops the face detection. See Also startFaceDetection()
	2:	java.nio.charset.CharsetDecoder public boolean isCharsetDetected () Indicates whether this decoder has detected a charset; this method is optional. If this decoder implements an auto-detecting charset, then this method may start to return true during decoding operation to indicate that a charset has been detected in the input bytes and that the charset can be retrieved by invoking the detectedCharset method. Note that a decoder that implements an auto-detecting charset may still succeed in decoding a portion of the given input even when it is unable to detect the charset. For this reason users should be aware that a false return value does not indicate that no decoding took place. The default implementation always throws an UnsupportedOperationException; it should be overridden by a subclass if needed. Returns true if this decoder has detected a charset. Throws UnsupportedOperationException if this decoder doesn't implement an auto-detecting charset.
	3:	android.view.OrientationEventListener public OrientationEventListener (Context context, int rate) Creates a new OrientationEventListener. Parameters context for the OrientationEventListener. rate at which sensor events are processed (see also SensorManager). Use the default value of SENSOR_DELAY_NORMAL for simple screen orientation change detection.
	4:	android.view.OrientationListener public OrientationListener (Context context, int rate) Creates a new OrientationListener. Parameters context for the OrientationListener. rate at which sensor events are processed (see also SensorManager). Use the default value of SENSOR_DELAY_NORMAL for simple screen orientation change detection.
	5:	android.hardware.Camera.Parameters public int getMaxNumDetectedFaces () Gets the maximum number of detected faces supported. This is the maximum length of the list returned from Camera.FaceDetectionListener. If the return value is 0, face detection of the specified type is not supported. Returns the maximum number of detected face supported by the camera. See Also startFaceDetection()
	6:	android.content.ContentResolver public final ContentProviderClient acquireUnstableContentProviderClient (Uri uri) Like acquireContentProviderClient(Uri), but for use when you do not trust the stability of the target content provider. This turns off the mechanism in the platform clean up processes that are dependent on a content provider if that content provider's process goes away. Normally you can safely assume that once you have acquired a provider, you can freely use it as needed and it won't disappear, even if your process is in the background. If using this method, you need to take care to deal with any failures when communicating with the provider, and be sure to close it so that it can be re-opened later. In particular, catching a DeadObjectException from the calls there will let you know that the content provider has gone away; at that point the current ContentProviderClient object is invalid, and you should release it. You can acquire a new one if you would like to try to restart the provider and perform new operations on it.
	7:	android.content.ContentResolver public final ContentProviderClient acquireUnstableContentProviderClient (String name) Like acquireContentProviderClient(String), but for use when you do not trust the stability of the target content provider. This turns off the mechanism in the platform clean up processes that are dependent on a content provider if that content provider's process goes away. Normally you can safely assume that once you have acquired a provider, you can freely use it as needed and it won't disappear, even if your process is in the background. If using this method, you need to take care to deal with any failures when communicating with the provider, and be sure to close it so that it can be re-opened later. In particular, catching a DeadObjectException from the calls there will let you know that the content provider has gone away; at that point the current ContentProviderClient object is invalid, and you should release it. You can acquire a new one if you would like to try to restart the provider and perform new operations on it.
	8:	java.sql.DatabaseMetaData public abstract boolean updatesAreDetected (int type) Determines whether the method ResultSet.rowUpdated can detect a visible row update for the specified ResultSet type. Parameters type ResultSet type: ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or ResultSet.TYPE_SCROLL_SENSITIVE Returns true detecting changes is possible, otherwise false. Throws SQLException a database error occurred.
	9:	android.content.pm.ResolveInfo public final int getIconResource () Return the icon resource identifier to use for this match. If the match defines an icon, that is used; else if the activity defines an icon, that is used; else, the application icon is used. Returns The icon associated with this match.
setTransform
Sets the transform for this Sprite
	0:	android.graphics.Path public void transform (Matrix matrix) Transform the points in this path by matrix. Parameters matrix The matrix to apply to the path
	1:	android.graphics.Path public void transform (Matrix matrix, Path dst) Transform the points in this path by matrix, and write the answer into dst. If dst is null, then the the original path is modified. Parameters matrix The matrix to apply to the path dst The transformed path is written here. If dst is null, then the the original path is modified
	2:	android.widget.Gallery protected boolean getChildStaticTransformation (View child, Transformation t) Sets t to be the static transformation of the child, if set, returning a boolean to indicate whether a static transform was set. The default implementation simply returns false; subclasses may override this method for different behavior. setStaticTransformationsEnabled(boolean) must be set to true for this method to be called. Parameters child The child view whose static transform is being requested t The Transformation which will hold the result Returns true if the transformation was set, false otherwise
	3:	android.text.Editable public abstract void setFilters (InputFilter[] filters) Sets the series of filters that will be called in succession whenever the text of this Editable is changed, each of which has the opportunity to limit or transform the text that is being inserted.
	4:	android.graphics.Matrix public void mapPoints (float[] pts) Apply this matrix to the array of 2D points, and write the transformed points back into the array Parameters pts The array [x0, y0, x1, y1, ...] of points to transform.
	5:	android.view.MotionEvent public final void transform (Matrix matrix) Applies a transformation matrix to all of the points in the event. Parameters matrix The transformation matrix to apply.
	6:	javax.crypto.CipherSpi protected abstract byte[] engineUpdate (byte[] input, int inputOffset, int inputLen) Continues a multi-part transformation (encryption or decryption). The transformed bytes are returned. Parameters input the input bytes to transform. inputOffset the offset in the input to start. inputLen the length of the input to transform. Returns the transformed bytes in a new buffer, or null if the input has zero length. Throws IllegalStateException if this cipher instance is not initialized for encryption or decryption. IllegalArgumentException if the input is null, or if inputOffset and inputLen do not specify a valid chunk in the input buffer.
	7:	javax.crypto.Cipher public final byte[] update (byte[] input, int inputOffset, int inputLen) Continues a multi-part transformation (encryption or decryption). The transformed bytes are returned. Parameters input the input bytes to transform. inputOffset the offset in the input to start. inputLen the length of the input to transform. Returns the transformed bytes in a new buffer, or null if the input has zero length. Throws IllegalStateException if this cipher instance is not initialized for encryption or decryption. IllegalArgumentException if input is null, or if inputOffset and inputLen do not specify a valid chunk in the input buffer.
	8:	android.graphics.Matrix public void mapVectors (float[] vecs) Apply this matrix to the array of 2D vectors, and write the transformed vectors back into the array. Note: this method does not apply the translation associated with the matrix. Use mapPoints(float[]) if you want the translation to be applied. Parameters vecs The array [x0, y0, x1, y1, ...] of vectors to transform.
	9:	android.graphics.Matrix public boolean mapRect (RectF rect) Apply this matrix to the rectangle, and write the transformed rectangle back into it. This is accomplished by transforming the 4 corners of rect, and then setting it to the bounds of those points Parameters rect The rectangle to transform. Returns the result of calling rectStaysRect()
collidesWith
Checks for a collision between this Sprite and the specified Sprite
	0:	android.location.LocationManager public void requestLocationUpdates (long minTime, float minDistance, Criteria criteria, LocationListener listener, Looper looper) Register for location updates using a Criteria, and a callback on the specified looper thread. See requestLocationUpdates(long, float, Criteria, PendingIntent) for more detail on how to use this method. Parameters minTime minimum time interval between location updates, in milliseconds minDistance minimum distance between location updates, in meters criteria contains parameters for the location manager to choose the appropriate provider and parameters to compute the location listener a LocationListener whose onLocationChanged(Location) method will be called for each location update looper a Looper object whose message queue will be used to implement the callback mechanism, or null to make callbacks on the calling thread Throws IllegalArgumentException if criteria is null IllegalArgumentException if listener is null SecurityException if no suitable permission is present
	1:	android.text.Layout public void getSelectionPath (int start, int end, Path dest) Fills in the specified Path with a representation of a highlight between the specified offsets. This will often be a rectangle or a potentially discontinuous set of rectangles. If the start and end are the same, the returned path is empty.
	2:	android.location.LocationManager public void requestLocationUpdates (String provider, long minTime, float minDistance, LocationListener listener, Looper looper) Register for location updates using the named provider, and a callback on the specified looper thread. See requestLocationUpdates(long, float, Criteria, PendingIntent) for more detail on how to use this method. Parameters provider the name of the provider with which to register minTime minimum time interval between location updates, in milliseconds minDistance minimum distance between location updates, in meters listener a LocationListener whose onLocationChanged(Location) method will be called for each location update looper a Looper object whose message queue will be used to implement the callback mechanism, or null to make callbacks on the calling thread Throws IllegalArgumentException if provider is null or doesn't exist IllegalArgumentException if listener is null SecurityException if no suitable permission is present
	3:	android.media.MediaRouter.RouteGroup public void requestSetVolume (int volume) Request a volume change for this route. Parameters volume value between 0 and getVolumeMax
	4:	android.media.MediaRouter.RouteInfo public void requestSetVolume (int volume) Request a volume change for this route. Parameters volume value between 0 and getVolumeMax
	5:	android.media.MediaRouter.UserRouteInfo public void requestSetVolume (int volume) Request a volume change for this route. Parameters volume value between 0 and getVolumeMax
	6:	android.animation.ObjectAnimator public void setObjectValues (Object... values) Sets the values to animate between for this animation. A single value implies that that value is the one being animated to. However, this is not typically useful in a ValueAnimator object because there is no way for the object to determine the starting value for the animation (unlike ObjectAnimator, which can derive that value from the target object and property being animated). Therefore, there should typically be two or more values. If there are already multiple sets of values defined for this ValueAnimator via more than one PropertyValuesHolder object, this method will set the values for the first of those objects. There should be a TypeEvaluator set on the ValueAnimator that knows how to interpolate between these value objects. ValueAnimator only knows how to interpolate between the primitive types specified in the other setValues() methods. Parameters values The set of values to animate between.
	7:	android.graphics.drawable.ColorDrawable public int getAlpha () Returns the alpha value of this drawable's color. Returns A value between 0 and 255.
	8:	android.widget.AbsListView protected float getBottomFadingEdgeStrength () Returns the strength, or intensity, of the bottom faded edge. The strength is a value between 0.0 (no fade) and 1.0 (full fade). The default implementation returns 0.0 or 1.0 but no value in between. Subclasses should override this method to provide a smoother fade transition when scrolling occurs. Returns the intensity of the bottom fade as a float between 0.0f and 1.0f
	9:	android.widget.AbsListView protected float getTopFadingEdgeStrength () Returns the strength, or intensity, of the top faded edge. The strength is a value between 0.0 (no fade) and 1.0 (full fade). The default implementation returns 0.0 or 1.0 but no value in between. Subclasses should override this method to provide a smoother fade transition when scrolling occurs. Returns the intensity of the top fade as a float between 0.0f and 1.0f
collidesWith
Checks for a collision between this Sprite and the specified TiledLayer
	0:	android.location.LocationManager public void requestLocationUpdates (long minTime, float minDistance, Criteria criteria, LocationListener listener, Looper looper) Register for location updates using a Criteria, and a callback on the specified looper thread. See requestLocationUpdates(long, float, Criteria, PendingIntent) for more detail on how to use this method. Parameters minTime minimum time interval between location updates, in milliseconds minDistance minimum distance between location updates, in meters criteria contains parameters for the location manager to choose the appropriate provider and parameters to compute the location listener a LocationListener whose onLocationChanged(Location) method will be called for each location update looper a Looper object whose message queue will be used to implement the callback mechanism, or null to make callbacks on the calling thread Throws IllegalArgumentException if criteria is null IllegalArgumentException if listener is null SecurityException if no suitable permission is present
	1:	android.text.Layout public void getSelectionPath (int start, int end, Path dest) Fills in the specified Path with a representation of a highlight between the specified offsets. This will often be a rectangle or a potentially discontinuous set of rectangles. If the start and end are the same, the returned path is empty.
	2:	android.location.LocationManager public void requestLocationUpdates (String provider, long minTime, float minDistance, LocationListener listener, Looper looper) Register for location updates using the named provider, and a callback on the specified looper thread. See requestLocationUpdates(long, float, Criteria, PendingIntent) for more detail on how to use this method. Parameters provider the name of the provider with which to register minTime minimum time interval between location updates, in milliseconds minDistance minimum distance between location updates, in meters listener a LocationListener whose onLocationChanged(Location) method will be called for each location update looper a Looper object whose message queue will be used to implement the callback mechanism, or null to make callbacks on the calling thread Throws IllegalArgumentException if provider is null or doesn't exist IllegalArgumentException if listener is null SecurityException if no suitable permission is present
	3:	android.media.MediaRouter.RouteGroup public void requestSetVolume (int volume) Request a volume change for this route. Parameters volume value between 0 and getVolumeMax
	4:	android.media.MediaRouter.RouteInfo public void requestSetVolume (int volume) Request a volume change for this route. Parameters volume value between 0 and getVolumeMax
	5:	android.media.MediaRouter.UserRouteInfo public void requestSetVolume (int volume) Request a volume change for this route. Parameters volume value between 0 and getVolumeMax
	6:	android.animation.ObjectAnimator public void setObjectValues (Object... values) Sets the values to animate between for this animation. A single value implies that that value is the one being animated to. However, this is not typically useful in a ValueAnimator object because there is no way for the object to determine the starting value for the animation (unlike ObjectAnimator, which can derive that value from the target object and property being animated). Therefore, there should typically be two or more values. If there are already multiple sets of values defined for this ValueAnimator via more than one PropertyValuesHolder object, this method will set the values for the first of those objects. There should be a TypeEvaluator set on the ValueAnimator that knows how to interpolate between these value objects. ValueAnimator only knows how to interpolate between the primitive types specified in the other setValues() methods. Parameters values The set of values to animate between.
	7:	android.graphics.drawable.ColorDrawable public int getAlpha () Returns the alpha value of this drawable's color. Returns A value between 0 and 255.
	8:	android.widget.AbsListView protected float getBottomFadingEdgeStrength () Returns the strength, or intensity, of the bottom faded edge. The strength is a value between 0.0 (no fade) and 1.0 (full fade). The default implementation returns 0.0 or 1.0 but no value in between. Subclasses should override this method to provide a smoother fade transition when scrolling occurs. Returns the intensity of the bottom fade as a float between 0.0f and 1.0f
	9:	android.widget.AbsListView protected float getTopFadingEdgeStrength () Returns the strength, or intensity, of the top faded edge. The strength is a value between 0.0 (no fade) and 1.0 (full fade). The default implementation returns 0.0 or 1.0 but no value in between. Subclasses should override this method to provide a smoother fade transition when scrolling occurs. Returns the intensity of the top fade as a float between 0.0f and 1.0f
collidesWith
Checks for a collision between this Sprite and the specified Image with its upper left corner at the specified location
	0:	android.widget.PopupWindow public void showAsDropDown (View anchor, int xoff, int yoff, int gravity) Display the content view in a popup window anchored to the bottom-left corner of the anchor view offset by the specified x and y coordinates. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled, the bottom-left corner of the popup is pinned at the top left corner of the anchor view. If the view later scrolls to move anchor to a different location, the popup will be moved correspondingly. Parameters anchor the view on which to pin the popup window xoff A horizontal offset from the anchor in pixels yoff A vertical offset from the anchor in pixels gravity Alignment of the popup relative to the anchor See Also dismiss()
	1:	android.widget.PopupWindow public void showAsDropDown (View anchor, int xoff, int yoff) Display the content view in a popup window anchored to the bottom-left corner of the anchor view offset by the specified x and y coordinates. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled, the bottom-left corner of the popup is pinned at the top left corner of the anchor view. If the view later scrolls to move anchor to a different location, the popup will be moved correspondingly. Parameters anchor the view on which to pin the popup window xoff A horizontal offset from the anchor in pixels yoff A vertical offset from the anchor in pixels See Also dismiss()
	2:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, float left, float top, Paint paint) Draw the specified bitmap, with its top/left corner at (x,y), using the specified paint, transformed by the current matrix. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. If the bitmap and canvas have different densities, this function will take care of automatically scaling the bitmap to draw at the same density as the canvas. Parameters bitmap The bitmap to be drawn left The position of the left side of the bitmap being drawn top The position of the top side of the bitmap being drawn paint The paint used to draw the bitmap (may be null)
	3:	android.graphics.drawable.GradientDrawable public void setCornerRadii (float[] radii) Specify radii for each of the 4 corners. For each corner, the array contains 2 values, [X_radius, Y_radius]. The corners are ordered top-left, top-right, bottom-right, bottom-left. This property is honored only when the shape is of type RECTANGLE. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters radii 4 pairs of X and Y radius for each corner, specified in pixels. The length of this array must be >= 8 See Also mutate() setCornerRadii(float[]) setShape(int)
	4:	android.location.Geocoder public List<Address> getFromLocationName (String locationName, int maxResults, double lowerLeftLatitude, double lowerLeftLongitude, double upperRightLatitude, double upperRightLongitude) Returns an array of Addresses that are known to describe the named location, which may be a place name such as "Dalvik, Iceland", an address such as "1600 Amphitheatre Parkway, Mountain View, CA", an airport code such as "SFO", etc.. The returned addresses will be localized for the locale provided to this class's constructor. You may specify a bounding box for the search results by including the Latitude and Longitude of the Lower Left point and Upper Right point of the box. The query will block and returned values will be obtained by means of a network lookup. The results are a best guess and are not guaranteed to be meaningful or correct. It may be useful to call this method from a thread separate from your primary UI thread. Parameters locationName a user-supplied description of a location maxResults max number of addresses to return. Smaller numbers (1 to 5) are recommended lowerLeftLatitude the latitude of the lower left corner of the bounding box lowerLeftLongitude the longitude of the lower left corner of the bounding box upperRightLatitude the latitude of the upper right corner of the bounding box upperRightLongitude the longitude of the upper right corner of the bounding box Returns a list of Address objects. Returns null or empty list if no matches were found or there is no backend service available. Throws IllegalArgumentException if locationName is null IllegalArgumentException if any latitude is less than -90 or greater than 90 IllegalArgumentException if any longitude is less than -180 or greater than 180 IOException if the network is unavailable or any other I/O problem occurs
	5:	android.widget.PopupWindow public void showAsDropDown (View anchor) Display the content view in a popup window anchored to the bottom-left corner of the anchor view. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled, the bottom-left corner of the popup is pinned at the top left corner of the anchor view. Parameters anchor the view on which to pin the popup window See Also dismiss()
	6:	android.hardware.Camera public final void takePicture (Camera.ShutterCallback shutter, Camera.PictureCallback raw, Camera.PictureCallback postview, Camera.PictureCallback jpeg) Triggers an asynchronous image capture. The camera service will initiate a series of callbacks to the application as the image capture progresses. The shutter callback occurs after the image is captured. This can be used to trigger a sound to let the user know that image has been captured. The raw callback occurs when the raw image data is available (NOTE: the data will be null if there is no raw image callback buffer available or the raw image callback buffer is not large enough to hold the raw image). The postview callback occurs when a scaled, fully processed postview image is available (NOTE: not all hardware supports this). The jpeg callback occurs when the compressed image is available. If the application does not need a particular callback, a null can be passed instead of a callback method. This method is only valid when preview is active (after startPreview()). Preview will be stopped after the image is taken; callers must call startPreview() again if they want to re-start preview or take more pictures. This should not be called between start() and stop(). After calling this method, you must not call startPreview() or take another picture until the JPEG callback has returned. Parameters shutter the callback for image capture moment, or null raw the callback for raw (uncompressed) image data, or null postview callback with postview image data, may be null jpeg the callback for JPEG image data, or null
	7:	android.graphics.drawable.shapes.RoundRectShape public RoundRectShape (float[] outerRadii, RectF inset, float[] innerRadii) RoundRectShape constructor. Specifies an outer (round)rect and an optional inner (round)rect. Parameters outerRadii An array of 8 radius values, for the outer roundrect. The first two floats are for the top-left corner (remaining pairs correspond clockwise). For no rounded corners on the outer rectangle, pass null. inset A RectF that specifies the distance from the inner rect to each side of the outer rect. For no inner, pass null. innerRadii An array of 8 radius values, for the inner roundrect. The first two floats are for the top-left corner (remaining pairs correspond clockwise). For no rounded corners on the inner rectangle, pass null. If inset parameter is null, this parameter is ignored.
	8:	android.widget.ExpandableListView public void setChildIndicatorBounds (int left, int right) Sets the drawing bounds for the child indicator. For either, you can specify CHILD_INDICATOR_INHERIT to use inherit from the general indicator's bounds. Parameters left The left position (relative to the left bounds of this View) to start drawing the indicator. right The right position (relative to the left bounds of this View) to end the drawing of the indicator. See Also setIndicatorBounds(int, int)
	9:	android.graphics.drawable.PaintDrawable public void setCornerRadii (float[] radii) Specify radii for each of the 4 corners. For each corner, the array contains 2 values, [X_radius, Y_radius]. The corners are ordered top-left, top-right, bottom-right, bottom-left Parameters radii the x and y radii of the corners
