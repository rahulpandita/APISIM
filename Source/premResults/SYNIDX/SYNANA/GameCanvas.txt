GameCanvas
Creates a new instance of a GameCanvas
	0:	android.support.v4.view.AccessibilityDelegateCompat public AccessibilityDelegateCompat () Creates a new instance.
	1:	android.support.v4.view.accessibility.AccessibilityNodeProviderCompat public AccessibilityNodeProviderCompat () Creates a new instance.
	2:	android.accessibilityservice.AccessibilityServiceInfo public AccessibilityServiceInfo () Creates a new instance.
	3:	android.graphics.pdf.PdfDocument public PdfDocument () Creates a new instance.
	4:	org.apache.http.protocol.BasicHttpProcessor public BasicHttpProcessor copy () Creates a copy of this instance Returns new instance of the BasicHttpProcessor
	5:	javax.xml.parsers.DocumentBuilderFactory public abstract DocumentBuilder newDocumentBuilder () Creates a new instance of a DocumentBuilder using the currently configured parameters. Returns A new instance of a DocumentBuilder. Throws ParserConfigurationException if a DocumentBuilder cannot be created which satisfies the configuration requested.
	6:	android.view.accessibility.AccessibilityEvent public void initFromParcel (Parcel parcel) Creates a new instance from a Parcel. Parameters parcel A parcel containing the state of a AccessibilityEvent.
	7:	java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject public AbstractQueuedLongSynchronizer.ConditionObject () Creates a new ConditionObject instance.
	8:	java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject public AbstractQueuedSynchronizer.ConditionObject () Creates a new ConditionObject instance.
	9:	java.security.cert.CertPathBuilderSpi public CertPathBuilderSpi () Creates a new CertPathBuilderSpi instance.
getGraphics
Obtains the Graphics object for rendering a GameCanvas
	0:	android.renderscript.Allocation public static Allocation createFromBitmap (RenderScript rs, Bitmap b) Creates an Allocation from a Bitmap. With target API version 18 or greater, this Allocation will be created with USAGE_SHARED, USAGE_SCRIPT, and USAGE_GRAPHICS_TEXTURE. With target API version 17 or lower, this Allocation will be created with USAGE_GRAPHICS_TEXTURE. Parameters rs Context to which the allocation will belong. b bitmap source for the allocation data Returns Allocation containing bitmap data
	1:	android.renderscript.Allocation public static Allocation createFromBitmapResource (RenderScript rs, Resources res, int id) Creates a non-mipmapped Allocation to use as a graphics texture from the Bitmap referenced by resource ID. With target API version 18 or greater, this allocation will be created with USAGE_SCRIPT and USAGE_GRAPHICS_TEXTURE. With target API version 17 or lower, this allocation will be created with USAGE_GRAPHICS_TEXTURE. Parameters rs Context to which the allocation will belong. res application resources id resource id to load the data from Returns Allocation containing resource data
	2:	org.apache.http.ProtocolVersion public ProtocolVersion forVersion (int major, int minor) Obtains a specific version of this protocol. This can be used by derived classes to instantiate themselves instead of the base class, and to define constants for commonly used versions. The default implementation in this class returns this if the version matches, and creates a new ProtocolVersion otherwise. Parameters major the major version minor the minor version Returns a protocol version with the same protocol name and the argument version
	3:	org.apache.http.ProtocolVersion public final int hashCode () Obtains a hash code consistent with equals(Object). Returns the hashcode of this protocol version
	4:	android.app.Notification public String getGroup () Get the key used to group this notification into a cluster or stack with other notifications on devices which support such rendering.
	5:	org.apache.http.message.BasicLineFormatter public static final String formatProtocolVersion (ProtocolVersion version, LineFormatter formatter) Formats a protocol version. Parameters version the protocol version to format formatter the formatter to use, or null for the default Returns the formatted protocol version
	6:	org.apache.http.HttpVersion public ProtocolVersion forVersion (int major, int minor) Obtains a specific HTTP version. Parameters major the major version minor the minor version Returns an instance of HttpVersion with the argument version
	7:	android.view.Display public int getRotation () Returns the rotation of the screen from its "natural" orientation. The returned value may be Surface.ROTATION_0 (no rotation), Surface.ROTATION_90, Surface.ROTATION_180, or Surface.ROTATION_270. For example, if a device has a naturally tall screen, and the user has turned it on its side to go into a landscape orientation, the value returned here may be either Surface.ROTATION_90 or Surface.ROTATION_270 depending on the direction it was turned. The angle is the rotation of the drawn graphics on the screen, which is the opposite direction of the physical rotation of the device. For example, if the device is rotated 90 degrees counter-clockwise, to compensate rendering will be rotated by 90 degrees clockwise and thus the returned value here will be Surface.ROTATION_90.
	8:	android.widget.ImageView public boolean hasOverlappingRendering () Returns whether this View has content which overlaps. This function, intended to be overridden by specific View types, is an optimization when alpha is set on a view. If rendering overlaps in a view with alpha < 1, that view is drawn to an offscreen buffer and then composited into place, which can be expensive. If the view has no overlapping rendering, the view can draw each primitive with the appropriate alpha value directly. An example of overlapping rendering is a TextView with a background image, such as a Button. An example of non-overlapping rendering is a TextView with no background, or an ImageView with only the foreground image. The default implementation returns true; subclasses should override if they have cases which can be optimized. The current implementation of the saveLayer and saveLayerAlpha methods in Canvas necessitates that a View return true if it uses the methods internally without passing the CLIP_TO_LAYER_SAVE_FLAG. Returns true if the content in this view might overlap, false otherwise.
	9:	android.app.Notification.Builder public Notification.Builder setGroupSummary (boolean isGroupSummary) Set this notification to be the group summary for a group of notifications. Grouped notifications may display in a cluster or stack on devices which support such rendering. Requires a group key also be set using setGroup(String). Parameters isGroupSummary Whether this notification should be a group summary. Returns this object for method chaining
getKeyStates
Gets the states of the physical game keys
	0:	android.app.ActivityGroup protected void onResume () Called after onRestoreInstanceState(Bundle), onRestart(), or onPause(), for your activity to start interacting with the user. This is a good place to begin animations, open exclusive-access devices (such as the camera), etc. Keep in mind that onResume is not the best indicator that your activity is visible to the user; a system window such as the keyguard may be in front. Use onWindowFocusChanged(boolean) to know for certain that your activity is visible to the user (for example, to resume a game). Derived classes must call through to the super class's implementation of this method. If they do not, an exception will be thrown.
	1:	android.app.NativeActivity protected void onResume () Called after onRestoreInstanceState(Bundle), onRestart(), or onPause(), for your activity to start interacting with the user. This is a good place to begin animations, open exclusive-access devices (such as the camera), etc. Keep in mind that onResume is not the best indicator that your activity is visible to the user; a system window such as the keyguard may be in front. Use onWindowFocusChanged(boolean) to know for certain that your activity is visible to the user (for example, to resume a game). Derived classes must call through to the super class's implementation of this method. If they do not, an exception will be thrown.
	2:	android.app.Activity protected void onResume () Called after onRestoreInstanceState(Bundle), onRestart(), or onPause(), for your activity to start interacting with the user. This is a good place to begin animations, open exclusive-access devices (such as the camera), etc. Keep in mind that onResume is not the best indicator that your activity is visible to the user; a system window such as the keyguard may be in front. Use onWindowFocusChanged(boolean) to know for certain that your activity is visible to the user (for example, to resume a game). Derived classes must call through to the super class's implementation of this method. If they do not, an exception will be thrown. See Also onRestoreInstanceState(Bundle) onRestart() onPostResume() onPause()
	3:	java.lang.Runtime public void halt (int code) Causes the VM to stop running, and the program to exit with the given return code. Use 0 to signal success to the calling process and 1 to signal failure. Neither shutdown hooks nor finalizers are run before exiting. This method is unlikely to be useful to an Android application.
	4:	android.hardware.Camera public static int getNumberOfCameras () Returns the number of physical cameras available on this device.
	5:	android.view.MotionEvent public final int getButtonState () Gets the state of all buttons that are pressed such as a mouse or stylus button. Returns The button state. See Also BUTTON_PRIMARY BUTTON_SECONDARY BUTTON_TERTIARY BUTTON_FORWARD BUTTON_BACK
	6:	android.text.style.AbsoluteSizeSpan public AbsoluteSizeSpan (int size) Set the text size to size physical pixels.
	7:	android.hardware.Camera public static Camera open () Creates a new Camera object to access the first back-facing camera on the device. If the device does not have a back-facing camera, this returns null. See Also open(int)
	8:	android.view.KeyEvent public final long getDownTime () Retrieve the time of the most recent key down event, in the uptimeMillis() time base. If this is a down event, this will be the same as getEventTime(). Note that when chording keys, this value is the down time of the most recently pressed key, which may not be the same physical key of this event. Returns Returns the most recent key down time, in the uptimeMillis() time base
	9:	android.text.style.AbsoluteSizeSpan public AbsoluteSizeSpan (int size, boolean dip) Set the text size to size physical pixels, or to size device-independent pixels if dip is true.
paint
Paints this GameCanvas
	0:	android.graphics.Canvas public void drawPaint (Paint paint) Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint. Parameters paint The paint used to draw onto the canvas
	1:	android.graphics.Paint public Paint (Paint paint) Create a new paint, initialized with the attributes in the specified paint parameter. Parameters paint Existing paint used to initialized the attributes of the new paint.
	2:	android.graphics.drawable.shapes.ArcShape public void draw (Canvas canvas, Paint paint) Draw this shape into the provided Canvas, with the provided Paint. Before calling this, you must call resize(float, float). Parameters canvas the Canvas within which this shape should be drawn paint the Paint object that defines this shape's characteristics
	3:	android.graphics.drawable.shapes.OvalShape public void draw (Canvas canvas, Paint paint) Draw this shape into the provided Canvas, with the provided Paint. Before calling this, you must call resize(float, float). Parameters canvas the Canvas within which this shape should be drawn paint the Paint object that defines this shape's characteristics
	4:	android.graphics.drawable.shapes.PathShape public void draw (Canvas canvas, Paint paint) Draw this shape into the provided Canvas, with the provided Paint. Before calling this, you must call resize(float, float). Parameters canvas the Canvas within which this shape should be drawn paint the Paint object that defines this shape's characteristics
	5:	android.graphics.drawable.shapes.RectShape public void draw (Canvas canvas, Paint paint) Draw this shape into the provided Canvas, with the provided Paint. Before calling this, you must call resize(float, float). Parameters canvas the Canvas within which this shape should be drawn paint the Paint object that defines this shape's characteristics
	6:	android.graphics.drawable.shapes.RoundRectShape public void draw (Canvas canvas, Paint paint) Draw this shape into the provided Canvas, with the provided Paint. Before calling this, you must call resize(float, float). Parameters canvas the Canvas within which this shape should be drawn paint the Paint object that defines this shape's characteristics
	7:	android.graphics.Bitmap public Bitmap extractAlpha (Paint paint, int[] offsetXY) Returns a new bitmap that captures the alpha values of the original. These values may be affected by the optional Paint parameter, which can contain its own alpha, and may also contain a MaskFilter which could change the actual dimensions of the resulting bitmap (e.g. a blur maskfilter might enlarge the resulting bitmap). If offsetXY is not null, it returns the amount to offset the returned bitmap so that it will logically align with the original. For example, if the paint contains a blur of radius 2, then offsetXY[] would contains -2, -2, so that drawing the alpha bitmap offset by (-2, -2) and then drawing the original would result in the blur visually aligning with the original. The initial density of the returned bitmap is the same as the original's. Parameters paint Optional paint used to modify the alpha values in the resulting bitmap. Pass null for default behavior. offsetXY Optional array that returns the X (index 0) and Y (index 1) offset needed to position the returned bitmap so that it visually lines up with the original. Returns new bitmap containing the (optionally modified by paint) alpha channel of the original bitmap. This may be drawn with Canvas.drawBitmap(), where the color(s) will be taken from the paint that is passed to the draw call.
	8:	android.graphics.drawable.BitmapDrawable public final Paint getPaint () Returns the paint used to render this drawable.
	9:	android.graphics.NinePatch public Paint getPaint () Returns the paint used to draw this NinePatch. The paint can be null. See Also setPaint(Paint) draw(Canvas, Rect) draw(Canvas, RectF)
flushGraphics
Flushes the specified region of the off-screen buffer to the display
	0:	android.inputmethodservice.KeyboardView public void invalidateAllKeys () Requests a redraw of the entire keyboard. Calling invalidate() is not sufficient because the keyboard renders the keys to an off-screen buffer and an invalidate() only draws the cached buffer. See Also invalidateKey(int)
	1:	android.view.accessibility.AccessibilityRecord public boolean isFullScreen () Gets if the source is taking the entire screen. Returns True if the source is full screen, false otherwise.
	2:	android.support.v4.view.accessibility.AccessibilityRecordCompat public boolean isFullScreen () Gets if the source is taking the entire screen. Returns True if the source is full screen, false otherwise.
	3:	android.webkit.PluginStub public abstract View getFullScreenView (int NPP, Context context) Return a custom full-screen view to be displayed when the user requests a plugin display as full-screen. Note that the application may choose not to display this View as completely full-screen. Parameters NPP The native NPP instance. context The current application's Context. Returns A custom View that will be managed by the application.
	4:	android.renderscript.Allocation public Surface getSurface () Returns the handle to a raw buffer that is being managed by the screen compositor. This operation is only valid for Allocations with USAGE_IO_INPUT. Returns Surface object associated with allocation
	5:	android.widget.MediaController public void hide () Remove the controller from the screen.
	6:	android.widget.MediaController public void show () Show the controller on screen. It will go away automatically after 3 seconds of inactivity.
	7:	android.appwidget.AppWidgetManager public void updateAppWidget (int[] appWidgetIds, RemoteViews views) Set the RemoteViews to use for the specified appWidgetIds. Note that the RemoteViews parameter will be cached by the AppWidgetService, and hence should contain a complete representation of the widget. For performing partial widget updates, see partiallyUpdateAppWidget(int[], RemoteViews). It is okay to call this method both inside an ACTION_APPWIDGET_UPDATE broadcast, and outside of the handler. This method will only work when called from the uid that owns the AppWidget provider. The total Bitmap memory used by the RemoteViews object cannot exceed that required to fill the screen 1.5 times, ie. (screen width x screen height x 4 x 1.5) bytes. Parameters appWidgetIds The AppWidget instances for which to set the RemoteViews. views The RemoteViews object to show.
	8:	android.appwidget.AppWidgetManager public void updateAppWidget (int appWidgetId, RemoteViews views) Set the RemoteViews to use for the specified appWidgetId. Note that the RemoteViews parameter will be cached by the AppWidgetService, and hence should contain a complete representation of the widget. For performing partial widget updates, see partiallyUpdateAppWidget(int, RemoteViews). It is okay to call this method both inside an ACTION_APPWIDGET_UPDATE broadcast, and outside of the handler. This method will only work when called from the uid that owns the AppWidget provider. The total Bitmap memory used by the RemoteViews object cannot exceed that required to fill the screen 1.5 times, ie. (screen width x screen height x 4 x 1.5) bytes. Parameters appWidgetId The AppWidget instance for which to set the RemoteViews. views The RemoteViews object to show.
	9:	android.app.Notification.WearableExtender public boolean getStartScrollBottom () Get whether the scrolling position for the contents of this notification should start at the bottom of the contents instead of the top when the contents are too long to display within the screen. Default is false (start scroll at the top).
flushGraphics
Flushes the off-screen buffer to the display
	0:	android.inputmethodservice.KeyboardView public void invalidateAllKeys () Requests a redraw of the entire keyboard. Calling invalidate() is not sufficient because the keyboard renders the keys to an off-screen buffer and an invalidate() only draws the cached buffer. See Also invalidateKey(int)
	1:	android.renderscript.Allocation public Surface getSurface () Returns the handle to a raw buffer that is being managed by the screen compositor. This operation is only valid for Allocations with USAGE_IO_INPUT. Returns Surface object associated with allocation
	2:	android.webkit.PluginStub public abstract View getFullScreenView (int NPP, Context context) Return a custom full-screen view to be displayed when the user requests a plugin display as full-screen. Note that the application may choose not to display this View as completely full-screen. Parameters NPP The native NPP instance. context The current application's Context. Returns A custom View that will be managed by the application.
	3:	android.view.accessibility.AccessibilityRecord public boolean isFullScreen () Gets if the source is taking the entire screen. Returns True if the source is full screen, false otherwise.
	4:	android.support.v4.view.accessibility.AccessibilityRecordCompat public boolean isFullScreen () Gets if the source is taking the entire screen. Returns True if the source is full screen, false otherwise.
	5:	android.widget.MediaController public void show () Show the controller on screen. It will go away automatically after 3 seconds of inactivity.
	6:	android.app.Dialog public void setContentView (View view) Set the screen content to an explicit view. This view is placed directly into the screen's view hierarchy. It can itself be a complex view hierarhcy. Parameters view The desired content to display.
	7:	android.app.KeyguardManager public boolean inKeyguardRestrictedInputMode () If keyguard screen is showing or in restricted key input mode (i.e. in keyguard password emergency screen). When in such mode, certain keys, such as the Home key and the right soft keys, don't work. Returns true if in keyguard restricted input mode. See Also inKeyguardRestrictedKeyInputMode()
	8:	android.widget.PopupWindow public void setClippingEnabled (boolean enabled) Allows the popup window to extend beyond the bounds of the screen. By default the window is clipped to the screen boundaries. Setting this to false will allow windows to be accurately positioned. If the popup is showing, calling this method will take effect only the next time the popup is shown or through a manual call to one of the update() methods. Parameters enabled false if the window should be allowed to extend outside of the screen See Also isShowing() isClippingEnabled() update()
	9:	android.widget.MediaController public void show (int timeout) Show the controller on screen. It will go away automatically after 'timeout' milliseconds of inactivity. Parameters timeout The timeout in milliseconds. Use 0 to show the controller until hide() is called.
