getTitle
Gets the title of the Displayable
	0:	android.support.v7.view.ActionMode public abstract CharSequence getTitle () Returns the current title of this action mode. Returns Title text
	1:	android.view.ActionMode public abstract CharSequence getTitle () Returns the current title of this action mode. Returns Title text
	2:	android.view.MenuItem public abstract CharSequence getTitle () Retrieve the current title of the item. Returns The title.
	3:	android.preference.Preference public CharSequence getTitle () Returns the title of this Preference. Returns The title. See Also setTitle(CharSequence)
	4:	android.preference.PreferenceActivity.Header public CharSequence getTitle (Resources res) Return the currently set title. If titleRes is set, this resource is loaded from res and returned. Otherwise title is returned.
	5:	android.app.ActionBar public abstract CharSequence getTitle () Returns the current ActionBar title in standard mode. Returns null if getNavigationMode() would not return NAVIGATION_MODE_STANDARD. Returns The current ActionBar title or null.
	6:	android.support.v7.app.ActionBar public abstract CharSequence getTitle () Returns the current ActionBar title in standard mode. Returns null if getNavigationMode() would not return NAVIGATION_MODE_STANDARD. Returns The current ActionBar title or null.
	7:	android.support.v7.app.ActionBarImplJB public CharSequence getTitle () Returns the current ActionBar title in standard mode. Returns null if getNavigationMode() would not return NAVIGATION_MODE_STANDARD. Returns The current ActionBar title or null.
	8:	android.content.RestrictionEntry public String getTitle () Returns the user-visible title for the entry, if any. Returns the user-visible title for the entry, null if none was set earlier.
	9:	android.support.v7.app.ActionBarImplJB public void setTitle (CharSequence title) Set the action bar's title. This will only be displayed if DISPLAY_SHOW_TITLE is set. Parameters title Title to set
setTitle
Sets the title of the Displayable
	0:	android.preference.Preference public void setTitle (CharSequence title) Sets the title for this Preference with a CharSequence. This title will be placed into the ID title within the View created by onCreateView(ViewGroup). Parameters title The title for this Preference.
	1:	android.content.RestrictionEntry public void setTitle (String title) Sets the user-visible title for the entry. Parameters title the user-visible title for the entry.
	2:	android.support.v7.app.ActionBarImplJB public void setTitle (CharSequence title) Set the action bar's title. This will only be displayed if DISPLAY_SHOW_TITLE is set. Parameters title Title to set
	3:	android.app.AlertDialog public void setTitle (CharSequence title) Set the title text for this dialog's window. Parameters title The new text to display in the title.
	4:	android.app.Dialog public void setTitle (CharSequence title) Set the title text for this dialog's window. Parameters title The new text to display in the title.
	5:	android.preference.Preference public void setTitle (int titleResId) Sets the title for this Preference with a resource ID. Parameters titleResId The title as a resource ID. See Also setTitle(CharSequence)
	6:	android.app.ActionBar public abstract void setTitle (CharSequence title) Set the action bar's title. This will only be displayed if DISPLAY_SHOW_TITLE is set. Parameters title Title to set See Also setTitle(int) setDisplayOptions(int, int)
	7:	android.support.v7.app.ActionBar public abstract void setTitle (CharSequence title) Set the action bar's title. This will only be displayed if DISPLAY_SHOW_TITLE is set. Parameters title Title to set See Also setTitle(int) setDisplayOptions(int, int)
	8:	android.app.ActionBar public abstract void setTitle (int resId) Set the action bar's title. This will only be displayed if DISPLAY_SHOW_TITLE is set. Parameters resId Resource ID of title string to set See Also setTitle(CharSequence) setDisplayOptions(int, int)
	9:	android.support.v7.app.ActionBar public abstract void setTitle (int resId) Set the action bar's title. This will only be displayed if DISPLAY_SHOW_TITLE is set. Parameters resId Resource ID of title string to set See Also setTitle(CharSequence) setDisplayOptions(int, int)
getTicker
Gets the ticker used by this Displayable
	0:	java.util.logging.Handler public Formatter getFormatter () Gets the formatter used by this handler to format the logging messages. Returns the formatter used by this handler (possibly null).
	1:	java.util.logging.Handler public String getEncoding () Gets the character encoding used by this handler, null for default encoding. Returns the character encoding used by this handler.
	2:	java.util.logging.Handler public ErrorManager getErrorManager () Gets the error manager used by this handler to report errors during logging. Returns the error manager used by this handler.
	3:	java.util.logging.Handler public Filter getFilter () Gets the filter used by this handler. Returns the filter used by this handler (possibly null).
	4:	java.util.logging.Logger public Filter getFilter () Gets the filter used by this logger. Returns the filter used by this logger, may be null.
	5:	java.net.CookieManager public CookieStore getCookieStore () Gets current cookie store. Returns the cookie store currently used by cookie manager.
	6:	java.text.DecimalFormat public Currency getCurrency () Returns the currency used by this decimal format. Returns the currency used by this decimal format. See Also getCurrency()
	7:	android.media.Rating public boolean hasHeart () Return whether the rating is "heart selected". Returns true if the rating is "heart selected", false if the rating is "heart unselected", if the rating style is not RATING_HEART or if it is unrated.
	8:	javax.net.ssl.HttpsURLConnection public HostnameVerifier getHostnameVerifier () Returns the hostname verifier used by this instance. Returns the hostname verifier used by this instance.
	9:	java.util.logging.Logger public ResourceBundle getResourceBundle () Gets the loaded resource bundle used by this logger to localize logging messages. If the value is null, the parent's resource bundle will be inherited. Returns the loaded resource bundle used by this logger.
setTicker
Sets a ticker for use with this Displayable, replacing any previous ticker
	0:	android.app.Notification.Builder public Notification.Builder setTicker (CharSequence tickerText) Set the "ticker" text which is displayed in the status bar when the notification first arrives. See Also tickerText
	1:	android.media.Rating public static Rating newHeartRating (boolean hasHeart) Return a Rating instance with a heart-based rating. Create and return a new Rating instance with a rating style of RATING_HEART, and a heart-based rating. Parameters hasHeart true for a "heart selected" rating, false for "heart unselected". Returns a new Rating instance.
	2:	android.app.Notification.Builder public Notification.Builder setTicker (CharSequence tickerText, RemoteViews views) Set the text that is displayed in the status bar when the notification first arrives, and also a RemoteViews object that may be displayed instead on some devices. See Also tickerText tickerView
	3:	android.support.v4.app.NotificationCompat.Builder public NotificationCompat.Builder setTicker (CharSequence tickerText) Set the text that is displayed in the status bar when the notification first arrives.
	4:	android.support.v4.app.NotificationCompat.Builder public NotificationCompat.Builder setTicker (CharSequence tickerText, RemoteViews views) Set the text that is displayed in the status bar when the notification first arrives, and also a RemoteViews object that may be displayed instead on some devices.
	5:	android.media.MediaExtractor public final void setDataSource (String path) Sets the data source (file-path or http URL) to use. Parameters path the path of the file, or the http URL of the stream When path refers to a local file, the file may actually be opened by a process other than the calling application. This implies that the pathname should be an absolute path (as any other process runs with unspecified current working directory), and that the pathname should reference a world-readable file. As an alternative, the application could first open the file for reading, and then use the file descriptor form setDataSource(FileDescriptor). Throws IOException
	6:	android.app.admin.DevicePolicyManager public void setMaximumFailedPasswordsForWipe (ComponentName admin, int num) Setting this to a value greater than zero enables a built-in policy that will perform a device wipe after too many incorrect device-unlock passwords have been entered. This built-in policy combines watching for failed passwords and wiping the device, and requires that you request both USES_POLICY_WATCH_LOGIN and USES_POLICY_WIPE_DATA}. To implement any other policy (e.g. wiping data for a particular application only, erasing or revoking credentials, or reporting the failure to a server), you should implement onPasswordFailed(Context, android.content.Intent) instead. Do not use this API, because if the maximum count is reached, the device will be wiped immediately, and your callback will not be invoked. Parameters admin Which DeviceAdminReceiver this request is associated with. num The number of failed password attempts at which point the device will wipe its data.
	7:	org.xml.sax.ErrorHandler public abstract void warning (SAXParseException exception) Receive notification of a warning. SAX parsers will use this method to report conditions that are not errors or fatal errors as defined by the XML recommendation. The default behaviour is to take no action. The SAX parser must continue to provide normal parsing events after invoking this method: it should still be possible for the application to process the document through to the end. Filters may use this method to report other, non-XML warnings as well. Parameters exception The warning information encapsulated in a SAX parse exception. Throws SAXException Any SAX exception, possibly wrapping another exception. See Also SAXParseException
	8:	android.media.MediaRecorder public void setCamera (Camera c) Sets a Camera to use for recording. Use this function to switch quickly between preview and capture mode without a teardown of the camera object. unlock() should be called before this. Must call before prepare(). Parameters c the Camera to use for recording
	9:	android.media.MediaPlayer public void setDataSource (String path) Sets the data source (file-path or http/rtsp URL) to use. Parameters path the path of the file, or the http/rtsp URL of the stream you want to play Throws IllegalStateException if it is called in an invalid state When path refers to a local file, the file may actually be opened by a process other than the calling application. This implies that the pathname should be an absolute path (as any other process runs with unspecified current working directory), and that the pathname should reference a world-readable file. As an alternative, the application could first open the file for reading, and then use the file descriptor form setDataSource(FileDescriptor). IOException IllegalArgumentException SecurityException
isShown
Checks if the Displayable is actually visible on the display
	0:	android.view.Gravity public static void applyDisplay (int gravity, Rect display, Rect inoutObj, int layoutDirection) Apply additional gravity behavior based on the overall "display" that an object exists in. This can be used after apply(int, int, int, Rect, int, int, Rect) to place the object within a visible display. By default this moves or clips the object to be visible in the display; the gravity flags DISPLAY_CLIP_HORIZONTAL and DISPLAY_CLIP_VERTICAL can be used to change this behavior. Parameters gravity Gravity constants to modify the placement within the display. display The rectangle of the display in which the object is being placed. inoutObj Supplies the current object position; returns with it modified if needed to fit in the display. layoutDirection The layout direction. See Also LAYOUT_DIRECTION_LTR LAYOUT_DIRECTION_RTL
	1:	android.support.v4.view.GravityCompat public static void applyDisplay (int gravity, Rect display, Rect inoutObj, int layoutDirection) Apply additional gravity behavior based on the overall "display" that an object exists in. This can be used after apply(int, int, int, Rect, int, int, Rect) to place the object within a visible display. By default this moves or clips the object to be visible in the display; the gravity flags DISPLAY_CLIP_HORIZONTAL and DISPLAY_CLIP_VERTICAL can be used to change this behavior. Parameters gravity Gravity constants to modify the placement within the display. display The rectangle of the display in which the object is being placed. inoutObj Supplies the current object position; returns with it modified if needed to fit in the display. layoutDirection The layout direction. See Also LAYOUT_DIRECTION_LTR LAYOUT_DIRECTION_RTL
	2:	android.view.Gravity public static void applyDisplay (int gravity, Rect display, Rect inoutObj) Apply additional gravity behavior based on the overall "display" that an object exists in. This can be used after apply(int, int, int, Rect, int, int, Rect) to place the object within a visible display. By default this moves or clips the object to be visible in the display; the gravity flags DISPLAY_CLIP_HORIZONTAL and DISPLAY_CLIP_VERTICAL can be used to change this behavior. Parameters gravity Gravity constants to modify the placement within the display. display The rectangle of the display in which the object is being placed. inoutObj Supplies the current object position; returns with it modified if needed to fit in the display.
	3:	android.hardware.display.DisplayManager public Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	4:	android.support.v4.hardware.display.DisplayManagerCompat public abstract Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	5:	android.app.Presentation public Presentation (Context outerContext, Display display) Creates a new presentation that is attached to the specified display using the default theme. Parameters outerContext The context of the application that is showing the presentation. The presentation will create its own context (see getContext()) based on this context and information about the associated display. display The display to which the presentation should be attached.
	6:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	7:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	8:	android.support.v4.hardware.display.DisplayManagerCompat public abstract Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	9:	android.app.Presentation public Presentation (Context outerContext, Display display, int theme) Creates a new presentation that is attached to the specified display using the optionally specified theme. Parameters outerContext The context of the application that is showing the presentation. The presentation will create its own context (see getContext()) based on this context and information about the associated display. display The display to which the presentation should be attached. theme A style resource describing the theme to use for the window. See Style and Theme Resources for more information about defining and using styles. This theme is applied on top of the current theme in outerContext. If 0, the default presentation theme will be used.
addCommand
Adds a command to the Displayable
	0:	javax.sql.RowSet public abstract String getCommand () Gets the RowSet's command property. Returns a string containing the RowSet's command property. A command is a SQL statement which is executed to fetch required data into the RowSet.
	1:	java.util.concurrent.Executor public abstract void execute (Runnable command) Executes the given command at some time in the future. The command may execute in a new thread, in a pooled thread, or in the calling thread, at the discretion of the Executor implementation. Parameters command the runnable task Throws RejectedExecutionException if this task cannot be accepted for execution NullPointerException if command is null
	2:	android.location.LocationManager public boolean sendExtraCommand (String provider, String command, Bundle extras) Sends additional commands to a location provider. Can be used to support provider specific extensions to the Location Manager API Parameters provider name of the location provider. command name of the command to send to the provider. extras optional arguments for the command (or null). The provider may optionally fill the extras Bundle with results from the command. Returns true if the command succeeds.
	3:	android.bluetooth.BluetoothHeadset public boolean sendVendorSpecificResultCode (BluetoothDevice device, String command, String arg) Sends a vendor-specific unsolicited result code to the headset. The actual string to be sent is command + ": " + arg. For example, if command is VENDOR_RESULT_CODE_COMMAND_ANDROID and arg is "0", the string "+ANDROID: 0" will be sent. Currently only VENDOR_RESULT_CODE_COMMAND_ANDROID is allowed as command. Requires BLUETOOTH permission. Parameters device Bluetooth headset. command A vendor-specific command. arg The argument that will be attached to the command. Returns false if there is no headset connected, or if the command is not an allowed vendor-specific unsolicited result code, or on error. true otherwise. Throws IllegalArgumentException if command is null.
	4:	java.util.concurrent.ScheduledThreadPoolExecutor public void execute (Runnable command) Executes command with zero required delay. This has effect equivalent to schedule(command, 0, anyUnit). Note that inspections of the queue and of the list returned by shutdownNow will access the zero-delayed ScheduledFuture, not the command itself. A consequence of the use of ScheduledFuture objects is that afterExecute is always called with a null second Throwable argument, even if the command terminated abruptly. Instead, the Throwable thrown by such a task can be obtained via get(). Parameters command the task to execute Throws RejectedExecutionException at discretion of RejectedExecutionHandler, if the task cannot be accepted for execution because the executor has been shut down NullPointerException
	5:	java.lang.ProcessBuilder public ProcessBuilder (List<String> command) Constructs a new ProcessBuilder instance with the specified operating system program and its arguments. Note that the list passed to this constructor is not copied, so any subsequent updates to it are reflected in this instance's state. Parameters command the requested operating system program and its arguments. Throws NullPointerException if command is null.
	6:	java.lang.Compiler public static Object command (Object cmd) Executes an operation according to the specified command object. This method is the low-level interface to the JIT compiler. It may return any object or null if no JIT compiler is available. Returns null on Android, whether or not the system has a JIT. Parameters cmd the command object for the JIT compiler. Returns the result of executing command or null.
	7:	java.sql.PreparedStatement public abstract void addBatch () Add a set of parameters to the PreparedStatement's command batch. Throws SQLException if a database error happens.
	8:	java.sql.BatchUpdateException public int[] getUpdateCounts () Gets the update count array giving status information for every command that was attempted in the batch. If a batch update command fails and a BatchUpdateException is thrown, the JDBC driver may continue processing the remaining commands in the batch. If the driver does so, the array returned by BatchUpdateException.getUpdateCounts has an element for every command in the batch, not only those that executed successfully. In this case, the array element for any command which encountered a problem is set to Statement.EXECUTE_FAILED. Returns an array that contains the successful update counts, before this exception was thrown. Alternatively, if the driver continues to process commands following an error, for each successive command there is a corresponding element in the array giving one of the following status values: the number of successful updates Statement.SUCCESS_NO_INFO indicating that the command completed successfully, but the amount of altered rows is unknown. Statement.EXECUTE_FAILED indicating that the command was unsuccessful.
	9:	android.view.inputmethod.InputMethodSession public abstract void appPrivateCommand (String action, Bundle data) Process a private command sent from the application to the input method. This can be used to provide domain-specific features that are only known between certain input methods and their clients. Parameters action Name of the command to be performed. This must be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting commands. data Any data to include with the command.
removeCommand
Removes a command from the Displayable
	0:	android.location.LocationManager public boolean sendExtraCommand (String provider, String command, Bundle extras) Sends additional commands to a location provider. Can be used to support provider specific extensions to the Location Manager API Parameters provider name of the location provider. command name of the command to send to the provider. extras optional arguments for the command (or null). The provider may optionally fill the extras Bundle with results from the command. Returns true if the command succeeds.
	1:	javax.sql.RowSet public abstract String getCommand () Gets the RowSet's command property. Returns a string containing the RowSet's command property. A command is a SQL statement which is executed to fetch required data into the RowSet.
	2:	java.sql.BatchUpdateException public int[] getUpdateCounts () Gets the update count array giving status information for every command that was attempted in the batch. If a batch update command fails and a BatchUpdateException is thrown, the JDBC driver may continue processing the remaining commands in the batch. If the driver does so, the array returned by BatchUpdateException.getUpdateCounts has an element for every command in the batch, not only those that executed successfully. In this case, the array element for any command which encountered a problem is set to Statement.EXECUTE_FAILED. Returns an array that contains the successful update counts, before this exception was thrown. Alternatively, if the driver continues to process commands following an error, for each successive command there is a corresponding element in the array giving one of the following status values: the number of successful updates Statement.SUCCESS_NO_INFO indicating that the command completed successfully, but the amount of altered rows is unknown. Statement.EXECUTE_FAILED indicating that the command was unsuccessful.
	3:	java.util.concurrent.Executor public abstract void execute (Runnable command) Executes the given command at some time in the future. The command may execute in a new thread, in a pooled thread, or in the calling thread, at the discretion of the Executor implementation. Parameters command the runnable task Throws RejectedExecutionException if this task cannot be accepted for execution NullPointerException if command is null
	4:	android.view.inputmethod.InputMethodSession public abstract void appPrivateCommand (String action, Bundle data) Process a private command sent from the application to the input method. This can be used to provide domain-specific features that are only known between certain input methods and their clients. Parameters action Name of the command to be performed. This must be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting commands. data Any data to include with the command.
	5:	java.util.concurrent.ScheduledExecutorService public abstract ScheduledFuture<?> schedule (Runnable command, long delay, TimeUnit unit) Creates and executes a one-shot action that becomes enabled after the given delay. Parameters command the task to execute delay the time from now to delay execution unit the time unit of the delay parameter Returns a ScheduledFuture representing pending completion of the task and whose get() method will return null upon completion Throws RejectedExecutionException if the task cannot be scheduled for execution NullPointerException if command is null
	6:	android.view.inputmethod.InputConnection public abstract boolean performPrivateCommand (String action, Bundle data) API to send private commands from an input method to its connected editor. This can be used to provide domain-specific features that are only known between certain input methods and their clients. Note that because the InputConnection protocol is asynchronous, you have no way to get a result back or know if the client understood the command; you can use the information in EditorInfo to determine if a client supports a particular command. Parameters action Name of the command to be performed. This must be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting commands. data Any data to include with the command. Returns true if the command was sent (whether or not the associated editor understood it), false if the input connection is no longer valid.
	7:	android.view.inputmethod.InputConnectionWrapper public boolean performPrivateCommand (String action, Bundle data) API to send private commands from an input method to its connected editor. This can be used to provide domain-specific features that are only known between certain input methods and their clients. Note that because the InputConnection protocol is asynchronous, you have no way to get a result back or know if the client understood the command; you can use the information in EditorInfo to determine if a client supports a particular command. Parameters action Name of the command to be performed. This must be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting commands. data Any data to include with the command. Returns true if the command was sent (whether or not the associated editor understood it), false if the input connection is no longer valid.
	8:	android.bluetooth.BluetoothHeadset public boolean sendVendorSpecificResultCode (BluetoothDevice device, String command, String arg) Sends a vendor-specific unsolicited result code to the headset. The actual string to be sent is command + ": " + arg. For example, if command is VENDOR_RESULT_CODE_COMMAND_ANDROID and arg is "0", the string "+ANDROID: 0" will be sent. Currently only VENDOR_RESULT_CODE_COMMAND_ANDROID is allowed as command. Requires BLUETOOTH permission. Parameters device Bluetooth headset. command A vendor-specific command. arg The argument that will be attached to the command. Returns false if there is no headset connected, or if the command is not an allowed vendor-specific unsolicited result code, or on error. true otherwise. Throws IllegalArgumentException if command is null.
	9:	java.util.concurrent.ScheduledThreadPoolExecutor public void execute (Runnable command) Executes command with zero required delay. This has effect equivalent to schedule(command, 0, anyUnit). Note that inspections of the queue and of the list returned by shutdownNow will access the zero-delayed ScheduledFuture, not the command itself. A consequence of the use of ScheduledFuture objects is that afterExecute is always called with a null second Throwable argument, even if the command terminated abruptly. Instead, the Throwable thrown by such a task can be obtained via get(). Parameters command the task to execute Throws RejectedExecutionException at discretion of RejectedExecutionHandler, if the task cannot be accepted for execution because the executor has been shut down NullPointerException
setCommandListener
Sets a listener for Commands to this Displayable, replacing any previous CommandListener
	0:	android.app.FragmentBreadCrumbs public void setOnBreadCrumbClickListener (FragmentBreadCrumbs.OnBreadCrumbClickListener listener) Sets a listener for clicks on the bread crumbs. This will be called before the default click action is performed. Parameters listener The new listener to set. Replaces any existing listener.
	1:	android.widget.AbsListView public void setRecyclerListener (AbsListView.RecyclerListener listener) Sets the recycler listener to be notified whenever a View is set aside in the recycler for later reuse. This listener can be used to free resources associated to the View. Parameters listener The recycler listener to be notified of views set aside in the recycler. See Also AbsListView.RecycleBin AbsListView.RecyclerListener
	2:	android.widget.Filter public final void filter (CharSequence constraint, Filter.FilterListener listener) Starts an asynchronous filtering operation. Calling this method cancels all previous non-executed filtering requests and posts a new filtering request that will be executed later. Upon completion, the listener is notified. Parameters constraint the constraint used to filter the data listener a listener notified upon completion of the operation See Also filter(CharSequence) performFiltering(CharSequence) publishResults(CharSequence, android.widget.Filter.FilterResults)
	3:	android.support.v7.media.RemotePlaybackClient public void setStatusCallback (RemotePlaybackClient.StatusCallback callback) Sets a callback that should receive status updates when the state of media sessions or media items created by this instance of the remote playback client changes. The callback should be set before the session is created or any play commands are issued. Parameters callback The callback to set. May be null to remove the previous callback.
	4:	android.sax.Element public void setEndElementListener (EndElementListener endElementListener) Sets a listener for the end of this element.
	5:	android.sax.Element public void setStartElementListener (StartElementListener startElementListener) Sets a listener for the start of this element.
	6:	android.view.LayoutInflater public void setFilter (LayoutInflater.Filter filter) Sets the LayoutInflater.Filter to by this LayoutInflater. If a view is attempted to be inflated which is not allowed by the LayoutInflater.Filter, the inflate(int, ViewGroup) call will throw an InflateException. This filter will replace any previous filter set on this LayoutInflater. Parameters filter The Filter which restricts the set of Views that are allowed to be inflated. This filter will replace any previous filter set on this LayoutInflater.
	7:	android.app.AlertDialog.Builder public AlertDialog.Builder setOnItemSelectedListener (AdapterView.OnItemSelectedListener listener) Sets a listener to be invoked when an item in the list is selected. Parameters listener The listener to be invoked. Returns This Builder object to allow for chaining of calls to set methods See Also setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener)
	8:	android.animation.Animator public void addPauseListener (Animator.AnimatorPauseListener listener) Adds a pause listener to this animator. Parameters listener the listener to be added to the current set of pause listeners for this animation.
	9:	android.animation.Animator public void removeListener (Animator.AnimatorListener listener) Removes a listener from the set listening to this animation. Parameters listener the listener to be removed from the current set of listeners for this animation.
getWidth
Gets the width in pixels of the displayable area available to the application
	0:	android.opengl.ETC1Util.ETC1Texture public int getWidth () Get the width of the texture in pixels. Returns the width of the texture in pixels.
	1:	android.graphics.NinePatch public int getWidth () Returns the intrinsic width, in pixels, of this NinePatch. This is equivalent to querying the width of the underlying bitmap returned by getBitmap().
	2:	android.widget.ListPopupWindow public int getWidth () Returns The width of the popup window in pixels.
	3:	android.media.Image public abstract int getWidth () The width of the image in pixels. For formats where some color channels are subsampled, this is the width of the largest-resolution plane.
	4:	android.media.ImageReader public int getWidth () The width of each Image, in pixels. ImageReader guarantees that all Images acquired from ImageReader (for example, with acquireNextImage()) will have the same dimensions as specified in newInstance(int, int, int, int). Returns the width of an Image
	5:	android.widget.PopupWindow public int getWidth () Return this popup's width MeasureSpec Returns the width MeasureSpec of the popup See Also setWidth(int)
	6:	android.graphics.Picture public int getWidth () Get the width of the picture as passed to beginRecording. This does not reflect (per se) the content of the picture.
	7:	android.graphics.Canvas public int getWidth () Returns the width of the current drawing layer Returns the width of the current drawing layer
	8:	java.util.IllegalFormatWidthException public int getWidth () Returns the width associated with the exception. Returns the width.
	9:	android.text.Layout public final int getWidth () Return the width of this layout.
getHeight
Gets the height in pixels of the displayable area available to the application
	0:	android.graphics.NinePatch public int getHeight () Returns the intrinsic height, in pixels, of this NinePatch. This is equivalent to querying the height of the underlying bitmap returned by getBitmap().
	1:	android.widget.ListPopupWindow public int getHeight () Returns The height of the popup window in pixels.
	2:	android.widget.PopupWindow public int getHeight () Return this popup's height MeasureSpec Returns the height MeasureSpec of the popup See Also setHeight(int)
	3:	android.media.Image public abstract int getHeight () The height of the image in pixels. For formats where some color channels are subsampled, this is the height of the largest-resolution plane.
	4:	android.inputmethodservice.Keyboard public int getHeight () Returns the total height of the keyboard Returns the total height of the keyboard
	5:	android.opengl.ETC1Util.ETC1Texture public int getHeight () Get the height of the texture in pixels. Returns the width of the texture in pixels.
	6:	android.media.ImageReader public int getHeight () The height of each Image, in pixels. ImageReader guarantees that all Images acquired from ImageReader (for example, with acquireNextImage()) will have the same dimensions as specified in newInstance(int, int, int, int). Returns the height of an Image
	7:	android.app.ActionBar public abstract int getHeight () Retrieve the current height of the ActionBar. Returns The ActionBar's height
	8:	android.support.v7.app.ActionBar public abstract int getHeight () Retrieve the current height of the ActionBar. Returns The ActionBar's height
	9:	android.support.v7.app.ActionBarImplJB public int getHeight () Retrieve the current height of the ActionBar. Returns The ActionBar's height
sizeChanged
The implementation calls this method when the available area of the Displayable has been changed
	0:	android.database.CursorWindow public boolean isBlob (int row, int column) This method was deprecated in API level 11. Use getType(int, int) instead. Returns true if the field at the specified row and column index has type FIELD_TYPE_BLOB or FIELD_TYPE_NULL. Parameters row The zero-based row index. column The zero-based column index. Returns True if the field has type FIELD_TYPE_BLOB or FIELD_TYPE_NULL.
	1:	android.database.CursorWindow public boolean isString (int row, int column) This method was deprecated in API level 11. Use getType(int, int) instead. Returns true if the field at the specified row and column index has type FIELD_TYPE_STRING or FIELD_TYPE_NULL. Parameters row The zero-based row index. column The zero-based column index. Returns True if the field has type FIELD_TYPE_STRING or FIELD_TYPE_NULL.
	2:	android.database.CursorWindow public boolean isFloat (int row, int column) This method was deprecated in API level 11. Use getType(int, int) instead. Returns true if the field at the specified row and column index has type FIELD_TYPE_FLOAT. Parameters row The zero-based row index. column The zero-based column index. Returns True if the field has type FIELD_TYPE_FLOAT.
	3:	android.database.CursorWindow public boolean isLong (int row, int column) This method was deprecated in API level 11. Use getType(int, int) instead. Returns true if the field at the specified row and column index has type FIELD_TYPE_INTEGER. Parameters row The zero-based row index. column The zero-based column index. Returns True if the field has type FIELD_TYPE_INTEGER.
	4:	android.database.CursorWindow public boolean isNull (int row, int column) This method was deprecated in API level 11. Use getType(int, int) instead. Returns true if the field at the specified row and column index has type FIELD_TYPE_NULL. Parameters row The zero-based row index. column The zero-based column index. Returns True if the field has type FIELD_TYPE_NULL.
	5:	javax.xml.datatype.Duration public abstract boolean isSet (DatatypeConstants.Field field) Checks if a field is set. A field of a duration object may or may not be present. This method can be used to test if a field is present. Parameters field one of the six Field constants (YEARS,MONTHS,DAYS,HOURS, MINUTES, or SECONDS.) Returns true if the field is present. false if not. Throws NullPointerException If the field parameter is null.
	6:	java.text.DateFormat.Field public int getCalendarField () Returns the Calendar field that this field represents. Returns the calendar field.
	7:	java.util.GregorianCalendar public void roll (int field, boolean increment) Increments or decrements the specified field and wraps the value of the field when it goes beyond the maximum or minimum value for the current date. Other fields will be adjusted as required to maintain a consistent date. For example, March 31 will roll to April 30 when rolling the month field. Parameters field the field to roll. increment true to increment the field, false to decrement. Throws IllegalArgumentException if an invalid field is specified.
	8:	java.lang.reflect.Field public String getName () Returns the name of this field. Returns the name of this field
	9:	android.inputmethodservice.InputMethodService public void onUpdateExtractingVisibility (EditorInfo ei) Called when the fullscreen-mode extracting editor info has changed, to determine whether the extracting (extract text and candidates) portion of the UI should be shown. The standard implementation hides or shows the extract area depending on whether it makes sense for the current editor. In particular, a TYPE_NULL input type or IME_FLAG_NO_EXTRACT_UI flag will turn off the extract area since there is no text to be shown.
