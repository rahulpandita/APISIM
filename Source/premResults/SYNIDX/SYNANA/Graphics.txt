drawString
(x,y)
(LEFT, HCENTER, RIGHT)
(TOP, BASELINE, BOTTOM)
OR
TOP | LEFT

Vertical centering of the text is not specified since it is not considered useful, it is hard to specify, and it is burdensome to implement
	0:	android.graphics.Rect public Rect (int left, int top, int right, int bottom) Create a new rectangle with the specified coordinates. Note: no range checking is performed, so the caller must ensure that left <= right and top <= bottom. Parameters left The X coordinate of the left side of the rectangle top The Y coordinate of the top of the rectangle right The X coordinate of the right side of the rectangle bottom The Y coordinate of the bottom of the rectangle
	1:	android.graphics.RectF public RectF (float left, float top, float right, float bottom) Create a new rectangle with the specified coordinates. Note: no range checking is performed, so the caller must ensure that left <= right and top <= bottom. Parameters left The X coordinate of the left side of the rectangle top The Y coordinate of the top of the rectangle right The X coordinate of the right side of the rectangle bottom The Y coordinate of the bottom of the rectangle
	2:	android.graphics.Rect public void set (int left, int top, int right, int bottom) Set the rectangle's coordinates to the specified values. Note: no range checking is performed, so it is up to the caller to ensure that left <= right and top <= bottom. Parameters left The X coordinate of the left side of the rectangle top The Y coordinate of the top of the rectangle right The X coordinate of the right side of the rectangle bottom The Y coordinate of the bottom of the rectangle
	3:	android.graphics.RectF public void set (float left, float top, float right, float bottom) Set the rectangle's coordinates to the specified values. Note: no range checking is performed, so it is up to the caller to ensure that left <= right and top <= bottom. Parameters left The X coordinate of the left side of the rectangle top The Y coordinate of the top of the rectangle right The X coordinate of the right side of the rectangle bottom The Y coordinate of the bottom of the rectangle
	4:	android.graphics.Rect public void sort () Swap top/bottom or left/right if there are flipped (i.e. left > right and/or top > bottom). This can be called if the edges are computed separately, and may have crossed over each other. If the edges are already correct (i.e. left <= right and top <= bottom) then nothing is done.
	5:	android.graphics.RectF public void sort () Swap top/bottom or left/right if there are flipped (i.e. left > right and/or top > bottom). This can be called if the edges are computed separately, and may have crossed over each other. If the edges are already correct (i.e. left <= right and top <= bottom) then nothing is done.
	6:	android.graphics.Rect public boolean intersect (int left, int top, int right, int bottom) If the rectangle specified by left,top,right,bottom intersects this rectangle, return true and set this rectangle to that intersection, otherwise return false and do not change this rectangle. No check is performed to see if either rectangle is empty. Note: To just test for intersection, use intersects(Rect, Rect). Parameters left The left side of the rectangle being intersected with this rectangle top The top of the rectangle being intersected with this rectangle right The right side of the rectangle being intersected with this rectangle. bottom The bottom of the rectangle being intersected with this rectangle. Returns true if the specified rectangle and this rectangle intersect (and this rectangle is then set to that intersection) else return false and do not change this rectangle.
	7:	android.graphics.RectF public boolean intersect (float left, float top, float right, float bottom) If the rectangle specified by left,top,right,bottom intersects this rectangle, return true and set this rectangle to that intersection, otherwise return false and do not change this rectangle. No check is performed to see if either rectangle is empty. Note: To just test for intersection, use intersects() Parameters left The left side of the rectangle being intersected with this rectangle top The top of the rectangle being intersected with this rectangle right The right side of the rectangle being intersected with this rectangle. bottom The bottom of the rectangle being intersected with this rectangle. Returns true if the specified rectangle and this rectangle intersect (and this rectangle is then set to that intersection) else return false and do not change this rectangle.
	8:	android.graphics.Rect public void union (int left, int top, int right, int bottom) Update this Rect to enclose itself and the specified rectangle. If the specified rectangle is empty, nothing is done. If this rectangle is empty it is set to the specified rectangle. Parameters left The left edge being unioned with this rectangle top The top edge being unioned with this rectangle right The right edge being unioned with this rectangle bottom The bottom edge being unioned with this rectangle
	9:	android.graphics.RectF public void union (float left, float top, float right, float bottom) Update this Rect to enclose itself and the specified rectangle. If the specified rectangle is empty, nothing is done. If this rectangle is empty it is set to the specified rectangle. Parameters left The left edge being unioned with this rectangle top The top edge being unioned with this rectangle right The right edge being unioned with this rectangle bottom The bottom edge being unioned with this rectangle
drawString

translate
Translates the origin of the graphics context to the point (x, y) in the current coordinate system
	0:	android.graphics.Path public void lineTo (float x, float y) Add a line from the last point to the specified point (x,y). If no moveTo() call has been made for this contour, the first point is automatically set to (0,0). Parameters x The x-coordinate of the end of a line y The y-coordinate of the end of a line
	1:	android.graphics.Path public void close () Close the current contour. If the current point is not equal to the first point of the contour, a line segment is automatically added.
	2:	android.graphics.Path public void rLineTo (float dx, float dy) Same as lineTo, but the coordinates are considered relative to the last point on this contour. If there is no previous point, then a moveTo(0,0) is inserted automatically. Parameters dx The amount to add to the x-coordinate of the previous point on this contour, to specify a line dy The amount to add to the y-coordinate of the previous point on this contour, to specify a line
	3:	android.graphics.Path public void setLastPoint (float dx, float dy) Sets the last point of the path. Parameters dx The new X coordinate for the last point dy The new Y coordinate for the last point
	4:	android.graphics.Rect public void union (int x, int y) Update this Rect to enclose itself and the [x,y] coordinate. There is no check to see that this rectangle is non-empty. Parameters x The x coordinate of the point to add to the rectangle y The y coordinate of the point to add to the rectangle
	5:	android.graphics.RectF public void union (float x, float y) Update this Rect to enclose itself and the [x,y] coordinate. There is no check to see that this rectangle is non-empty. Parameters x The x coordinate of the point to add to the rectangle y The y coordinate of the point to add to the rectangle
	6:	android.graphics.Rect public boolean contains (int x, int y) Returns true if (x,y) is inside the rectangle. The left and top are considered to be inside, while the right and bottom are not. This means that for a x,y to be contained: left <= x < right and top <= y < bottom. An empty rectangle never contains any point. Parameters x The X coordinate of the point being tested for containment y The Y coordinate of the point being tested for containment Returns true iff (x,y) are contained by the rectangle, where containment means left <= x < right and top <= y < bottom
	7:	android.graphics.RectF public boolean contains (float x, float y) Returns true if (x,y) is inside the rectangle. The left and top are considered to be inside, while the right and bottom are not. This means that for a x,y to be contained: left <= x < right and top <= y < bottom. An empty rectangle never contains any point. Parameters x The X coordinate of the point being tested for containment y The Y coordinate of the point being tested for containment Returns true iff (x,y) are contained by the rectangle, where containment means left <= x < right and top <= y < bottom
	8:	android.graphics.Path public void quadTo (float x1, float y1, float x2, float y2) Add a quadratic bezier from the last point, approaching control point (x1,y1), and ending at (x2,y2). If no moveTo() call has been made for this contour, the first point is automatically set to (0,0). Parameters x1 The x-coordinate of the control point on a quadratic curve y1 The y-coordinate of the control point on a quadratic curve x2 The x-coordinate of the end point on a quadratic curve y2 The y-coordinate of the end point on a quadratic curve
	9:	android.graphics.Path public void rQuadTo (float dx1, float dy1, float dx2, float dy2) Same as quadTo, but the coordinates are considered relative to the last point on this contour. If there is no previous point, then a moveTo(0,0) is inserted automatically. Parameters dx1 The amount to add to the x-coordinate of the last point on this contour, for the control point of a quadratic curve dy1 The amount to add to the y-coordinate of the last point on this contour, for the control point of a quadratic curve dx2 The amount to add to the x-coordinate of the last point on this contour, for the end point of a quadratic curve dy2 The amount to add to the y-coordinate of the last point on this contour, for the end point of a quadratic curve
getTranslateX
Gets the X coordinate of the translated origin of this graphics context
	0:	android.graphics.Canvas public void drawText (char[] text, int index, int count, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	1:	android.graphics.Canvas public void drawText (String text, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	2:	android.graphics.Path public void lineTo (float x, float y) Add a line from the last point to the specified point (x,y). If no moveTo() call has been made for this contour, the first point is automatically set to (0,0). Parameters x The x-coordinate of the end of a line y The y-coordinate of the end of a line
	3:	android.graphics.Canvas public void drawText (String text, int start, int end, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	4:	android.graphics.Paint public void getTextPath (String text, int start, int end, float x, float y, Path path) Return the path (outline) for the specified text. Note: just like Canvas.drawText, this will respect the Align setting in the paint. Parameters text The text to retrieve the path from start The first character in the text end 1 past the last charcter in the text x The x coordinate of the text's origin y The y coordinate of the text's origin path The path to receive the data describing the text. Must be allocated by the caller.
	5:	android.graphics.Paint public void getTextPath (char[] text, int index, int count, float x, float y, Path path) Return the path (outline) for the specified text. Note: just like Canvas.drawText, this will respect the Align setting in the paint. Parameters text The text to retrieve the path from index The index of the first character in text count The number of characterss starting with index x The x coordinate of the text's origin y The y coordinate of the text's origin path The path to receive the data describing the text. Must be allocated by the caller.
	6:	android.graphics.Canvas public void drawText (CharSequence text, int start, int end, float x, float y, Paint paint) Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint. The origin is interpreted based on the Align setting in the Paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of origin for where to draw the text y The y-coordinate of origin for where to draw the text paint The paint used for the text (e.g. color, size, style)
	7:	android.graphics.LinearGradient public LinearGradient (float x0, float y0, float x1, float y1, int color0, int color1, Shader.TileMode tile) Create a shader that draws a linear gradient along a line. Parameters x0 The x-coordinate for the start of the gradient line y0 The y-coordinate for the start of the gradient line x1 The x-coordinate for the end of the gradient line y1 The y-coordinate for the end of the gradient line color0 The color at the start of the gradient line. color1 The color at the end of the gradient line. tile The Shader tiling mode
	8:	android.graphics.Paint public void setTextAlign (Paint.Align align) Set the paint's text alignment. This controls how the text is positioned relative to its origin. LEFT align means that all of the text will be drawn to the right of its origin (i.e. the origin specifieds the LEFT edge of the text) and so on. Parameters align set the paint's Align value for drawing text.
	9:	android.graphics.LinearGradient public LinearGradient (float x0, float y0, float x1, float y1, int[] colors, float[] positions, Shader.TileMode tile) Create a shader that draws a linear gradient along a line. Parameters x0 The x-coordinate for the start of the gradient line y0 The y-coordinate for the start of the gradient line x1 The x-coordinate for the end of the gradient line y1 The y-coordinate for the end of the gradient line colors The colors to be distributed along the gradient line positions May be null. The relative positions [0..1] of each corresponding color in the colors array. If this is null, the the colors are distributed evenly along the gradient line. tile The Shader tiling mode
getTranslateY
Gets the Y coordinate of the translated origin of this graphics context
	0:	android.graphics.Canvas public void drawText (char[] text, int index, int count, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	1:	android.graphics.Canvas public void drawText (String text, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	2:	android.graphics.Canvas public void drawText (String text, int start, int end, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	3:	android.graphics.Paint public void setTextAlign (Paint.Align align) Set the paint's text alignment. This controls how the text is positioned relative to its origin. LEFT align means that all of the text will be drawn to the right of its origin (i.e. the origin specifieds the LEFT edge of the text) and so on. Parameters align set the paint's Align value for drawing text.
	4:	android.graphics.Paint public Paint.Align getTextAlign () Return the paint's Align value for drawing text. This controls how the text is positioned relative to its origin. LEFT align means that all of the text will be drawn to the right of its origin (i.e. the origin specifieds the LEFT edge of the text) and so on. Returns the paint's Align value for drawing text.
	5:	android.graphics.Path public void lineTo (float x, float y) Add a line from the last point to the specified point (x,y). If no moveTo() call has been made for this contour, the first point is automatically set to (0,0). Parameters x The x-coordinate of the end of a line y The y-coordinate of the end of a line
	6:	android.graphics.Paint public void getTextPath (String text, int start, int end, float x, float y, Path path) Return the path (outline) for the specified text. Note: just like Canvas.drawText, this will respect the Align setting in the paint. Parameters text The text to retrieve the path from start The first character in the text end 1 past the last charcter in the text x The x coordinate of the text's origin y The y coordinate of the text's origin path The path to receive the data describing the text. Must be allocated by the caller.
	7:	android.graphics.Paint public void getTextPath (char[] text, int index, int count, float x, float y, Path path) Return the path (outline) for the specified text. Note: just like Canvas.drawText, this will respect the Align setting in the paint. Parameters text The text to retrieve the path from index The index of the first character in text count The number of characterss starting with index x The x coordinate of the text's origin y The y coordinate of the text's origin path The path to receive the data describing the text. Must be allocated by the caller.
	8:	android.graphics.LinearGradient public LinearGradient (float x0, float y0, float x1, float y1, int color0, int color1, Shader.TileMode tile) Create a shader that draws a linear gradient along a line. Parameters x0 The x-coordinate for the start of the gradient line y0 The y-coordinate for the start of the gradient line x1 The x-coordinate for the end of the gradient line y1 The y-coordinate for the end of the gradient line color0 The color at the start of the gradient line. color1 The color at the end of the gradient line. tile The Shader tiling mode
	9:	android.graphics.Canvas public void drawText (CharSequence text, int start, int end, float x, float y, Paint paint) Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint. The origin is interpreted based on the Align setting in the Paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of origin for where to draw the text y The y-coordinate of origin for where to draw the text paint The paint used for the text (e.g. color, size, style)
getColor
Gets the current color
	0:	android.graphics.drawable.ColorDrawable public int getColor () Gets the drawable's color value. Returns int The color to draw.
	1:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	2:	android.graphics.Paint public int getColor () Return the paint's color. Note that the color is a 32bit value containing alpha as well as r,g,b. This 32bit value is not premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b. See the Color class for more details. Returns the paint's color (and alpha).
	3:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	4:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	5:	android.graphics.drawable.ColorDrawable public void setColor (int color) Sets the drawable's color value. This action will clobber the results of prior calls to setAlpha(int) on this object, which side-affected the underlying color. Parameters color The color to draw.
	6:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	7:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	8:	android.graphics.Color public static int blue (int color) Return the blue component of a color int. This is the same as saying color & 0xFF
	9:	android.graphics.Color public static int alpha (int color) Return the alpha component of a color int. This is the same as saying color >>> 24
getRedComponent
Gets the red component of the current color
	0:	android.graphics.Color public static int red (int color) Return the red component of a color int. This is the same as saying (color >> 16) & 0xFF
	1:	android.graphics.Color public static int rgb (int red, int green, int blue) Return a color-int from red, green, blue components. The alpha component is implicity 255 (fully opaque). These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	2:	android.graphics.Color public static int argb (int alpha, int red, int green, int blue) Return a color-int from alpha, red, green, blue components. These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters alpha Alpha component [0..255] of the color red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	3:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	4:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.graphics.ColorMatrix public void setRotate (int axis, float degrees) Set the rotation on a color axis by the specified values. axis=0 correspond to a rotation around the RED color axis=1 correspond to a rotation around the GREEN color axis=2 correspond to a rotation around the BLUE color
	6:	android.graphics.Paint public void setARGB (int a, int r, int g, int b) Helper to setColor(), that takes a,r,g,b and constructs the color int Parameters a The new alpha component (0..255) of the paint's color. r The new red component (0..255) of the paint's color. g The new green component (0..255) of the paint's color. b The new blue component (0..255) of the paint's color.
	7:	android.graphics.Color public static int green (int color) Return the green component of a color int. This is the same as saying (color >> 8) & 0xFF
	8:	android.graphics.Color public static int parseColor (String colorString) Parse the color string, and return the corresponding color-int. If the string cannot be parsed, throws an IllegalArgumentException exception. Supported formats are: #RRGGBB #AARRGGBB 'red', 'blue', 'green', 'black', 'white', 'gray', 'cyan', 'magenta', 'yellow', 'lightgray', 'darkgray', 'grey', 'lightgrey', 'darkgrey', 'aqua', 'fuschia', 'lime', 'maroon', 'navy', 'olive', 'purple', 'silver', 'teal'
	9:	android.graphics.Color public static void RGBToHSV (int red, int green, int blue, float[] hsv) Convert RGB components to HSV. hsv[0] is Hue [0 .. 360) hsv[1] is Saturation [0...1] hsv[2] is Value [0...1] Parameters red red component value [0..255] green green component value [0..255] blue blue component value [0..255] hsv 3 element array which holds the resulting HSV components.
getGreenComponent
Gets the green component of the current color
	0:	android.graphics.Color public static int green (int color) Return the green component of a color int. This is the same as saying (color >> 8) & 0xFF
	1:	android.graphics.Color public static int rgb (int red, int green, int blue) Return a color-int from red, green, blue components. The alpha component is implicity 255 (fully opaque). These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	2:	android.graphics.Color public static int argb (int alpha, int red, int green, int blue) Return a color-int from alpha, red, green, blue components. These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters alpha Alpha component [0..255] of the color red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	3:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	4:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.graphics.Paint public void setARGB (int a, int r, int g, int b) Helper to setColor(), that takes a,r,g,b and constructs the color int Parameters a The new alpha component (0..255) of the paint's color. r The new red component (0..255) of the paint's color. g The new green component (0..255) of the paint's color. b The new blue component (0..255) of the paint's color.
	6:	android.graphics.ColorMatrix public void setRotate (int axis, float degrees) Set the rotation on a color axis by the specified values. axis=0 correspond to a rotation around the RED color axis=1 correspond to a rotation around the GREEN color axis=2 correspond to a rotation around the BLUE color
	7:	android.graphics.Color public static int blue (int color) Return the blue component of a color int. This is the same as saying color & 0xFF
	8:	android.graphics.Color public static int red (int color) Return the red component of a color int. This is the same as saying (color >> 16) & 0xFF
	9:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
getBlueComponent
Gets the blue component of the current color
	0:	android.graphics.Color public static int blue (int color) Return the blue component of a color int. This is the same as saying color & 0xFF
	1:	android.graphics.Color public static int rgb (int red, int green, int blue) Return a color-int from red, green, blue components. The alpha component is implicity 255 (fully opaque). These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	2:	android.graphics.Color public static int argb (int alpha, int red, int green, int blue) Return a color-int from alpha, red, green, blue components. These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters alpha Alpha component [0..255] of the color red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	3:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	4:	android.graphics.ColorMatrix public void setRotate (int axis, float degrees) Set the rotation on a color axis by the specified values. axis=0 correspond to a rotation around the RED color axis=1 correspond to a rotation around the GREEN color axis=2 correspond to a rotation around the BLUE color
	5:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	6:	android.graphics.Paint public void setARGB (int a, int r, int g, int b) Helper to setColor(), that takes a,r,g,b and constructs the color int Parameters a The new alpha component (0..255) of the paint's color. r The new red component (0..255) of the paint's color. g The new green component (0..255) of the paint's color. b The new blue component (0..255) of the paint's color.
	7:	android.graphics.Color public static void RGBToHSV (int red, int green, int blue, float[] hsv) Convert RGB components to HSV. hsv[0] is Hue [0 .. 360) hsv[1] is Saturation [0...1] hsv[2] is Value [0...1] Parameters red red component value [0..255] green green component value [0..255] blue blue component value [0..255] hsv 3 element array which holds the resulting HSV components.
	8:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	9:	android.graphics.Color public static int green (int color) Return the green component of a color int. This is the same as saying (color >> 8) & 0xFF
getGrayScale
Gets the current grayscale value of the color being used for rendering operations
	0:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	1:	android.graphics.drawable.ColorDrawable public int getColor () Gets the drawable's color value. Returns int The color to draw.
	2:	android.graphics.Paint public void setColor (int color) Set the paint's color. Note that the color is an int containing alpha as well as r,g,b. This 32bit value is not premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b. See the Color class for more details. Parameters color The new color (including alpha) to set in the paint.
	3:	android.graphics.Paint public int getColor () Return the paint's color. Note that the color is a 32bit value containing alpha as well as r,g,b. This 32bit value is not premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b. See the Color class for more details. Returns the paint's color (and alpha).
	4:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	5:	android.graphics.drawable.ColorDrawable public void setColor (int color) Sets the drawable's color value. This action will clobber the results of prior calls to setAlpha(int) on this object, which side-affected the underlying color. Parameters color The color to draw.
	6:	android.graphics.drawable.Drawable public void setColorFilter (int color, PorterDuff.Mode mode) Specify a color and porterduff mode to be the colorfilter for this drawable.
	7:	android.graphics.drawable.GradientDrawable public void setStroke (int width, int color) Set the stroke width and color for the drawable. If width is zero, then no stroke is drawn. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters width The width in pixels of the stroke color The color of the stroke See Also mutate() setStroke(int, int, float, float)
	8:	android.graphics.drawable.GradientDrawable public void setColor (int argb) Changes this drawbale to use a single color instead of a gradient. Note: changing color will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the color. Parameters argb The color used to fill the shape See Also mutate() setColors(int[])
	9:	android.graphics.ColorMatrix public void setRotate (int axis, float degrees) Set the rotation on a color axis by the specified values. axis=0 correspond to a rotation around the RED color axis=1 correspond to a rotation around the GREEN color axis=2 correspond to a rotation around the BLUE color
setColor
Sets the current color to the specified RGB values
	0:	android.graphics.drawable.ColorDrawable public void setColor (int color) Sets the drawable's color value. This action will clobber the results of prior calls to setAlpha(int) on this object, which side-affected the underlying color. Parameters color The color to draw.
	1:	android.graphics.Paint public void setColor (int color) Set the paint's color. Note that the color is an int containing alpha as well as r,g,b. This 32bit value is not premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b. See the Color class for more details. Parameters color The new color (including alpha) to set in the paint.
	2:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	3:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	4:	android.graphics.drawable.GradientDrawable public void setColor (int argb) Changes this drawbale to use a single color instead of a gradient. Note: changing color will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the color. Parameters argb The color used to fill the shape See Also mutate() setColors(int[])
	5:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	6:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	7:	android.graphics.ColorMatrix public void setRotate (int axis, float degrees) Set the rotation on a color axis by the specified values. axis=0 correspond to a rotation around the RED color axis=1 correspond to a rotation around the GREEN color axis=2 correspond to a rotation around the BLUE color
	8:	android.graphics.Color public static int rgb (int red, int green, int blue) Return a color-int from red, green, blue components. The alpha component is implicity 255 (fully opaque). These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	9:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
setColor
Sets the current color to the specified RGB values
	0:	android.graphics.drawable.ColorDrawable public void setColor (int color) Sets the drawable's color value. This action will clobber the results of prior calls to setAlpha(int) on this object, which side-affected the underlying color. Parameters color The color to draw.
	1:	android.graphics.Paint public void setColor (int color) Set the paint's color. Note that the color is an int containing alpha as well as r,g,b. This 32bit value is not premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b. See the Color class for more details. Parameters color The new color (including alpha) to set in the paint.
	2:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	3:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	4:	android.graphics.drawable.GradientDrawable public void setColor (int argb) Changes this drawbale to use a single color instead of a gradient. Note: changing color will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the color. Parameters argb The color used to fill the shape See Also mutate() setColors(int[])
	5:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	6:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	7:	android.graphics.ColorMatrix public void setRotate (int axis, float degrees) Set the rotation on a color axis by the specified values. axis=0 correspond to a rotation around the RED color axis=1 correspond to a rotation around the GREEN color axis=2 correspond to a rotation around the BLUE color
	8:	android.graphics.Color public static int rgb (int red, int green, int blue) Return a color-int from red, green, blue components. The alpha component is implicity 255 (fully opaque). These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	9:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
setGrayScale
Sets the current grayscale to be used for all subsequent rendering operations
	0:	android.graphics.drawable.Drawable public Region getTransparentRegion () Returns a Region representing the part of the Drawable that is completely transparent. This can be used to perform drawing operations, identifying which parts of the target will not change when rendering the Drawable. The default implementation returns null, indicating no transparent region; subclasses can optionally override this to return an actual Region if they want to supply this optimization information, but it is not required that they do so. Returns Returns null if the Drawables has no transparent region to report, else a Region holding the parts of the Drawable's bounds that are transparent.
	1:	android.graphics.drawable.NinePatchDrawable public Region getTransparentRegion () Returns a Region representing the part of the Drawable that is completely transparent. This can be used to perform drawing operations, identifying which parts of the target will not change when rendering the Drawable. The default implementation returns null, indicating no transparent region; subclasses can optionally override this to return an actual Region if they want to supply this optimization information, but it is not required that they do so. Returns Returns null if the Drawables has no transparent region to report, else a Region holding the parts of the Drawable's bounds that are transparent.
	2:	android.graphics.Bitmap public boolean compress (Bitmap.CompressFormat format, int quality, OutputStream stream) Write a compressed version of the bitmap to the specified outputstream. If this returns true, the bitmap can be reconstructed by passing a corresponding inputstream to BitmapFactory.decodeStream(). Note: not all Formats support all bitmap configs directly, so it is possible that the returned bitmap from BitmapFactory could be in a different bitdepth, and/or may have lost per-pixel alpha (e.g. JPEG only supports opaque pixels). Parameters format The format of the compressed image quality Hint to the compressor, 0-100. 0 meaning compress for small size, 100 meaning compress for max quality. Some formats, like PNG which is lossless, will ignore the quality setting stream The outputstream to write the compressed data. Returns true if successfully compressed to the specified stream.
	3:	android.graphics.Canvas public int save () Saves the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Returns The value to pass to restoreToCount() to balance this save()
	4:	android.graphics.Bitmap public void setConfig (Bitmap.Config config) Convenience method for calling reconfigure(int, int, Config) with the current height and width. WARNING: this method should not be used on bitmaps currently used by the view system, see reconfigure(int, int, Config) for more details. See Also reconfigure(int, int, Config) setWidth(int) setHeight(int)
	5:	android.graphics.Bitmap public void setHeight (int height) Convenience method for calling reconfigure(int, int, Config) with the current width and config. WARNING: this method should not be used on bitmaps currently used by the view system, see reconfigure(int, int, Config) for more details. See Also reconfigure(int, int, Config) setWidth(int) setConfig(Config)
	6:	android.graphics.Bitmap public void setWidth (int width) Convenience method for calling reconfigure(int, int, Config) with the current height and config. WARNING: this method should not be used on bitmaps currently used by the view system, see reconfigure(int, int, Config) for more details. See Also reconfigure(int, int, Config) setHeight(int) setConfig(Config)
	7:	android.graphics.Matrix public void mapVectors (float[] vecs) Apply this matrix to the array of 2D vectors, and write the transformed vectors back into the array. Note: this method does not apply the translation associated with the matrix. Use mapPoints(float[]) if you want the translation to be applied. Parameters vecs The array [x0, y0, x1, y1, ...] of vectors to transform.
	8:	android.graphics.Canvas public int save (int saveFlags) Based on saveFlags, can save the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Parameters saveFlags flag bits that specify which parts of the Canvas state to save/restore Returns The value to pass to restoreToCount() to balance this save()
	9:	android.graphics.Canvas public void drawBitmapMesh (Bitmap bitmap, int meshWidth, int meshHeight, float[] verts, int vertOffset, int[] colors, int colorOffset, Paint paint) Draw the bitmap through the mesh, where mesh vertices are evenly distributed across the bitmap. There are meshWidth+1 vertices across, and meshHeight+1 vertices down. The verts array is accessed in row-major order, so that the first meshWidth+1 vertices are distributed across the top of the bitmap from left to right. A more general version of this method is drawVertices(). Parameters bitmap The bitmap to draw using the mesh meshWidth The number of columns in the mesh. Nothing is drawn if this is 0 meshHeight The number of rows in the mesh. Nothing is drawn if this is 0 verts Array of x,y pairs, specifying where the mesh should be drawn. There must be at least (meshWidth+1) * (meshHeight+1) * 2 + vertOffset values in the array vertOffset Number of verts elements to skip before drawing colors May be null. Specifies a color at each vertex, which is interpolated across the cell, and whose values are multiplied by the corresponding bitmap colors. If not null, there must be at least (meshWidth+1) * (meshHeight+1) + colorOffset values in the array. colorOffset Number of color elements to skip before drawing paint May be null. The paint used to draw the bitmap
getFont
Gets the current font
	0:	android.graphics.Paint public Typeface getTypeface () Get the paint's typeface object. The typeface object identifies which font to use when drawing or measuring text. Returns the paint's typeface (or null)
	1:	android.graphics.Paint public float descent () Return the distance below (positive) the baseline (descent) based on the current typeface and text size. Returns the distance below (positive) the baseline (descent) based on the current typeface and text size.
	2:	android.graphics.Paint public float ascent () Return the distance above (negative) the baseline (ascent) based on the current typeface and text size. Returns the distance above (negative) the baseline (ascent) based on the current typeface and text size.
	3:	android.graphics.Paint public float getFontSpacing () Return the recommend line spacing based on the current typeface and text size. Returns recommend line spacing based on the current typeface and text size.
	4:	android.graphics.Paint public Typeface setTypeface (Typeface typeface) Set or clear the typeface object. Pass null to clear any previous typeface. As a convenience, the parameter passed is also returned. Parameters typeface May be null. The typeface to be installed in the paint Returns typeface
	5:	android.graphics.Bitmap public int getDensity () Returns the density for this bitmap. The default density is the same density as the current display, unless the current application does not support different screen densities in which case it is DENSITY_DEFAULT. Note that compatibility mode is determined by the application that was initially loaded into a process -- applications that share the same process should all have the same compatibility, or ensure they explicitly set the density of their bitmaps appropriately. Returns A scaling factor of the default density or DENSITY_NONE if the scaling factor is unknown. See Also setDensity(int) DENSITY_DEFAULT densityDpi DENSITY_NONE
	6:	android.graphics.PathMeasure public boolean getPosTan (float distance, float[] pos, float[] tan) Pins distance to 0 <= distance <= getLength(), and then computes the corresponding position and tangent. Returns false if there is no path, or a zero-length path was specified, in which case position and tangent are unchanged. Parameters distance The distance along the current contour to sample pos If not null, eturns the sampled position (x==[0], y==[1]) tan If not null, returns the sampled tangent (x==[0], y==[1]) Returns false if there was no path associated with this measure object
	7:	android.graphics.Paint public void setTextLocale (Locale locale) Set the text locale. The text locale affects how the text is drawn for some languages. For example, if the locale is CHINESE or CHINA, then the text renderer will prefer to draw text using a Chinese font. Likewise, if the locale is JAPANESE or JAPAN, then the text renderer will prefer to draw text using a Japanese font. This distinction is important because Chinese and Japanese text both use many of the same Unicode code points but their appearance is subtly different for each language. By default, the text locale is initialized to the system locale (as returned by getDefault()). This assumes that the text to be rendered will most likely be in the user's preferred language. If the actual language of the text is known, then it can be provided to the text renderer using this method. The text renderer may attempt to guess the language script based on the contents of the text to be drawn independent of the text locale here. Specifying the text locale just helps it do a better job in certain ambiguous cases Parameters locale the paint's locale value for drawing text, must not be null.
	8:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	9:	android.graphics.Canvas public boolean clipRect (int left, int top, int right, int bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
setStrokeStyle
Sets the stroke style used for drawing lines, arcs, rectangles, and rounded rectangles
	0:	android.graphics.Paint public Paint.Cap getStrokeCap () Return the paint's Cap, controlling how the start and end of stroked lines and paths are treated. Returns the line cap style for the paint, used whenever the paint's style is Stroke or StrokeAndFill.
	1:	android.graphics.Paint public Paint.Style getStyle () Return the paint's style, used for controlling how primitives' geometries are interpreted (except for drawBitmap, which always assumes FILL_STYLE). Returns the paint's style setting (Fill, Stroke, StrokeAndFill)
	2:	android.graphics.Paint public void setStrokeWidth (float width) Set the width for stroking. Pass 0 to stroke in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Parameters width set the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	3:	android.graphics.drawable.GradientDrawable public void setStroke (int width, int color, float dashWidth, float dashGap) Set the stroke width and color for the drawable. If width is zero, then no stroke is drawn. This method can also be used to dash the stroke. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters width The width in pixels of the stroke color The color of the stroke dashWidth The length in pixels of the dashes, set to 0 to disable dashes dashGap The gap in pixels between dashes See Also mutate() setStroke(int, int)
	4:	android.graphics.PathDashPathEffect public PathDashPathEffect (Path shape, float advance, float phase, PathDashPathEffect.Style style) Dash the drawn path by stamping it with the specified shape. This only applies to drawings when the paint's style is STROKE or STROKE_AND_FILL. If the paint's style is FILL, then this effect is ignored. The paint's strokeWidth does not affect the results. Parameters shape The path to stamp along advance spacing between each stamp of shape phase amount to offset before the first shape is stamped style how to transform the shape at each position as it is stamped
	5:	android.graphics.DashPathEffect public DashPathEffect (float[] intervals, float phase) The intervals array must contain an even number of entries (>=2), with the even indices specifying the "on" intervals, and the odd indices specifying the "off" intervals. phase is an offset into the intervals array (mod the sum of all of the intervals). The intervals array controls the length of the dashes. The paint's strokeWidth controls the thickness of the dashes. Note: this patheffect only affects drawing with the paint's style is set to STROKE or FILL_AND_STROKE. It is ignored if the drawing is done with style == FILL. Parameters intervals array of ON and OFF distances phase offset into the intervals array
	6:	android.graphics.Paint public void setStrokeCap (Paint.Cap cap) Set the paint's Cap. Parameters cap set the paint's line cap style, used whenever the paint's style is Stroke or StrokeAndFill.
	7:	android.graphics.Paint public float getStrokeWidth () Return the width for stroking. A value of 0 strokes in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Returns the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	8:	android.graphics.Paint public float getStrokeMiter () Return the paint's stroke miter value. Used to control the behavior of miter joins when the joins angle is sharp. Returns the paint's miter limit, used whenever the paint's style is Stroke or StrokeAndFill.
	9:	android.graphics.Paint public void setStrokeJoin (Paint.Join join) Set the paint's Join. Parameters join set the paint's Join, used whenever the paint's style is Stroke or StrokeAndFill.
getStrokeStyle
Gets the stroke style used for drawing operations
	0:	android.graphics.Paint public Paint.Style getStyle () Return the paint's style, used for controlling how primitives' geometries are interpreted (except for drawBitmap, which always assumes FILL_STYLE). Returns the paint's style setting (Fill, Stroke, StrokeAndFill)
	1:	android.graphics.Paint public void setStrokeWidth (float width) Set the width for stroking. Pass 0 to stroke in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Parameters width set the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	2:	android.graphics.Paint public Paint.Cap getStrokeCap () Return the paint's Cap, controlling how the start and end of stroked lines and paths are treated. Returns the line cap style for the paint, used whenever the paint's style is Stroke or StrokeAndFill.
	3:	android.graphics.drawable.GradientDrawable public void setStroke (int width, int color, float dashWidth, float dashGap) Set the stroke width and color for the drawable. If width is zero, then no stroke is drawn. This method can also be used to dash the stroke. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters width The width in pixels of the stroke color The color of the stroke dashWidth The length in pixels of the dashes, set to 0 to disable dashes dashGap The gap in pixels between dashes See Also mutate() setStroke(int, int)
	4:	android.graphics.PathDashPathEffect public PathDashPathEffect (Path shape, float advance, float phase, PathDashPathEffect.Style style) Dash the drawn path by stamping it with the specified shape. This only applies to drawings when the paint's style is STROKE or STROKE_AND_FILL. If the paint's style is FILL, then this effect is ignored. The paint's strokeWidth does not affect the results. Parameters shape The path to stamp along advance spacing between each stamp of shape phase amount to offset before the first shape is stamped style how to transform the shape at each position as it is stamped
	5:	android.graphics.Paint public void setStrokeCap (Paint.Cap cap) Set the paint's Cap. Parameters cap set the paint's line cap style, used whenever the paint's style is Stroke or StrokeAndFill.
	6:	android.graphics.Paint public float getStrokeWidth () Return the width for stroking. A value of 0 strokes in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Returns the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	7:	android.graphics.Paint public float getStrokeMiter () Return the paint's stroke miter value. Used to control the behavior of miter joins when the joins angle is sharp. Returns the paint's miter limit, used whenever the paint's style is Stroke or StrokeAndFill.
	8:	android.graphics.Paint public void setStrokeJoin (Paint.Join join) Set the paint's Join. Parameters join set the paint's Join, used whenever the paint's style is Stroke or StrokeAndFill.
	9:	android.graphics.DashPathEffect public DashPathEffect (float[] intervals, float phase) The intervals array must contain an even number of entries (>=2), with the even indices specifying the "on" intervals, and the odd indices specifying the "off" intervals. phase is an offset into the intervals array (mod the sum of all of the intervals). The intervals array controls the length of the dashes. The paint's strokeWidth controls the thickness of the dashes. Note: this patheffect only affects drawing with the paint's style is set to STROKE or FILL_AND_STROKE. It is ignored if the drawing is done with style == FILL. Parameters intervals array of ON and OFF distances phase offset into the intervals array
setFont
Sets the font for all subsequent text rendering operations
	0:	android.graphics.Paint public void setTextLocale (Locale locale) Set the text locale. The text locale affects how the text is drawn for some languages. For example, if the locale is CHINESE or CHINA, then the text renderer will prefer to draw text using a Chinese font. Likewise, if the locale is JAPANESE or JAPAN, then the text renderer will prefer to draw text using a Japanese font. This distinction is important because Chinese and Japanese text both use many of the same Unicode code points but their appearance is subtly different for each language. By default, the text locale is initialized to the system locale (as returned by getDefault()). This assumes that the text to be rendered will most likely be in the user's preferred language. If the actual language of the text is known, then it can be provided to the text renderer using this method. The text renderer may attempt to guess the language script based on the contents of the text to be drawn independent of the text locale here. Specifying the text locale just helps it do a better job in certain ambiguous cases Parameters locale the paint's locale value for drawing text, must not be null.
	1:	android.graphics.Paint public Typeface getTypeface () Get the paint's typeface object. The typeface object identifies which font to use when drawing or measuring text. Returns the paint's typeface (or null)
	2:	android.graphics.Paint public float measureText (char[] text, int index, int count) Return the width of the text. Parameters text The text to measure. Cannot be null. index The index of the first character to start measuring count THe number of characters to measure, beginning with start Returns The width of the text
	3:	android.graphics.Paint public float measureText (CharSequence text, int start, int end) Return the width of the text. Parameters text The text to measure start The index of the first character to start measuring end 1 beyond the index of the last character to measure Returns The width of the text
	4:	android.graphics.Paint public float measureText (String text, int start, int end) Return the width of the text. Parameters text The text to measure. Cannot be null. start The index of the first character to start measuring end 1 beyond the index of the last character to measure Returns The width of the text
	5:	android.graphics.Canvas public void drawText (String text, int start, int end, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	6:	android.graphics.Paint public Paint.Align getTextAlign () Return the paint's Align value for drawing text. This controls how the text is positioned relative to its origin. LEFT align means that all of the text will be drawn to the right of its origin (i.e. the origin specifieds the LEFT edge of the text) and so on. Returns the paint's Align value for drawing text.
	7:	android.graphics.Paint public void setTextAlign (Paint.Align align) Set the paint's text alignment. This controls how the text is positioned relative to its origin. LEFT align means that all of the text will be drawn to the right of its origin (i.e. the origin specifieds the LEFT edge of the text) and so on. Parameters align set the paint's Align value for drawing text.
	8:	android.graphics.Paint public void getTextPath (String text, int start, int end, float x, float y, Path path) Return the path (outline) for the specified text. Note: just like Canvas.drawText, this will respect the Align setting in the paint. Parameters text The text to retrieve the path from start The first character in the text end 1 past the last charcter in the text x The x coordinate of the text's origin y The y coordinate of the text's origin path The path to receive the data describing the text. Must be allocated by the caller.
	9:	android.graphics.Canvas public void drawText (CharSequence text, int start, int end, float x, float y, Paint paint) Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint. The origin is interpreted based on the Align setting in the Paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of origin for where to draw the text y The y-coordinate of origin for where to draw the text paint The paint used for the text (e.g. color, size, style)
getClipX
Gets the X offset of the current clipping area, relative to the coordinate system origin of this graphics context
	0:	android.graphics.Canvas public void drawText (char[] text, int index, int count, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	1:	android.graphics.Canvas public void drawText (String text, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	2:	android.graphics.Canvas public void drawText (String text, int start, int end, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	3:	android.graphics.Paint public void setTextAlign (Paint.Align align) Set the paint's text alignment. This controls how the text is positioned relative to its origin. LEFT align means that all of the text will be drawn to the right of its origin (i.e. the origin specifieds the LEFT edge of the text) and so on. Parameters align set the paint's Align value for drawing text.
	4:	android.graphics.Path public void lineTo (float x, float y) Add a line from the last point to the specified point (x,y). If no moveTo() call has been made for this contour, the first point is automatically set to (0,0). Parameters x The x-coordinate of the end of a line y The y-coordinate of the end of a line
	5:	android.graphics.Canvas public void drawText (CharSequence text, int start, int end, float x, float y, Paint paint) Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint. The origin is interpreted based on the Align setting in the Paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of origin for where to draw the text y The y-coordinate of origin for where to draw the text paint The paint used for the text (e.g. color, size, style)
	6:	android.graphics.LinearGradient public LinearGradient (float x0, float y0, float x1, float y1, int[] colors, float[] positions, Shader.TileMode tile) Create a shader that draws a linear gradient along a line. Parameters x0 The x-coordinate for the start of the gradient line y0 The y-coordinate for the start of the gradient line x1 The x-coordinate for the end of the gradient line y1 The y-coordinate for the end of the gradient line colors The colors to be distributed along the gradient line positions May be null. The relative positions [0..1] of each corresponding color in the colors array. If this is null, the the colors are distributed evenly along the gradient line. tile The Shader tiling mode
	7:	android.graphics.Paint public void getTextPath (String text, int start, int end, float x, float y, Path path) Return the path (outline) for the specified text. Note: just like Canvas.drawText, this will respect the Align setting in the paint. Parameters text The text to retrieve the path from start The first character in the text end 1 past the last charcter in the text x The x coordinate of the text's origin y The y coordinate of the text's origin path The path to receive the data describing the text. Must be allocated by the caller.
	8:	android.graphics.Paint public Paint.Align getTextAlign () Return the paint's Align value for drawing text. This controls how the text is positioned relative to its origin. LEFT align means that all of the text will be drawn to the right of its origin (i.e. the origin specifieds the LEFT edge of the text) and so on. Returns the paint's Align value for drawing text.
	9:	android.graphics.Paint public void getTextPath (char[] text, int index, int count, float x, float y, Path path) Return the path (outline) for the specified text. Note: just like Canvas.drawText, this will respect the Align setting in the paint. Parameters text The text to retrieve the path from index The index of the first character in text count The number of characterss starting with index x The x coordinate of the text's origin y The y coordinate of the text's origin path The path to receive the data describing the text. Must be allocated by the caller.
getClipY
Gets the Y offset of the current clipping area, relative to the coordinate system origin of this graphics context
	0:	android.graphics.Paint public void setTextAlign (Paint.Align align) Set the paint's text alignment. This controls how the text is positioned relative to its origin. LEFT align means that all of the text will be drawn to the right of its origin (i.e. the origin specifieds the LEFT edge of the text) and so on. Parameters align set the paint's Align value for drawing text.
	1:	android.graphics.Paint public Paint.Align getTextAlign () Return the paint's Align value for drawing text. This controls how the text is positioned relative to its origin. LEFT align means that all of the text will be drawn to the right of its origin (i.e. the origin specifieds the LEFT edge of the text) and so on. Returns the paint's Align value for drawing text.
	2:	android.graphics.Canvas public void drawText (String text, int start, int end, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	3:	android.graphics.Canvas public void drawText (char[] text, int index, int count, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	4:	android.graphics.Canvas public void drawText (String text, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	5:	android.graphics.LinearGradient public LinearGradient (float x0, float y0, float x1, float y1, int[] colors, float[] positions, Shader.TileMode tile) Create a shader that draws a linear gradient along a line. Parameters x0 The x-coordinate for the start of the gradient line y0 The y-coordinate for the start of the gradient line x1 The x-coordinate for the end of the gradient line y1 The y-coordinate for the end of the gradient line colors The colors to be distributed along the gradient line positions May be null. The relative positions [0..1] of each corresponding color in the colors array. If this is null, the the colors are distributed evenly along the gradient line. tile The Shader tiling mode
	6:	android.graphics.Canvas public void drawText (CharSequence text, int start, int end, float x, float y, Paint paint) Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint. The origin is interpreted based on the Align setting in the Paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of origin for where to draw the text y The y-coordinate of origin for where to draw the text paint The paint used for the text (e.g. color, size, style)
	7:	android.text.BoringLayout public int getEllipsisStart (int line) Return the offset of the first character to be ellipsized away, relative to the start of the line. (So 0 if the beginning of the line is ellipsized, not getLineStart().)
	8:	android.text.DynamicLayout public int getEllipsisStart (int line) Return the offset of the first character to be ellipsized away, relative to the start of the line. (So 0 if the beginning of the line is ellipsized, not getLineStart().)
	9:	android.text.Layout public abstract int getEllipsisStart (int line) Return the offset of the first character to be ellipsized away, relative to the start of the line. (So 0 if the beginning of the line is ellipsized, not getLineStart().)
getClipWidth
Gets the width of the current clipping area
	0:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	1:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	2:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	3:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
	4:	android.graphics.Canvas public boolean clipRect (int left, int top, int right, int bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	5:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	6:	android.graphics.Canvas public boolean clipRegion (Region region, Region.Op op) Modify the current clip with the specified region. Note that unlike clipRect() and clipPath() which transform their arguments by the current matrix, clipRegion() assumes its argument is already in the coordinate system of the current layer's bitmap, and so not transformation is performed. Parameters region The region to operate on the current clip, based on op op How the clip is modified Returns true if the resulting is non-empty
	7:	android.graphics.Region public boolean setPath (Path path, Region clip) Set the region to the area described by the path and clip. Return true if the resulting region is non-empty. This produces a region that is identical to the pixels that would be drawn by the path (with no antialiasing).
	8:	android.graphics.Canvas public boolean clipRegion (Region region) Intersect the current clip with the specified region. Note that unlike clipRect() and clipPath() which transform their arguments by the current matrix, clipRegion() assumes its argument is already in the coordinate system of the current layer's bitmap, and so not transformation is performed. Parameters region The region to operate on the current clip, based on op Returns true if the resulting is non-empty
	9:	android.graphics.Canvas public final Rect getClipBounds () Retrieve the bounds of the current clip (in local coordinates). Returns the clip bounds, or [0, 0, 0, 0] if the clip is empty.
getClipHeight
Gets the height of the current clipping area
	0:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	1:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	2:	android.graphics.Canvas public boolean clipRect (int left, int top, int right, int bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	3:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	4:	android.graphics.Canvas public int getHeight () Returns the height of the current drawing layer Returns the height of the current drawing layer
	5:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	6:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
	7:	android.graphics.Canvas public boolean clipRegion (Region region, Region.Op op) Modify the current clip with the specified region. Note that unlike clipRect() and clipPath() which transform their arguments by the current matrix, clipRegion() assumes its argument is already in the coordinate system of the current layer's bitmap, and so not transformation is performed. Parameters region The region to operate on the current clip, based on op op How the clip is modified Returns true if the resulting is non-empty
	8:	android.graphics.Region public boolean setPath (Path path, Region clip) Set the region to the area described by the path and clip. Return true if the resulting region is non-empty. This produces a region that is identical to the pixels that would be drawn by the path (with no antialiasing).
	9:	android.graphics.Canvas public boolean clipRegion (Region region) Intersect the current clip with the specified region. Note that unlike clipRect() and clipPath() which transform their arguments by the current matrix, clipRegion() assumes its argument is already in the coordinate system of the current layer's bitmap, and so not transformation is performed. Parameters region The region to operate on the current clip, based on op Returns true if the resulting is non-empty
clipRect
Intersects the current clip with the specified rectangle
	0:	android.graphics.Canvas public boolean clipRect (RectF rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	1:	android.graphics.Canvas public boolean clipRect (Rect rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	2:	android.graphics.Canvas public boolean clipRect (Rect rect, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. op How the clip is modified Returns true if the resulting clip is non-empty
	3:	android.graphics.Canvas public boolean clipRect (RectF rect, Region.Op op) Modify the current clip with the specified rectangle. Parameters rect The rect to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	4:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	5:	android.graphics.Canvas public boolean clipRect (int left, int top, int right, int bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	6:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	7:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	8:	android.graphics.Canvas public boolean clipPath (Path path) Intersect the current clip with the specified path. Parameters path The path to intersect with the current clip Returns true if the resulting is non-empty
	9:	android.graphics.Canvas public boolean clipPath (Path path, Region.Op op) Modify the current clip with the specified path. Parameters path The path to operate on the current clip op How the clip is modified Returns true if the resulting is non-empty
setClip
Sets the current clip to the rectangle specified by the given coordinates
	0:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	1:	android.graphics.Canvas public boolean clipRect (RectF rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	2:	android.graphics.Canvas public boolean clipRect (Rect rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	3:	android.graphics.Canvas public boolean clipRect (int left, int top, int right, int bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	4:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	5:	android.graphics.Canvas public boolean clipRect (Rect rect, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. op How the clip is modified Returns true if the resulting clip is non-empty
	6:	android.graphics.Canvas public boolean clipRect (RectF rect, Region.Op op) Modify the current clip with the specified rectangle. Parameters rect The rect to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	7:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	8:	android.content.ClipboardManager public void setPrimaryClip (ClipData clip) Sets the current primary clip on the clipboard. This is the clip that is involved in normal cut and paste operations. Parameters clip The clipped data item to set.
	9:	android.graphics.Canvas public final Rect getClipBounds () Retrieve the bounds of the current clip (in local coordinates). Returns the clip bounds, or [0, 0, 0, 0] if the clip is empty.
drawLine
Draws a line between the coordinates (x1,y1) and (x2,y2) using the current color and stroke style
	0:	android.graphics.Canvas public void drawLine (float startX, float startY, float stopX, float stopY, Paint paint) Draw a line segment with the specified start and stop x,y coordinates, using the specified paint. Note that since a line is always "framed", the Style is ignored in the paint. Degenerate lines (length is 0) will not be drawn. Parameters startX The x-coordinate of the start point of the line startY The y-coordinate of the start point of the line paint The paint used to draw the line
	1:	android.graphics.LinearGradient public LinearGradient (float x0, float y0, float x1, float y1, int color0, int color1, Shader.TileMode tile) Create a shader that draws a linear gradient along a line. Parameters x0 The x-coordinate for the start of the gradient line y0 The y-coordinate for the start of the gradient line x1 The x-coordinate for the end of the gradient line y1 The y-coordinate for the end of the gradient line color0 The color at the start of the gradient line. color1 The color at the end of the gradient line. tile The Shader tiling mode
	2:	android.graphics.Paint public Paint.Cap getStrokeCap () Return the paint's Cap, controlling how the start and end of stroked lines and paths are treated. Returns the line cap style for the paint, used whenever the paint's style is Stroke or StrokeAndFill.
	3:	android.graphics.drawable.GradientDrawable public void setStroke (int width, int color, float dashWidth, float dashGap) Set the stroke width and color for the drawable. If width is zero, then no stroke is drawn. This method can also be used to dash the stroke. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters width The width in pixels of the stroke color The color of the stroke dashWidth The length in pixels of the dashes, set to 0 to disable dashes dashGap The gap in pixels between dashes See Also mutate() setStroke(int, int)
	4:	android.graphics.Paint public void setStrokeCap (Paint.Cap cap) Set the paint's Cap. Parameters cap set the paint's line cap style, used whenever the paint's style is Stroke or StrokeAndFill.
	5:	org.apache.http.message.BasicLineFormatter public static final String formatRequestLine (RequestLine reqline, LineFormatter formatter) Formats a request line. Parameters reqline the request line to format formatter the formatter to use, or null for the default Returns the formatted request line
	6:	org.apache.http.message.BasicLineFormatter public static final String formatStatusLine (StatusLine statline, LineFormatter formatter) Formats a status line. Parameters statline the status line to format formatter the formatter to use, or null for the default Returns the formatted status line
	7:	android.text.BoringLayout public int getEllipsisStart (int line) Return the offset of the first character to be ellipsized away, relative to the start of the line. (So 0 if the beginning of the line is ellipsized, not getLineStart().)
	8:	android.text.DynamicLayout public int getEllipsisStart (int line) Return the offset of the first character to be ellipsized away, relative to the start of the line. (So 0 if the beginning of the line is ellipsized, not getLineStart().)
	9:	android.text.Layout public abstract int getEllipsisStart (int line) Return the offset of the first character to be ellipsized away, relative to the start of the line. (So 0 if the beginning of the line is ellipsized, not getLineStart().)
fillRect
Fills the specified rectangle with the current color
	0:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	1:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	2:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	3:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	4:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.graphics.Bitmap public void eraseColor (int c) Fills the bitmap's pixels with the specified Color. Throws IllegalStateException if the bitmap is not mutable.
	6:	android.graphics.PorterDuffColorFilter public PorterDuffColorFilter (int srcColor, PorterDuff.Mode mode) Create a colorfilter that uses the specified color and porter-duff mode. Parameters srcColor The source color used with the specified porter-duff mode mode The porter-duff mode that is applied
	7:	android.graphics.Paint public void setShadowLayer (float radius, float dx, float dy, int color) This draws a shadow layer below the main layer, with the specified offset and color, and blur radius. If radius is 0, then the shadow layer is removed.
	8:	android.graphics.drawable.ColorDrawable public void setColor (int color) Sets the drawable's color value. This action will clobber the results of prior calls to setAlpha(int) on this object, which side-affected the underlying color. Parameters color The color to draw.
	9:	android.graphics.ColorMatrix public void setRotate (int axis, float degrees) Set the rotation on a color axis by the specified values. axis=0 correspond to a rotation around the RED color axis=1 correspond to a rotation around the GREEN color axis=2 correspond to a rotation around the BLUE color
drawRect
Draws the outline of the specified rectangle using the current color and stroke style
	0:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	1:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	2:	android.graphics.drawable.GradientDrawable public void setStroke (int width, int color, float dashWidth, float dashGap) Set the stroke width and color for the drawable. If width is zero, then no stroke is drawn. This method can also be used to dash the stroke. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters width The width in pixels of the stroke color The color of the stroke dashWidth The length in pixels of the dashes, set to 0 to disable dashes dashGap The gap in pixels between dashes See Also mutate() setStroke(int, int)
	3:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	4:	android.graphics.drawable.GradientDrawable public void setStroke (int width, int color) Set the stroke width and color for the drawable. If width is zero, then no stroke is drawn. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters width The width in pixels of the stroke color The color of the stroke See Also mutate() setStroke(int, int, float, float)
	5:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	6:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	7:	android.graphics.drawable.ColorDrawable public void setColor (int color) Sets the drawable's color value. This action will clobber the results of prior calls to setAlpha(int) on this object, which side-affected the underlying color. Parameters color The color to draw.
	8:	android.graphics.drawable.Drawable public void setColorFilter (int color, PorterDuff.Mode mode) Specify a color and porterduff mode to be the colorfilter for this drawable.
	9:	android.graphics.drawable.ColorDrawable public int getColor () Gets the drawable's color value. Returns int The color to draw.
drawRoundRect
Draws the outline of the specified rounded corner rectangle using the current color and stroke style
	0:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	1:	android.graphics.drawable.GradientDrawable public void setStroke (int width, int color, float dashWidth, float dashGap) Set the stroke width and color for the drawable. If width is zero, then no stroke is drawn. This method can also be used to dash the stroke. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters width The width in pixels of the stroke color The color of the stroke dashWidth The length in pixels of the dashes, set to 0 to disable dashes dashGap The gap in pixels between dashes See Also mutate() setStroke(int, int)
	2:	android.graphics.drawable.GradientDrawable public void setStroke (int width, int color) Set the stroke width and color for the drawable. If width is zero, then no stroke is drawn. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters width The width in pixels of the stroke color The color of the stroke See Also mutate() setStroke(int, int, float, float)
	3:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	4:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	5:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	6:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	7:	android.graphics.drawable.ColorDrawable public void setColor (int color) Sets the drawable's color value. This action will clobber the results of prior calls to setAlpha(int) on this object, which side-affected the underlying color. Parameters color The color to draw.
	8:	android.graphics.drawable.Drawable public void setColorFilter (int color, PorterDuff.Mode mode) Specify a color and porterduff mode to be the colorfilter for this drawable.
	9:	android.graphics.AvoidXfermode public AvoidXfermode (int opColor, int tolerance, AvoidXfermode.Mode mode) This xfermode draws, or doesn't draw, based on the destination's distance from an op-color. There are two modes, and each mode interprets a tolerance value. Avoid: In this mode, drawing is allowed only on destination pixels that are different from the op-color. Tolerance near 0: avoid any colors even remotely similar to the op-color Tolerance near 255: avoid only colors nearly identical to the op-color Target: In this mode, drawing only occurs on destination pixels that are similar to the op-color Tolerance near 0: draw only on colors that are nearly identical to the op-color Tolerance near 255: draw on any colors even remotely similar to the op-color
fillRoundRect
Fills the specified rounded corner rectangle with the current color
	0:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	1:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	2:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	3:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	4:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.graphics.Bitmap public void eraseColor (int c) Fills the bitmap's pixels with the specified Color. Throws IllegalStateException if the bitmap is not mutable.
	6:	android.graphics.PorterDuffColorFilter public PorterDuffColorFilter (int srcColor, PorterDuff.Mode mode) Create a colorfilter that uses the specified color and porter-duff mode. Parameters srcColor The source color used with the specified porter-duff mode mode The porter-duff mode that is applied
	7:	android.graphics.Paint public void setShadowLayer (float radius, float dx, float dy, int color) This draws a shadow layer below the main layer, with the specified offset and color, and blur radius. If radius is 0, then the shadow layer is removed.
	8:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, float left, float top, Paint paint) Draw the specified bitmap, with its top/left corner at (x,y), using the specified paint, transformed by the current matrix. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. If the bitmap and canvas have different densities, this function will take care of automatically scaling the bitmap to draw at the same density as the canvas. Parameters bitmap The bitmap to be drawn left The position of the left side of the bitmap being drawn top The position of the top side of the bitmap being drawn paint The paint used to draw the bitmap (may be null)
	9:	android.graphics.drawable.ColorDrawable public void setColor (int color) Sets the drawable's color value. This action will clobber the results of prior calls to setAlpha(int) on this object, which side-affected the underlying color. Parameters color The color to draw.
fillArc
Fills a circular or elliptical arc covering the specified rectangle
	0:	android.graphics.Path public void addArc (RectF oval, float startAngle, float sweepAngle) Add the specified arc to the path as a new contour. Parameters oval The bounds of oval defining the shape and size of the arc startAngle Starting angle (in degrees) where the arc begins sweepAngle Sweep angle (in degrees) measured clockwise
	1:	android.graphics.Canvas public void drawArc (RectF oval, float startAngle, float sweepAngle, boolean useCenter, Paint paint) Draw the specified arc, which will be scaled to fit inside the specified oval. If the start angle is negative or >= 360, the start angle is treated as start angle modulo 360. If the sweep angle is >= 360, then the oval is drawn completely. Note that this differs slightly from SkPath::arcTo, which treats the sweep angle modulo 360. If the sweep angle is negative, the sweep angle is treated as sweep angle modulo 360 The arc is drawn clockwise. An angle of 0 degrees correspond to the geometric angle of 0 degrees (3 o'clock on a watch.) Parameters oval The bounds of oval used to define the shape and size of the arc startAngle Starting angle (in degrees) where the arc begins sweepAngle Sweep angle (in degrees) measured clockwise useCenter If true, include the center of the oval in the arc, and close it if it is being stroked. This will draw a wedge paint The paint used to draw the arc
	2:	android.graphics.drawable.shapes.ArcShape public ArcShape (float startAngle, float sweepAngle) ArcShape constructor. Parameters startAngle the angle (in degrees) where the arc begins sweepAngle the sweep angle (in degrees). Anything equal to or greater than 360 results in a complete circle/oval.
	3:	android.graphics.Path public void arcTo (RectF oval, float startAngle, float sweepAngle) Append the specified arc to the path as a new contour. If the start of the path is different from the path's current last point, then an automatic lineTo() is added to connect the current contour to the start of the arc. However, if the path is empty, then we call moveTo() with the first point of the arc. Parameters oval The bounds of oval defining shape and size of the arc startAngle Starting angle (in degrees) where the arc begins sweepAngle Sweep angle (in degrees) measured clockwise
	4:	android.graphics.Path public void arcTo (RectF oval, float startAngle, float sweepAngle, boolean forceMoveTo) Append the specified arc to the path as a new contour. If the start of the path is different from the path's current last point, then an automatic lineTo() is added to connect the current contour to the start of the arc. However, if the path is empty, then we call moveTo() with the first point of the arc. The sweep angle is tread mod 360. Parameters oval The bounds of oval defining shape and size of the arc startAngle Starting angle (in degrees) where the arc begins sweepAngle Sweep angle (in degrees) measured clockwise, treated mod 360. forceMoveTo If true, always begin a new contour with the arc
	5:	android.graphics.Canvas public void drawOval (RectF oval, Paint paint) Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint. Parameters oval The rectangle bounds of the oval to be drawn
	6:	android.graphics.Canvas public void drawRoundRect (RectF rect, float rx, float ry, Paint paint) Draw the specified round-rect using the specified paint. The roundrect will be filled or framed based on the Style in the paint. Parameters rect The rectangular bounds of the roundRect to be drawn rx The x-radius of the oval used to round the corners ry The y-radius of the oval used to round the corners paint The paint used to draw the roundRect
	7:	android.graphics.drawable.GradientDrawable public void setShape (int shape) Sets the type of shape used to draw the gradient. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters shape The desired shape for this drawable: LINE, OVAL, RECTANGLE or RING See Also mutate()
	8:	android.graphics.Path public void addOval (RectF oval, Path.Direction dir) Add a closed oval contour to the path Parameters oval The bounds of the oval to add as a closed contour to the path dir The direction to wind the oval's contour
	9:	android.graphics.Rect public boolean contains (int left, int top, int right, int bottom) Returns true iff the 4 specified sides of a rectangle are inside or equal to this rectangle. i.e. is this rectangle a superset of the specified rectangle. An empty rectangle never contains another rectangle. Parameters left The left side of the rectangle being tested for containment top The top of the rectangle being tested for containment right The right side of the rectangle being tested for containment bottom The bottom of the rectangle being tested for containment Returns true iff the the 4 specified sides of a rectangle are inside or equal to this rectangle
drawArc
Draws the outline of a circular or elliptical arc covering the specified rectangle, using the current color and stroke style
	0:	android.graphics.drawable.GradientDrawable public void setStroke (int width, int color, float dashWidth, float dashGap) Set the stroke width and color for the drawable. If width is zero, then no stroke is drawn. This method can also be used to dash the stroke. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters width The width in pixels of the stroke color The color of the stroke dashWidth The length in pixels of the dashes, set to 0 to disable dashes dashGap The gap in pixels between dashes See Also mutate() setStroke(int, int)
	1:	android.graphics.drawable.GradientDrawable public void setStroke (int width, int color) Set the stroke width and color for the drawable. If width is zero, then no stroke is drawn. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters width The width in pixels of the stroke color The color of the stroke See Also mutate() setStroke(int, int, float, float)
	2:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	3:	android.graphics.Canvas public void drawArc (RectF oval, float startAngle, float sweepAngle, boolean useCenter, Paint paint) Draw the specified arc, which will be scaled to fit inside the specified oval. If the start angle is negative or >= 360, the start angle is treated as start angle modulo 360. If the sweep angle is >= 360, then the oval is drawn completely. Note that this differs slightly from SkPath::arcTo, which treats the sweep angle modulo 360. If the sweep angle is negative, the sweep angle is treated as sweep angle modulo 360 The arc is drawn clockwise. An angle of 0 degrees correspond to the geometric angle of 0 degrees (3 o'clock on a watch.) Parameters oval The bounds of oval used to define the shape and size of the arc startAngle Starting angle (in degrees) where the arc begins sweepAngle Sweep angle (in degrees) measured clockwise useCenter If true, include the center of the oval in the arc, and close it if it is being stroked. This will draw a wedge paint The paint used to draw the arc
	4:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	5:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	6:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	7:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	8:	android.graphics.Canvas public void drawOval (RectF oval, Paint paint) Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint. Parameters oval The rectangle bounds of the oval to be drawn
	9:	android.graphics.drawable.ColorDrawable public void setColor (int color) Sets the drawable's color value. This action will clobber the results of prior calls to setAlpha(int) on this object, which side-affected the underlying color. Parameters color The color to draw.
drawString
Draws the specified String using the current font and color
	0:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	1:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	2:	android.graphics.drawable.ColorDrawable public void setColor (int color) Sets the drawable's color value. This action will clobber the results of prior calls to setAlpha(int) on this object, which side-affected the underlying color. Parameters color The color to draw.
	3:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	4:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	6:	android.graphics.Color public static int parseColor (String colorString) Parse the color string, and return the corresponding color-int. If the string cannot be parsed, throws an IllegalArgumentException exception. Supported formats are: #RRGGBB #AARRGGBB 'red', 'blue', 'green', 'black', 'white', 'gray', 'cyan', 'magenta', 'yellow', 'lightgray', 'darkgray', 'grey', 'lightgrey', 'darkgrey', 'aqua', 'fuschia', 'lime', 'maroon', 'navy', 'olive', 'purple', 'silver', 'teal'
	7:	android.graphics.drawable.ColorDrawable public int getColor () Gets the drawable's color value. Returns int The color to draw.
	8:	android.graphics.Canvas public void drawText (String text, int start, int end, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	9:	android.graphics.Canvas public void drawText (String text, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
drawSubstring
Draws the specified String using the current font and color
	0:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	1:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	2:	android.graphics.drawable.ColorDrawable public void setColor (int color) Sets the drawable's color value. This action will clobber the results of prior calls to setAlpha(int) on this object, which side-affected the underlying color. Parameters color The color to draw.
	3:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	4:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	6:	android.graphics.drawable.ColorDrawable public int getColor () Gets the drawable's color value. Returns int The color to draw.
	7:	android.graphics.Paint public void setShadowLayer (float radius, float dx, float dy, int color) This draws a shadow layer below the main layer, with the specified offset and color, and blur radius. If radius is 0, then the shadow layer is removed.
	8:	android.graphics.drawable.Drawable public void setColorFilter (int color, PorterDuff.Mode mode) Specify a color and porterduff mode to be the colorfilter for this drawable.
	9:	android.graphics.AvoidXfermode public AvoidXfermode (int opColor, int tolerance, AvoidXfermode.Mode mode) This xfermode draws, or doesn't draw, based on the destination's distance from an op-color. There are two modes, and each mode interprets a tolerance value. Avoid: In this mode, drawing is allowed only on destination pixels that are different from the op-color. Tolerance near 0: avoid any colors even remotely similar to the op-color Tolerance near 255: avoid only colors nearly identical to the op-color Target: In this mode, drawing only occurs on destination pixels that are similar to the op-color Tolerance near 0: draw only on colors that are nearly identical to the op-color Tolerance near 255: draw on any colors even remotely similar to the op-color
drawChar
Draws the specified character using the current font and color
	0:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	1:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	2:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	3:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	4:	android.graphics.drawable.ColorDrawable public void setColor (int color) Sets the drawable's color value. This action will clobber the results of prior calls to setAlpha(int) on this object, which side-affected the underlying color. Parameters color The color to draw.
	5:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	6:	android.graphics.Paint public void setShadowLayer (float radius, float dx, float dy, int color) This draws a shadow layer below the main layer, with the specified offset and color, and blur radius. If radius is 0, then the shadow layer is removed.
	7:	android.graphics.PorterDuffColorFilter public PorterDuffColorFilter (int srcColor, PorterDuff.Mode mode) Create a colorfilter that uses the specified color and porter-duff mode. Parameters srcColor The source color used with the specified porter-duff mode mode The porter-duff mode that is applied
	8:	android.graphics.drawable.Drawable public void setColorFilter (int color, PorterDuff.Mode mode) Specify a color and porterduff mode to be the colorfilter for this drawable.
	9:	android.graphics.AvoidXfermode public AvoidXfermode (int opColor, int tolerance, AvoidXfermode.Mode mode) This xfermode draws, or doesn't draw, based on the destination's distance from an op-color. There are two modes, and each mode interprets a tolerance value. Avoid: In this mode, drawing is allowed only on destination pixels that are different from the op-color. Tolerance near 0: avoid any colors even remotely similar to the op-color Tolerance near 255: avoid only colors nearly identical to the op-color Target: In this mode, drawing only occurs on destination pixels that are similar to the op-color Tolerance near 0: draw only on colors that are nearly identical to the op-color Tolerance near 255: draw on any colors even remotely similar to the op-color
drawChars
Draws the specified characters using the current font and color
	0:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	1:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	2:	android.graphics.drawable.ColorDrawable public void setColor (int color) Sets the drawable's color value. This action will clobber the results of prior calls to setAlpha(int) on this object, which side-affected the underlying color. Parameters color The color to draw.
	3:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	4:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	6:	android.graphics.Paint public void setShadowLayer (float radius, float dx, float dy, int color) This draws a shadow layer below the main layer, with the specified offset and color, and blur radius. If radius is 0, then the shadow layer is removed.
	7:	android.graphics.drawable.ColorDrawable public int getColor () Gets the drawable's color value. Returns int The color to draw.
	8:	android.graphics.PorterDuffColorFilter public PorterDuffColorFilter (int srcColor, PorterDuff.Mode mode) Create a colorfilter that uses the specified color and porter-duff mode. Parameters srcColor The source color used with the specified porter-duff mode mode The porter-duff mode that is applied
	9:	android.graphics.drawable.Drawable public void setColorFilter (int color, PorterDuff.Mode mode) Specify a color and porterduff mode to be the colorfilter for this drawable.
drawImage
Draws the specified image by using the anchor point
	0:	android.graphics.Matrix public void setRotate (float degrees, float px, float py) Set the matrix to rotate by the specified number of degrees, with a pivot point at (px, py). The pivot point is the coordinate that should remain unchanged by the specified transformation.
	1:	android.graphics.PointF public void writeToParcel (Parcel out, int flags) Write this point to the specified parcel. To restore a point from a parcel, use readFromParcel() Parameters out The parcel to write the point's coordinates into flags Additional flags about how the object should be written. May be 0 or PARCELABLE_WRITE_RETURN_VALUE.
	2:	android.graphics.Matrix public void setSinCos (float sinValue, float cosValue, float px, float py) Set the matrix to rotate by the specified sine and cosine values, with a pivot point at (px, py). The pivot point is the coordinate that should remain unchanged by the specified transformation.
	3:	android.graphics.Matrix public void setScale (float sx, float sy, float px, float py) Set the matrix to scale by sx and sy, with a pivot point at (px, py). The pivot point is the coordinate that should remain unchanged by the specified transformation.
	4:	android.graphics.Canvas public final void scale (float sx, float sy, float px, float py) Preconcat the current matrix with the specified scale. Parameters sx The amount to scale in X sy The amount to scale in Y px The x-coord for the pivot point (unchanged by the scale) py The y-coord for the pivot point (unchanged by the scale)
	5:	android.graphics.Canvas public final void rotate (float degrees, float px, float py) Preconcat the current matrix with the specified rotation. Parameters degrees The amount to rotate, in degrees px The x-coord for the pivot point (unchanged by the rotation) py The y-coord for the pivot point (unchanged by the rotation)
	6:	android.graphics.Matrix public void setSkew (float kx, float ky, float px, float py) Set the matrix to skew by sx and sy, with a pivot point at (px, py). The pivot point is the coordinate that should remain unchanged by the specified transformation.
	7:	android.graphics.Point public void writeToParcel (Parcel out, int flags) Write this point to the specified parcel. To restore a point from a parcel, use readFromParcel() Parameters out The parcel to write the point's coordinates into flags Additional flags about how the object should be written. May be 0 or PARCELABLE_WRITE_RETURN_VALUE.
	8:	android.graphics.Canvas public void drawPoints (float[] pts, int offset, int count, Paint paint) Draw a series of points. Each point is centered at the coordinate specified by pts[], and its diameter is specified by the paint's stroke width (as transformed by the canvas' CTM), with special treatment for a stroke width of 0, which always draws exactly 1 pixel (or at most 4 if antialiasing is enabled). The shape of the point is controlled by the paint's Cap type. The shape is a square, unless the cap type is Round, in which case the shape is a circle. Parameters pts Array of points to draw [x0 y0 x1 y1 x2 y2 ...] offset Number of values to skip before starting to draw. count The number of values to process, after skipping offset of them. Since one point uses two values, the number of "points" that are drawn is really (count >> 1). paint The paint used to draw the points
	9:	android.graphics.Path public void lineTo (float x, float y) Add a line from the last point to the specified point (x,y). If no moveTo() call has been made for this contour, the first point is automatically set to (0,0). Parameters x The x-coordinate of the end of a line y The y-coordinate of the end of a line
drawRegion
Copies a region of the specified source image to a location within the destination, possibly transforming (rotating and reflecting) the image data using the chosen transform function
	0:	android.graphics.BitmapFactory public static Bitmap decodeStream (InputStream is) Decode an input stream into a bitmap. If the input stream is null, or cannot be used to decode a bitmap, the function returns null. The stream's position will be where ever it was after the encoded data was read. Parameters is The input stream that holds the raw data to be decoded into a bitmap. Returns The decoded bitmap, or null if the image data could not be decoded.
	1:	android.graphics.BitmapRegionDecoder public static BitmapRegionDecoder newInstance (byte[] data, int offset, int length, boolean isShareable) Create a BitmapRegionDecoder from the specified byte array. Currently only the JPEG and PNG formats are supported. Parameters data byte array of compressed image data. offset offset into data for where the decoder should begin parsing. length the number of bytes, beginning at offset, to parse isShareable If this is true, then the BitmapRegionDecoder may keep a shallow reference to the input. If this is false, then the BitmapRegionDecoder will explicitly make a copy of the input data, and keep that. Even if sharing is allowed, the implementation may still decide to make a deep copy of the input data. If an image is progressively encoded, allowing sharing may degrade the decoding speed. Returns BitmapRegionDecoder, or null if the image data could not be decoded. Throws IOException if the image format is not supported or can not be decoded.
	2:	android.graphics.BitmapFactory public static Bitmap decodeFile (String pathName, BitmapFactory.Options opts) Decode a file path into a bitmap. If the specified file name is null, or cannot be decoded into a bitmap, the function returns null. Parameters pathName complete path name for the file to be decoded. opts null-ok; Options that control downsampling and whether the image should be completely decoded, or just is size returned. Returns The decoded bitmap, or null if the image data could not be decoded, or, if opts is non-null, if opts requested only the size be returned (in opts.outWidth and opts.outHeight)
	3:	android.graphics.BitmapRegionDecoder public Bitmap decodeRegion (Rect rect, BitmapFactory.Options options) Decodes a rectangle region in the image specified by rect. Parameters rect The rectangle that specified the region to be decode. options null-ok; Options that control downsampling. inPurgeable is not supported. Returns The decoded bitmap, or null if the image data could not be decoded.
	4:	android.graphics.BitmapRegionDecoder public static BitmapRegionDecoder newInstance (FileDescriptor fd, boolean isShareable) Create a BitmapRegionDecoder from the file descriptor. The position within the descriptor will not be changed when this returns, so the descriptor can be used again as is. Currently only the JPEG and PNG formats are supported. Parameters fd The file descriptor containing the data to decode isShareable If this is true, then the BitmapRegionDecoder may keep a shallow reference to the input. If this is false, then the BitmapRegionDecoder will explicitly make a copy of the input data, and keep that. Even if sharing is allowed, the implementation may still decide to make a deep copy of the input data. If an image is progressively encoded, allowing sharing may degrade the decoding speed. Returns BitmapRegionDecoder, or null if the image data could not be decoded. Throws IOException if the image format is not supported or can not be decoded.
	5:	android.graphics.BitmapFactory public static Bitmap decodeByteArray (byte[] data, int offset, int length, BitmapFactory.Options opts) Decode an immutable bitmap from the specified byte array. Parameters data byte array of compressed image data offset offset into imageData for where the decoder should begin parsing. length the number of bytes, beginning at offset, to parse opts null-ok; Options that control downsampling and whether the image should be completely decoded, or just is size returned. Returns The decoded bitmap, or null if the image data could not be decoded, or, if opts is non-null, if opts requested only the size be returned (in opts.outWidth and opts.outHeight)
	6:	android.graphics.BitmapRegionDecoder public static BitmapRegionDecoder newInstance (String pathName, boolean isShareable) Create a BitmapRegionDecoder from a file path. Currently only the JPEG and PNG formats are supported. Parameters pathName complete path name for the file to be decoded. isShareable If this is true, then the BitmapRegionDecoder may keep a shallow reference to the input. If this is false, then the BitmapRegionDecoder will explicitly make a copy of the input data, and keep that. Even if sharing is allowed, the implementation may still decide to make a deep copy of the input data. If an image is progressively encoded, allowing sharing may degrade the decoding speed. Returns BitmapRegionDecoder, or null if the image data could not be decoded. Throws IOException if the image format is not supported or can not be decoded.
	7:	android.graphics.BitmapFactory public static Bitmap decodeByteArray (byte[] data, int offset, int length) Decode an immutable bitmap from the specified byte array. Parameters data byte array of compressed image data offset offset into imageData for where the decoder should begin parsing. length the number of bytes, beginning at offset, to parse Returns The decoded bitmap, or null if the image could not be decoded.
	8:	android.graphics.BitmapFactory public static Bitmap decodeResource (Resources res, int id, BitmapFactory.Options opts) Synonym for opening the given resource and calling decodeResourceStream(Resources, TypedValue, InputStream, Rect, BitmapFactory.Options). Parameters res The resources object containing the image data id The resource id of the image data opts null-ok; Options that control downsampling and whether the image should be completely decoded, or just is size returned. Returns The decoded bitmap, or null if the image data could not be decoded, or, if opts is non-null, if opts requested only the size be returned (in opts.outWidth and opts.outHeight)
	9:	android.graphics.BitmapRegionDecoder public static BitmapRegionDecoder newInstance (InputStream is, boolean isShareable) Create a BitmapRegionDecoder from an input stream. The stream's position will be where ever it was after the encoded data was read. Currently only the JPEG and PNG formats are supported. Parameters is The input stream that holds the raw data to be decoded into a BitmapRegionDecoder. isShareable If this is true, then the BitmapRegionDecoder may keep a shallow reference to the input. If this is false, then the BitmapRegionDecoder will explicitly make a copy of the input data, and keep that. Even if sharing is allowed, the implementation may still decide to make a deep copy of the input data. If an image is progressively encoded, allowing sharing may degrade the decoding speed. Returns BitmapRegionDecoder, or null if the image data could not be decoded. Throws IOException if the image format is not supported or can not be decoded. Prior to KITKAT, if is.markSupported() returns true, is.mark(1024) would be called. As of KITKAT, this is no longer the case.
copyArea
Copies the contents of a rectangular area (x_src, y_src, width, height) to a destination area, whose anchor point identified by anchor is located at (x_dest, y_dest)
	0:	android.graphics.Rect public boolean contains (int x, int y) Returns true if (x,y) is inside the rectangle. The left and top are considered to be inside, while the right and bottom are not. This means that for a x,y to be contained: left <= x < right and top <= y < bottom. An empty rectangle never contains any point. Parameters x The X coordinate of the point being tested for containment y The Y coordinate of the point being tested for containment Returns true iff (x,y) are contained by the rectangle, where containment means left <= x < right and top <= y < bottom
	1:	android.graphics.RectF public boolean contains (float x, float y) Returns true if (x,y) is inside the rectangle. The left and top are considered to be inside, while the right and bottom are not. This means that for a x,y to be contained: left <= x < right and top <= y < bottom. An empty rectangle never contains any point. Parameters x The X coordinate of the point being tested for containment y The Y coordinate of the point being tested for containment Returns true iff (x,y) are contained by the rectangle, where containment means left <= x < right and top <= y < bottom
	2:	android.graphics.Path public void lineTo (float x, float y) Add a line from the last point to the specified point (x,y). If no moveTo() call has been made for this contour, the first point is automatically set to (0,0). Parameters x The x-coordinate of the end of a line y The y-coordinate of the end of a line
	3:	android.graphics.Rect public void union (int x, int y) Update this Rect to enclose itself and the [x,y] coordinate. There is no check to see that this rectangle is non-empty. Parameters x The x coordinate of the point to add to the rectangle y The y coordinate of the point to add to the rectangle
	4:	android.graphics.RectF public void union (float x, float y) Update this Rect to enclose itself and the [x,y] coordinate. There is no check to see that this rectangle is non-empty. Parameters x The x coordinate of the point to add to the rectangle y The y coordinate of the point to add to the rectangle
	5:	android.graphics.Path public void quadTo (float x1, float y1, float x2, float y2) Add a quadratic bezier from the last point, approaching control point (x1,y1), and ending at (x2,y2). If no moveTo() call has been made for this contour, the first point is automatically set to (0,0). Parameters x1 The x-coordinate of the control point on a quadratic curve y1 The y-coordinate of the control point on a quadratic curve x2 The x-coordinate of the end point on a quadratic curve y2 The y-coordinate of the end point on a quadratic curve
	6:	android.graphics.Path public void cubicTo (float x1, float y1, float x2, float y2, float x3, float y3) Add a cubic bezier from the last point, approaching control points (x1,y1) and (x2,y2), and ending at (x3,y3). If no moveTo() call has been made for this contour, the first point is automatically set to (0,0). Parameters x1 The x-coordinate of the 1st control point on a cubic curve y1 The y-coordinate of the 1st control point on a cubic curve x2 The x-coordinate of the 2nd control point on a cubic curve y2 The y-coordinate of the 2nd control point on a cubic curve x3 The x-coordinate of the end point on a cubic curve y3 The y-coordinate of the end point on a cubic curve
	7:	android.graphics.Path public void rLineTo (float dx, float dy) Same as lineTo, but the coordinates are considered relative to the last point on this contour. If there is no previous point, then a moveTo(0,0) is inserted automatically. Parameters dx The amount to add to the x-coordinate of the previous point on this contour, to specify a line dy The amount to add to the y-coordinate of the previous point on this contour, to specify a line
	8:	android.graphics.Path public void moveTo (float x, float y) Set the beginning of the next contour to the point (x,y). Parameters x The x-coordinate of the start of a new contour y The y-coordinate of the start of a new contour
	9:	android.graphics.Path public void rQuadTo (float dx1, float dy1, float dx2, float dy2) Same as quadTo, but the coordinates are considered relative to the last point on this contour. If there is no previous point, then a moveTo(0,0) is inserted automatically. Parameters dx1 The amount to add to the x-coordinate of the last point on this contour, for the control point of a quadratic curve dy1 The amount to add to the y-coordinate of the last point on this contour, for the control point of a quadratic curve dx2 The amount to add to the x-coordinate of the last point on this contour, for the end point of a quadratic curve dy2 The amount to add to the y-coordinate of the last point on this contour, for the end point of a quadratic curve
fillTriangle
Fills the specified triangle will the current color
	0:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	1:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	2:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	3:	android.graphics.drawable.ColorDrawable public void setColor (int color) Sets the drawable's color value. This action will clobber the results of prior calls to setAlpha(int) on this object, which side-affected the underlying color. Parameters color The color to draw.
	4:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	5:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	6:	android.graphics.drawable.GradientDrawable public void setColor (int argb) Changes this drawbale to use a single color instead of a gradient. Note: changing color will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the color. Parameters argb The color used to fill the shape See Also mutate() setColors(int[])
	7:	android.graphics.ColorMatrix public void setRotate (int axis, float degrees) Set the rotation on a color axis by the specified values. axis=0 correspond to a rotation around the RED color axis=1 correspond to a rotation around the GREEN color axis=2 correspond to a rotation around the BLUE color
	8:	android.graphics.Bitmap public void eraseColor (int c) Fills the bitmap's pixels with the specified Color. Throws IllegalStateException if the bitmap is not mutable.
	9:	android.graphics.Canvas public void drawVertices (Canvas.VertexMode mode, int vertexCount, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, Paint paint) Draw the array of vertices, interpreted as triangles (based on mode). The verts array is required, and specifies the x,y pairs for each vertex. If texs is non-null, then it is used to specify the coordinate in shader coordinates to use at each vertex (the paint must have a shader in this case). If there is no texs array, but there is a color array, then each color is interpolated across its corresponding triangle in a gradient. If both texs and colors arrays are present, then they behave as before, but the resulting color at each pixels is the result of multiplying the colors from the shader and the color-gradient together. The indices array is optional, but if it is present, then it is used to specify the index of each triangle, rather than just walking through the arrays in order. Parameters mode How to interpret the array of vertices vertexCount The number of values in the vertices array (and corresponding texs and colors arrays if non-null). Each logical vertex is two values (x, y), vertexCount must be a multiple of 2. verts Array of vertices for the mesh vertOffset Number of values in the verts to skip before drawing. texs May be null. If not null, specifies the coordinates to sample into the current shader (e.g. bitmap tile or gradient) texOffset Number of values in texs to skip before drawing. colors May be null. If not null, specifies a color for each vertex, to be interpolated across the triangle. colorOffset Number of values in colors to skip before drawing. indices If not null, array of indices to reference into the vertex (texs, colors) array. indexCount number of entries in the indices array (if not null). paint Specifies the shader to use if the texs array is non-null.
drawRGB
Renders a series of device-independent RGB+transparency values in a specified region
	0:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	1:	android.graphics.Region public Region (Region region) Return a copy of the specified region
	2:	android.graphics.Paint public float getStrokeWidth () Return the width for stroking. A value of 0 strokes in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Returns the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	3:	android.graphics.Paint public void setStrokeWidth (float width) Set the width for stroking. Pass 0 to stroke in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix. Parameters width set the paint's stroke width, used whenever the paint's style is Stroke or StrokeAndFill.
	4:	android.graphics.Region public Region (int left, int top, int right, int bottom) Return a region set to the specified rectangle
	5:	android.graphics.Canvas public void drawPoints (float[] pts, int offset, int count, Paint paint) Draw a series of points. Each point is centered at the coordinate specified by pts[], and its diameter is specified by the paint's stroke width (as transformed by the canvas' CTM), with special treatment for a stroke width of 0, which always draws exactly 1 pixel (or at most 4 if antialiasing is enabled). The shape of the point is controlled by the paint's Cap type. The shape is a square, unless the cap type is Round, in which case the shape is a circle. Parameters pts Array of points to draw [x0 y0 x1 y1 x2 y2 ...] offset Number of values to skip before starting to draw. count The number of values to process, after skipping offset of them. Since one point uses two values, the number of "points" that are drawn is really (count >> 1). paint The paint used to draw the points
	6:	android.graphics.RegionIterator public RegionIterator (Region region) Construct an iterator for all of the rectangles in a region. This effectively makes a private copy of the region, so any subsequent edits to region will not affect the iterator. Parameters region the region that will be iterated
	7:	android.graphics.Region public boolean quickContains (int left, int top, int right, int bottom) Return true if the region is a single rectangle (not complex) and it contains the specified rectangle. Returning false is not a guarantee that the rectangle is not contained by this region, but return true is a guarantee that the rectangle is contained by this region.
	8:	android.graphics.NinePatch public final Region getTransparentRegion (Rect bounds) Returns a Region representing the parts of the NinePatch that are completely transparent. Parameters bounds The location and size of the NinePatch. Returns null if the NinePatch has no transparent region to report, else a Region holding the parts of the specified bounds that are transparent.
	9:	android.graphics.Region public boolean quickReject (Region rgn) Return true if the region is empty, or if the specified region does not intersect the region. Returning false is not a guarantee that they intersect, but returning true is a guarantee that they do not.
P

getDisplayColor
Gets the color that will be displayed if the specified color is requested
	0:	android.graphics.drawable.ColorDrawable public ColorDrawable (int color) Creates a new ColorDrawable with the specified color. Parameters color The color to draw.
	1:	android.graphics.drawable.ColorDrawable public void setColor (int color) Sets the drawable's color value. This action will clobber the results of prior calls to setAlpha(int) on this object, which side-affected the underlying color. Parameters color The color to draw.
	2:	android.graphics.Color public static int rgb (int red, int green, int blue) Return a color-int from red, green, blue components. The alpha component is implicity 255 (fully opaque). These component values should be [0..255], but there is no range check performed, so if they are out of range, the returned color is undefined. Parameters red Red component [0..255] of the color green Green component [0..255] of the color blue Blue component [0..255] of the color
	3:	android.graphics.Color public static int blue (int color) Return the blue component of a color int. This is the same as saying color & 0xFF
	4:	android.graphics.Color public static int alpha (int color) Return the alpha component of a color int. This is the same as saying color >>> 24
	5:	android.graphics.Color public static int green (int color) Return the green component of a color int. This is the same as saying (color >> 8) & 0xFF
	6:	android.graphics.Color public static int red (int color) Return the red component of a color int. This is the same as saying (color >> 16) & 0xFF
	7:	android.graphics.Paint public void setColor (int color) Set the paint's color. Note that the color is an int containing alpha as well as r,g,b. This 32bit value is not premultiplied, meaning that its alpha can be any value, regardless of the values of r,g,b. See the Color class for more details. Parameters color The new color (including alpha) to set in the paint.
	8:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	9:	android.graphics.drawable.ColorDrawable public int getColor () Gets the drawable's color value. Returns int The color to draw.
