Sprite
Creates a new non-animated Sprite using the provided Image
	0:	java.util.Locale public String getDisplayName (Locale locale) Returns this locale's language name, country name, and variant, localized to locale. The exact output form depends on whether this locale corresponds to a specific language, country and variant. For example: new Locale("en").getDisplayName(Locale.US) -> English new Locale("en", "US").getDisplayName(Locale.US) -> English (United States) new Locale("en", "US", "POSIX").getDisplayName(Locale.US) -> English (United States,Computer) new Locale("en").getDisplayName(Locale.FRANCE) -> anglais new Locale("en", "US").getDisplayName(Locale.FRANCE) -> anglais (États-Unis) new Locale("en", "US", "POSIX").getDisplayName(Locale.FRANCE) -> anglais (États-Unis,informatique).
	1:	java.util.Currency public String getSymbol (Locale locale) Returns the localized currency symbol for this currency in locale. That is, given "USD" and Locale.US, you'd get "$", but given "USD" and a non-US locale, you'd get "US$". If the locale only specifies a language rather than a language and a country (such as Locale.JAPANESE or {new Locale("en", "")} rather than Locale.JAPAN or {new Locale("en", "US")}), the ISO 4217 currency code is returned. If there is no locale-specific currency symbol, the ISO 4217 currency code is returned.
	2:	android.os.Message public static Message obtain () Return a new Message instance from the global pool. Allows us to avoid allocating new objects in many cases.
	3:	android.support.v4.text.ICUCompat public static String addLikelySubtags (String locale) Add the likely subtags for a provided locale ID, per the algorithm described in the following CLDR technical report: http://www.unicode.org/reports/tr35/#Likely_Subtags If locale is already in the maximal form, or there is no data available for maximization, it will be just returned. For example, "und-Zzzz" cannot be maximized, since there is no reasonable maximization. Examples: "en" maximizes to "en_Latn_US" "de" maximizes to "de_Latn_US" "sr" maximizes to "sr_Cyrl_RS" "sh" maximizes to "sr_Latn_RS" (Note this will not reverse.) "zh_Hani" maximizes to "zh_Hans_CN" (Note this will not reverse.) Parameters locale The locale to maximize Returns the maximized locale
	4:	org.apache.http.message.BasicTokenIterator protected boolean isTokenChar (char ch) Checks whether a character is a valid token character. Whitespace, control characters, and HTTP separators are not valid token characters. The HTTP specification (RFC 2616, section 2.2) defines tokens only for the US-ASCII character set, this method extends the definition to other character sets. Parameters ch the character to check Returns true if the character is a valid token start, false otherwise
	5:	android.provider.MediaStore.Audio public static String keyFor (String name) Converts a name to a "key" that can be used for grouping, sorting and searching. The rules that govern this conversion are: - remove 'special' characters like ()[]'!?., - remove leading/trailing spaces - convert everything to lowercase - remove leading "the ", "an " and "a " - remove trailing ", the|an|a" - remove accents. This step leaves us with CollationKey data, which is not human readable Parameters name The artist or album name to convert Returns The "key" for the given name.
	6:	android.text.format.DateUtils public static String formatElapsedTime (long elapsedSeconds) Formats an elapsed time in the form "MM:SS" or "H:MM:SS" for display on the call-in-progress screen. Parameters elapsedSeconds the elapsed time in seconds.
	7:	android.widget.Chronometer public void setFormat (String format) Sets the format string used for display. The Chronometer will display this string, with the first "%s" replaced by the current timer value in "MM:SS" or "H:MM:SS" form. If the format string is null, or if you never call setFormat(), the Chronometer will simply display the timer value in "MM:SS" or "H:MM:SS" form. Parameters format the format string.
	8:	java.util.Currency public int getDefaultFractionDigits () Returns the default number of fraction digits for this currency. For instance, the default number of fraction digits for the US dollar is 2 because there are 100 US cents in a US dollar. For the Japanese Yen, the number is 0 because coins smaller than 1 Yen became invalid in 1953. In the case of pseudo-currencies, such as IMF Special Drawing Rights, -1 is returned.
	9:	android.location.Address public String getCountryCode () Returns the country code of the address, for example "US", or null if it is unknown.
Sprite
Creates a new animated Sprite using frames contained in the provided Image
	0:	java.util.Locale public String getDisplayName (Locale locale) Returns this locale's language name, country name, and variant, localized to locale. The exact output form depends on whether this locale corresponds to a specific language, country and variant. For example: new Locale("en").getDisplayName(Locale.US) -> English new Locale("en", "US").getDisplayName(Locale.US) -> English (United States) new Locale("en", "US", "POSIX").getDisplayName(Locale.US) -> English (United States,Computer) new Locale("en").getDisplayName(Locale.FRANCE) -> anglais new Locale("en", "US").getDisplayName(Locale.FRANCE) -> anglais (États-Unis) new Locale("en", "US", "POSIX").getDisplayName(Locale.FRANCE) -> anglais (États-Unis,informatique).
	1:	android.text.format.DateUtils public static String formatElapsedTime (long elapsedSeconds) Formats an elapsed time in the form "MM:SS" or "H:MM:SS" for display on the call-in-progress screen. Parameters elapsedSeconds the elapsed time in seconds.
	2:	android.widget.Chronometer public void setFormat (String format) Sets the format string used for display. The Chronometer will display this string, with the first "%s" replaced by the current timer value in "MM:SS" or "H:MM:SS" form. If the format string is null, or if you never call setFormat(), the Chronometer will simply display the timer value in "MM:SS" or "H:MM:SS" form. Parameters format the format string.
	3:	android.os.Message public static Message obtain () Return a new Message instance from the global pool. Allows us to avoid allocating new objects in many cases.
	4:	android.text.format.DateUtils public static String formatElapsedTime (StringBuilder recycle, long elapsedSeconds) Formats an elapsed time in a format like "MM:SS" or "H:MM:SS" (using a form suited to the current locale), similar to that used on the call-in-progress screen. Parameters recycle StringBuilder to recycle, or null to use a temporary one. elapsedSeconds the elapsed time in seconds.
	5:	android.view.Choreographer.FrameCallback public abstract void doFrame (long frameTimeNanos) Called when a new display frame is being rendered. This method provides the time in nanoseconds when the frame started being rendered. The frame time provides a stable time base for synchronizing animations and drawing. It should be used instead of uptimeMillis() or nanoTime() for animations and drawing in the UI. Using the frame time helps to reduce inter-frame jitter because the frame time is fixed at the time the frame was scheduled to start, regardless of when the animations or drawing callback actually runs. All callbacks that run as part of rendering a frame will observe the same frame time so using the frame time also helps to synchronize effects that are performed by different callbacks. Please note that the framework already takes care to process animations and drawing using the frame time as a stable time base. Most applications should not need to use the frame time information directly. Parameters frameTimeNanos The time in nanoseconds when the frame started being rendered, in the nanoTime() timebase. Divide this value by 1000000 to convert it to the uptimeMillis() time base.
	6:	java.util.Currency public String getSymbol (Locale locale) Returns the localized currency symbol for this currency in locale. That is, given "USD" and Locale.US, you'd get "$", but given "USD" and a non-US locale, you'd get "US$". If the locale only specifies a language rather than a language and a country (such as Locale.JAPANESE or {new Locale("en", "")} rather than Locale.JAPAN or {new Locale("en", "US")}), the ISO 4217 currency code is returned. If there is no locale-specific currency symbol, the ISO 4217 currency code is returned.
	7:	android.animation.AnimatorSet public AnimatorSet.Builder play (Animator anim) This method creates a Builder object, which is used to set up playing constraints. This initial play() method tells the Builder the animation that is the dependency for the succeeding commands to the Builder. For example, calling play(a1).with(a2) sets up the AnimatorSet to play a1 and a2 at the same time, play(a1).before(a2) sets up the AnimatorSet to play a1 first, followed by a2, and play(a1).after(a2) sets up the AnimatorSet to play a2 first, followed by a1. Note that play() is the only way to tell the Builder the animation upon which the dependency is created, so successive calls to the various functions in Builder will all refer to the initial parameter supplied in play() as the dependency of the other animations. For example, calling play(a1).before(a2).before(a3) will play both a2 and a3 when a1 ends; it does not set up a dependency between a2 and a3. Parameters anim The animation that is the dependency used in later calls to the methods in the returned Builder object. A null parameter will result in a null Builder return value. Returns Builder The object that constructs the AnimatorSet based on the dependencies outlined in the calls to play and the other methods in the Builder
	8:	java.text.Normalizer public static boolean isNormalized (CharSequence src, Normalizer.Form form) Check whether the given character sequence src is normalized according to the normalization method form. Parameters src character sequence to check form normalization form to check against Returns true if normalized according to form
	9:	android.content.ContentProvider public Cursor query (Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder, CancellationSignal cancellationSignal) Implement this to handle query requests from clients with support for cancellation. This method can be called from multiple threads, as described in Processes and Threads. Example client call: // Request a specific record. Cursor managedCursor = managedQuery( ContentUris.withAppendedId(Contacts.People.CONTENT_URI, 2), projection, // Which columns to return. null, // WHERE clause. null, // WHERE clause value substitution People.NAME + " ASC"); // Sort order. Example implementation: // SQLiteQueryBuilder is a helper class that creates the // proper SQL syntax for us. SQLiteQueryBuilder qBuilder = new SQLiteQueryBuilder(); // Set the table we're querying. qBuilder.setTables(DATABASE_TABLE_NAME); // If the query ends in a specific record number, we're // being asked for a specific record, so set the // WHERE clause in our query. if((URI_MATCHER.match(uri)) == SPECIFIC_MESSAGE){ qBuilder.appendWhere("_id=" + uri.getPathLeafId()); } // Make the query. Cursor c = qBuilder.query(mDb, projection, selection, selectionArgs, groupBy, having, sortOrder); c.setNotificationUri(getContext().getContentResolver(), uri); return c; If you implement this method then you must also implement the version of query(Uri, String[], String, String[], String) that does not take a cancellation signal to ensure correct operation on older versions of the Android Framework in which the cancellation signal overload was not available. Parameters uri The URI to query. This will be the full URI sent by the client; if the client is requesting a specific record, the URI will end in a record number that the implementation should parse and add to a WHERE or HAVING clause, specifying that _id value. projection The list of columns to put into the cursor. If null all columns are included. selection A selection criteria to apply when filtering rows. If null then all rows are included. selectionArgs You may include ?s in selection, which will be replaced by the values from selectionArgs, in order that they appear in the selection. The values will be bound as Strings. sortOrder How the rows in the cursor should be sorted. If null then the provider is free to define the sort order. cancellationSignal A signal to cancel the operation in progress, or null if none. If the operation is canceled, then OperationCanceledException will be thrown when the query is executed. Returns a Cursor or null.
Sprite
Creates a new Sprite from another Sprite
	0:	android.os.MemoryFile public InputStream getInputStream () Creates a new InputStream for reading from the memory file. Returns InputStream
	1:	android.os.Parcel public static Parcel obtain () Retrieve a new Parcel object from the pool.
	2:	android.os.Message public static Message obtain () Return a new Message instance from the global pool. Allows us to avoid allocating new objects in many cases.
	3:	java.util.jar.JarEntry public JarEntry (ZipEntry entry) Creates a new JarEntry using the values obtained from entry. Parameters entry The ZipEntry to obtain values from.
	4:	java.util.jar.JarEntry public JarEntry (JarEntry je) Create a new JarEntry using the values obtained from the argument. Parameters je The JarEntry to obtain values from.
	5:	android.app.Notification.Action.Builder public Notification.Action.Builder (Notification.Action action) Construct a new builder for Notification.Action object using the fields from an Notification.Action. Parameters action the action to read fields from.
	6:	android.support.v4.app.NotificationCompat.Action.Builder public NotificationCompat.Action.Builder (NotificationCompat.Action action) Construct a new builder for NotificationCompat.Action object using the fields from an NotificationCompat.Action. Parameters action the action to read fields from.
	7:	java.security.KeyPairGenerator public final KeyPair genKeyPair () Computes and returns a new unique KeyPair each time this method is called. This does exactly the same as generateKeyPair(). Returns a new unique KeyPair each time this method is called
	8:	java.security.KeyPairGenerator public KeyPair generateKeyPair () Computes and returns a new unique KeyPair each time this method is called. This does exactly the same as genKeyPair(). Returns a new unique KeyPair each time this method is called
	9:	java.security.KeyPairGeneratorSpi public abstract KeyPair generateKeyPair () Computes and returns a new unique KeyPair each time this method is called. Returns a new unique KeyPair each time this method is called.
defineReferencePixel
Defines the reference pixel for this Sprite
	0:	android.hardware.Camera.Parameters public void setPictureFormat (int pixel_format) Sets the image format for pictures. Parameters pixel_format the desired picture format (ImageFormat.NV21, ImageFormat.RGB_565, or ImageFormat.JPEG) See Also ImageFormat
	1:	android.media.Image.Plane public abstract int getPixelStride () The distance between adjacent pixel samples, in bytes. This is the distance between two consecutive pixel values in a row of pixels. It may be larger than the size of a single pixel to account for interleaved image data or padded formats. The pixel stride is always greater than 0.
	2:	android.hardware.Camera.PreviewCallback public abstract void onPreviewFrame (byte[] data, Camera camera) Called as preview frames are displayed. This callback is invoked on the event thread open(int) was called from. If using the YV12 format, refer to the equations in setPreviewFormat(int) for the arrangement of the pixel data in the preview callback buffers. Parameters data the contents of the preview frame in the format defined by ImageFormat, which can be queried with getPreviewFormat(). If setPreviewFormat(int) is never called, the default will be the YCbCr_420_SP (NV21) format. camera the Camera service object.
	3:	android.graphics.ImageFormat public static int getBitsPerPixel (int format) Use this function to retrieve the number of bits per pixel of an ImageFormat. Returns the number of bits per pixel of the given format or -1 if the format doesn't exist or is not supported.
	4:	android.opengl.ETC1 public static void encodeBlock (Buffer in, int validPixelMask, Buffer out) Encode a block of pixels. Parameters in a native order direct buffer of size DECODED_BLOCK_SIZE that represent a 4 x 4 square of 3-byte pixels in form R, G, B. Byte (3 * (x + 4 * y) is the R value of pixel (x, y). validPixelMask is a 16-bit mask where bit (1 << (x + y * 4)) indicates whether the corresponding (x,y) pixel is valid. Invalid pixel color values are ignored when compressing. out a native order direct buffer of size ENCODED_BLOCK_SIZE that receives the ETC1 compressed version of the data.
	5:	android.graphics.Bitmap public boolean sameAs (Bitmap other) Given another bitmap, return true if it has the same dimensions, config, and pixel data as this bitmap. If any of those differ, return false. If other is null, return false.
	6:	android.graphics.Canvas public boolean isOpaque () Return true if the device that the current layer draws into is opaque (i.e. does not support per-pixel alpha). Returns true if the device that the current layer draws into is opaque
	7:	android.view.Display public int getPixelFormat () This method was deprecated in API level 17. This method is no longer supported. The result is always RGBA_8888. Gets the pixel format of the display. Returns One of the constants defined in PixelFormat.
	8:	android.media.Image public abstract int getFormat () Get the format for this image. This format determines the number of ByteBuffers needed to represent the image, and the general layout of the pixel data in each in ByteBuffer. The format is one of the values from ImageFormat. The mapping between the formats and the planes is as follows: Format Plane count Layout details JPEG 1 Compressed data, so row and pixel strides are 0. To uncompress, use BitmapFactory#decodeByteArray. YUV_420_888 3 A luminance plane followed by the Cb and Cr chroma planes. The chroma planes have half the width and height of the luminance plane (4:2:0 subsampling). Each pixel sample in each plane has 8 bits. Each plane has its own row stride and pixel stride. See Also ImageFormat
	9:	android.media.Image public abstract Plane[] getPlanes () Get the array of pixel planes for this Image. The number of planes is determined by the format of the Image.
setRefPixelPosition
Sets this Sprite's position such that its reference pixel is located at (x,y) in the painter's coordinate system
	0:	android.opengl.ETC1 public static void encodeBlock (Buffer in, int validPixelMask, Buffer out) Encode a block of pixels. Parameters in a native order direct buffer of size DECODED_BLOCK_SIZE that represent a 4 x 4 square of 3-byte pixels in form R, G, B. Byte (3 * (x + 4 * y) is the R value of pixel (x, y). validPixelMask is a 16-bit mask where bit (1 << (x + y * 4)) indicates whether the corresponding (x,y) pixel is valid. Invalid pixel color values are ignored when compressing. out a native order direct buffer of size ENCODED_BLOCK_SIZE that receives the ETC1 compressed version of the data.
	1:	android.opengl.ETC1 public static void decodeBlock (Buffer in, Buffer out) Decode a block of pixels. Parameters in a native order direct buffer of size ENCODED_BLOCK_SIZE that contains the ETC1 compressed version of the data. out a native order direct buffer of size DECODED_BLOCK_SIZE that will receive the decoded data. The data represents a 4 x 4 square of 3-byte pixels in form R, G, B. Byte (3 * (x + 4 * y) is the R value of pixel (x, y).
	2:	android.graphics.Bitmap public void setPixel (int x, int y, int color) Write the specified Color into the bitmap (assuming it is mutable) at the x,y coordinate. The color must be a non-premultiplied ARGB value. Parameters x The x coordinate of the pixel to replace (0...width-1) y The y coordinate of the pixel to replace (0...height-1) color The ARGB color to write into the bitmap Throws IllegalStateException if the bitmap is not mutable IllegalArgumentException if x, y are outside of the bitmap's bounds.
	3:	android.graphics.Bitmap public void getPixels (int[] pixels, int offset, int stride, int x, int y, int width, int height) Returns in pixels[] a copy of the data in the bitmap. Each value is a packed int representing a Color. The stride parameter allows the caller to allow for gaps in the returned pixels array between rows. For normal packed results, just pass width for the stride value. The returned colors are non-premultiplied ARGB values. Parameters pixels The array to receive the bitmap's colors offset The first index to write into pixels[] stride The number of entries in pixels[] to skip between rows (must be >= bitmap's width). Can be negative. x The x coordinate of the first pixel to read from the bitmap y The y coordinate of the first pixel to read from the bitmap width The number of pixels to read from each row height The number of rows to read Throws IllegalArgumentException if x, y, width, height exceed the bounds of the bitmap, or if abs(stride) < width. ArrayIndexOutOfBoundsException if the pixels array is too small to receive the specified number of pixels.
	4:	android.graphics.Bitmap public void setPixels (int[] pixels, int offset, int stride, int x, int y, int width, int height) Replace pixels in the bitmap with the colors in the array. Each element in the array is a packed int prepresenting a non-premultiplied ARGB Color. Parameters pixels The colors to write to the bitmap offset The index of the first color to read from pixels[] stride The number of colors in pixels[] to skip between rows. Normally this value will be the same as the width of the bitmap, but it can be larger (or negative). x The x coordinate of the first pixel to write to in the bitmap. y The y coordinate of the first pixel to write to in the bitmap. width The number of colors to copy from pixels[] per row height The number of rows to write to the bitmap Throws IllegalStateException if the bitmap is not mutable IllegalArgumentException if x, y, width, height are outside of the bitmap's bounds. ArrayIndexOutOfBoundsException if the pixels array is too small to receive the specified number of pixels.
	5:	android.view.MotionEvent public final void addBatch (long eventTime, float x, float y, float pressure, float size, int metaState) Add a new movement to the batch of movements in this event. The event's current location, position and size is updated to the new values. The current values in the event are added to a list of historical values. Only applies to ACTION_MOVE or ACTION_HOVER_MOVE events. Parameters eventTime The time stamp (in ms) for this data. x The new X position. y The new Y position. pressure The new pressure. size The new size. metaState Meta key state.
	6:	android.hardware.Camera.Parameters public void setPreviewFormat (int pixel_format) Sets the image format for preview pictures. If this is never called, the default format will be NV21, which uses the NV21 encoding format. Use getSupportedPreviewFormats() to get a list of the available preview formats. It is strongly recommended that either NV21 or YV12 is used, since they are supported by all camera devices. For YV12, the image buffer that is received is not necessarily tightly packed, as there may be padding at the end of each row of pixel data, as described in YV12. For camera callback data, it can be assumed that the stride of the Y and UV data is the smallest possible that meets the alignment requirements. That is, if the preview size is width x height, then the following equations describe the buffer index for the beginning of row y for the Y plane and row c for the U and V planes: yStride = (int) ceil(width / 16.0) * 16; uvStride = (int) ceil( (yStride / 2) / 16.0) * 16; ySize = yStride * height; uvSize = uvStride * height / 2; yRowIndex = yStride * y; uRowIndex = ySize + uvSize + uvStride * c; vRowIndex = ySize + uvStride * c; size = ySize + uvSize * 2; Parameters pixel_format the desired preview picture format, defined by one of the ImageFormat constants. (E.g., ImageFormat.NV21 (default), or ImageFormat.YV12) See Also ImageFormat getSupportedPreviewFormats()
	7:	android.graphics.Canvas public void drawBitmap (int[] colors, int offset, int stride, float x, float y, int width, int height, boolean hasAlpha, Paint paint) Treat the specified array of colors as a bitmap, and draw it. This gives the same result as first creating a bitmap from the array, and then drawing it, but this method avoids explicitly creating a bitmap object which can be more efficient if the colors are changing often. Parameters colors Array of colors representing the pixels of the bitmap offset Offset into the array of colors for the first pixel stride The number of colors in the array between rows (must be >= width or <= -width). x The X coordinate for where to draw the bitmap y The Y coordinate for where to draw the bitmap width The width of the bitmap height The height of the bitmap hasAlpha True if the alpha channel of the colors contains valid values. If false, the alpha byte is ignored (assumed to be 0xFF for every pixel). paint May be null. The paint used to draw the bitmap
	8:	android.view.MotionEvent public static MotionEvent obtain (long downTime, long eventTime, int action, float x, float y, int metaState) Create a new MotionEvent, filling in a subset of the basic motion values. Those not specified here are: device id (always 0), pressure and size (always 1), x and y precision (always 1), and edgeFlags (always 0). Parameters downTime The time (in ms) when the user originally pressed down to start a stream of position events. This must be obtained from uptimeMillis(). eventTime The the time (in ms) when this specific event was generated. This must be obtained from uptimeMillis(). action The kind of action being performed, such as ACTION_DOWN. x The X coordinate of this event. y The Y coordinate of this event. metaState The state of any meta / modifier keys that were in effect when the event was generated.
	9:	android.graphics.Point public void set (int x, int y) Set the point's x and y coordinates
getRefPixelX
Gets the horizontal position of this Sprite's reference pixel in the painter's coordinate system
	0:	org.apache.http.conn.scheme.SchemeRegistry public final synchronized Scheme get (String name) Obtains a scheme by name, if registered. Parameters name the name of the scheme to look up (in lowercase) Returns the scheme, or null if there is none by this name
	1:	android.hardware.Camera.Parameters public void setPictureFormat (int pixel_format) Sets the image format for pictures. Parameters pixel_format the desired picture format (ImageFormat.NV21, ImageFormat.RGB_565, or ImageFormat.JPEG) See Also ImageFormat
	2:	android.location.Location public void setElapsedRealtimeNanos (long time) Set the time of this fix, in elapsed real-time since system boot. Parameters time elapsed real-time of fix, in nanoseconds since system boot.
	3:	android.test.mock.MockPackageManager public void setApplicationEnabledSetting (String packageName, int newState, int flags) Set the enabled setting for an application This setting will override any enabled state which may have been set by the application in its manifest. It also overrides the enabled state set in the manifest for any of the application's components. It does not override any enabled state set by setComponentEnabledSetting(ComponentName, int, int) for any of the application's components. Parameters packageName The package name of the application to enable newState The new enabled state for the component. The legal values for this state are: COMPONENT_ENABLED_STATE_ENABLED, COMPONENT_ENABLED_STATE_DISABLED and COMPONENT_ENABLED_STATE_DEFAULT The last one removes the setting, thereby restoring the applications's state to whatever was set in its manifest (or enabled, by default). flags Optional behavior flags: DONT_KILL_APP or 0.
	4:	android.content.pm.PackageManager public abstract void setApplicationEnabledSetting (String packageName, int newState, int flags) Set the enabled setting for an application This setting will override any enabled state which may have been set by the application in its manifest. It also overrides the enabled state set in the manifest for any of the application's components. It does not override any enabled state set by setComponentEnabledSetting(ComponentName, int, int) for any of the application's components. Parameters packageName The package name of the application to enable newState The new enabled state for the component. The legal values for this state are: COMPONENT_ENABLED_STATE_ENABLED, COMPONENT_ENABLED_STATE_DISABLED and COMPONENT_ENABLED_STATE_DEFAULT The last one removes the setting, thereby restoring the applications's state to whatever was set in its manifest (or enabled, by default). flags Optional behavior flags: DONT_KILL_APP or 0.
	5:	android.app.ActivityManager public void dumpPackageState (FileDescriptor fd, String packageName) Perform a system dump of various state associated with the given application package name. This call blocks while the dump is being performed, so should not be done on a UI thread. The data will be written to the given file descriptor as text. An application must hold the DUMP permission to make this call. Parameters fd The file descriptor that the dump should be written to. The file descriptor is not closed by this function; the caller continues to own it. packageName The name of the package that is to be dumped.
	6:	android.content.Context public abstract Context createPackageContext (String packageName, int flags) Return a new Context object for the given application name. This Context is the same as what the named application gets when it is launched, containing the same resources and class loader. Each call to this method returns a new instance of a Context object; Context objects are not shared, however they share common state (Resources, ClassLoader, etc) so the Context instance itself is fairly lightweight. Throws PackageManager.NameNotFoundException if there is no application with the given package name. Throws SecurityException if the Context requested can not be loaded into the caller's process for security reasons (see CONTEXT_INCLUDE_CODE for more information}. Parameters packageName Name of the application's package. flags Option flags, one of CONTEXT_INCLUDE_CODE or CONTEXT_IGNORE_SECURITY. Returns A Context for the application. Throws SecurityException if there is no application with the given package name. PackageManager.NameNotFoundException
	7:	java.lang.ClassLoader protected Package getPackage (String name) Returns the package with the specified name. Package information is searched in this class loader. Parameters name the name of the package to find. Returns the package with the requested name; null if the package can not be found.
	8:	android.location.GpsSatellite public boolean usedInFix () Returns true if the satellite was used by the GPS engine when calculating the most recent GPS fix. Returns true if the satellite was used to compute the most recent fix.
	9:	android.os.PowerManager public boolean isInteractive () Returns true if the device is in an interactive state. When this method returns true, the device is awake and ready to interact with the user (although this is not a guarantee that the user is actively interacting with the device just this moment). The main screen is usually turned on while in this state. Certain features, such as the proximity sensor, may temporarily turn off the screen while still leaving the device in an interactive state. Note in particular that the device is still considered to be interactive while dreaming (since dreams can be interactive) but not when it is dozing or asleep. When this method returns false, the device is dozing or asleep and must be awoken before it will become ready to interact with the user again. The main screen is usually turned off while in this state. Certain features, such as "ambient mode" may cause the main screen to remain on (albeit in a low power state) to display system-provided content while the device dozes. The system will send a screen on or screen off broadcast whenever the interactive state of the device changes. For historical reasons, the names of these broadcasts refer to the power state of the screen but they are actually sent in response to changes in the overall interactive state of the device, as described by this method. Services may use the non-interactive state as a hint to conserve power since the user is not present. Returns True if the device is in an interactive state. See Also ACTION_SCREEN_ON ACTION_SCREEN_OFF
getRefPixelY
Gets the vertical position of this Sprite's reference pixel in the painter's coordinate system
	0:	org.apache.http.conn.scheme.SchemeRegistry public final synchronized Scheme get (String name) Obtains a scheme by name, if registered. Parameters name the name of the scheme to look up (in lowercase) Returns the scheme, or null if there is none by this name
	1:	android.hardware.Camera.Parameters public void setPictureFormat (int pixel_format) Sets the image format for pictures. Parameters pixel_format the desired picture format (ImageFormat.NV21, ImageFormat.RGB_565, or ImageFormat.JPEG) See Also ImageFormat
	2:	android.location.Location public void setElapsedRealtimeNanos (long time) Set the time of this fix, in elapsed real-time since system boot. Parameters time elapsed real-time of fix, in nanoseconds since system boot.
	3:	android.test.mock.MockPackageManager public void setApplicationEnabledSetting (String packageName, int newState, int flags) Set the enabled setting for an application This setting will override any enabled state which may have been set by the application in its manifest. It also overrides the enabled state set in the manifest for any of the application's components. It does not override any enabled state set by setComponentEnabledSetting(ComponentName, int, int) for any of the application's components. Parameters packageName The package name of the application to enable newState The new enabled state for the component. The legal values for this state are: COMPONENT_ENABLED_STATE_ENABLED, COMPONENT_ENABLED_STATE_DISABLED and COMPONENT_ENABLED_STATE_DEFAULT The last one removes the setting, thereby restoring the applications's state to whatever was set in its manifest (or enabled, by default). flags Optional behavior flags: DONT_KILL_APP or 0.
	4:	android.content.pm.PackageManager public abstract void setApplicationEnabledSetting (String packageName, int newState, int flags) Set the enabled setting for an application This setting will override any enabled state which may have been set by the application in its manifest. It also overrides the enabled state set in the manifest for any of the application's components. It does not override any enabled state set by setComponentEnabledSetting(ComponentName, int, int) for any of the application's components. Parameters packageName The package name of the application to enable newState The new enabled state for the component. The legal values for this state are: COMPONENT_ENABLED_STATE_ENABLED, COMPONENT_ENABLED_STATE_DISABLED and COMPONENT_ENABLED_STATE_DEFAULT The last one removes the setting, thereby restoring the applications's state to whatever was set in its manifest (or enabled, by default). flags Optional behavior flags: DONT_KILL_APP or 0.
	5:	android.app.ActivityManager public void dumpPackageState (FileDescriptor fd, String packageName) Perform a system dump of various state associated with the given application package name. This call blocks while the dump is being performed, so should not be done on a UI thread. The data will be written to the given file descriptor as text. An application must hold the DUMP permission to make this call. Parameters fd The file descriptor that the dump should be written to. The file descriptor is not closed by this function; the caller continues to own it. packageName The name of the package that is to be dumped.
	6:	android.content.Context public abstract Context createPackageContext (String packageName, int flags) Return a new Context object for the given application name. This Context is the same as what the named application gets when it is launched, containing the same resources and class loader. Each call to this method returns a new instance of a Context object; Context objects are not shared, however they share common state (Resources, ClassLoader, etc) so the Context instance itself is fairly lightweight. Throws PackageManager.NameNotFoundException if there is no application with the given package name. Throws SecurityException if the Context requested can not be loaded into the caller's process for security reasons (see CONTEXT_INCLUDE_CODE for more information}. Parameters packageName Name of the application's package. flags Option flags, one of CONTEXT_INCLUDE_CODE or CONTEXT_IGNORE_SECURITY. Returns A Context for the application. Throws SecurityException if there is no application with the given package name. PackageManager.NameNotFoundException
	7:	java.lang.ClassLoader protected Package getPackage (String name) Returns the package with the specified name. Package information is searched in this class loader. Parameters name the name of the package to find. Returns the package with the requested name; null if the package can not be found.
	8:	android.location.GpsSatellite public boolean usedInFix () Returns true if the satellite was used by the GPS engine when calculating the most recent GPS fix. Returns true if the satellite was used to compute the most recent fix.
	9:	android.os.PowerManager public boolean isInteractive () Returns true if the device is in an interactive state. When this method returns true, the device is awake and ready to interact with the user (although this is not a guarantee that the user is actively interacting with the device just this moment). The main screen is usually turned on while in this state. Certain features, such as the proximity sensor, may temporarily turn off the screen while still leaving the device in an interactive state. Note in particular that the device is still considered to be interactive while dreaming (since dreams can be interactive) but not when it is dozing or asleep. When this method returns false, the device is dozing or asleep and must be awoken before it will become ready to interact with the user again. The main screen is usually turned off while in this state. Certain features, such as "ambient mode" may cause the main screen to remain on (albeit in a low power state) to display system-provided content while the device dozes. The system will send a screen on or screen off broadcast whenever the interactive state of the device changes. For historical reasons, the names of these broadcasts refer to the power state of the screen but they are actually sent in response to changes in the overall interactive state of the device, as described by this method. Services may use the non-interactive state as a hint to conserve power since the user is not present. Returns True if the device is in an interactive state. See Also ACTION_SCREEN_ON ACTION_SCREEN_OFF
setFrame
Selects the current frame in the frame sequence
	0:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	1:	android.media.AudioTrack protected int getNativeFrameCount () This method was deprecated in API level 19. Only accessible by subclasses, which are not recommended for AudioTrack. See getProperty(String) for key PROPERTY_OUTPUT_FRAMES_PER_BUFFER. Returns the "native frame count", derived from the bufferSizeInBytes specified at creation time and converted to frame units. If track's creation mode is MODE_STATIC, it is equal to the specified bufferSizeInBytes converted to frame units. If track's creation mode is MODE_STREAM, it is typically greater than or equal to the specified bufferSizeInBytes converted to frame units; it may be rounded up to a larger value if needed by the target device implementation.
	2:	android.hardware.Camera.Parameters public List<Integer> getSupportedPreviewFrameRates () This method was deprecated in API level 9. replaced by getSupportedPreviewFpsRange() Gets the supported preview frame rates. Returns a list of supported preview frame rates. null if preview frame rate setting is not supported.
	3:	android.opengl.GLSurfaceView.Renderer public abstract void onDrawFrame (GL10 gl) Called to draw the current frame. This method is responsible for drawing the current frame. The implementation of this method typically looks like this: void onDrawFrame(GL10 gl) { gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT); //... other gl calls to render the scene ... } Parameters gl the GL interface. Use instanceof to test if the interface supports GL11 or higher interfaces.
	4:	android.view.Choreographer public void removeFrameCallback (Choreographer.FrameCallback callback) Removes a previously posted frame callback. Parameters callback The frame callback to remove. See Also postFrameCallback(Choreographer.FrameCallback) postFrameCallbackDelayed(Choreographer.FrameCallback, long)
	5:	android.graphics.drawable.AnimationDrawable public Drawable getFrame (int index) Returns The Drawable at the specified frame index
	6:	android.view.Choreographer public void postFrameCallback (Choreographer.FrameCallback callback) Posts a frame callback to run on the next frame. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. See Also postFrameCallbackDelayed(Choreographer.FrameCallback, long) removeFrameCallback(Choreographer.FrameCallback)
	7:	android.view.Choreographer public void postFrameCallbackDelayed (Choreographer.FrameCallback callback, long delayMillis) Posts a frame callback to run on the next frame after the specified delay. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. delayMillis The delay time in milliseconds. See Also postFrameCallback(Choreographer.FrameCallback) removeFrameCallback(Choreographer.FrameCallback)
	8:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	9:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs) Call this method after setDataSource(). This method finds a representative frame close to the given time position if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source. Call this method if one does not care how the frame is found as long as it is close to the given time; otherwise, please call getFrameAtTime(long, int). Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarentee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved. See Also getFrameAtTime(long, int)
getFrame
Gets the current index in the frame sequence
	0:	android.graphics.drawable.AnimationDrawable public Drawable getFrame (int index) Returns The Drawable at the specified frame index
	1:	java.util.BitSet public boolean get (int index) Returns the bit at index index. Indexes greater than the current length return false. Throws IndexOutOfBoundsException if index < 0.
	2:	android.hardware.Camera.Parameters public List<int[]> getSupportedPreviewFpsRange () Gets the supported preview fps (frame-per-second) ranges. Each range contains a minimum fps and maximum fps. If minimum fps equals to maximum fps, the camera outputs frames in fixed frame rate. If not, the camera outputs frames in auto frame rate. The actual frame rate fluctuates between the minimum and the maximum. The values are multiplied by 1000 and represented in integers. For example, if frame rate is 26.623 frames per second, the value is 26623. Returns a list of supported preview fps ranges. This method returns a list with at least one element. Every element is an int array of two values - minimum fps and maximum fps. The list is sorted from small to large (first by maximum fps and then minimum fps). See Also PREVIEW_FPS_MIN_INDEX PREVIEW_FPS_MAX_INDEX
	3:	android.media.MediaCodec public final void queueSecureInputBuffer (int index, int offset, MediaCodec.CryptoInfo info, long presentationTimeUs, int flags) Similar to queueInputBuffer(int, int, int, long, int) but submits a buffer that is potentially encrypted. Parameters index The index of a client-owned input buffer previously returned in a call to dequeueInputBuffer(long). offset The byte offset into the input buffer at which the data starts. info Metadata required to facilitate decryption, the object can be reused immediately after this call returns. presentationTimeUs The time at which this buffer should be rendered. flags A bitmask of flags BUFFER_FLAG_SYNC_FRAME, BUFFER_FLAG_CODEC_CONFIG or BUFFER_FLAG_END_OF_STREAM. Throws MediaCodec.CryptoException if an error occurs while attempting to decrypt the buffer. An error code associated with the exception helps identify the reason for the failure.
	4:	java.text.CharacterIterator public abstract char previous () Decrements the current index and returns the character at the new index. Returns the character at the previous index, or DONE if the previous index would be past the beginning.
	5:	android.media.MediaCodec public final void queueInputBuffer (int index, int offset, int size, long presentationTimeUs, int flags) After filling a range of the input buffer at the specified index submit it to the component. Many decoders require the actual compressed data stream to be preceded by "codec specific data", i.e. setup data used to initialize the codec such as PPS/SPS in the case of AVC video or code tables in the case of vorbis audio. The class MediaExtractor provides codec specific data as part of the returned track format in entries named "csd-0", "csd-1" ... These buffers should be submitted using the flag BUFFER_FLAG_CODEC_CONFIG. To indicate that this is the final piece of input data (or rather that no more input data follows unless the decoder is subsequently flushed) specify the flag BUFFER_FLAG_END_OF_STREAM. Parameters index The index of a client-owned input buffer previously returned in a call to dequeueInputBuffer(long). offset The byte offset into the input buffer at which the data starts. size The number of bytes of valid input data. presentationTimeUs The time at which this buffer should be rendered. flags A bitmask of flags BUFFER_FLAG_SYNC_FRAME, BUFFER_FLAG_CODEC_CONFIG or BUFFER_FLAG_END_OF_STREAM. Throws MediaCodec.CryptoException if a crypto object has been specified in configure(MediaFormat, Surface, MediaCrypto, int)
	6:	android.media.AudioManager public int getStreamMaxVolume (int streamType) Returns the maximum volume index for a particular stream. Parameters streamType The stream type whose maximum volume index is returned. Returns The maximum valid volume index for the stream. See Also getStreamVolume(int)
	7:	java.text.CharacterIterator public abstract char current () Returns the character at the current index. Returns the current character, or DONE if the current index is past the beginning or end of the sequence.
	8:	android.graphics.drawable.AnimationDrawable public int getDuration (int i) Returns The duration in milliseconds of the frame at the specified index
	9:	android.media.AudioTrack protected int getNativeFrameCount () This method was deprecated in API level 19. Only accessible by subclasses, which are not recommended for AudioTrack. See getProperty(String) for key PROPERTY_OUTPUT_FRAMES_PER_BUFFER. Returns the "native frame count", derived from the bufferSizeInBytes specified at creation time and converted to frame units. If track's creation mode is MODE_STATIC, it is equal to the specified bufferSizeInBytes converted to frame units. If track's creation mode is MODE_STREAM, it is typically greater than or equal to the specified bufferSizeInBytes converted to frame units; it may be rounded up to a larger value if needed by the target device implementation.
getRawFrameCount
Gets the number of raw frames for this Sprite
	0:	android.view.Choreographer.FrameCallback public abstract void doFrame (long frameTimeNanos) Called when a new display frame is being rendered. This method provides the time in nanoseconds when the frame started being rendered. The frame time provides a stable time base for synchronizing animations and drawing. It should be used instead of uptimeMillis() or nanoTime() for animations and drawing in the UI. Using the frame time helps to reduce inter-frame jitter because the frame time is fixed at the time the frame was scheduled to start, regardless of when the animations or drawing callback actually runs. All callbacks that run as part of rendering a frame will observe the same frame time so using the frame time also helps to synchronize effects that are performed by different callbacks. Please note that the framework already takes care to process animations and drawing using the frame time as a stable time base. Most applications should not need to use the frame time information directly. Parameters frameTimeNanos The time in nanoseconds when the frame started being rendered, in the nanoTime() timebase. Divide this value by 1000000 to convert it to the uptimeMillis() time base.
	1:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	2:	android.view.Choreographer public void postFrameCallbackDelayed (Choreographer.FrameCallback callback, long delayMillis) Posts a frame callback to run on the next frame after the specified delay. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. delayMillis The delay time in milliseconds. See Also postFrameCallback(Choreographer.FrameCallback) removeFrameCallback(Choreographer.FrameCallback)
	3:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs) Call this method after setDataSource(). This method finds a representative frame close to the given time position if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source. Call this method if one does not care how the frame is found as long as it is close to the given time; otherwise, please call getFrameAtTime(long, int). Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarentee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved. See Also getFrameAtTime(long, int)
	4:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	5:	android.view.animation.Animation public long getStartTime () When this animation should start. If the animation has not startet yet, this method might return START_ON_FIRST_FRAME. Returns the time in milliseconds when the animation should start or START_ON_FIRST_FRAME
	6:	android.view.animation.AnimationSet public long getStartTime () When this animation should start. If the animation has not startet yet, this method might return START_ON_FIRST_FRAME. Returns the time in milliseconds when the animation should start or START_ON_FIRST_FRAME
	7:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs, int option) Call this method after setDataSource(). This method finds a representative frame close to the given time position by considering the given option if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source or just obtain and display a frame at the given time position. Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarantee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. option a hint on how the frame is found. Use OPTION_PREVIOUS_SYNC if one wants to retrieve a sync frame that has a timestamp earlier than or the same as timeUs. Use OPTION_NEXT_SYNC if one wants to retrieve a sync frame that has a timestamp later than or the same as timeUs. Use OPTION_CLOSEST_SYNC if one wants to retrieve a sync frame that has a timestamp closest to or the same as timeUs. Use OPTION_CLOSEST if one wants to retrieve a frame that may or may not be a sync frame but is closest to or the same as timeUs. OPTION_CLOSEST often has larger performance overhead compared to the other options if there is no sync frame located at timeUs. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved.
	8:	android.nfc.tech.IsoDep public byte[] transceive (byte[] data) Send raw ISO-DEP data to the tag and receive the response. Applications must only send the INF payload, and not the start of frame and end of frame indicators. Applications do not need to fragment the payload, it will be automatically fragmented and defragmented by transceive(byte[]) if it exceeds FSD/FSC limits. Use getMaxTransceiveLength() to retrieve the maximum number of bytes that can be sent with transceive(byte[]). This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with IOException if close() is called from another thread. Requires the NFC permission. Parameters data command bytes to send, must not be null Returns response bytes received, will not be null Throws if the tag leaves the field IOException if there is an I/O failure, or this operation is canceled
	9:	android.media.ImageReader public Image acquireNextImage () Acquire the next Image from the ImageReader's queue. Returns null if no new image is available. Warning: Consider using acquireLatestImage() instead, as it will automatically release older images, and allow slower-running processing routines to catch up to the newest frame. Usage of acquireNextImage() is recommended for batch/background processing. Incorrectly using this function can cause images to appear with an ever-increasing delay, followed by a complete stall where no new images seem to appear. This operation will fail by throwing an IllegalStateException if maxImages have been acquired with acquireNextImage() or acquireLatestImage(). In particular a sequence of acquireNextImage() or acquireLatestImage() calls greater than maxImages without calling close() in-between will exhaust the underlying queue. At such a time, IllegalStateException will be thrown until more images are released with close(). Returns a new frame of image data, or null if no image data is available. Throws IllegalStateException if maxImages images are currently acquired See Also acquireLatestImage()
getFrameSequenceLength
Gets the number of elements in the frame sequence
	0:	android.hardware.Camera.Parameters public List<int[]> getSupportedPreviewFpsRange () Gets the supported preview fps (frame-per-second) ranges. Each range contains a minimum fps and maximum fps. If minimum fps equals to maximum fps, the camera outputs frames in fixed frame rate. If not, the camera outputs frames in auto frame rate. The actual frame rate fluctuates between the minimum and the maximum. The values are multiplied by 1000 and represented in integers. For example, if frame rate is 26.623 frames per second, the value is 26623. Returns a list of supported preview fps ranges. This method returns a list with at least one element. Every element is an int array of two values - minimum fps and maximum fps. The list is sorted from small to large (first by maximum fps and then minimum fps). See Also PREVIEW_FPS_MIN_INDEX PREVIEW_FPS_MAX_INDEX
	1:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	2:	android.view.Choreographer public void postFrameCallbackDelayed (Choreographer.FrameCallback callback, long delayMillis) Posts a frame callback to run on the next frame after the specified delay. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. delayMillis The delay time in milliseconds. See Also postFrameCallback(Choreographer.FrameCallback) removeFrameCallback(Choreographer.FrameCallback)
	3:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs) Call this method after setDataSource(). This method finds a representative frame close to the given time position if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source. Call this method if one does not care how the frame is found as long as it is close to the given time; otherwise, please call getFrameAtTime(long, int). Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarentee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved. See Also getFrameAtTime(long, int)
	4:	android.view.Choreographer.FrameCallback public abstract void doFrame (long frameTimeNanos) Called when a new display frame is being rendered. This method provides the time in nanoseconds when the frame started being rendered. The frame time provides a stable time base for synchronizing animations and drawing. It should be used instead of uptimeMillis() or nanoTime() for animations and drawing in the UI. Using the frame time helps to reduce inter-frame jitter because the frame time is fixed at the time the frame was scheduled to start, regardless of when the animations or drawing callback actually runs. All callbacks that run as part of rendering a frame will observe the same frame time so using the frame time also helps to synchronize effects that are performed by different callbacks. Please note that the framework already takes care to process animations and drawing using the frame time as a stable time base. Most applications should not need to use the frame time information directly. Parameters frameTimeNanos The time in nanoseconds when the frame started being rendered, in the nanoTime() timebase. Divide this value by 1000000 to convert it to the uptimeMillis() time base.
	5:	android.widget.EdgeEffect public boolean draw (Canvas canvas) Draw into the provided canvas. Assumes that the canvas has been rotated accordingly and the size has been set. The effect will be drawn the full width of X=0 to X=width, beginning from Y=0 and extending to some factor < 1.f of height. Parameters canvas Canvas to draw into Returns true if drawing should continue beyond this frame to continue the animation
	6:	android.support.v4.widget.EdgeEffectCompat public boolean draw (Canvas canvas) Draw into the provided canvas. Assumes that the canvas has been rotated accordingly and the size has been set. The effect will be drawn the full width of X=0 to X=width, beginning from Y=0 and extending to some factor < 1.f of height. Parameters canvas Canvas to draw into Returns true if drawing should continue beyond this frame to continue the animation
	7:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	8:	android.view.animation.Animation public long getStartTime () When this animation should start. If the animation has not startet yet, this method might return START_ON_FIRST_FRAME. Returns the time in milliseconds when the animation should start or START_ON_FIRST_FRAME
	9:	android.view.animation.AnimationSet public long getStartTime () When this animation should start. If the animation has not startet yet, this method might return START_ON_FIRST_FRAME. Returns the time in milliseconds when the animation should start or START_ON_FIRST_FRAME
nextFrame
Selects the next frame in the frame sequence
	0:	android.view.Choreographer public void postFrameCallback (Choreographer.FrameCallback callback) Posts a frame callback to run on the next frame. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. See Also postFrameCallbackDelayed(Choreographer.FrameCallback, long) removeFrameCallback(Choreographer.FrameCallback)
	1:	android.view.Choreographer public void postFrameCallbackDelayed (Choreographer.FrameCallback callback, long delayMillis) Posts a frame callback to run on the next frame after the specified delay. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. delayMillis The delay time in milliseconds. See Also postFrameCallback(Choreographer.FrameCallback) removeFrameCallback(Choreographer.FrameCallback)
	2:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	3:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs, int option) Call this method after setDataSource(). This method finds a representative frame close to the given time position by considering the given option if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source or just obtain and display a frame at the given time position. Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarantee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. option a hint on how the frame is found. Use OPTION_PREVIOUS_SYNC if one wants to retrieve a sync frame that has a timestamp earlier than or the same as timeUs. Use OPTION_NEXT_SYNC if one wants to retrieve a sync frame that has a timestamp later than or the same as timeUs. Use OPTION_CLOSEST_SYNC if one wants to retrieve a sync frame that has a timestamp closest to or the same as timeUs. Use OPTION_CLOSEST if one wants to retrieve a frame that may or may not be a sync frame but is closest to or the same as timeUs. OPTION_CLOSEST often has larger performance overhead compared to the other options if there is no sync frame located at timeUs. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved.
	4:	android.graphics.Interpolator public void setKeyFrame (int index, int msec, float[] values) Assign the keyFrame (specified by index) a time value and an array of key values (with an implicity blend array of [0, 0, 1, 1] giving linear transition to the next set of key values). Parameters index The index of the key frame to assign msec The time (in mililiseconds) for this key frame. Based on the SystemClock.uptimeMillis() clock values Array of values associated with theis key frame
	5:	android.hardware.Camera.Parameters public List<Integer> getSupportedPreviewFrameRates () This method was deprecated in API level 9. replaced by getSupportedPreviewFpsRange() Gets the supported preview frame rates. Returns a list of supported preview frame rates. null if preview frame rate setting is not supported.
	6:	android.view.Choreographer public void removeFrameCallback (Choreographer.FrameCallback callback) Removes a previously posted frame callback. Parameters callback The frame callback to remove. See Also postFrameCallback(Choreographer.FrameCallback) postFrameCallbackDelayed(Choreographer.FrameCallback, long)
	7:	android.graphics.drawable.AnimationDrawable public Drawable getFrame (int index) Returns The Drawable at the specified frame index
	8:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	9:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs) Call this method after setDataSource(). This method finds a representative frame close to the given time position if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source. Call this method if one does not care how the frame is found as long as it is close to the given time; otherwise, please call getFrameAtTime(long, int). Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarentee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved. See Also getFrameAtTime(long, int)
prevFrame
Selects the previous frame in the frame sequence
	0:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	1:	android.hardware.Camera.Parameters public List<Integer> getSupportedPreviewFrameRates () This method was deprecated in API level 9. replaced by getSupportedPreviewFpsRange() Gets the supported preview frame rates. Returns a list of supported preview frame rates. null if preview frame rate setting is not supported.
	2:	android.view.Choreographer public void removeFrameCallback (Choreographer.FrameCallback callback) Removes a previously posted frame callback. Parameters callback The frame callback to remove. See Also postFrameCallback(Choreographer.FrameCallback) postFrameCallbackDelayed(Choreographer.FrameCallback, long)
	3:	android.graphics.drawable.AnimationDrawable public Drawable getFrame (int index) Returns The Drawable at the specified frame index
	4:	android.view.Choreographer public void postFrameCallback (Choreographer.FrameCallback callback) Posts a frame callback to run on the next frame. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. See Also postFrameCallbackDelayed(Choreographer.FrameCallback, long) removeFrameCallback(Choreographer.FrameCallback)
	5:	android.view.Choreographer public void postFrameCallbackDelayed (Choreographer.FrameCallback callback, long delayMillis) Posts a frame callback to run on the next frame after the specified delay. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. delayMillis The delay time in milliseconds. See Also postFrameCallback(Choreographer.FrameCallback) removeFrameCallback(Choreographer.FrameCallback)
	6:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	7:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs) Call this method after setDataSource(). This method finds a representative frame close to the given time position if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source. Call this method if one does not care how the frame is found as long as it is close to the given time; otherwise, please call getFrameAtTime(long, int). Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarentee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved. See Also getFrameAtTime(long, int)
	8:	android.view.Choreographer.FrameCallback public abstract void doFrame (long frameTimeNanos) Called when a new display frame is being rendered. This method provides the time in nanoseconds when the frame started being rendered. The frame time provides a stable time base for synchronizing animations and drawing. It should be used instead of uptimeMillis() or nanoTime() for animations and drawing in the UI. Using the frame time helps to reduce inter-frame jitter because the frame time is fixed at the time the frame was scheduled to start, regardless of when the animations or drawing callback actually runs. All callbacks that run as part of rendering a frame will observe the same frame time so using the frame time also helps to synchronize effects that are performed by different callbacks. Please note that the framework already takes care to process animations and drawing using the frame time as a stable time base. Most applications should not need to use the frame time information directly. Parameters frameTimeNanos The time in nanoseconds when the frame started being rendered, in the nanoTime() timebase. Divide this value by 1000000 to convert it to the uptimeMillis() time base.
	9:	android.os.Build public Build () 
paint
Draws the Sprite
	0:	android.graphics.Canvas public void drawPaint (Paint paint) Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint. Parameters paint The paint used to draw onto the canvas
	1:	android.graphics.Canvas public void drawPoints (float[] pts, Paint paint) Helper for drawPoints() that assumes you want to draw the entire array
	2:	android.graphics.NinePatch public Paint getPaint () Returns the paint used to draw this NinePatch. The paint can be null. See Also setPaint(Paint) draw(Canvas, Rect) draw(Canvas, RectF)
	3:	android.graphics.Paint public Paint (Paint paint) Create a new paint, initialized with the attributes in the specified paint parameter. Parameters paint Existing paint used to initialized the attributes of the new paint.
	4:	android.graphics.drawable.shapes.ArcShape public void draw (Canvas canvas, Paint paint) Draw this shape into the provided Canvas, with the provided Paint. Before calling this, you must call resize(float, float). Parameters canvas the Canvas within which this shape should be drawn paint the Paint object that defines this shape's characteristics
	5:	android.graphics.Canvas public void drawPath (Path path, Paint paint) Draw the specified path using the specified paint. The path will be filled or framed based on the Style in the paint. Parameters path The path to be drawn paint The paint used to draw the path
	6:	android.graphics.Canvas public void drawRect (RectF rect, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters rect The rect to be drawn paint The paint used to draw the rect
	7:	android.graphics.Canvas public void drawRect (Rect r, Paint paint) Draw the specified Rect using the specified Paint. The rectangle will be filled or framed based on the Style in the paint. Parameters r The rectangle to be drawn. paint The paint used to draw the rectangle
	8:	android.graphics.drawable.shapes.OvalShape public void draw (Canvas canvas, Paint paint) Draw this shape into the provided Canvas, with the provided Paint. Before calling this, you must call resize(float, float). Parameters canvas the Canvas within which this shape should be drawn paint the Paint object that defines this shape's characteristics
	9:	android.graphics.drawable.shapes.PathShape public void draw (Canvas canvas, Paint paint) Draw this shape into the provided Canvas, with the provided Paint. Before calling this, you must call resize(float, float). Parameters canvas the Canvas within which this shape should be drawn paint the Paint object that defines this shape's characteristics
setFrameSequence
Set the frame sequence for this Sprite
	0:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	1:	android.hardware.Camera.Parameters public List<Integer> getSupportedPreviewFrameRates () This method was deprecated in API level 9. replaced by getSupportedPreviewFpsRange() Gets the supported preview frame rates. Returns a list of supported preview frame rates. null if preview frame rate setting is not supported.
	2:	android.view.Choreographer public void removeFrameCallback (Choreographer.FrameCallback callback) Removes a previously posted frame callback. Parameters callback The frame callback to remove. See Also postFrameCallback(Choreographer.FrameCallback) postFrameCallbackDelayed(Choreographer.FrameCallback, long)
	3:	android.media.MediaRecorder public void setVideoFrameRate (int rate) Sets the frame rate of the video to be captured. Must be called after setVideoSource(). Call this after setOutFormat() but before prepare(). Parameters rate the number of frames per second of video to capture Throws IllegalStateException if it is called after prepare() or before setOutputFormat(). NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions.
	4:	android.graphics.drawable.AnimationDrawable public Drawable getFrame (int index) Returns The Drawable at the specified frame index
	5:	android.view.Choreographer public void postFrameCallback (Choreographer.FrameCallback callback) Posts a frame callback to run on the next frame. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. See Also postFrameCallbackDelayed(Choreographer.FrameCallback, long) removeFrameCallback(Choreographer.FrameCallback)
	6:	android.view.Choreographer public void postFrameCallbackDelayed (Choreographer.FrameCallback callback, long delayMillis) Posts a frame callback to run on the next frame after the specified delay. The callback runs once then is automatically removed. Parameters callback The frame callback to run during the next frame. delayMillis The delay time in milliseconds. See Also postFrameCallback(Choreographer.FrameCallback) removeFrameCallback(Choreographer.FrameCallback)
	7:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs) Call this method after setDataSource(). This method finds a representative frame close to the given time position if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source. Call this method if one does not care how the frame is found as long as it is close to the given time; otherwise, please call getFrameAtTime(long, int). Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarentee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved. See Also getFrameAtTime(long, int)
	8:	android.view.Choreographer.FrameCallback public abstract void doFrame (long frameTimeNanos) Called when a new display frame is being rendered. This method provides the time in nanoseconds when the frame started being rendered. The frame time provides a stable time base for synchronizing animations and drawing. It should be used instead of uptimeMillis() or nanoTime() for animations and drawing in the UI. Using the frame time helps to reduce inter-frame jitter because the frame time is fixed at the time the frame was scheduled to start, regardless of when the animations or drawing callback actually runs. All callbacks that run as part of rendering a frame will observe the same frame time so using the frame time also helps to synchronize effects that are performed by different callbacks. Please note that the framework already takes care to process animations and drawing using the frame time as a stable time base. Most applications should not need to use the frame time information directly. Parameters frameTimeNanos The time in nanoseconds when the frame started being rendered, in the nanoTime() timebase. Divide this value by 1000000 to convert it to the uptimeMillis() time base.
	9:	android.media.MediaMetadataRetriever public Bitmap getFrameAtTime (long timeUs, int option) Call this method after setDataSource(). This method finds a representative frame close to the given time position by considering the given option if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source or just obtain and display a frame at the given time position. Parameters timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarantee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned. option a hint on how the frame is found. Use OPTION_PREVIOUS_SYNC if one wants to retrieve a sync frame that has a timestamp earlier than or the same as timeUs. Use OPTION_NEXT_SYNC if one wants to retrieve a sync frame that has a timestamp later than or the same as timeUs. Use OPTION_CLOSEST_SYNC if one wants to retrieve a sync frame that has a timestamp closest to or the same as timeUs. Use OPTION_CLOSEST if one wants to retrieve a frame that may or may not be a sync frame but is closest to or the same as timeUs. OPTION_CLOSEST often has larger performance overhead compared to the other options if there is no sync frame located at timeUs. Returns A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved.
setImage
Changes the Image containing the Sprite's frames
	0:	java.text.Normalizer public static boolean isNormalized (CharSequence src, Normalizer.Form form) Check whether the given character sequence src is normalized according to the normalization method form. Parameters src character sequence to check form normalization form to check against Returns true if normalized according to form
	1:	android.graphics.drawable.AnimationDrawable public void addFrame (Drawable frame, int duration) Add a frame to the animation Parameters frame The frame to add duration How long in milliseconds the frame should appear
	2:	android.view.Gravity public static void apply (int gravity, int w, int h, Rect container, Rect outRect) Apply a gravity constant to an object. This supposes that the layout direction is LTR. Parameters gravity The desired placement of the object, as defined by the constants in this class. w The horizontal size of the object. h The vertical size of the object. container The frame of the containing space, in which the object will be placed. Should be large enough to contain the width and height of the object. outRect Receives the computed frame of the object in its container.
	3:	android.hardware.Camera public final void setOneShotPreviewCallback (Camera.PreviewCallback cb) Installs a callback to be invoked for the next preview frame in addition to displaying it on the screen. After one invocation, the callback is cleared. This method can be called any time, even when preview is live. Any other preview callbacks are overridden. If you are using the preview data to create video or still images, strongly consider using MediaActionSound to properly indicate image capture or recording start/stop to the user. Parameters cb a callback object that receives a copy of the next preview frame, or null to stop receiving callbacks. See Also MediaActionSound
	4:	android.hardware.Camera public final void setPreviewCallback (Camera.PreviewCallback cb) Installs a callback to be invoked for every preview frame in addition to displaying them on the screen. The callback will be repeatedly called for as long as preview is active. This method can be called at any time, even while preview is live. Any other preview callbacks are overridden. If you are using the preview data to create video or still images, strongly consider using MediaActionSound to properly indicate image capture or recording start/stop to the user. Parameters cb a callback object that receives a copy of each preview frame, or null to stop receiving callbacks. See Also MediaActionSound
	5:	android.hardware.Camera public final void setPreviewCallbackWithBuffer (Camera.PreviewCallback cb) Installs a callback to be invoked for every preview frame, using buffers supplied with addCallbackBuffer(byte[]), in addition to displaying them on the screen. The callback will be repeatedly called for as long as preview is active and buffers are available. Any other preview callbacks are overridden. The purpose of this method is to improve preview efficiency and frame rate by allowing preview frame memory reuse. You must call addCallbackBuffer(byte[]) at some point -- before or after calling this method -- or no callbacks will received. The buffer queue will be cleared if this method is called with a null callback, setPreviewCallback(Camera.PreviewCallback) is called, or setOneShotPreviewCallback(Camera.PreviewCallback) is called. If you are using the preview data to create video or still images, strongly consider using MediaActionSound to properly indicate image capture or recording start/stop to the user. Parameters cb a callback object that receives a copy of the preview frame, or null to stop receiving callbacks and clear the buffer queue. See Also addCallbackBuffer(byte[]) MediaActionSound
	6:	android.webkit.CookieSyncManager public void stopSync () stopSync() requests sync manager to stop sync. remove any SYNC_MESSAGE in the queue to break the sync loop
	7:	android.hardware.Camera public final void addCallbackBuffer (byte[] callbackBuffer) Adds a pre-allocated buffer to the preview callback buffer queue. Applications can add one or more buffers to the queue. When a preview frame arrives and there is still at least one available buffer, the buffer will be used and removed from the queue. Then preview callback is invoked with the buffer. If a frame arrives and there is no buffer left, the frame is discarded. Applications should add buffers back when they finish processing the data in them. For formats besides YV12, the size of the buffer is determined by multiplying the preview image width, height, and bytes per pixel. The width and height can be read from getPreviewSize(). Bytes per pixel can be computed from getBitsPerPixel(int) / 8, using the image format from getPreviewFormat(). If using the YV12 format, the size can be calculated using the equations listed in setPreviewFormat(int). This method is only necessary when setPreviewCallbackWithBuffer(PreviewCallback) is used. When setPreviewCallback(PreviewCallback) or setOneShotPreviewCallback(PreviewCallback) are used, buffers are automatically allocated. When a supplied buffer is too small to hold the preview frame data, preview callback will return null and the buffer will be removed from the buffer queue. Parameters callbackBuffer the buffer to add to the queue. The size of the buffer must match the values described above. See Also setPreviewCallbackWithBuffer(PreviewCallback)
	8:	android.preference.Preference public void setLayoutResource (int layoutResId) Sets the layout resource that is inflated as the View to be shown for this Preference. In most cases, the default layout is sufficient for custom Preference objects and only the widget layout needs to be changed. This layout should contain a ViewGroup with ID widget_frame to be the parent of the specific widget for this Preference. It should similarly contain title and summary. Parameters layoutResId The layout resource ID to be inflated and returned as a View. See Also setWidgetLayoutResource(int)
	9:	android.view.Gravity public static void apply (int gravity, int w, int h, Rect container, Rect outRect, int layoutDirection) Apply a gravity constant to an object and take care if layout direction is RTL or not. Parameters gravity The desired placement of the object, as defined by the constants in this class. w The horizontal size of the object. h The vertical size of the object. container The frame of the containing space, in which the object will be placed. Should be large enough to contain the width and height of the object. outRect Receives the computed frame of the object in its container. layoutDirection The layout direction. See Also LAYOUT_DIRECTION_LTR LAYOUT_DIRECTION_RTL
defineCollisionRectangle
Defines the Sprite's bounding rectangle that is used for collision detection purposes
	0:	org.apache.http.message.BasicTokenIterator protected boolean isHttpSeparator (char ch) Checks whether a character is an HTTP separator. The implementation in this class checks only for the HTTP separators defined in RFC 2616, section 2.2. If you need to detect other separators beyond the US-ASCII character set, override this method. Parameters ch the character to check Returns true if the character is an HTTP separator
	1:	android.appwidget.AppWidgetManager public int[] getAppWidgetIds (ComponentName provider) Get the list of appWidgetIds that have been bound to the given AppWidget provider. Parameters provider The BroadcastReceiver that is the AppWidget provider to find appWidgetIds for.
	2:	java.util.Locale public String getDisplayName (Locale locale) Returns this locale's language name, country name, and variant, localized to locale. The exact output form depends on whether this locale corresponds to a specific language, country and variant. For example: new Locale("en").getDisplayName(Locale.US) -> English new Locale("en", "US").getDisplayName(Locale.US) -> English (United States) new Locale("en", "US", "POSIX").getDisplayName(Locale.US) -> English (United States,Computer) new Locale("en").getDisplayName(Locale.FRANCE) -> anglais new Locale("en", "US").getDisplayName(Locale.FRANCE) -> anglais (États-Unis) new Locale("en", "US", "POSIX").getDisplayName(Locale.FRANCE) -> anglais (États-Unis,informatique).
	3:	java.util.Scanner public String findWithinHorizon (String pattern, int horizon) Tries to find the pattern in the input between the current position and the specified horizon. Delimiters are ignored. This call is the same as invoking findWithinHorizon(Pattern.compile(pattern)). Parameters pattern the pattern used to scan. horizon the search limit. Returns the matched string, or null if the pattern is not found within the specified horizon. Throws IllegalStateException if the Scanner is closed. IllegalArgumentException if horizon is less than zero. See Also findWithinHorizon(Pattern, int)
	4:	android.text.format.DateUtils public static String formatElapsedTime (long elapsedSeconds) Formats an elapsed time in the form "MM:SS" or "H:MM:SS" for display on the call-in-progress screen. Parameters elapsedSeconds the elapsed time in seconds.
	5:	android.widget.Chronometer public void setFormat (String format) Sets the format string used for display. The Chronometer will display this string, with the first "%s" replaced by the current timer value in "MM:SS" or "H:MM:SS" form. If the format string is null, or if you never call setFormat(), the Chronometer will simply display the timer value in "MM:SS" or "H:MM:SS" form. Parameters format the format string.
	6:	android.view.FocusFinder public View findNearestTouchable (ViewGroup root, int x, int y, int direction, int[] deltas) Find the nearest touchable view to the specified view. Parameters root The root of the tree in which to search x X coordinate from which to start the search y Y coordinate from which to start the search direction Direction to look deltas Offset from the to the edge of the nearest view. Note that this array may already be populated with values. Returns The nearest touchable view, or null if none exists.
	7:	java.util.Currency public int getDefaultFractionDigits () Returns the default number of fraction digits for this currency. For instance, the default number of fraction digits for the US dollar is 2 because there are 100 US cents in a US dollar. For the Japanese Yen, the number is 0 because coins smaller than 1 Yen became invalid in 1953. In the case of pseudo-currencies, such as IMF Special Drawing Rights, -1 is returned.
	8:	android.location.Address public String getCountryCode () Returns the country code of the address, for example "US", or null if it is unknown.
	9:	android.os.Message public static Message obtain () Return a new Message instance from the global pool. Allows us to avoid allocating new objects in many cases.
setTransform
Sets the transform for this Sprite
	0:	android.graphics.Matrix public void setTranslate (float dx, float dy) Set the matrix to translate by (dx, dy).
	1:	android.graphics.Region public void translate (int dx, int dy, Region dst) Set the dst region to the result of translating this region by [dx, dy]. If this region is empty, then dst will be set to empty.
	2:	android.graphics.Camera public void applyToCanvas (Canvas canvas) Computes the matrix corresponding to the current transformation and applies it to the specified Canvas. Parameters canvas The Canvas to set the transform matrix onto
	3:	javax.xml.transform.dom.DOMSource public DOMSource () Zero-argument default constructor. If this constructor is used, and no DOM source is set using setNode(Node) , then the Transformer will create an empty source Document using newDocument(). See Also transform(Source, Result)
	4:	javax.xml.transform.sax.SAXSource public SAXSource () Zero-argument default constructor. If this constructor is used, and no SAX source is set using setInputSource(InputSource) , then the Transformer will create an empty source InputSource using new InputSource(). See Also transform(Source, Result)
	5:	android.graphics.Matrix public void mapPoints (float[] pts) Apply this matrix to the array of 2D points, and write the transformed points back into the array Parameters pts The array [x0, y0, x1, y1, ...] of points to transform.
	6:	android.bluetooth.BluetoothGattCharacteristic public boolean setValue (int value, int formatType, int offset) Set the locally stored value of this characteristic. See setValue(byte[]) for details. Parameters value New value for this characteristic formatType Integer format type used to transform the value parameter offset Offset at which the value should be placed Returns true if the locally stored value has been set
	7:	android.widget.Gallery protected boolean getChildStaticTransformation (View child, Transformation t) Sets t to be the static transformation of the child, if set, returning a boolean to indicate whether a static transform was set. The default implementation simply returns false; subclasses may override this method for different behavior. setStaticTransformationsEnabled(boolean) must be set to true for this method to be called. Parameters child The child view whose static transform is being requested t The Transformation which will hold the result Returns true if the transformation was set, false otherwise
	8:	javax.crypto.Cipher public final byte[] update (byte[] input, int inputOffset, int inputLen) Continues a multi-part transformation (encryption or decryption). The transformed bytes are returned. Parameters input the input bytes to transform. inputOffset the offset in the input to start. inputLen the length of the input to transform. Returns the transformed bytes in a new buffer, or null if the input has zero length. Throws IllegalStateException if this cipher instance is not initialized for encryption or decryption. IllegalArgumentException if input is null, or if inputOffset and inputLen do not specify a valid chunk in the input buffer.
	9:	javax.crypto.CipherSpi protected abstract byte[] engineUpdate (byte[] input, int inputOffset, int inputLen) Continues a multi-part transformation (encryption or decryption). The transformed bytes are returned. Parameters input the input bytes to transform. inputOffset the offset in the input to start. inputLen the length of the input to transform. Returns the transformed bytes in a new buffer, or null if the input has zero length. Throws IllegalStateException if this cipher instance is not initialized for encryption or decryption. IllegalArgumentException if the input is null, or if inputOffset and inputLen do not specify a valid chunk in the input buffer.
collidesWith
Checks for a collision between this Sprite and the specified Sprite
	0:	android.os.Debug public static int getGlobalClassInitTime () Returns the time spent successfully initializing classes between a start and stop.
	1:	android.os.Debug public static int getGlobalGcInvocationCount () Returns the number of non-concurrent GC invocations between a start and stop.
	2:	android.widget.GridView public int getVerticalSpacing () Returns the amount of vertical spacing between each item in the grid. Related XML Attributes android:verticalSpacing Returns The vertical spacing between items in pixels See Also setVerticalSpacing(int)
	3:	android.widget.GridView public void setVerticalSpacing (int verticalSpacing) Set the amount of vertical (y) spacing to place between each item in the grid. Related XML Attributes android:verticalSpacing Parameters verticalSpacing The amount of vertical space between items, in pixels. See Also getVerticalSpacing()
	4:	junit.framework.ComparisonFailure public String getMessage () Returns "..." in place of common prefix and "..." in place of common suffix between expected and actual. See Also getMessage()
	5:	android.os.Debug public static int getGlobalAllocCount () Returns the global count of objects allocated by the runtime between a start and stop.
	6:	android.os.Debug public static int getGlobalAllocSize () Returns the global size, in bytes, of objects allocated by the runtime between a start and stop.
	7:	android.os.Debug public static int getGlobalClassInitCount () Returns the number of classes successfully initialized (ie those that executed without throwing an exception) between a start and stop.
	8:	android.os.Debug public static int getGlobalFreedCount () Returns the global count of objects freed by the runtime between a start and stop.
	9:	android.os.Debug public static int getGlobalFreedSize () Returns the global size, in bytes, of objects freed by the runtime between a start and stop.
collidesWith
Checks for a collision between this Sprite and the specified TiledLayer
	0:	android.os.Debug public static int getGlobalClassInitTime () Returns the time spent successfully initializing classes between a start and stop.
	1:	android.os.Debug public static int getGlobalGcInvocationCount () Returns the number of non-concurrent GC invocations between a start and stop.
	2:	android.widget.GridView public int getVerticalSpacing () Returns the amount of vertical spacing between each item in the grid. Related XML Attributes android:verticalSpacing Returns The vertical spacing between items in pixels See Also setVerticalSpacing(int)
	3:	android.widget.GridView public void setVerticalSpacing (int verticalSpacing) Set the amount of vertical (y) spacing to place between each item in the grid. Related XML Attributes android:verticalSpacing Parameters verticalSpacing The amount of vertical space between items, in pixels. See Also getVerticalSpacing()
	4:	junit.framework.ComparisonFailure public String getMessage () Returns "..." in place of common prefix and "..." in place of common suffix between expected and actual. See Also getMessage()
	5:	android.os.Debug public static int getGlobalAllocCount () Returns the global count of objects allocated by the runtime between a start and stop.
	6:	android.os.Debug public static int getGlobalAllocSize () Returns the global size, in bytes, of objects allocated by the runtime between a start and stop.
	7:	android.os.Debug public static int getGlobalClassInitCount () Returns the number of classes successfully initialized (ie those that executed without throwing an exception) between a start and stop.
	8:	android.os.Debug public static int getGlobalFreedCount () Returns the global count of objects freed by the runtime between a start and stop.
	9:	android.os.Debug public static int getGlobalFreedSize () Returns the global size, in bytes, of objects freed by the runtime between a start and stop.
collidesWith
Checks for a collision between this Sprite and the specified Image with its upper left corner at the specified location
	0:	android.widget.PopupWindow public void showAsDropDown (View anchor) Display the content view in a popup window anchored to the bottom-left corner of the anchor view. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled, the bottom-left corner of the popup is pinned at the top left corner of the anchor view. Parameters anchor the view on which to pin the popup window See Also dismiss()
	1:	android.graphics.drawable.GradientDrawable public void setCornerRadii (float[] radii) Specify radii for each of the 4 corners. For each corner, the array contains 2 values, [X_radius, Y_radius]. The corners are ordered top-left, top-right, bottom-right, bottom-left. This property is honored only when the shape is of type RECTANGLE. Note: changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Parameters radii 4 pairs of X and Y radius for each corner, specified in pixels. The length of this array must be >= 8 See Also mutate() setCornerRadii(float[]) setShape(int)
	2:	android.widget.PopupWindow public void showAsDropDown (View anchor, int xoff, int yoff, int gravity) Display the content view in a popup window anchored to the bottom-left corner of the anchor view offset by the specified x and y coordinates. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled, the bottom-left corner of the popup is pinned at the top left corner of the anchor view. If the view later scrolls to move anchor to a different location, the popup will be moved correspondingly. Parameters anchor the view on which to pin the popup window xoff A horizontal offset from the anchor in pixels yoff A vertical offset from the anchor in pixels gravity Alignment of the popup relative to the anchor See Also dismiss()
	3:	android.widget.PopupWindow public void showAsDropDown (View anchor, int xoff, int yoff) Display the content view in a popup window anchored to the bottom-left corner of the anchor view offset by the specified x and y coordinates. If there is not enough room on screen to show the popup in its entirety, this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled, the bottom-left corner of the popup is pinned at the top left corner of the anchor view. If the view later scrolls to move anchor to a different location, the popup will be moved correspondingly. Parameters anchor the view on which to pin the popup window xoff A horizontal offset from the anchor in pixels yoff A vertical offset from the anchor in pixels See Also dismiss()
	4:	android.graphics.drawable.shapes.RoundRectShape public RoundRectShape (float[] outerRadii, RectF inset, float[] innerRadii) RoundRectShape constructor. Specifies an outer (round)rect and an optional inner (round)rect. Parameters outerRadii An array of 8 radius values, for the outer roundrect. The first two floats are for the top-left corner (remaining pairs correspond clockwise). For no rounded corners on the outer rectangle, pass null. inset A RectF that specifies the distance from the inner rect to each side of the outer rect. For no inner, pass null. innerRadii An array of 8 radius values, for the inner roundrect. The first two floats are for the top-left corner (remaining pairs correspond clockwise). For no rounded corners on the inner rectangle, pass null. If inset parameter is null, this parameter is ignored.
	5:	android.graphics.Rect public Rect (int left, int top, int right, int bottom) Create a new rectangle with the specified coordinates. Note: no range checking is performed, so the caller must ensure that left <= right and top <= bottom. Parameters left The X coordinate of the left side of the rectangle top The Y coordinate of the top of the rectangle right The X coordinate of the right side of the rectangle bottom The Y coordinate of the bottom of the rectangle
	6:	android.graphics.RectF public RectF (float left, float top, float right, float bottom) Create a new rectangle with the specified coordinates. Note: no range checking is performed, so the caller must ensure that left <= right and top <= bottom. Parameters left The X coordinate of the left side of the rectangle top The Y coordinate of the top of the rectangle right The X coordinate of the right side of the rectangle bottom The Y coordinate of the bottom of the rectangle
	7:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, float left, float top, Paint paint) Draw the specified bitmap, with its top/left corner at (x,y), using the specified paint, transformed by the current matrix. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. If the bitmap and canvas have different densities, this function will take care of automatically scaling the bitmap to draw at the same density as the canvas. Parameters bitmap The bitmap to be drawn left The position of the left side of the bitmap being drawn top The position of the top side of the bitmap being drawn paint The paint used to draw the bitmap (may be null)
	8:	android.location.Geocoder public List<Address> getFromLocationName (String locationName, int maxResults, double lowerLeftLatitude, double lowerLeftLongitude, double upperRightLatitude, double upperRightLongitude) Returns an array of Addresses that are known to describe the named location, which may be a place name such as "Dalvik, Iceland", an address such as "1600 Amphitheatre Parkway, Mountain View, CA", an airport code such as "SFO", etc.. The returned addresses will be localized for the locale provided to this class's constructor. You may specify a bounding box for the search results by including the Latitude and Longitude of the Lower Left point and Upper Right point of the box. The query will block and returned values will be obtained by means of a network lookup. The results are a best guess and are not guaranteed to be meaningful or correct. It may be useful to call this method from a thread separate from your primary UI thread. Parameters locationName a user-supplied description of a location maxResults max number of addresses to return. Smaller numbers (1 to 5) are recommended lowerLeftLatitude the latitude of the lower left corner of the bounding box lowerLeftLongitude the longitude of the lower left corner of the bounding box upperRightLatitude the latitude of the upper right corner of the bounding box upperRightLongitude the longitude of the upper right corner of the bounding box Returns a list of Address objects. Returns null or empty list if no matches were found or there is no backend service available. Throws IllegalArgumentException if locationName is null IllegalArgumentException if any latitude is less than -90 or greater than 90 IllegalArgumentException if any longitude is less than -180 or greater than 180 IOException if the network is unavailable or any other I/O problem occurs
	9:	android.view.animation.GridLayoutAnimationController public void setDirection (int direction) Sets the direction of the animation. The direction is expressed as an integer containing a horizontal and vertical component. For instance, DIRECTION_BOTTOM_TO_TOP | DIRECTION_RIGHT_TO_LEFT. Parameters direction the direction of the animation See Also getDirection() DIRECTION_BOTTOM_TO_TOP DIRECTION_TOP_TO_BOTTOM DIRECTION_LEFT_TO_RIGHT DIRECTION_RIGHT_TO_LEFT DIRECTION_HORIZONTAL_MASK DIRECTION_VERTICAL_MASK
