getTitle
Gets the title of the Displayable
	0:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	1:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	2:	android.view.Display public int getFlags () Returns a combination of flags that describe the capabilities of the display. Returns The display flags. See Also FLAG_SUPPORTS_PROTECTED_BUFFERS FLAG_SECURE FLAG_PRIVATE
	3:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	4:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	5:	android.view.Display public void getRectSize (Rect outSize) Gets the size of the display as a rectangle, in pixels. Parameters outSize A Rect object to receive the size information. See Also getSize(Point)
	6:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
	7:	android.view.Display public int getDisplayId () Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
	8:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	9:	android.hardware.display.DisplayManager public void registerDisplayListener (DisplayManager.DisplayListener listener, Handler handler) Registers an display listener to receive notifications about when displays are added, removed or changed. Parameters listener The listener to register. handler The handler on which the listener should be invoked, or null if the listener should be invoked on the calling thread's looper. See Also unregisterDisplayListener(DisplayManager.DisplayListener)
setTitle
Sets the title of the Displayable
	0:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	1:	android.hardware.display.DisplayManager public Display[] getDisplays () Gets all currently valid logical displays. Returns An array containing all displays.
	2:	android.view.Display public void getRealSize (Point outSize) Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outSize Set to the real size of the display.
	3:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	4:	android.view.Display public int getDisplayId () Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
	5:	android.hardware.display.DisplayManager public Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	6:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	7:	android.view.Display public float getRefreshRate () Gets the refresh rate of this display in frames per second.
	8:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	9:	android.view.Display public int getFlags () Returns a combination of flags that describe the capabilities of the display. Returns The display flags. See Also FLAG_SUPPORTS_PROTECTED_BUFFERS FLAG_SECURE FLAG_PRIVATE
getTicker
Gets the ticker used by this Displayable
	0:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	1:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	2:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	3:	android.view.Display public int getFlags () Returns a combination of flags that describe the capabilities of the display. Returns The display flags. See Also FLAG_SUPPORTS_PROTECTED_BUFFERS FLAG_SECURE FLAG_PRIVATE
	4:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	5:	android.view.Display public void getRectSize (Rect outSize) Gets the size of the display as a rectangle, in pixels. Parameters outSize A Rect object to receive the size information. See Also getSize(Point)
	6:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
	7:	android.view.Display public int getDisplayId () Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
	8:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	9:	android.hardware.display.DisplayManager public void registerDisplayListener (DisplayManager.DisplayListener listener, Handler handler) Registers an display listener to receive notifications about when displays are added, removed or changed. Parameters listener The listener to register. handler The handler on which the listener should be invoked, or null if the listener should be invoked on the calling thread's looper. See Also unregisterDisplayListener(DisplayManager.DisplayListener)
setTicker
Sets a ticker for use with this Displayable, replacing any previous ticker
	0:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	1:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	2:	android.hardware.display.DisplayManager public Display[] getDisplays () Gets all currently valid logical displays. Returns An array containing all displays.
	3:	android.view.Display public void getRealSize (Point outSize) Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outSize Set to the real size of the display.
	4:	android.view.Display public int getDisplayId () Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
	5:	android.hardware.display.DisplayManager public Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	6:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	7:	android.view.Display public float getRefreshRate () Gets the refresh rate of this display in frames per second.
	8:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	9:	android.view.Display public int getFlags () Returns a combination of flags that describe the capabilities of the display. Returns The display flags. See Also FLAG_SUPPORTS_PROTECTED_BUFFERS FLAG_SECURE FLAG_PRIVATE
isShown
Checks if the Displayable is actually visible on the display
	0:	android.view.Display public void getRealSize (Point outSize) Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outSize Set to the real size of the display.
	1:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	2:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	3:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
	4:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	5:	android.view.Display public int getFlags () Returns a combination of flags that describe the capabilities of the display. Returns The display flags. See Also FLAG_SUPPORTS_PROTECTED_BUFFERS FLAG_SECURE FLAG_PRIVATE
	6:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	7:	android.view.Display public void getRectSize (Rect outSize) Gets the size of the display as a rectangle, in pixels. Parameters outSize A Rect object to receive the size information. See Also getSize(Point)
	8:	android.view.Display public int getDisplayId () Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
	9:	android.hardware.display.DisplayManager public void registerDisplayListener (DisplayManager.DisplayListener listener, Handler handler) Registers an display listener to receive notifications about when displays are added, removed or changed. Parameters listener The listener to register. handler The handler on which the listener should be invoked, or null if the listener should be invoked on the calling thread's looper. See Also unregisterDisplayListener(DisplayManager.DisplayListener)
addCommand
Adds a command to the Displayable
	0:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	1:	android.view.Display public int getDisplayId () Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
	2:	android.hardware.display.DisplayManager public Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	3:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	4:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	5:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	6:	android.view.Display public float getRefreshRate () Gets the refresh rate of this display in frames per second.
	7:	android.hardware.display.DisplayManager public Display[] getDisplays () Gets all currently valid logical displays. Returns An array containing all displays.
	8:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	9:	android.view.Display public void getRealSize (Point outSize) Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outSize Set to the real size of the display.
removeCommand
Removes a command from the Displayable
	0:	android.view.Display public int getDisplayId () Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
	1:	android.view.Display public int getOrientation () This method was deprecated in API level 8. use getRotation() Returns orientation of this display.
	2:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
	3:	android.hardware.display.DisplayManager public Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	4:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	5:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	6:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	7:	android.view.Display public float getRefreshRate () Gets the refresh rate of this display in frames per second.
	8:	android.hardware.display.DisplayManager public Display[] getDisplays () Gets all currently valid logical displays. Returns An array containing all displays.
	9:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
setCommandListener
Sets a listener for Commands to this Displayable, replacing any previous CommandListener
	0:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	1:	android.hardware.display.DisplayManager public Display[] getDisplays () Gets all currently valid logical displays. Returns An array containing all displays.
	2:	android.view.Display public void getRealSize (Point outSize) Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outSize Set to the real size of the display.
	3:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	4:	android.view.Display public int getDisplayId () Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
	5:	android.hardware.display.DisplayManager public Display getDisplay (int displayId) Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications. Parameters displayId The logical display id. Returns The display object, or null if there is no valid display with the given id.
	6:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	7:	android.view.Display public float getRefreshRate () Gets the refresh rate of this display in frames per second.
	8:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	9:	android.view.Display public int getFlags () Returns a combination of flags that describe the capabilities of the display. Returns The display flags. See Also FLAG_SUPPORTS_PROTECTED_BUFFERS FLAG_SECURE FLAG_PRIVATE
getWidth
Gets the width in pixels of the displayable area available to the application
	0:	android.view.Display public int getWidth () This method was deprecated in API level 13. Use getSize(Point) instead.
	1:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	2:	android.view.Display public int getPixelFormat () This method was deprecated in API level 17. This method is no longer supported. The result is always RGBA_8888. Gets the pixel format of the display. Returns One of the constants defined in PixelFormat.
	3:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	4:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	5:	android.view.Display public void getCurrentSizeRange (Point outSmallestSize, Point outLargestSize) Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size. This is basically the sizes you will see as the orientation changes, taking into account whatever screen decoration there is in each rotation. For example, the status bar is always at the top of the screen, so it will reduce the height both in landscape and portrait, and the smallest height returned here will be the smaller of the two. This is intended for applications to get an idea of the range of sizes they will encounter while going through device rotations, to provide a stable UI through rotation. The sizes here take into account all standard system decorations that reduce the size actually available to the application: the status bar, navigation bar, system bar, etc. It does not take into account more transient elements like an IME soft keyboard. Parameters outSmallestSize Filled in with the smallest width and height that the application will encounter, in pixels (not dp units). The x (width) dimension here directly corresponds to Configuration.smallestScreenWidthDp, except the value here is in raw screen pixels rather than dp units. Your application may of course still get smaller space yet if, for example, a soft keyboard is being displayed. outLargestSize Filled in with the largest width and height that the application will encounter, in pixels (not dp units). Your application may of course still get larger space than this if, for example, screen decorations like the status bar are being hidden.
	6:	android.view.Display public int getFlags () Returns a combination of flags that describe the capabilities of the display. Returns The display flags. See Also FLAG_SUPPORTS_PROTECTED_BUFFERS FLAG_SECURE FLAG_PRIVATE
	7:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	8:	android.view.Display public void getRectSize (Rect outSize) Gets the size of the display as a rectangle, in pixels. Parameters outSize A Rect object to receive the size information. See Also getSize(Point)
	9:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
getHeight
Gets the height in pixels of the displayable area available to the application
	0:	android.view.Display public int getHeight () This method was deprecated in API level 13. Use getSize(Point) instead.
	1:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	2:	android.view.Display public int getPixelFormat () This method was deprecated in API level 17. This method is no longer supported. The result is always RGBA_8888. Gets the pixel format of the display. Returns One of the constants defined in PixelFormat.
	3:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	4:	android.view.Display public void getCurrentSizeRange (Point outSmallestSize, Point outLargestSize) Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size. This is basically the sizes you will see as the orientation changes, taking into account whatever screen decoration there is in each rotation. For example, the status bar is always at the top of the screen, so it will reduce the height both in landscape and portrait, and the smallest height returned here will be the smaller of the two. This is intended for applications to get an idea of the range of sizes they will encounter while going through device rotations, to provide a stable UI through rotation. The sizes here take into account all standard system decorations that reduce the size actually available to the application: the status bar, navigation bar, system bar, etc. It does not take into account more transient elements like an IME soft keyboard. Parameters outSmallestSize Filled in with the smallest width and height that the application will encounter, in pixels (not dp units). The x (width) dimension here directly corresponds to Configuration.smallestScreenWidthDp, except the value here is in raw screen pixels rather than dp units. Your application may of course still get smaller space yet if, for example, a soft keyboard is being displayed. outLargestSize Filled in with the largest width and height that the application will encounter, in pixels (not dp units). Your application may of course still get larger space than this if, for example, screen decorations like the status bar are being hidden.
	5:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	6:	android.view.Display public int getFlags () Returns a combination of flags that describe the capabilities of the display. Returns The display flags. See Also FLAG_SUPPORTS_PROTECTED_BUFFERS FLAG_SECURE FLAG_PRIVATE
	7:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	8:	android.view.Display public void getRectSize (Rect outSize) Gets the size of the display as a rectangle, in pixels. Parameters outSize A Rect object to receive the size information. See Also getSize(Point)
	9:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
sizeChanged
The implementation calls this method when the available area of the Displayable has been changed
	0:	android.hardware.display.DisplayManager public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags) Creates a virtual display. The content of a virtual display is rendered to a Surface provided by the application. The virtual display should be released when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of KITKAT_WATCH, the surface may be attached or detached dynamically using setSurface(Surface). Previously, the surface had to be non-null when createVirtualDisplay(String, int, int, int, Surface, int) was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen. Parameters name The name of the virtual display, must be non-empty. width The width of the virtual display in pixels, must be greater than 0. height The height of the virtual display in pixels, must be greater than 0. densityDpi The density of the virtual display in dpi, must be greater than 0. surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. flags A combination of virtual display flags: VIRTUAL_DISPLAY_FLAG_PUBLIC, VIRTUAL_DISPLAY_FLAG_PRESENTATION, VIRTUAL_DISPLAY_FLAG_SECURE, or VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY. Returns The newly created virtual display, or null if the application could not create the virtual display. Throws SecurityException if the caller does not have permission to create a virtual display with the specified flags.
	1:	android.view.Display public boolean isValid () Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a Display object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected. Returns True if the display is still valid.
	2:	android.view.Display public int getOrientation () This method was deprecated in API level 8. use getRotation() Returns orientation of this display.
	3:	android.hardware.display.DisplayManager public Display[] getDisplays (String category) Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose. Parameters category The requested display category or null to return all displays. Returns An array containing all displays sorted by order of preference. See Also DISPLAY_CATEGORY_PRESENTATION
	4:	android.view.Display public void getRealMetrics (DisplayMetrics outMetrics) Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outMetrics A DisplayMetrics object to receive the metrics.
	5:	android.view.Display public void getRealSize (Point outSize) Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell am display-size). Parameters outSize Set to the real size of the display.
	6:	android.view.Display public String getName () Gets the name of the display. Note that some displays may be renamed by the user. Returns The display's name.
	7:	android.view.Display public int getPixelFormat () This method was deprecated in API level 17. This method is no longer supported. The result is always RGBA_8888. Gets the pixel format of the display. Returns One of the constants defined in PixelFormat.
	8:	android.view.Display public void getMetrics (DisplayMetrics outMetrics) Gets display metrics that describe the size and density of this display. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decor elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outMetrics A DisplayMetrics object to receive the metrics.
	9:	android.view.Display public void getSize (Point outSize) Gets the size of the display, in pixels. Note that this value should not be used for computing layouts, since a device will typically have screen decoration (such as a status bar) along the edges of the display that reduce the amount of application space available from the size returned here. Layouts should instead use the window size. The size is adjusted based on the current rotation of the display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. The returned size may be adjusted to exclude certain system decoration elements that are always visible. It may also be scaled to provide compatibility with older applications that were originally designed for smaller displays. Parameters outSize A Point object to receive the size information.
