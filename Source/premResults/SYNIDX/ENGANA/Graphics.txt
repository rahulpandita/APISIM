drawString
(x,y)
(LEFT, HCENTER, RIGHT)
(TOP, BASELINE, BOTTOM)
OR
TOP | LEFT

Vertical centering of the text is not specified since it is not considered useful, it is hard to specify, and it is burdensome to implement
	0:	java.lang.Character public static int getNumericValue (int codePoint) Gets the numeric value of the specified Unicode code point. For example, the code point 'â…«' stands for the Roman number XII, which has the numeric value 12. There are two points of divergence between this method and the Unicode specification. This method treats the letters a-z (in both upper and lower cases, and their full-width variants) as numbers from 10 to 35. The Unicode specification also supports the idea of code points with non-integer numeric values; this method does not (except to the extent of returning -2 for such code points). Parameters codePoint the code point Returns a non-negative numeric integer value if a numeric value for codePoint exists, -1 if there is no numeric value for codePoint, -2 if the numeric value can not be represented with an integer.
	1:	java.lang.Character public static boolean isBmpCodePoint (int codePoint) Returns true if the given code point is in the Basic Multilingual Plane (BMP). Such code points can be represented by a single char.
	2:	java.lang.Character public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	3:	java.lang.Character public static int getNumericValue (char c) Returns the numeric value of the specified Unicode character. See getNumericValue(int). Parameters c the character Returns a non-negative numeric integer value if a numeric value for c exists, -1 if there is no numeric value for c, -2 if the numeric value can not be represented as an integer.
	4:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	5:	java.lang.Character public Character (char value) Constructs a new Character with the specified primitive char value. Parameters value the primitive char value to store in the new instance.
	6:	java.lang.Character public static int charCount (int codePoint) Calculates the number of char values required to represent the specified Unicode code point. This method checks if the codePoint is greater than or equal to 0x10000, in which case 2 is returned, otherwise 1. To test if the code point is valid, use the isValidCodePoint(int) method. Parameters codePoint the code point for which to calculate the number of required chars. Returns 2 if codePoint >= 0x10000; 1 otherwise. See Also isValidCodePoint(int) isSupplementaryCodePoint(int)
	7:	java.lang.Character public char charValue () Gets the primitive value of this character. Returns this object's primitive value.
	8:	java.lang.Character public static int codePointAt (char[] seq, int index) Returns the code point at index in the specified array of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the array and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	9:	java.lang.Character public static int codePointAt (CharSequence seq, int index) Returns the code point at index in the specified sequence of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the sequence and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source sequence of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
drawString

translate
Translates the origin of the graphics context to the point (x, y) in the current coordinate system
	0:	java.lang.Character public static boolean isSpaceChar (int codePoint) Returns true if the given code point is a Unicode space character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are considered whitespace. Note also that line separators are not considered whitespace; see isWhitespace(char) for an alternative.
	1:	java.lang.Character public static boolean isWhitespace (int codePoint) Returns true if the given code point is a Unicode whitespace character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are not considered whitespace. Note also that line separators are considered whitespace; see isSpaceChar(char) for an alternative.
	2:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	3:	java.lang.Character public static boolean isTitleCase (int codePoint) Indicates whether the specified code point is a titlecase character. Parameters codePoint the code point to check. Returns true if codePoint is a titlecase character, false otherwise.
	4:	java.lang.Character public static int codePointAt (char[] seq, int index) Returns the code point at index in the specified array of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the array and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	5:	java.lang.Character public static int codePointAt (CharSequence seq, int index) Returns the code point at index in the specified sequence of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the sequence and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source sequence of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	6:	java.lang.Character public static int codePointBefore (CharSequence seq, int index) Returns the code point that precedes index in the specified sequence of character units. If the unit at index - 1 is a low-surrogate unit, index - 2 is not negative and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source sequence of char units. index the position in seq following the code point that should be returned. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is less than 1 or greater than the length of seq.
	7:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	8:	java.lang.Character public static int codePointBefore (char[] seq, int index) Returns the code point that precedes index in the specified array of character units. If the unit at index - 1 is a low-surrogate unit, index - 2 is not negative and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is less than 1 or greater than the length of seq.
	9:	java.lang.Character public static boolean isIdeographic (int codePoint) Returns true if the given code point is a CJKV ideographic character.
getTranslateX
Gets the X coordinate of the translated origin of this graphics context
	0:	java.lang.Character public static boolean isSpaceChar (int codePoint) Returns true if the given code point is a Unicode space character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are considered whitespace. Note also that line separators are not considered whitespace; see isWhitespace(char) for an alternative.
	1:	java.lang.Character public static boolean isWhitespace (int codePoint) Returns true if the given code point is a Unicode whitespace character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are not considered whitespace. Note also that line separators are considered whitespace; see isSpaceChar(char) for an alternative.
	2:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	3:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	4:	java.lang.Character public static char toLowerCase (char c) Returns the lower case equivalent for the specified character if the character is an upper case letter. Otherwise, the specified character is returned unchanged. Parameters c the character Returns if c is an upper case character then its lower case counterpart, otherwise just c.
	5:	java.lang.Character public int compareTo (Character c) Compares this object to the specified character object to determine their relative order. Parameters c the character object to compare this object to. Returns 0 if the value of this character and the value of c are equal; a positive value if the value of this character is greater than the value of c; a negative value if the value of this character is less than the value of c. See Also Comparable
	6:	java.lang.Character public static char toUpperCase (char c) Returns the upper case equivalent for the specified character if the character is a lower case letter. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns if c is a lower case character then its upper case counterpart, otherwise just c.
	7:	java.lang.Character public static char reverseBytes (char c) Reverses the order of the first and second byte in the specified character. Parameters c the character to reverse. Returns the character with reordered bytes.
	8:	java.lang.Character public static Character valueOf (char c) Returns a Character instance for the char value passed. If it is not necessary to get a new Character instance, it is recommended to use this method instead of the constructor, since it maintains a cache of instances which may result in better performance. Parameters c the char value for which to get a Character instance. Returns the Character instance for c.
	9:	java.lang.Character public static boolean isJavaIdentifierStart (char c) Indicates whether the specified character is a valid first character for a Java identifier. Parameters c the character to check. Returns true if c is a valid first character of a Java identifier; false otherwise.
getTranslateY
Gets the Y coordinate of the translated origin of this graphics context
	0:	java.lang.Character public static boolean isSpaceChar (int codePoint) Returns true if the given code point is a Unicode space character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are considered whitespace. Note also that line separators are not considered whitespace; see isWhitespace(char) for an alternative.
	1:	java.lang.Character public static boolean isWhitespace (int codePoint) Returns true if the given code point is a Unicode whitespace character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are not considered whitespace. Note also that line separators are considered whitespace; see isSpaceChar(char) for an alternative.
	2:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	3:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	4:	java.lang.Character public static char toLowerCase (char c) Returns the lower case equivalent for the specified character if the character is an upper case letter. Otherwise, the specified character is returned unchanged. Parameters c the character Returns if c is an upper case character then its lower case counterpart, otherwise just c.
	5:	java.lang.Character public int compareTo (Character c) Compares this object to the specified character object to determine their relative order. Parameters c the character object to compare this object to. Returns 0 if the value of this character and the value of c are equal; a positive value if the value of this character is greater than the value of c; a negative value if the value of this character is less than the value of c. See Also Comparable
	6:	java.lang.Character public static char toUpperCase (char c) Returns the upper case equivalent for the specified character if the character is a lower case letter. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns if c is a lower case character then its upper case counterpart, otherwise just c.
	7:	java.lang.Character public static char reverseBytes (char c) Reverses the order of the first and second byte in the specified character. Parameters c the character to reverse. Returns the character with reordered bytes.
	8:	java.lang.Character public static Character valueOf (char c) Returns a Character instance for the char value passed. If it is not necessary to get a new Character instance, it is recommended to use this method instead of the constructor, since it maintains a cache of instances which may result in better performance. Parameters c the char value for which to get a Character instance. Returns the Character instance for c.
	9:	java.lang.Character public static boolean isJavaIdentifierStart (char c) Indicates whether the specified character is a valid first character for a Java identifier. Parameters c the character to check. Returns true if c is a valid first character of a Java identifier; false otherwise.
getColor
Gets the current color
	0:	java.lang.Character public static boolean isSpaceChar (char c) See isSpaceChar(int).
	1:	java.lang.Character public static boolean isWhitespace (char c) See isWhitespace(int).
	2:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	3:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	4:	java.lang.Character public static boolean isJavaIdentifierStart (int codePoint) Indicates whether the specified code point is a valid first character for a Java identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid start of a Java identifier; false otherwise.
	5:	java.lang.Character public static byte getDirectionality (int codePoint) Gets the Unicode directionality of the specified character. Parameters codePoint the Unicode code point to get the directionality of. Returns the Unicode directionality of codePoint.
	6:	java.lang.Character public static byte getDirectionality (char c) Gets the Unicode directionality of the specified character. Parameters c the character to get the directionality of. Returns the Unicode directionality of c.
	7:	java.lang.Character public static int getType (char c) Gets the general Unicode category of the specified character. Parameters c the character to get the category of. Returns the Unicode category of c.
	8:	java.lang.Character public static int getType (int codePoint) Gets the general Unicode category of the specified code point. Parameters codePoint the Unicode code point to get the category of. Returns the Unicode category of codePoint.
	9:	java.lang.Character public static Character valueOf (char c) Returns a Character instance for the char value passed. If it is not necessary to get a new Character instance, it is recommended to use this method instead of the constructor, since it maintains a cache of instances which may result in better performance. Parameters c the char value for which to get a Character instance. Returns the Character instance for c.
getRedComponent
Gets the red component of the current color
	0:	java.lang.Character public static boolean isSpaceChar (char c) See isSpaceChar(int).
	1:	java.lang.Character public static boolean isWhitespace (char c) See isWhitespace(int).
	2:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	3:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	4:	java.lang.Character public static boolean isJavaIdentifierStart (int codePoint) Indicates whether the specified code point is a valid first character for a Java identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid start of a Java identifier; false otherwise.
	5:	java.lang.Character public static byte getDirectionality (int codePoint) Gets the Unicode directionality of the specified character. Parameters codePoint the Unicode code point to get the directionality of. Returns the Unicode directionality of codePoint.
	6:	java.lang.Character public static byte getDirectionality (char c) Gets the Unicode directionality of the specified character. Parameters c the character to get the directionality of. Returns the Unicode directionality of c.
	7:	java.lang.Character public static int getType (char c) Gets the general Unicode category of the specified character. Parameters c the character to get the category of. Returns the Unicode category of c.
	8:	java.lang.Character public static int getType (int codePoint) Gets the general Unicode category of the specified code point. Parameters codePoint the Unicode code point to get the category of. Returns the Unicode category of codePoint.
	9:	java.lang.Character public static Character valueOf (char c) Returns a Character instance for the char value passed. If it is not necessary to get a new Character instance, it is recommended to use this method instead of the constructor, since it maintains a cache of instances which may result in better performance. Parameters c the char value for which to get a Character instance. Returns the Character instance for c.
getGreenComponent
Gets the green component of the current color
	0:	java.lang.Character public static boolean isSpaceChar (char c) See isSpaceChar(int).
	1:	java.lang.Character public static boolean isWhitespace (char c) See isWhitespace(int).
	2:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	3:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	4:	java.lang.Character public static boolean isJavaIdentifierStart (int codePoint) Indicates whether the specified code point is a valid first character for a Java identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid start of a Java identifier; false otherwise.
	5:	java.lang.Character public static byte getDirectionality (int codePoint) Gets the Unicode directionality of the specified character. Parameters codePoint the Unicode code point to get the directionality of. Returns the Unicode directionality of codePoint.
	6:	java.lang.Character public static byte getDirectionality (char c) Gets the Unicode directionality of the specified character. Parameters c the character to get the directionality of. Returns the Unicode directionality of c.
	7:	java.lang.Character public static int getType (char c) Gets the general Unicode category of the specified character. Parameters c the character to get the category of. Returns the Unicode category of c.
	8:	java.lang.Character public static int getType (int codePoint) Gets the general Unicode category of the specified code point. Parameters codePoint the Unicode code point to get the category of. Returns the Unicode category of codePoint.
	9:	java.lang.Character public static Character valueOf (char c) Returns a Character instance for the char value passed. If it is not necessary to get a new Character instance, it is recommended to use this method instead of the constructor, since it maintains a cache of instances which may result in better performance. Parameters c the char value for which to get a Character instance. Returns the Character instance for c.
getBlueComponent
Gets the blue component of the current color
	0:	java.lang.Character public static boolean isSurrogatePair (char high, char low) Indicates whether the specified character pair is a valid surrogate pair. Parameters high the high surrogate unit to test. low the low surrogate unit to test. Returns true if high is a high-surrogate code unit and low is a low-surrogate code unit; false otherwise. See Also isHighSurrogate(char) isLowSurrogate(char)
	1:	java.lang.Character public static int toCodePoint (char high, char low) Converts a surrogate pair into a Unicode code point. This method assumes that the pair are valid surrogates. If the pair are not valid surrogates, then the result is indeterminate. The isSurrogatePair(char, char) method should be used prior to this method to validate the pair. Parameters high the high surrogate unit. low the low surrogate unit. Returns the Unicode code point corresponding to the surrogate unit pair. See Also isSurrogatePair(char, char)
	2:	java.lang.Character public static boolean isLowSurrogate (char ch) Indicates whether ch is a low- (or trailing-) surrogate code unit that is used for representing supplementary characters in UTF-16 encoding. Parameters ch the character to test. Returns true if ch is a low-surrogate code unit; false otherwise. See Also isHighSurrogate(char)
	3:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	4:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	5:	java.lang.Character public static boolean isSurrogate (char ch) Returns true if the given character is a high or low surrogate.
	6:	java.lang.Character public static char lowSurrogate (int codePoint) Returns the low surrogate for the given code point. The result is meaningless if the given code point is not a supplementary character.
	7:	java.lang.Character public static boolean isSpaceChar (char c) See isSpaceChar(int).
	8:	java.lang.Character public static boolean isWhitespace (char c) See isWhitespace(int).
	9:	java.lang.Character public static int codePointAt (char[] seq, int index) Returns the code point at index in the specified array of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the array and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
getGrayScale
Gets the current grayscale value of the color being used for rendering operations
	0:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	1:	java.lang.Character public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	2:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	3:	java.lang.Character public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	4:	java.lang.Character public boolean equals (Object object) Compares this object with the specified object and indicates if they are equal. In order to be equal, object must be an instance of Character and have the same char value as this object. Parameters object the object to compare this double with. Returns true if the specified object is equal to this Character; false otherwise.
	5:	java.lang.Character public static int getNumericValue (char c) Returns the numeric value of the specified Unicode character. See getNumericValue(int). Parameters c the character Returns a non-negative numeric integer value if a numeric value for c exists, -1 if there is no numeric value for c, -2 if the numeric value can not be represented as an integer.
	6:	java.lang.Character public static int codePointCount (char[] seq, int offset, int count) Counts the number of Unicode code points in the subsequence of the specified char array, as delineated by offset and count. Any surrogate values with missing pair values will be counted as one code point. Parameters seq the char array to look through offset the inclusive index to begin counting at. count the number of char values to look through in seq. Returns the number of Unicode code points. Throws NullPointerException if seq is null. IndexOutOfBoundsException if offset < 0, count < 0 or if offset + count is greater than the length of seq.
	7:	java.lang.Character public static int charCount (int codePoint) Calculates the number of char values required to represent the specified Unicode code point. This method checks if the codePoint is greater than or equal to 0x10000, in which case 2 is returned, otherwise 1. To test if the code point is valid, use the isValidCodePoint(int) method. Parameters codePoint the code point for which to calculate the number of required chars. Returns 2 if codePoint >= 0x10000; 1 otherwise. See Also isValidCodePoint(int) isSupplementaryCodePoint(int)
	8:	java.lang.Character public int compareTo (Character c) Compares this object to the specified character object to determine their relative order. Parameters c the character object to compare this object to. Returns 0 if the value of this character and the value of c are equal; a positive value if the value of this character is greater than the value of c; a negative value if the value of this character is less than the value of c. See Also Comparable
	9:	java.lang.Character public static int toCodePoint (char high, char low) Converts a surrogate pair into a Unicode code point. This method assumes that the pair are valid surrogates. If the pair are not valid surrogates, then the result is indeterminate. The isSurrogatePair(char, char) method should be used prior to this method to validate the pair. Parameters high the high surrogate unit. low the low surrogate unit. Returns the Unicode code point corresponding to the surrogate unit pair. See Also isSurrogatePair(char, char)
setColor
Sets the current color to the specified RGB values
	0:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	1:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	2:	java.lang.Character public static int codePointCount (char[] seq, int offset, int count) Counts the number of Unicode code points in the subsequence of the specified char array, as delineated by offset and count. Any surrogate values with missing pair values will be counted as one code point. Parameters seq the char array to look through offset the inclusive index to begin counting at. count the number of char values to look through in seq. Returns the number of Unicode code points. Throws NullPointerException if seq is null. IndexOutOfBoundsException if offset < 0, count < 0 or if offset + count is greater than the length of seq.
	3:	java.lang.Character public static boolean isJavaIdentifierPart (int codePoint) Indicates whether the specified code point is a valid part of a Java identifier other than the first character. Parameters codePoint the code point to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	4:	java.lang.Character public static boolean isJavaIdentifierPart (char c) Indicates whether the specified character is a valid part of a Java identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	5:	java.lang.Character public static boolean isUnicodeIdentifierPart (int codePoint) Indicates whether the specified code point is valid as part of a Unicode identifier other than the first character. Parameters codePoint the code point to check. Returns true if codePoint is valid as part of a Unicode identifier; false otherwise.
	6:	java.lang.Character public static boolean isUnicodeIdentifierPart (char c) Indicates whether the specified character is valid as part of a Unicode identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Unicode identifier; false otherwise.
	7:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	8:	java.lang.Character public static boolean isJavaIdentifierStart (int codePoint) Indicates whether the specified code point is a valid first character for a Java identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid start of a Java identifier; false otherwise.
	9:	java.lang.Character public static boolean isSpaceChar (int codePoint) Returns true if the given code point is a Unicode space character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are considered whitespace. Note also that line separators are not considered whitespace; see isWhitespace(char) for an alternative.
setColor
Sets the current color to the specified RGB values
	0:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	1:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	2:	java.lang.Character public static int codePointCount (char[] seq, int offset, int count) Counts the number of Unicode code points in the subsequence of the specified char array, as delineated by offset and count. Any surrogate values with missing pair values will be counted as one code point. Parameters seq the char array to look through offset the inclusive index to begin counting at. count the number of char values to look through in seq. Returns the number of Unicode code points. Throws NullPointerException if seq is null. IndexOutOfBoundsException if offset < 0, count < 0 or if offset + count is greater than the length of seq.
	3:	java.lang.Character public static boolean isJavaIdentifierPart (int codePoint) Indicates whether the specified code point is a valid part of a Java identifier other than the first character. Parameters codePoint the code point to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	4:	java.lang.Character public static boolean isJavaIdentifierPart (char c) Indicates whether the specified character is a valid part of a Java identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	5:	java.lang.Character public static boolean isUnicodeIdentifierPart (int codePoint) Indicates whether the specified code point is valid as part of a Unicode identifier other than the first character. Parameters codePoint the code point to check. Returns true if codePoint is valid as part of a Unicode identifier; false otherwise.
	6:	java.lang.Character public static boolean isUnicodeIdentifierPart (char c) Indicates whether the specified character is valid as part of a Unicode identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Unicode identifier; false otherwise.
	7:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	8:	java.lang.Character public static boolean isJavaIdentifierStart (int codePoint) Indicates whether the specified code point is a valid first character for a Java identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid start of a Java identifier; false otherwise.
	9:	java.lang.Character public static boolean isSpaceChar (int codePoint) Returns true if the given code point is a Unicode space character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are considered whitespace. Note also that line separators are not considered whitespace; see isWhitespace(char) for an alternative.
setGrayScale
Sets the current grayscale to be used for all subsequent rendering operations
	0:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	1:	java.lang.Character public static boolean isJavaIdentifierPart (int codePoint) Indicates whether the specified code point is a valid part of a Java identifier other than the first character. Parameters codePoint the code point to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	2:	java.lang.Character public static boolean isJavaIdentifierPart (char c) Indicates whether the specified character is a valid part of a Java identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	3:	java.lang.Character public static boolean isUnicodeIdentifierPart (int codePoint) Indicates whether the specified code point is valid as part of a Unicode identifier other than the first character. Parameters codePoint the code point to check. Returns true if codePoint is valid as part of a Unicode identifier; false otherwise.
	4:	java.lang.Character public static boolean isUnicodeIdentifierPart (char c) Indicates whether the specified character is valid as part of a Unicode identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Unicode identifier; false otherwise.
	5:	java.lang.Character public static boolean isJavaIdentifierStart (int codePoint) Indicates whether the specified code point is a valid first character for a Java identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid start of a Java identifier; false otherwise.
	6:	java.lang.Character public static char reverseBytes (char c) Reverses the order of the first and second byte in the specified character. Parameters c the character to reverse. Returns the character with reordered bytes.
	7:	java.lang.Character public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	8:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock forName (String blockName) Returns the Unicode block for the given block name, or null if there is no such block. Block names may be one of the following: Canonical block name, as defined by the Unicode specification; case-insensitive. Canonical block name without any spaces, as defined by the Unicode specification; case-insensitive. A UnicodeBlock constant identifier. This is determined by converting the canonical name to uppercase and replacing all spaces and hyphens with underscores. Throws NullPointerException if blockName == null. IllegalArgumentException if blockName is not the name of any known block.
	9:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
getFont
Gets the current font
	0:	java.lang.Character public static char toLowerCase (char c) Returns the lower case equivalent for the specified character if the character is an upper case letter. Otherwise, the specified character is returned unchanged. Parameters c the character Returns if c is an upper case character then its lower case counterpart, otherwise just c.
	1:	java.lang.Character public static int toLowerCase (int codePoint) Returns the lower case equivalent for the specified code point if it is an upper case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to check. Returns if codePoint is an upper case character then its lower case counterpart, otherwise just codePoint.
	2:	java.lang.Character public static char toUpperCase (char c) Returns the upper case equivalent for the specified character if the character is a lower case letter. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns if c is a lower case character then its upper case counterpart, otherwise just c.
	3:	java.lang.Character public static int toUpperCase (int codePoint) Returns the upper case equivalent for the specified code point if the code point is a lower case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns if codePoint is a lower case character then its upper case counterpart, otherwise just codePoint.
	4:	java.lang.Character public static int charCount (int codePoint) Calculates the number of char values required to represent the specified Unicode code point. This method checks if the codePoint is greater than or equal to 0x10000, in which case 2 is returned, otherwise 1. To test if the code point is valid, use the isValidCodePoint(int) method. Parameters codePoint the code point for which to calculate the number of required chars. Returns 2 if codePoint >= 0x10000; 1 otherwise. See Also isValidCodePoint(int) isSupplementaryCodePoint(int)
	5:	java.lang.Character public static char toTitleCase (char c) Returns the title case equivalent for the specified character if it exists. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns the title case equivalent of c if it exists, otherwise c.
	6:	java.lang.Character public static int toTitleCase (int codePoint) Returns the title case equivalent for the specified code point if it exists. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns the title case equivalent of codePoint if it exists, otherwise codePoint.
	7:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock forName (String blockName) Returns the Unicode block for the given block name, or null if there is no such block. Block names may be one of the following: Canonical block name, as defined by the Unicode specification; case-insensitive. Canonical block name without any spaces, as defined by the Unicode specification; case-insensitive. A UnicodeBlock constant identifier. This is determined by converting the canonical name to uppercase and replacing all spaces and hyphens with underscores. Throws NullPointerException if blockName == null. IllegalArgumentException if blockName is not the name of any known block.
	8:	java.lang.Character public static boolean isSpaceChar (char c) See isSpaceChar(int).
	9:	java.lang.Character public static boolean isWhitespace (char c) See isWhitespace(int).
setStrokeStyle
Sets the stroke style used for drawing lines, arcs, rectangles, and rounded rectangles
	0:	java.lang.Character public static boolean isSpaceChar (int codePoint) Returns true if the given code point is a Unicode space character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are considered whitespace. Note also that line separators are not considered whitespace; see isWhitespace(char) for an alternative.
	1:	java.lang.Character public static boolean isWhitespace (int codePoint) Returns true if the given code point is a Unicode whitespace character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are not considered whitespace. Note also that line separators are considered whitespace; see isSpaceChar(char) for an alternative.
	2:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	3:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	4:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	5:	java.lang.Character public static boolean isJavaIdentifierStart (int codePoint) Indicates whether the specified code point is a valid first character for a Java identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid start of a Java identifier; false otherwise.
	6:	java.lang.Character public static byte getDirectionality (int codePoint) Gets the Unicode directionality of the specified character. Parameters codePoint the Unicode code point to get the directionality of. Returns the Unicode directionality of codePoint.
	7:	java.lang.Character public static byte getDirectionality (char c) Gets the Unicode directionality of the specified character. Parameters c the character to get the directionality of. Returns the Unicode directionality of c.
	8:	java.lang.Character public static int getType (char c) Gets the general Unicode category of the specified character. Parameters c the character to get the category of. Returns the Unicode category of c.
	9:	java.lang.Character public static int getType (int codePoint) Gets the general Unicode category of the specified code point. Parameters codePoint the Unicode code point to get the category of. Returns the Unicode category of codePoint.
getStrokeStyle
Gets the stroke style used for drawing operations
	0:	java.lang.Character public static byte getDirectionality (int codePoint) Gets the Unicode directionality of the specified character. Parameters codePoint the Unicode code point to get the directionality of. Returns the Unicode directionality of codePoint.
	1:	java.lang.Character public static byte getDirectionality (char c) Gets the Unicode directionality of the specified character. Parameters c the character to get the directionality of. Returns the Unicode directionality of c.
	2:	java.lang.Character public static int getType (char c) Gets the general Unicode category of the specified character. Parameters c the character to get the category of. Returns the Unicode category of c.
	3:	java.lang.Character public static int getType (int codePoint) Gets the general Unicode category of the specified code point. Parameters codePoint the Unicode code point to get the category of. Returns the Unicode category of codePoint.
	4:	java.lang.Character public static Character valueOf (char c) Returns a Character instance for the char value passed. If it is not necessary to get a new Character instance, it is recommended to use this method instead of the constructor, since it maintains a cache of instances which may result in better performance. Parameters c the char value for which to get a Character instance. Returns the Character instance for c.
	5:	java.lang.Character public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	6:	java.lang.Character public static boolean isSpaceChar (int codePoint) Returns true if the given code point is a Unicode space character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are considered whitespace. Note also that line separators are not considered whitespace; see isWhitespace(char) for an alternative.
	7:	java.lang.Character public static boolean isWhitespace (int codePoint) Returns true if the given code point is a Unicode whitespace character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are not considered whitespace. Note also that line separators are considered whitespace; see isSpaceChar(char) for an alternative.
	8:	java.lang.Character public static char toTitleCase (char c) Returns the title case equivalent for the specified character if it exists. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns the title case equivalent of c if it exists, otherwise c.
	9:	java.lang.Character public static int toTitleCase (int codePoint) Returns the title case equivalent for the specified code point if it exists. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns the title case equivalent of codePoint if it exists, otherwise codePoint.
setFont
Sets the font for all subsequent text rendering operations
	0:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock forName (String blockName) Returns the Unicode block for the given block name, or null if there is no such block. Block names may be one of the following: Canonical block name, as defined by the Unicode specification; case-insensitive. Canonical block name without any spaces, as defined by the Unicode specification; case-insensitive. A UnicodeBlock constant identifier. This is determined by converting the canonical name to uppercase and replacing all spaces and hyphens with underscores. Throws NullPointerException if blockName == null. IllegalArgumentException if blockName is not the name of any known block.
	1:	java.lang.Character public static char toLowerCase (char c) Returns the lower case equivalent for the specified character if the character is an upper case letter. Otherwise, the specified character is returned unchanged. Parameters c the character Returns if c is an upper case character then its lower case counterpart, otherwise just c.
	2:	java.lang.Character public static int toLowerCase (int codePoint) Returns the lower case equivalent for the specified code point if it is an upper case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to check. Returns if codePoint is an upper case character then its lower case counterpart, otherwise just codePoint.
	3:	java.lang.Character public static char toUpperCase (char c) Returns the upper case equivalent for the specified character if the character is a lower case letter. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns if c is a lower case character then its upper case counterpart, otherwise just c.
	4:	java.lang.Character public static int toUpperCase (int codePoint) Returns the upper case equivalent for the specified code point if the code point is a lower case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns if codePoint is a lower case character then its upper case counterpart, otherwise just codePoint.
	5:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	6:	java.lang.Character public static boolean isJavaIdentifierPart (int codePoint) Indicates whether the specified code point is a valid part of a Java identifier other than the first character. Parameters codePoint the code point to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	7:	java.lang.Character public static boolean isJavaIdentifierPart (char c) Indicates whether the specified character is a valid part of a Java identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	8:	java.lang.Character public static boolean isUnicodeIdentifierPart (int codePoint) Indicates whether the specified code point is valid as part of a Unicode identifier other than the first character. Parameters codePoint the code point to check. Returns true if codePoint is valid as part of a Unicode identifier; false otherwise.
	9:	java.lang.Character public static boolean isUnicodeIdentifierPart (char c) Indicates whether the specified character is valid as part of a Unicode identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Unicode identifier; false otherwise.
getClipX
Gets the X offset of the current clipping area, relative to the coordinate system origin of this graphics context
	0:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	1:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	2:	java.lang.Character public static char reverseBytes (char c) Reverses the order of the first and second byte in the specified character. Parameters c the character to reverse. Returns the character with reordered bytes.
	3:	java.lang.Character public static boolean isJavaIdentifierStart (char c) Indicates whether the specified character is a valid first character for a Java identifier. Parameters c the character to check. Returns true if c is a valid first character of a Java identifier; false otherwise.
	4:	java.lang.Character public static boolean isUnicodeIdentifierStart (char c) Indicates whether the specified character is a valid initial character for a Unicode identifier. Parameters c the character to check. Returns true if c is a valid first character for a Unicode identifier; false otherwise.
	5:	java.lang.Character public static boolean isJavaIdentifierPart (char c) Indicates whether the specified character is a valid part of a Java identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	6:	java.lang.Character public static boolean isUnicodeIdentifierPart (char c) Indicates whether the specified character is valid as part of a Unicode identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Unicode identifier; false otherwise.
	7:	java.lang.Character public static boolean isJavaIdentifierStart (int codePoint) Indicates whether the specified code point is a valid first character for a Java identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid start of a Java identifier; false otherwise.
	8:	java.lang.Character public static boolean isUnicodeIdentifierStart (int codePoint) Indicates whether the specified code point is a valid initial character for a Unicode identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid first character for a Unicode identifier; false otherwise.
	9:	java.lang.Character public static boolean isSpaceChar (int codePoint) Returns true if the given code point is a Unicode space character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are considered whitespace. Note also that line separators are not considered whitespace; see isWhitespace(char) for an alternative.
getClipY
Gets the Y offset of the current clipping area, relative to the coordinate system origin of this graphics context
	0:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	1:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	2:	java.lang.Character public static char reverseBytes (char c) Reverses the order of the first and second byte in the specified character. Parameters c the character to reverse. Returns the character with reordered bytes.
	3:	java.lang.Character public static boolean isJavaIdentifierStart (char c) Indicates whether the specified character is a valid first character for a Java identifier. Parameters c the character to check. Returns true if c is a valid first character of a Java identifier; false otherwise.
	4:	java.lang.Character public static boolean isUnicodeIdentifierStart (char c) Indicates whether the specified character is a valid initial character for a Unicode identifier. Parameters c the character to check. Returns true if c is a valid first character for a Unicode identifier; false otherwise.
	5:	java.lang.Character public static boolean isJavaIdentifierPart (char c) Indicates whether the specified character is a valid part of a Java identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	6:	java.lang.Character public static boolean isUnicodeIdentifierPart (char c) Indicates whether the specified character is valid as part of a Unicode identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Unicode identifier; false otherwise.
	7:	java.lang.Character public static boolean isJavaIdentifierStart (int codePoint) Indicates whether the specified code point is a valid first character for a Java identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid start of a Java identifier; false otherwise.
	8:	java.lang.Character public static boolean isUnicodeIdentifierStart (int codePoint) Indicates whether the specified code point is a valid initial character for a Unicode identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid first character for a Unicode identifier; false otherwise.
	9:	java.lang.Character public static boolean isSpaceChar (int codePoint) Returns true if the given code point is a Unicode space character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are considered whitespace. Note also that line separators are not considered whitespace; see isWhitespace(char) for an alternative.
getClipWidth
Gets the width of the current clipping area
	0:	java.lang.Character public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	1:	java.lang.Character public static int getNumericValue (int codePoint) Gets the numeric value of the specified Unicode code point. For example, the code point 'â…«' stands for the Roman number XII, which has the numeric value 12. There are two points of divergence between this method and the Unicode specification. This method treats the letters a-z (in both upper and lower cases, and their full-width variants) as numbers from 10 to 35. The Unicode specification also supports the idea of code points with non-integer numeric values; this method does not (except to the extent of returning -2 for such code points). Parameters codePoint the code point Returns a non-negative numeric integer value if a numeric value for codePoint exists, -1 if there is no numeric value for codePoint, -2 if the numeric value can not be represented with an integer.
	2:	java.lang.Character public static boolean isSpaceChar (char c) See isSpaceChar(int).
	3:	java.lang.Character public static boolean isWhitespace (char c) See isWhitespace(int).
	4:	java.lang.Character public static char forDigit (int digit, int radix) Returns the character which represents the specified digit in the specified radix. The radix must be between MIN_RADIX and MAX_RADIX inclusive; digit must not be negative and smaller than radix. If any of these conditions does not hold, 0 is returned. Parameters digit the integer value. radix the radix. Returns the character which represents the digit in the radix.
	5:	java.lang.Character public static String getName (int codePoint) Returns a human-readable name for the given code point, or null if the code point is unassigned. As a fallback mechanism this method returns strings consisting of the Unicode block name (with underscores replaced by spaces), a single space, and the uppercase hex value of the code point, using as few digits as necessary. Examples: Character.getName(0) returns "NULL". Character.getName('e') returns "LATIN SMALL LETTER E". Character.getName('Ù¦') returns "ARABIC-INDIC DIGIT SIX". Character.getName(0xe000) returns "PRIVATE USE AREA E000". Note that the exact strings returned will vary from release to release. Throws IllegalArgumentException if codePoint is not a valid code point.
	6:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	7:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	8:	java.lang.Character public static boolean isJavaIdentifierStart (int codePoint) Indicates whether the specified code point is a valid first character for a Java identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid start of a Java identifier; false otherwise.
	9:	java.lang.Character public static byte getDirectionality (int codePoint) Gets the Unicode directionality of the specified character. Parameters codePoint the Unicode code point to get the directionality of. Returns the Unicode directionality of codePoint.
getClipHeight
Gets the height of the current clipping area
	0:	java.lang.Character public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	1:	java.lang.Character public static boolean isSpaceChar (char c) See isSpaceChar(int).
	2:	java.lang.Character public static boolean isWhitespace (char c) See isWhitespace(int).
	3:	java.lang.Character public static char forDigit (int digit, int radix) Returns the character which represents the specified digit in the specified radix. The radix must be between MIN_RADIX and MAX_RADIX inclusive; digit must not be negative and smaller than radix. If any of these conditions does not hold, 0 is returned. Parameters digit the integer value. radix the radix. Returns the character which represents the digit in the radix.
	4:	java.lang.Character public static String getName (int codePoint) Returns a human-readable name for the given code point, or null if the code point is unassigned. As a fallback mechanism this method returns strings consisting of the Unicode block name (with underscores replaced by spaces), a single space, and the uppercase hex value of the code point, using as few digits as necessary. Examples: Character.getName(0) returns "NULL". Character.getName('e') returns "LATIN SMALL LETTER E". Character.getName('Ù¦') returns "ARABIC-INDIC DIGIT SIX". Character.getName(0xe000) returns "PRIVATE USE AREA E000". Note that the exact strings returned will vary from release to release. Throws IllegalArgumentException if codePoint is not a valid code point.
	5:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	6:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	7:	java.lang.Character public static boolean isJavaIdentifierStart (int codePoint) Indicates whether the specified code point is a valid first character for a Java identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid start of a Java identifier; false otherwise.
	8:	java.lang.Character public static byte getDirectionality (int codePoint) Gets the Unicode directionality of the specified character. Parameters codePoint the Unicode code point to get the directionality of. Returns the Unicode directionality of codePoint.
	9:	java.lang.Character public static byte getDirectionality (char c) Gets the Unicode directionality of the specified character. Parameters c the character to get the directionality of. Returns the Unicode directionality of c.
clipRect
Intersects the current clip with the specified rectangle
	0:	java.lang.Character public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	1:	java.lang.Character public Character (char value) Constructs a new Character with the specified primitive char value. Parameters value the primitive char value to store in the new instance.
	2:	java.lang.Character public static int charCount (int codePoint) Calculates the number of char values required to represent the specified Unicode code point. This method checks if the codePoint is greater than or equal to 0x10000, in which case 2 is returned, otherwise 1. To test if the code point is valid, use the isValidCodePoint(int) method. Parameters codePoint the code point for which to calculate the number of required chars. Returns 2 if codePoint >= 0x10000; 1 otherwise. See Also isValidCodePoint(int) isSupplementaryCodePoint(int)
	3:	java.lang.Character public char charValue () Gets the primitive value of this character. Returns this object's primitive value.
	4:	java.lang.Character public static int codePointAt (char[] seq, int index) Returns the code point at index in the specified array of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the array and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	5:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	6:	java.lang.Character public static int codePointAt (CharSequence seq, int index) Returns the code point at index in the specified sequence of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the sequence and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source sequence of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	7:	java.lang.Character public static int codePointBefore (CharSequence seq, int index) Returns the code point that precedes index in the specified sequence of character units. If the unit at index - 1 is a low-surrogate unit, index - 2 is not negative and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source sequence of char units. index the position in seq following the code point that should be returned. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is less than 1 or greater than the length of seq.
	8:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	9:	java.lang.Character public static int codePointBefore (char[] seq, int index) Returns the code point that precedes index in the specified array of character units. If the unit at index - 1 is a low-surrogate unit, index - 2 is not negative and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is less than 1 or greater than the length of seq.
setClip
Sets the current clip to the rectangle specified by the given coordinates
	0:	java.lang.Character public static boolean isSpaceChar (int codePoint) Returns true if the given code point is a Unicode space character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are considered whitespace. Note also that line separators are not considered whitespace; see isWhitespace(char) for an alternative.
	1:	java.lang.Character public static boolean isWhitespace (int codePoint) Returns true if the given code point is a Unicode whitespace character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are not considered whitespace. Note also that line separators are considered whitespace; see isSpaceChar(char) for an alternative.
	2:	java.lang.Character public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	3:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock forName (String blockName) Returns the Unicode block for the given block name, or null if there is no such block. Block names may be one of the following: Canonical block name, as defined by the Unicode specification; case-insensitive. Canonical block name without any spaces, as defined by the Unicode specification; case-insensitive. A UnicodeBlock constant identifier. This is determined by converting the canonical name to uppercase and replacing all spaces and hyphens with underscores. Throws NullPointerException if blockName == null. IllegalArgumentException if blockName is not the name of any known block.
	4:	java.lang.Character public static char highSurrogate (int codePoint) Returns the high surrogate for the given code point. The result is meaningless if the given code point is not a supplementary character.
	5:	java.lang.Character public static char lowSurrogate (int codePoint) Returns the low surrogate for the given code point. The result is meaningless if the given code point is not a supplementary character.
	6:	java.lang.Character public static boolean isIdeographic (int codePoint) Returns true if the given code point is a CJKV ideographic character.
	7:	java.lang.Character public static boolean isSurrogate (char ch) Returns true if the given character is a high or low surrogate.
	8:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	9:	java.lang.Character public static boolean isAlphabetic (int codePoint) Returns true if the given code point is alphabetic. That is, if it is in any of the Lu, Ll, Lt, Lm, Lo, Nl, or Other_Alphabetic categories.
drawLine
Draws a line between the coordinates (x1,y1) and (x2,y2) using the current color and stroke style
	0:	java.lang.Character public static boolean isSpaceChar (int codePoint) Returns true if the given code point is a Unicode space character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are considered whitespace. Note also that line separators are not considered whitespace; see isWhitespace(char) for an alternative.
	1:	java.lang.Character public static boolean isWhitespace (int codePoint) Returns true if the given code point is a Unicode whitespace character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are not considered whitespace. Note also that line separators are considered whitespace; see isSpaceChar(char) for an alternative.
	2:	java.lang.Character public static int digit (char c, int radix) Convenience method to determine the value of the specified character c in the supplied radix. The value of radix must be between MIN_RADIX and MAX_RADIX. Parameters c the character to determine the value of. radix the radix. Returns the value of c in radix if radix lies between MIN_RADIX and MAX_RADIX; -1 otherwise.
	3:	java.lang.Character public static int digit (int codePoint, int radix) Convenience method to determine the value of the character codePoint in the supplied radix. The value of radix must be between MIN_RADIX and MAX_RADIX. Parameters codePoint the character, including supplementary characters. radix the radix. Returns if radix lies between MIN_RADIX and MAX_RADIX then the value of the character in the radix; -1 otherwise.
	4:	java.lang.Character public static char toTitleCase (char c) Returns the title case equivalent for the specified character if it exists. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns the title case equivalent of c if it exists, otherwise c.
	5:	java.lang.Character public static int toTitleCase (int codePoint) Returns the title case equivalent for the specified code point if it exists. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns the title case equivalent of codePoint if it exists, otherwise codePoint.
	6:	java.lang.Character public static char forDigit (int digit, int radix) Returns the character which represents the specified digit in the specified radix. The radix must be between MIN_RADIX and MAX_RADIX inclusive; digit must not be negative and smaller than radix. If any of these conditions does not hold, 0 is returned. Parameters digit the integer value. radix the radix. Returns the character which represents the digit in the radix.
	7:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	8:	java.lang.Character public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	9:	java.lang.Character public static String getName (int codePoint) Returns a human-readable name for the given code point, or null if the code point is unassigned. As a fallback mechanism this method returns strings consisting of the Unicode block name (with underscores replaced by spaces), a single space, and the uppercase hex value of the code point, using as few digits as necessary. Examples: Character.getName(0) returns "NULL". Character.getName('e') returns "LATIN SMALL LETTER E". Character.getName('Ù¦') returns "ARABIC-INDIC DIGIT SIX". Character.getName(0xe000) returns "PRIVATE USE AREA E000". Note that the exact strings returned will vary from release to release. Throws IllegalArgumentException if codePoint is not a valid code point.
fillRect
Fills the specified rectangle with the current color
	0:	java.lang.Character public Character (char value) Constructs a new Character with the specified primitive char value. Parameters value the primitive char value to store in the new instance.
	1:	java.lang.Character public static int charCount (int codePoint) Calculates the number of char values required to represent the specified Unicode code point. This method checks if the codePoint is greater than or equal to 0x10000, in which case 2 is returned, otherwise 1. To test if the code point is valid, use the isValidCodePoint(int) method. Parameters codePoint the code point for which to calculate the number of required chars. Returns 2 if codePoint >= 0x10000; 1 otherwise. See Also isValidCodePoint(int) isSupplementaryCodePoint(int)
	2:	java.lang.Character public char charValue () Gets the primitive value of this character. Returns this object's primitive value.
	3:	java.lang.Character public static int codePointAt (char[] seq, int index) Returns the code point at index in the specified array of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the array and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	4:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	5:	java.lang.Character public static int codePointAt (CharSequence seq, int index) Returns the code point at index in the specified sequence of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the sequence and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source sequence of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	6:	java.lang.Character public static int codePointBefore (CharSequence seq, int index) Returns the code point that precedes index in the specified sequence of character units. If the unit at index - 1 is a low-surrogate unit, index - 2 is not negative and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source sequence of char units. index the position in seq following the code point that should be returned. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is less than 1 or greater than the length of seq.
	7:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	8:	java.lang.Character public static int codePointBefore (char[] seq, int index) Returns the code point that precedes index in the specified array of character units. If the unit at index - 1 is a low-surrogate unit, index - 2 is not negative and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is less than 1 or greater than the length of seq.
	9:	java.lang.Character public static int codePointCount (CharSequence seq, int beginIndex, int endIndex) Counts the number of Unicode code points in the subsequence of the specified character sequence, as delineated by beginIndex and endIndex. Any surrogate values with missing pair values will be counted as one code point. Parameters seq the CharSequence to look through. beginIndex the inclusive index to begin counting at. endIndex the exclusive index to stop counting at. Returns the number of Unicode code points. Throws NullPointerException if seq is null. IndexOutOfBoundsException if beginIndex < 0, beginIndex > endIndex or if endIndex is greater than the length of seq.
drawRect
Draws the outline of the specified rectangle using the current color and stroke style
	0:	java.lang.Character public static char toTitleCase (char c) Returns the title case equivalent for the specified character if it exists. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns the title case equivalent of c if it exists, otherwise c.
	1:	java.lang.Character public static int toTitleCase (int codePoint) Returns the title case equivalent for the specified code point if it exists. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns the title case equivalent of codePoint if it exists, otherwise codePoint.
	2:	java.lang.Character.Subset protected Character.Subset (String name) Constructs a new Subset.
	3:	java.lang.Character public static String toString (char value) Converts the specified character to its string representation. Parameters value the character to convert. Returns the character converted to a string.
	4:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock forName (String blockName) Returns the Unicode block for the given block name, or null if there is no such block. Block names may be one of the following: Canonical block name, as defined by the Unicode specification; case-insensitive. Canonical block name without any spaces, as defined by the Unicode specification; case-insensitive. A UnicodeBlock constant identifier. This is determined by converting the canonical name to uppercase and replacing all spaces and hyphens with underscores. Throws NullPointerException if blockName == null. IllegalArgumentException if blockName is not the name of any known block.
	5:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock of (char c) Returns the Unicode block containing the given code point, or null if the code point does not belong to any known block.
	6:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock of (int codePoint) Returns the Unicode block containing the given code point, or null if the code point does not belong to any known block.
	7:	java.lang.Character.Subset public final String toString () Returns this subset's name. Returns a printable representation of this object.
	8:	java.lang.Character public static byte getDirectionality (int codePoint) Gets the Unicode directionality of the specified character. Parameters codePoint the Unicode code point to get the directionality of. Returns the Unicode directionality of codePoint.
	9:	java.lang.Character public static byte getDirectionality (char c) Gets the Unicode directionality of the specified character. Parameters c the character to get the directionality of. Returns the Unicode directionality of c.
drawRoundRect
Draws the outline of the specified rounded corner rectangle using the current color and stroke style
	0:	java.lang.Character public static char toTitleCase (char c) Returns the title case equivalent for the specified character if it exists. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns the title case equivalent of c if it exists, otherwise c.
	1:	java.lang.Character public static int toTitleCase (int codePoint) Returns the title case equivalent for the specified code point if it exists. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns the title case equivalent of codePoint if it exists, otherwise codePoint.
	2:	java.lang.Character.Subset protected Character.Subset (String name) Constructs a new Subset.
	3:	java.lang.Character public static String toString (char value) Converts the specified character to its string representation. Parameters value the character to convert. Returns the character converted to a string.
	4:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock forName (String blockName) Returns the Unicode block for the given block name, or null if there is no such block. Block names may be one of the following: Canonical block name, as defined by the Unicode specification; case-insensitive. Canonical block name without any spaces, as defined by the Unicode specification; case-insensitive. A UnicodeBlock constant identifier. This is determined by converting the canonical name to uppercase and replacing all spaces and hyphens with underscores. Throws NullPointerException if blockName == null. IllegalArgumentException if blockName is not the name of any known block.
	5:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock of (char c) Returns the Unicode block containing the given code point, or null if the code point does not belong to any known block.
	6:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock of (int codePoint) Returns the Unicode block containing the given code point, or null if the code point does not belong to any known block.
	7:	java.lang.Character.Subset public final String toString () Returns this subset's name. Returns a printable representation of this object.
	8:	java.lang.Character public static byte getDirectionality (int codePoint) Gets the Unicode directionality of the specified character. Parameters codePoint the Unicode code point to get the directionality of. Returns the Unicode directionality of codePoint.
	9:	java.lang.Character public static byte getDirectionality (char c) Gets the Unicode directionality of the specified character. Parameters c the character to get the directionality of. Returns the Unicode directionality of c.
fillRoundRect
Fills the specified rounded corner rectangle with the current color
	0:	java.lang.Character public Character (char value) Constructs a new Character with the specified primitive char value. Parameters value the primitive char value to store in the new instance.
	1:	java.lang.Character public static int charCount (int codePoint) Calculates the number of char values required to represent the specified Unicode code point. This method checks if the codePoint is greater than or equal to 0x10000, in which case 2 is returned, otherwise 1. To test if the code point is valid, use the isValidCodePoint(int) method. Parameters codePoint the code point for which to calculate the number of required chars. Returns 2 if codePoint >= 0x10000; 1 otherwise. See Also isValidCodePoint(int) isSupplementaryCodePoint(int)
	2:	java.lang.Character public char charValue () Gets the primitive value of this character. Returns this object's primitive value.
	3:	java.lang.Character public static int codePointAt (char[] seq, int index) Returns the code point at index in the specified array of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the array and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	4:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	5:	java.lang.Character public static int codePointAt (CharSequence seq, int index) Returns the code point at index in the specified sequence of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the sequence and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source sequence of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	6:	java.lang.Character public static int codePointBefore (CharSequence seq, int index) Returns the code point that precedes index in the specified sequence of character units. If the unit at index - 1 is a low-surrogate unit, index - 2 is not negative and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source sequence of char units. index the position in seq following the code point that should be returned. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is less than 1 or greater than the length of seq.
	7:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	8:	java.lang.Character public static int codePointBefore (char[] seq, int index) Returns the code point that precedes index in the specified array of character units. If the unit at index - 1 is a low-surrogate unit, index - 2 is not negative and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is less than 1 or greater than the length of seq.
	9:	java.lang.Character public static int codePointCount (CharSequence seq, int beginIndex, int endIndex) Counts the number of Unicode code points in the subsequence of the specified character sequence, as delineated by beginIndex and endIndex. Any surrogate values with missing pair values will be counted as one code point. Parameters seq the CharSequence to look through. beginIndex the inclusive index to begin counting at. endIndex the exclusive index to stop counting at. Returns the number of Unicode code points. Throws NullPointerException if seq is null. IndexOutOfBoundsException if beginIndex < 0, beginIndex > endIndex or if endIndex is greater than the length of seq.
fillArc
Fills a circular or elliptical arc covering the specified rectangle
	0:	java.lang.Character public Character (char value) Constructs a new Character with the specified primitive char value. Parameters value the primitive char value to store in the new instance.
	1:	java.lang.Character public static int charCount (int codePoint) Calculates the number of char values required to represent the specified Unicode code point. This method checks if the codePoint is greater than or equal to 0x10000, in which case 2 is returned, otherwise 1. To test if the code point is valid, use the isValidCodePoint(int) method. Parameters codePoint the code point for which to calculate the number of required chars. Returns 2 if codePoint >= 0x10000; 1 otherwise. See Also isValidCodePoint(int) isSupplementaryCodePoint(int)
	2:	java.lang.Character public char charValue () Gets the primitive value of this character. Returns this object's primitive value.
	3:	java.lang.Character public static int codePointAt (char[] seq, int index) Returns the code point at index in the specified array of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the array and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	4:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	5:	java.lang.Character public static int codePointAt (CharSequence seq, int index) Returns the code point at index in the specified sequence of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the sequence and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source sequence of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	6:	java.lang.Character public static int codePointBefore (CharSequence seq, int index) Returns the code point that precedes index in the specified sequence of character units. If the unit at index - 1 is a low-surrogate unit, index - 2 is not negative and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source sequence of char units. index the position in seq following the code point that should be returned. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is less than 1 or greater than the length of seq.
	7:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	8:	java.lang.Character public static int codePointBefore (char[] seq, int index) Returns the code point that precedes index in the specified array of character units. If the unit at index - 1 is a low-surrogate unit, index - 2 is not negative and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is less than 1 or greater than the length of seq.
	9:	java.lang.Character public static int codePointCount (CharSequence seq, int beginIndex, int endIndex) Counts the number of Unicode code points in the subsequence of the specified character sequence, as delineated by beginIndex and endIndex. Any surrogate values with missing pair values will be counted as one code point. Parameters seq the CharSequence to look through. beginIndex the inclusive index to begin counting at. endIndex the exclusive index to stop counting at. Returns the number of Unicode code points. Throws NullPointerException if seq is null. IndexOutOfBoundsException if beginIndex < 0, beginIndex > endIndex or if endIndex is greater than the length of seq.
drawArc
Draws the outline of a circular or elliptical arc covering the specified rectangle, using the current color and stroke style
	0:	java.lang.Character public static char toTitleCase (char c) Returns the title case equivalent for the specified character if it exists. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns the title case equivalent of c if it exists, otherwise c.
	1:	java.lang.Character public static int toTitleCase (int codePoint) Returns the title case equivalent for the specified code point if it exists. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns the title case equivalent of codePoint if it exists, otherwise codePoint.
	2:	java.lang.Character.Subset protected Character.Subset (String name) Constructs a new Subset.
	3:	java.lang.Character public static String toString (char value) Converts the specified character to its string representation. Parameters value the character to convert. Returns the character converted to a string.
	4:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock forName (String blockName) Returns the Unicode block for the given block name, or null if there is no such block. Block names may be one of the following: Canonical block name, as defined by the Unicode specification; case-insensitive. Canonical block name without any spaces, as defined by the Unicode specification; case-insensitive. A UnicodeBlock constant identifier. This is determined by converting the canonical name to uppercase and replacing all spaces and hyphens with underscores. Throws NullPointerException if blockName == null. IllegalArgumentException if blockName is not the name of any known block.
	5:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock of (char c) Returns the Unicode block containing the given code point, or null if the code point does not belong to any known block.
	6:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock of (int codePoint) Returns the Unicode block containing the given code point, or null if the code point does not belong to any known block.
	7:	java.lang.Character.Subset public final String toString () Returns this subset's name. Returns a printable representation of this object.
	8:	java.lang.Character public static byte getDirectionality (int codePoint) Gets the Unicode directionality of the specified character. Parameters codePoint the Unicode code point to get the directionality of. Returns the Unicode directionality of codePoint.
	9:	java.lang.Character public static byte getDirectionality (char c) Gets the Unicode directionality of the specified character. Parameters c the character to get the directionality of. Returns the Unicode directionality of c.
drawString
Draws the specified String using the current font and color
	0:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock forName (String blockName) Returns the Unicode block for the given block name, or null if there is no such block. Block names may be one of the following: Canonical block name, as defined by the Unicode specification; case-insensitive. Canonical block name without any spaces, as defined by the Unicode specification; case-insensitive. A UnicodeBlock constant identifier. This is determined by converting the canonical name to uppercase and replacing all spaces and hyphens with underscores. Throws NullPointerException if blockName == null. IllegalArgumentException if blockName is not the name of any known block.
	1:	java.lang.Character.Subset protected Character.Subset (String name) Constructs a new Subset.
	2:	java.lang.Character public static String toString (char value) Converts the specified character to its string representation. Parameters value the character to convert. Returns the character converted to a string.
	3:	java.lang.Character.Subset public final String toString () Returns this subset's name. Returns a printable representation of this object.
	4:	java.lang.Character public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	5:	java.lang.Character public static char toLowerCase (char c) Returns the lower case equivalent for the specified character if the character is an upper case letter. Otherwise, the specified character is returned unchanged. Parameters c the character Returns if c is an upper case character then its lower case counterpart, otherwise just c.
	6:	java.lang.Character public static int toLowerCase (int codePoint) Returns the lower case equivalent for the specified code point if it is an upper case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to check. Returns if codePoint is an upper case character then its lower case counterpart, otherwise just codePoint.
	7:	java.lang.Character public static char toUpperCase (char c) Returns the upper case equivalent for the specified character if the character is a lower case letter. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns if c is a lower case character then its upper case counterpart, otherwise just c.
	8:	java.lang.Character public static int toUpperCase (int codePoint) Returns the upper case equivalent for the specified code point if the code point is a lower case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns if codePoint is a lower case character then its upper case counterpart, otherwise just codePoint.
	9:	java.lang.Character public static char toTitleCase (char c) Returns the title case equivalent for the specified character if it exists. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns the title case equivalent of c if it exists, otherwise c.
drawSubstring
Draws the specified String using the current font and color
	0:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock forName (String blockName) Returns the Unicode block for the given block name, or null if there is no such block. Block names may be one of the following: Canonical block name, as defined by the Unicode specification; case-insensitive. Canonical block name without any spaces, as defined by the Unicode specification; case-insensitive. A UnicodeBlock constant identifier. This is determined by converting the canonical name to uppercase and replacing all spaces and hyphens with underscores. Throws NullPointerException if blockName == null. IllegalArgumentException if blockName is not the name of any known block.
	1:	java.lang.Character.Subset protected Character.Subset (String name) Constructs a new Subset.
	2:	java.lang.Character public static String toString (char value) Converts the specified character to its string representation. Parameters value the character to convert. Returns the character converted to a string.
	3:	java.lang.Character.Subset public final String toString () Returns this subset's name. Returns a printable representation of this object.
	4:	java.lang.Character public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	5:	java.lang.Character public static char toLowerCase (char c) Returns the lower case equivalent for the specified character if the character is an upper case letter. Otherwise, the specified character is returned unchanged. Parameters c the character Returns if c is an upper case character then its lower case counterpart, otherwise just c.
	6:	java.lang.Character public static int toLowerCase (int codePoint) Returns the lower case equivalent for the specified code point if it is an upper case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to check. Returns if codePoint is an upper case character then its lower case counterpart, otherwise just codePoint.
	7:	java.lang.Character public static char toUpperCase (char c) Returns the upper case equivalent for the specified character if the character is a lower case letter. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns if c is a lower case character then its upper case counterpart, otherwise just c.
	8:	java.lang.Character public static int toUpperCase (int codePoint) Returns the upper case equivalent for the specified code point if the code point is a lower case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns if codePoint is a lower case character then its upper case counterpart, otherwise just codePoint.
	9:	java.lang.Character public static char toTitleCase (char c) Returns the title case equivalent for the specified character if it exists. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns the title case equivalent of c if it exists, otherwise c.
drawChar
Draws the specified character using the current font and color
	0:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock forName (String blockName) Returns the Unicode block for the given block name, or null if there is no such block. Block names may be one of the following: Canonical block name, as defined by the Unicode specification; case-insensitive. Canonical block name without any spaces, as defined by the Unicode specification; case-insensitive. A UnicodeBlock constant identifier. This is determined by converting the canonical name to uppercase and replacing all spaces and hyphens with underscores. Throws NullPointerException if blockName == null. IllegalArgumentException if blockName is not the name of any known block.
	1:	java.lang.Character public static char toLowerCase (char c) Returns the lower case equivalent for the specified character if the character is an upper case letter. Otherwise, the specified character is returned unchanged. Parameters c the character Returns if c is an upper case character then its lower case counterpart, otherwise just c.
	2:	java.lang.Character public static int toLowerCase (int codePoint) Returns the lower case equivalent for the specified code point if it is an upper case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to check. Returns if codePoint is an upper case character then its lower case counterpart, otherwise just codePoint.
	3:	java.lang.Character public static char toUpperCase (char c) Returns the upper case equivalent for the specified character if the character is a lower case letter. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns if c is a lower case character then its upper case counterpart, otherwise just c.
	4:	java.lang.Character public static int toUpperCase (int codePoint) Returns the upper case equivalent for the specified code point if the code point is a lower case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns if codePoint is a lower case character then its upper case counterpart, otherwise just codePoint.
	5:	java.lang.Character public static char toTitleCase (char c) Returns the title case equivalent for the specified character if it exists. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns the title case equivalent of c if it exists, otherwise c.
	6:	java.lang.Character public static int toTitleCase (int codePoint) Returns the title case equivalent for the specified code point if it exists. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns the title case equivalent of codePoint if it exists, otherwise codePoint.
	7:	java.lang.Character public static int charCount (int codePoint) Calculates the number of char values required to represent the specified Unicode code point. This method checks if the codePoint is greater than or equal to 0x10000, in which case 2 is returned, otherwise 1. To test if the code point is valid, use the isValidCodePoint(int) method. Parameters codePoint the code point for which to calculate the number of required chars. Returns 2 if codePoint >= 0x10000; 1 otherwise. See Also isValidCodePoint(int) isSupplementaryCodePoint(int)
	8:	java.lang.Character.Subset protected Character.Subset (String name) Constructs a new Subset.
	9:	java.lang.Character public static String toString (char value) Converts the specified character to its string representation. Parameters value the character to convert. Returns the character converted to a string.
drawChars
Draws the specified characters using the current font and color
	0:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock forName (String blockName) Returns the Unicode block for the given block name, or null if there is no such block. Block names may be one of the following: Canonical block name, as defined by the Unicode specification; case-insensitive. Canonical block name without any spaces, as defined by the Unicode specification; case-insensitive. A UnicodeBlock constant identifier. This is determined by converting the canonical name to uppercase and replacing all spaces and hyphens with underscores. Throws NullPointerException if blockName == null. IllegalArgumentException if blockName is not the name of any known block.
	1:	java.lang.Character public static char toLowerCase (char c) Returns the lower case equivalent for the specified character if the character is an upper case letter. Otherwise, the specified character is returned unchanged. Parameters c the character Returns if c is an upper case character then its lower case counterpart, otherwise just c.
	2:	java.lang.Character public static int toLowerCase (int codePoint) Returns the lower case equivalent for the specified code point if it is an upper case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to check. Returns if codePoint is an upper case character then its lower case counterpart, otherwise just codePoint.
	3:	java.lang.Character public static char toUpperCase (char c) Returns the upper case equivalent for the specified character if the character is a lower case letter. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns if c is a lower case character then its upper case counterpart, otherwise just c.
	4:	java.lang.Character public static int toUpperCase (int codePoint) Returns the upper case equivalent for the specified code point if the code point is a lower case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns if codePoint is a lower case character then its upper case counterpart, otherwise just codePoint.
	5:	java.lang.Character public static char toTitleCase (char c) Returns the title case equivalent for the specified character if it exists. Otherwise, the specified character is returned unchanged. Parameters c the character to convert. Returns the title case equivalent of c if it exists, otherwise c.
	6:	java.lang.Character public static int toTitleCase (int codePoint) Returns the title case equivalent for the specified code point if it exists. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns the title case equivalent of codePoint if it exists, otherwise codePoint.
	7:	java.lang.Character public static int charCount (int codePoint) Calculates the number of char values required to represent the specified Unicode code point. This method checks if the codePoint is greater than or equal to 0x10000, in which case 2 is returned, otherwise 1. To test if the code point is valid, use the isValidCodePoint(int) method. Parameters codePoint the code point for which to calculate the number of required chars. Returns 2 if codePoint >= 0x10000; 1 otherwise. See Also isValidCodePoint(int) isSupplementaryCodePoint(int)
	8:	java.lang.Character.Subset protected Character.Subset (String name) Constructs a new Subset.
	9:	java.lang.Character public static String toString (char value) Converts the specified character to its string representation. Parameters value the character to convert. Returns the character converted to a string.
drawImage
Draws the specified image by using the anchor point
	0:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock of (char c) Returns the Unicode block containing the given code point, or null if the code point does not belong to any known block.
	1:	java.lang.Character.UnicodeBlock public static Character.UnicodeBlock of (int codePoint) Returns the Unicode block containing the given code point, or null if the code point does not belong to any known block.
	2:	java.lang.Character public static int getType (int codePoint) Gets the general Unicode category of the specified code point. Parameters codePoint the Unicode code point to get the category of. Returns the Unicode category of codePoint.
	3:	java.lang.Character public static String getName (int codePoint) Returns a human-readable name for the given code point, or null if the code point is unassigned. As a fallback mechanism this method returns strings consisting of the Unicode block name (with underscores replaced by spaces), a single space, and the uppercase hex value of the code point, using as few digits as necessary. Examples: Character.getName(0) returns "NULL". Character.getName('e') returns "LATIN SMALL LETTER E". Character.getName('Ù¦') returns "ARABIC-INDIC DIGIT SIX". Character.getName(0xe000) returns "PRIVATE USE AREA E000". Note that the exact strings returned will vary from release to release. Throws IllegalArgumentException if codePoint is not a valid code point.
	4:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	5:	java.lang.Character public static byte getDirectionality (int codePoint) Gets the Unicode directionality of the specified character. Parameters codePoint the Unicode code point to get the directionality of. Returns the Unicode directionality of codePoint.
	6:	java.lang.Character public static boolean isSpaceChar (int codePoint) Returns true if the given code point is a Unicode space character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are considered whitespace. Note also that line separators are not considered whitespace; see isWhitespace(char) for an alternative.
	7:	java.lang.Character public static boolean isWhitespace (int codePoint) Returns true if the given code point is a Unicode whitespace character. The exact set of characters considered as whitespace varies with Unicode version. Note that non-breaking spaces are not considered whitespace. Note also that line separators are considered whitespace; see isSpaceChar(char) for an alternative.
	8:	java.lang.Character public static boolean isSupplementaryCodePoint (int codePoint) Indicates whether codePoint is within the supplementary code point range. Parameters codePoint the code point to test. Returns true if codePoint is within the supplementary code point range; false otherwise.
	9:	java.lang.Character public static boolean isValidCodePoint (int codePoint) Indicates whether codePoint is a valid Unicode code point. Parameters codePoint the code point to test. Returns true if codePoint is a valid Unicode code point; false otherwise.
drawRegion
Copies a region of the specified source image to a location within the destination, possibly transforming (rotating and reflecting) the image data using the chosen transform function
	0:	java.lang.Character public static boolean isSupplementaryCodePoint (int codePoint) Indicates whether codePoint is within the supplementary code point range. Parameters codePoint the code point to test. Returns true if codePoint is within the supplementary code point range; false otherwise.
	1:	java.lang.Character public static boolean isJavaIdentifierPart (int codePoint) Indicates whether the specified code point is a valid part of a Java identifier other than the first character. Parameters codePoint the code point to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	2:	java.lang.Character public static boolean isJavaIdentifierPart (char c) Indicates whether the specified character is a valid part of a Java identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	3:	java.lang.Character public static boolean isUnicodeIdentifierPart (int codePoint) Indicates whether the specified code point is valid as part of a Unicode identifier other than the first character. Parameters codePoint the code point to check. Returns true if codePoint is valid as part of a Unicode identifier; false otherwise.
	4:	java.lang.Character public static boolean isUnicodeIdentifierPart (char c) Indicates whether the specified character is valid as part of a Unicode identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Unicode identifier; false otherwise.
	5:	java.lang.Character public static String getName (int codePoint) Returns a human-readable name for the given code point, or null if the code point is unassigned. As a fallback mechanism this method returns strings consisting of the Unicode block name (with underscores replaced by spaces), a single space, and the uppercase hex value of the code point, using as few digits as necessary. Examples: Character.getName(0) returns "NULL". Character.getName('e') returns "LATIN SMALL LETTER E". Character.getName('Ù¦') returns "ARABIC-INDIC DIGIT SIX". Character.getName(0xe000) returns "PRIVATE USE AREA E000". Note that the exact strings returned will vary from release to release. Throws IllegalArgumentException if codePoint is not a valid code point.
	6:	java.lang.Character public static boolean isSpace (char c) This method was deprecated in API level 1. Use isWhitespace(char) instead. Use isWhitespace(char) instead.
	7:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	8:	java.lang.Character public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	9:	java.lang.Character public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
copyArea
Copies the contents of a rectangular area (x_src, y_src, width, height) to a destination area, whose anchor point identified by anchor is located at (x_dest, y_dest)
	0:	java.lang.Character public static String getName (int codePoint) Returns a human-readable name for the given code point, or null if the code point is unassigned. As a fallback mechanism this method returns strings consisting of the Unicode block name (with underscores replaced by spaces), a single space, and the uppercase hex value of the code point, using as few digits as necessary. Examples: Character.getName(0) returns "NULL". Character.getName('e') returns "LATIN SMALL LETTER E". Character.getName('Ù¦') returns "ARABIC-INDIC DIGIT SIX". Character.getName(0xe000) returns "PRIVATE USE AREA E000". Note that the exact strings returned will vary from release to release. Throws IllegalArgumentException if codePoint is not a valid code point.
	1:	java.lang.Character public static int getNumericValue (int codePoint) Gets the numeric value of the specified Unicode code point. For example, the code point 'â…«' stands for the Roman number XII, which has the numeric value 12. There are two points of divergence between this method and the Unicode specification. This method treats the letters a-z (in both upper and lower cases, and their full-width variants) as numbers from 10 to 35. The Unicode specification also supports the idea of code points with non-integer numeric values; this method does not (except to the extent of returning -2 for such code points). Parameters codePoint the code point Returns a non-negative numeric integer value if a numeric value for codePoint exists, -1 if there is no numeric value for codePoint, -2 if the numeric value can not be represented with an integer.
	2:	java.lang.Character public static char forDigit (int digit, int radix) Returns the character which represents the specified digit in the specified radix. The radix must be between MIN_RADIX and MAX_RADIX inclusive; digit must not be negative and smaller than radix. If any of these conditions does not hold, 0 is returned. Parameters digit the integer value. radix the radix. Returns the character which represents the digit in the radix.
	3:	java.lang.Character public static boolean isSupplementaryCodePoint (int codePoint) Indicates whether codePoint is within the supplementary code point range. Parameters codePoint the code point to test. Returns true if codePoint is within the supplementary code point range; false otherwise.
	4:	java.lang.Character public static boolean isValidCodePoint (int codePoint) Indicates whether codePoint is a valid Unicode code point. Parameters codePoint the code point to test. Returns true if codePoint is a valid Unicode code point; false otherwise.
	5:	java.lang.Character public static int toUpperCase (int codePoint) Returns the upper case equivalent for the specified code point if the code point is a lower case letter. Otherwise, the specified code point is returned unchanged. Parameters codePoint the code point to convert. Returns if codePoint is a lower case character then its upper case counterpart, otherwise just codePoint.
	6:	java.lang.Character public static int getType (int codePoint) Gets the general Unicode category of the specified code point. Parameters codePoint the Unicode code point to get the category of. Returns the Unicode category of codePoint.
	7:	java.lang.Character public static char highSurrogate (int codePoint) Returns the high surrogate for the given code point. The result is meaningless if the given code point is not a supplementary character.
	8:	java.lang.Character public static boolean isDigit (int codePoint) Indicates whether the specified code point is a digit. Parameters codePoint the code point to check. Returns true if codePoint is a digit; false otherwise.
	9:	java.lang.Character public static boolean isISOControl (int c) Indicates whether the specified code point is an ISO control character. Parameters c the code point to check. Returns true if c is an ISO control character; false otherwise.
fillTriangle
Fills the specified triangle will the current color
	0:	java.lang.Character public Character (char value) Constructs a new Character with the specified primitive char value. Parameters value the primitive char value to store in the new instance.
	1:	java.lang.Character public static int charCount (int codePoint) Calculates the number of char values required to represent the specified Unicode code point. This method checks if the codePoint is greater than or equal to 0x10000, in which case 2 is returned, otherwise 1. To test if the code point is valid, use the isValidCodePoint(int) method. Parameters codePoint the code point for which to calculate the number of required chars. Returns 2 if codePoint >= 0x10000; 1 otherwise. See Also isValidCodePoint(int) isSupplementaryCodePoint(int)
	2:	java.lang.Character public char charValue () Gets the primitive value of this character. Returns this object's primitive value.
	3:	java.lang.Character public static int codePointAt (char[] seq, int index) Returns the code point at index in the specified array of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the array and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	4:	java.lang.Character public static int codePointAt (char[] seq, int index, int limit) Returns the code point at index in the specified array of character units, where index has to be less than limit. If the unit at index is a high-surrogate unit, index + 1 is less than limit and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source array of char units. index the position in seq from which to get the code point. limit the index after the last unit in seq that can be used. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if index < 0, index >= limit, limit < 0 or if limit is greater than the length of seq.
	5:	java.lang.Character public static int codePointAt (CharSequence seq, int index) Returns the code point at index in the specified sequence of character units. If the unit at index is a high-surrogate unit, index + 1 is less than the length of the sequence and the unit at index + 1 is a low-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index is returned. Parameters seq the source sequence of char units. index the position in seq from which to retrieve the code point. Returns the Unicode code point or char value at index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is negative or greater than or equal to the length of seq.
	6:	java.lang.Character public static int codePointBefore (CharSequence seq, int index) Returns the code point that precedes index in the specified sequence of character units. If the unit at index - 1 is a low-surrogate unit, index - 2 is not negative and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source sequence of char units. index the position in seq following the code point that should be returned. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is less than 1 or greater than the length of seq.
	7:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	8:	java.lang.Character public static int codePointBefore (char[] seq, int index) Returns the code point that precedes index in the specified array of character units. If the unit at index - 1 is a low-surrogate unit, index - 2 is not negative and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index is less than 1 or greater than the length of seq.
	9:	java.lang.Character public static int codePointCount (CharSequence seq, int beginIndex, int endIndex) Counts the number of Unicode code points in the subsequence of the specified character sequence, as delineated by beginIndex and endIndex. Any surrogate values with missing pair values will be counted as one code point. Parameters seq the CharSequence to look through. beginIndex the inclusive index to begin counting at. endIndex the exclusive index to stop counting at. Returns the number of Unicode code points. Throws NullPointerException if seq is null. IndexOutOfBoundsException if beginIndex < 0, beginIndex > endIndex or if endIndex is greater than the length of seq.
drawRGB
Renders a series of device-independent RGB+transparency values in a specified region
	0:	java.lang.Character public static boolean isJavaIdentifierPart (int codePoint) Indicates whether the specified code point is a valid part of a Java identifier other than the first character. Parameters codePoint the code point to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	1:	java.lang.Character public static boolean isJavaIdentifierPart (char c) Indicates whether the specified character is a valid part of a Java identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Java identifier; false otherwise.
	2:	java.lang.Character public static boolean isUnicodeIdentifierPart (int codePoint) Indicates whether the specified code point is valid as part of a Unicode identifier other than the first character. Parameters codePoint the code point to check. Returns true if codePoint is valid as part of a Unicode identifier; false otherwise.
	3:	java.lang.Character public static boolean isUnicodeIdentifierPart (char c) Indicates whether the specified character is valid as part of a Unicode identifier other than the first character. Parameters c the character to check. Returns true if c is valid as part of a Unicode identifier; false otherwise.
	4:	java.lang.Character public static String getName (int codePoint) Returns a human-readable name for the given code point, or null if the code point is unassigned. As a fallback mechanism this method returns strings consisting of the Unicode block name (with underscores replaced by spaces), a single space, and the uppercase hex value of the code point, using as few digits as necessary. Examples: Character.getName(0) returns "NULL". Character.getName('e') returns "LATIN SMALL LETTER E". Character.getName('Ù¦') returns "ARABIC-INDIC DIGIT SIX". Character.getName(0xe000) returns "PRIVATE USE AREA E000". Note that the exact strings returned will vary from release to release. Throws IllegalArgumentException if codePoint is not a valid code point.
	5:	java.lang.Character public int hashCode () Returns an integer hash code for this object. By contract, any two objects for which equals(Object) returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See Writing a correct hashCode method if you intend implementing your own hashCode method. Returns this object's hash code.
	6:	java.lang.Character public String toString () Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: getClass().getName() + '@' + Integer.toHexString(hashCode()) See Writing a useful toString method if you intend implementing your own toString method. Returns a printable representation of this object.
	7:	java.lang.Character public Character (char value) Constructs a new Character with the specified primitive char value. Parameters value the primitive char value to store in the new instance.
	8:	java.lang.Character public static int charCount (int codePoint) Calculates the number of char values required to represent the specified Unicode code point. This method checks if the codePoint is greater than or equal to 0x10000, in which case 2 is returned, otherwise 1. To test if the code point is valid, use the isValidCodePoint(int) method. Parameters codePoint the code point for which to calculate the number of required chars. Returns 2 if codePoint >= 0x10000; 1 otherwise. See Also isValidCodePoint(int) isSupplementaryCodePoint(int)
	9:	java.lang.Character public char charValue () Gets the primitive value of this character. Returns this object's primitive value.
P

getDisplayColor
Gets the color that will be displayed if the specified color is requested
	0:	java.lang.Character public static boolean isSpaceChar (char c) See isSpaceChar(int).
	1:	java.lang.Character public static boolean isWhitespace (char c) See isWhitespace(int).
	2:	java.lang.Character public static int codePointBefore (char[] seq, int index, int start) Returns the code point that precedes the index in the specified array of character units and is not less than start. If the unit at index - 1 is a low-surrogate unit, index - 2 is not less than start and the unit at index - 2 is a high-surrogate unit, then the supplementary code point represented by the pair is returned; otherwise the char value at index - 1 is returned. Parameters seq the source array of char units. index the position in seq following the code point that should be returned. start the index of the first element in seq. Returns the Unicode code point or char value before index in seq. Throws NullPointerException if seq is null. IndexOutOfBoundsException if the index <= start, start < 0, index is greater than the length of seq, or if start is equal or greater than the length of seq.
	3:	java.lang.Character public static int offsetByCodePoints (char[] seq, int start, int count, int index, int codePointOffset) Determines the index in a subsequence of the specified character array that is offset codePointOffset code points from index. The subsequence is delineated by start and count. Parameters seq the character array to find the index in. start the inclusive index that marks the beginning of the subsequence. count the number of char values to include within the subsequence. index the start index in the subsequence of the char array. codePointOffset the number of code points to look backwards or forwards; may be a negative or positive value. Returns the index in seq that is codePointOffset code points away from index. Throws NullPointerException if seq is null. IndexOutOfBoundsException if start < 0, count < 0, index < start, index > start + count, start + count is greater than the length of seq, or if there are not enough values in seq to skip codePointOffset code points forward or backward (if codePointOffset is negative) from index.
	4:	java.lang.Character public static boolean isJavaIdentifierStart (int codePoint) Indicates whether the specified code point is a valid first character for a Java identifier. Parameters codePoint the code point to check. Returns true if codePoint is a valid start of a Java identifier; false otherwise.
	5:	java.lang.Character public static byte getDirectionality (int codePoint) Gets the Unicode directionality of the specified character. Parameters codePoint the Unicode code point to get the directionality of. Returns the Unicode directionality of codePoint.
	6:	java.lang.Character public static byte getDirectionality (char c) Gets the Unicode directionality of the specified character. Parameters c the character to get the directionality of. Returns the Unicode directionality of c.
	7:	java.lang.Character public static int getType (char c) Gets the general Unicode category of the specified character. Parameters c the character to get the category of. Returns the Unicode category of c.
	8:	java.lang.Character public static int getType (int codePoint) Gets the general Unicode category of the specified code point. Parameters codePoint the Unicode code point to get the category of. Returns the Unicode category of codePoint.
	9:	java.lang.Character public static Character valueOf (char c) Returns a Character instance for the char value passed. If it is not necessary to get a new Character instance, it is recommended to use this method instead of the constructor, since it maintains a cache of instances which may result in better performance. Parameters c the char value for which to get a Character instance. Returns the Character instance for c.
