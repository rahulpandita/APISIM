getGameAction

Canvas
Constructs a new Canvas object
	0:	android.graphics.Canvas public Canvas () Construct an empty raster canvas. Use setBitmap() to specify a bitmap to draw into. The initial target density is DENSITY_NONE; this will typically be replaced when a target bitmap is set for the canvas.
	1:	android.graphics.Canvas public Canvas (Bitmap bitmap) Construct a canvas with the specified bitmap to draw into. The bitmap must be mutable. The initial target density of the canvas is the same as the given bitmap's density. Parameters bitmap Specifies a mutable bitmap for the canvas to draw into.
	2:	android.graphics.Canvas public void setDensity (int density) Specifies the density for this Canvas' backing bitmap. This modifies the target density of the canvas itself, as well as the density of its backing bitmap via Bitmap.setDensity(int). Parameters density The new target density of the canvas, which is used to determine the scaling factor when drawing a bitmap into it. Use DENSITY_NONE to disable bitmap scaling. See Also getDensity() setDensity(int)
	3:	android.graphics.Canvas public final Matrix getMatrix () Return a new matrix with a copy of the canvas' current transformation matrix.
	4:	android.graphics.Canvas public int getDensity () Returns the target density of the canvas. The default density is derived from the density of its backing bitmap, or DENSITY_NONE if there is not one. Returns Returns the current target density of the canvas, which is used to determine the scaling factor when drawing a bitmap into it. See Also setDensity(int) getDensity()
	5:	android.graphics.Canvas public void restoreToCount (int saveCount) Efficient way to pop any calls to save() that happened after the save count reached saveCount. It is an error for saveCount to be less than 1. Example: int count = canvas.save(); ... // more calls potentially to save() canvas.restoreToCount(count); // now the canvas is back in the same state it was before the initial // call to save(). Parameters saveCount The save level to restore to.
	6:	android.graphics.Canvas public void setBitmap (Bitmap bitmap) Specify a bitmap for the canvas to draw into. All canvas state such as layers, filters, and the save/restore stack are reset with the exception of the current matrix and clip stack. Additionally, as a side-effect the canvas' target density is updated to match that of the bitmap. Parameters bitmap Specifies a mutable bitmap for the canvas to draw into. See Also setDensity(int) getDensity()
	7:	android.graphics.Canvas public void drawBitmap (int[] colors, int offset, int stride, float x, float y, int width, int height, boolean hasAlpha, Paint paint) Treat the specified array of colors as a bitmap, and draw it. This gives the same result as first creating a bitmap from the array, and then drawing it, but this method avoids explicitly creating a bitmap object which can be more efficient if the colors are changing often. Parameters colors Array of colors representing the pixels of the bitmap offset Offset into the array of colors for the first pixel stride The number of colors in the array between rows (must be >= width or <= -width). x The X coordinate for where to draw the bitmap y The Y coordinate for where to draw the bitmap width The width of the bitmap height The height of the bitmap hasAlpha True if the alpha channel of the colors contains valid values. If false, the alpha byte is ignored (assumed to be 0xFF for every pixel). paint May be null. The paint used to draw the bitmap
	8:	android.graphics.Canvas public boolean clipPath (Path path) Intersect the current clip with the specified path. Parameters path The path to intersect with the current clip Returns true if the resulting is non-empty
	9:	android.graphics.Canvas public boolean clipPath (Path path, Region.Op op) Modify the current clip with the specified path. Parameters path The path to operate on the current clip op How the clip is modified Returns true if the resulting is non-empty
isDoubleBuffered
Checks if the Canvas is double buffered by the implementation
	0:	android.graphics.Canvas public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds The maximum size the offscreen bitmap needs to be (in local coordinates) alpha The alpha to apply to the offscreen when when it is drawn during restore() saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this call
	1:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	2:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	3:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
	4:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	5:	android.graphics.Canvas public void drawPicture (Picture picture, RectF dst) Draw the picture, stretched to fit into the dst rectangle.
	6:	android.graphics.Canvas public void drawPicture (Picture picture, Rect dst) Draw the picture, stretched to fit into the dst rectangle.
	7:	android.graphics.Canvas public int getDensity () Returns the target density of the canvas. The default density is derived from the density of its backing bitmap, or DENSITY_NONE if there is not one. Returns Returns the current target density of the canvas, which is used to determine the scaling factor when drawing a bitmap into it. See Also setDensity(int) getDensity()
	8:	android.graphics.Canvas public int getMaximumBitmapHeight () Returns the maximum allowed height for bitmaps drawn with this canvas. Attempting to draw with a bitmap taller than this value will result in an error. See Also getMaximumBitmapWidth()
	9:	android.graphics.Canvas public int getMaximumBitmapWidth () Returns the maximum allowed width for bitmaps drawn with this canvas. Attempting to draw with a bitmap wider than this value will result in an error. See Also getMaximumBitmapHeight()
hasPointerEvents
Checks if the platform supports pointer press and release events
	0:	android.graphics.Canvas public void setDensity (int density) Specifies the density for this Canvas' backing bitmap. This modifies the target density of the canvas itself, as well as the density of its backing bitmap via Bitmap.setDensity(int). Parameters density The new target density of the canvas, which is used to determine the scaling factor when drawing a bitmap into it. Use DENSITY_NONE to disable bitmap scaling. See Also getDensity() setDensity(int)
	1:	android.graphics.Canvas public int getDensity () Returns the target density of the canvas. The default density is derived from the density of its backing bitmap, or DENSITY_NONE if there is not one. Returns Returns the current target density of the canvas, which is used to determine the scaling factor when drawing a bitmap into it. See Also setDensity(int) getDensity()
	2:	android.graphics.Canvas public int getMaximumBitmapHeight () Returns the maximum allowed height for bitmaps drawn with this canvas. Attempting to draw with a bitmap taller than this value will result in an error. See Also getMaximumBitmapWidth()
	3:	android.graphics.Canvas public int getMaximumBitmapWidth () Returns the maximum allowed width for bitmaps drawn with this canvas. Attempting to draw with a bitmap wider than this value will result in an error. See Also getMaximumBitmapHeight()
	4:	android.graphics.Canvas public boolean isOpaque () Return true if the device that the current layer draws into is opaque (i.e. does not support per-pixel alpha). Returns true if the device that the current layer draws into is opaque
	5:	android.graphics.Canvas public void drawPosText (String text, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array. This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. Parameters text The text to be drawn pos Array of [x,y] positions, used to position each character paint The paint used for the text (e.g. color, size, style)
	6:	android.graphics.Canvas public void drawPosText (char[] text, int index, int count, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array. This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. Parameters text The text to be drawn index The index of the first character to draw count The number of characters to draw, starting from index. pos Array of [x,y] positions, used to position each character paint The paint used for the text (e.g. color, size, style)
	7:	android.graphics.Canvas public void restoreToCount (int saveCount) Efficient way to pop any calls to save() that happened after the save count reached saveCount. It is an error for saveCount to be less than 1. Example: int count = canvas.save(); ... // more calls potentially to save() canvas.restoreToCount(count); // now the canvas is back in the same state it was before the initial // call to save(). Parameters saveCount The save level to restore to.
	8:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	9:	android.graphics.Canvas public void drawPoints (float[] pts, int offset, int count, Paint paint) Draw a series of points. Each point is centered at the coordinate specified by pts[], and its diameter is specified by the paint's stroke width (as transformed by the canvas' CTM), with special treatment for a stroke width of 0, which always draws exactly 1 pixel (or at most 4 if antialiasing is enabled). The shape of the point is controlled by the paint's Cap type. The shape is a square, unless the cap type is Round, in which case the shape is a circle. Parameters pts Array of points to draw [x0 y0 x1 y1 x2 y2 ...] offset Number of values to skip before starting to draw. count The number of values to process, after skipping offset of them. Since one point uses two values, the number of "points" that are drawn is really (count >> 1). paint The paint used to draw the points
hasPointerMotionEvents
Checks if the platform supports pointer motion events (pointer dragged)
	0:	android.graphics.Canvas public void drawPicture (Picture picture, RectF dst) Draw the picture, stretched to fit into the dst rectangle.
	1:	android.graphics.Canvas public void drawPicture (Picture picture, Rect dst) Draw the picture, stretched to fit into the dst rectangle.
	2:	android.graphics.Canvas public void drawPicture (Picture picture) Save the canvas state, draw the picture, and restore the canvas state. This differs from picture.draw(canvas), which does not perform any save/restore. Note: This forces the picture to internally call endRecording() in order to prepare for playback. Parameters picture The picture to be drawn
	3:	android.graphics.Canvas public int getMaximumBitmapHeight () Returns the maximum allowed height for bitmaps drawn with this canvas. Attempting to draw with a bitmap taller than this value will result in an error. See Also getMaximumBitmapWidth()
	4:	android.graphics.Canvas public int getMaximumBitmapWidth () Returns the maximum allowed width for bitmaps drawn with this canvas. Attempting to draw with a bitmap wider than this value will result in an error. See Also getMaximumBitmapHeight()
	5:	android.graphics.Canvas public void drawArc (RectF oval, float startAngle, float sweepAngle, boolean useCenter, Paint paint) Draw the specified arc, which will be scaled to fit inside the specified oval. If the start angle is negative or >= 360, the start angle is treated as start angle modulo 360. If the sweep angle is >= 360, then the oval is drawn completely. Note that this differs slightly from SkPath::arcTo, which treats the sweep angle modulo 360. If the sweep angle is negative, the sweep angle is treated as sweep angle modulo 360 The arc is drawn clockwise. An angle of 0 degrees correspond to the geometric angle of 0 degrees (3 o'clock on a watch.) Parameters oval The bounds of oval used to define the shape and size of the arc startAngle Starting angle (in degrees) where the arc begins sweepAngle Sweep angle (in degrees) measured clockwise useCenter If true, include the center of the oval in the arc, and close it if it is being stroked. This will draw a wedge paint The paint used to draw the arc
	6:	android.graphics.Canvas public void drawPosText (char[] text, int index, int count, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array. This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. Parameters text The text to be drawn index The index of the first character to draw count The number of characters to draw, starting from index. pos Array of [x,y] positions, used to position each character paint The paint used for the text (e.g. color, size, style)
	7:	android.graphics.Canvas public void drawPoints (float[] pts, int offset, int count, Paint paint) Draw a series of points. Each point is centered at the coordinate specified by pts[], and its diameter is specified by the paint's stroke width (as transformed by the canvas' CTM), with special treatment for a stroke width of 0, which always draws exactly 1 pixel (or at most 4 if antialiasing is enabled). The shape of the point is controlled by the paint's Cap type. The shape is a square, unless the cap type is Round, in which case the shape is a circle. Parameters pts Array of points to draw [x0 y0 x1 y1 x2 y2 ...] offset Number of values to skip before starting to draw. count The number of values to process, after skipping offset of them. Since one point uses two values, the number of "points" that are drawn is really (count >> 1). paint The paint used to draw the points
	8:	android.graphics.Canvas public void drawPosText (String text, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array. This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. Parameters text The text to be drawn pos Array of [x,y] positions, used to position each character paint The paint used for the text (e.g. color, size, style)
	9:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
hasRepeatEvents
Checks if the platform can generate repeat events when key is kept down
	0:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	1:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	2:	android.graphics.Canvas public int save (int saveFlags) Based on saveFlags, can save the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Parameters saveFlags flag bits that specify which parts of the Canvas state to save/restore Returns The value to pass to restoreToCount() to balance this save()
	3:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
	4:	android.graphics.Canvas public void drawBitmap (int[] colors, int offset, int stride, float x, float y, int width, int height, boolean hasAlpha, Paint paint) Treat the specified array of colors as a bitmap, and draw it. This gives the same result as first creating a bitmap from the array, and then drawing it, but this method avoids explicitly creating a bitmap object which can be more efficient if the colors are changing often. Parameters colors Array of colors representing the pixels of the bitmap offset Offset into the array of colors for the first pixel stride The number of colors in the array between rows (must be >= width or <= -width). x The X coordinate for where to draw the bitmap y The Y coordinate for where to draw the bitmap width The width of the bitmap height The height of the bitmap hasAlpha True if the alpha channel of the colors contains valid values. If false, the alpha byte is ignored (assumed to be 0xFF for every pixel). paint May be null. The paint used to draw the bitmap
	5:	android.graphics.Canvas public int getMaximumBitmapHeight () Returns the maximum allowed height for bitmaps drawn with this canvas. Attempting to draw with a bitmap taller than this value will result in an error. See Also getMaximumBitmapWidth()
	6:	android.graphics.Canvas public int getMaximumBitmapWidth () Returns the maximum allowed width for bitmaps drawn with this canvas. Attempting to draw with a bitmap wider than this value will result in an error. See Also getMaximumBitmapHeight()
	7:	android.graphics.Canvas public Canvas () Construct an empty raster canvas. Use setBitmap() to specify a bitmap to draw into. The initial target density is DENSITY_NONE; this will typically be replaced when a target bitmap is set for the canvas.
	8:	android.graphics.Canvas public void setBitmap (Bitmap bitmap) Specify a bitmap for the canvas to draw into. All canvas state such as layers, filters, and the save/restore stack are reset with the exception of the current matrix and clip stack. Additionally, as a side-effect the canvas' target density is updated to match that of the bitmap. Parameters bitmap Specifies a mutable bitmap for the canvas to draw into. See Also setDensity(int) getDensity()
	9:	android.graphics.Canvas public void drawPoints (float[] pts, int offset, int count, Paint paint) Draw a series of points. Each point is centered at the coordinate specified by pts[], and its diameter is specified by the paint's stroke width (as transformed by the canvas' CTM), with special treatment for a stroke width of 0, which always draws exactly 1 pixel (or at most 4 if antialiasing is enabled). The shape of the point is controlled by the paint's Cap type. The shape is a square, unless the cap type is Round, in which case the shape is a circle. Parameters pts Array of points to draw [x0 y0 x1 y1 x2 y2 ...] offset Number of values to skip before starting to draw. count The number of values to process, after skipping offset of them. Since one point uses two values, the number of "points" that are drawn is really (count >> 1). paint The paint used to draw the points
getKeyCode
Gets a key code that corresponds to the specified game action on the device
	0:	android.graphics.Canvas public void setBitmap (Bitmap bitmap) Specify a bitmap for the canvas to draw into. All canvas state such as layers, filters, and the save/restore stack are reset with the exception of the current matrix and clip stack. Additionally, as a side-effect the canvas' target density is updated to match that of the bitmap. Parameters bitmap Specifies a mutable bitmap for the canvas to draw into. See Also setDensity(int) getDensity()
	1:	android.graphics.Canvas public void drawPicture (Picture picture, RectF dst) Draw the picture, stretched to fit into the dst rectangle.
	2:	android.graphics.Canvas public void drawPicture (Picture picture, Rect dst) Draw the picture, stretched to fit into the dst rectangle.
	3:	android.graphics.Canvas public Canvas () Construct an empty raster canvas. Use setBitmap() to specify a bitmap to draw into. The initial target density is DENSITY_NONE; this will typically be replaced when a target bitmap is set for the canvas.
	4:	android.graphics.Canvas public int getDensity () Returns the target density of the canvas. The default density is derived from the density of its backing bitmap, or DENSITY_NONE if there is not one. Returns Returns the current target density of the canvas, which is used to determine the scaling factor when drawing a bitmap into it. See Also setDensity(int) getDensity()
	5:	android.graphics.Canvas public void setDensity (int density) Specifies the density for this Canvas' backing bitmap. This modifies the target density of the canvas itself, as well as the density of its backing bitmap via Bitmap.setDensity(int). Parameters density The new target density of the canvas, which is used to determine the scaling factor when drawing a bitmap into it. Use DENSITY_NONE to disable bitmap scaling. See Also getDensity() setDensity(int)
	6:	android.graphics.Canvas public void drawArc (RectF oval, float startAngle, float sweepAngle, boolean useCenter, Paint paint) Draw the specified arc, which will be scaled to fit inside the specified oval. If the start angle is negative or >= 360, the start angle is treated as start angle modulo 360. If the sweep angle is >= 360, then the oval is drawn completely. Note that this differs slightly from SkPath::arcTo, which treats the sweep angle modulo 360. If the sweep angle is negative, the sweep angle is treated as sweep angle modulo 360 The arc is drawn clockwise. An angle of 0 degrees correspond to the geometric angle of 0 degrees (3 o'clock on a watch.) Parameters oval The bounds of oval used to define the shape and size of the arc startAngle Starting angle (in degrees) where the arc begins sweepAngle Sweep angle (in degrees) measured clockwise useCenter If true, include the center of the oval in the arc, and close it if it is being stroked. This will draw a wedge paint The paint used to draw the arc
	7:	android.graphics.Canvas public Canvas (Bitmap bitmap) Construct a canvas with the specified bitmap to draw into. The bitmap must be mutable. The initial target density of the canvas is the same as the given bitmap's density. Parameters bitmap Specifies a mutable bitmap for the canvas to draw into.
	8:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	9:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
getKeyName
Gets an informative key string for a key
	0:	android.graphics.Canvas public void drawText (String text, int start, int end, float x, float y, Paint paint) Draw the text, with origin at (x,y), using the specified paint. The origin is interpreted based on the Align setting in the paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of the origin of the text being drawn y The y-coordinate of the origin of the text being drawn paint The paint used for the text (e.g. color, size, style)
	1:	android.graphics.Canvas public void drawText (CharSequence text, int start, int end, float x, float y, Paint paint) Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint. The origin is interpreted based on the Align setting in the Paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of origin for where to draw the text y The y-coordinate of origin for where to draw the text paint The paint used for the text (e.g. color, size, style)
	2:	android.graphics.Canvas public void drawPicture (Picture picture, RectF dst) Draw the picture, stretched to fit into the dst rectangle.
	3:	android.graphics.Canvas public void drawPicture (Picture picture, Rect dst) Draw the picture, stretched to fit into the dst rectangle.
	4:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, Matrix matrix, Paint paint) Draw the bitmap using the specified matrix. Parameters bitmap The bitmap to draw matrix The matrix used to transform the bitmap when it is drawn paint May be null. The paint used to draw the bitmap
	5:	android.graphics.Canvas public int getMaximumBitmapHeight () Returns the maximum allowed height for bitmaps drawn with this canvas. Attempting to draw with a bitmap taller than this value will result in an error. See Also getMaximumBitmapWidth()
	6:	android.graphics.Canvas public int getMaximumBitmapWidth () Returns the maximum allowed width for bitmaps drawn with this canvas. Attempting to draw with a bitmap wider than this value will result in an error. See Also getMaximumBitmapHeight()
	7:	android.graphics.Canvas public void drawTextOnPath (String text, Path path, float hOffset, float vOffset, Paint paint) Draw the text, with origin at (x,y), using the specified paint, along the specified path. The paint's Align setting determins where along the path to start the text. Parameters text The text to be drawn path The path the text should follow for its baseline hOffset The distance along the path to add to the text's starting position vOffset The distance above(-) or below(+) the path to position the text paint The paint used for the text (e.g. color, size, style)
	8:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	9:	android.graphics.Canvas public void drawPosText (String text, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array. This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. Parameters text The text to be drawn pos Array of [x,y] positions, used to position each character paint The paint used for the text (e.g. color, size, style)
getKeyName

getGameAction
Gets the game action associated with the given key code of the device
	0:	android.graphics.Canvas public Canvas (Bitmap bitmap) Construct a canvas with the specified bitmap to draw into. The bitmap must be mutable. The initial target density of the canvas is the same as the given bitmap's density. Parameters bitmap Specifies a mutable bitmap for the canvas to draw into.
	1:	android.graphics.Canvas public Canvas () Construct an empty raster canvas. Use setBitmap() to specify a bitmap to draw into. The initial target density is DENSITY_NONE; this will typically be replaced when a target bitmap is set for the canvas.
	2:	android.graphics.Canvas public int getDensity () Returns the target density of the canvas. The default density is derived from the density of its backing bitmap, or DENSITY_NONE if there is not one. Returns Returns the current target density of the canvas, which is used to determine the scaling factor when drawing a bitmap into it. See Also setDensity(int) getDensity()
	3:	android.graphics.Canvas public void setDensity (int density) Specifies the density for this Canvas' backing bitmap. This modifies the target density of the canvas itself, as well as the density of its backing bitmap via Bitmap.setDensity(int). Parameters density The new target density of the canvas, which is used to determine the scaling factor when drawing a bitmap into it. Use DENSITY_NONE to disable bitmap scaling. See Also getDensity() setDensity(int)
	4:	android.graphics.Canvas public void setBitmap (Bitmap bitmap) Specify a bitmap for the canvas to draw into. All canvas state such as layers, filters, and the save/restore stack are reset with the exception of the current matrix and clip stack. Additionally, as a side-effect the canvas' target density is updated to match that of the bitmap. Parameters bitmap Specifies a mutable bitmap for the canvas to draw into. See Also setDensity(int) getDensity()
	5:	android.graphics.Canvas public void drawLines (float[] pts, int offset, int count, Paint paint) Draw a series of lines. Each line is taken from 4 consecutive values in the pts array. Thus to draw 1 line, the array must contain at least 4 values. This is logically the same as drawing the array as follows: drawLine(pts[0], pts[1], pts[2], pts[3]) followed by drawLine(pts[4], pts[5], pts[6], pts[7]) and so on. Parameters pts Array of points to draw [x0 y0 x1 y1 x2 y2 ...] offset Number of values in the array to skip before drawing. count The number of values in the array to process, after skipping "offset" of them. Since each line uses 4 values, the number of "lines" that are drawn is really (count >> 2). paint The paint used to draw the points
	6:	android.graphics.Canvas public void drawPoints (float[] pts, int offset, int count, Paint paint) Draw a series of points. Each point is centered at the coordinate specified by pts[], and its diameter is specified by the paint's stroke width (as transformed by the canvas' CTM), with special treatment for a stroke width of 0, which always draws exactly 1 pixel (or at most 4 if antialiasing is enabled). The shape of the point is controlled by the paint's Cap type. The shape is a square, unless the cap type is Round, in which case the shape is a circle. Parameters pts Array of points to draw [x0 y0 x1 y1 x2 y2 ...] offset Number of values to skip before starting to draw. count The number of values to process, after skipping offset of them. Since one point uses two values, the number of "points" that are drawn is really (count >> 1). paint The paint used to draw the points
	7:	android.graphics.Canvas public int saveLayer (RectF bounds, Paint paint, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds May be null. The maximum size the offscreen bitmap needs to be (in local coordinates) paint This is copied, and is applied to the offscreen when restore() is called. saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this save()
	8:	android.graphics.Canvas public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds The maximum size the offscreen bitmap needs to be (in local coordinates) alpha The alpha to apply to the offscreen when when it is drawn during restore() saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this call
	9:	android.graphics.Canvas public void drawText (CharSequence text, int start, int end, float x, float y, Paint paint) Draw the specified range of text, specified by start/end, with its origin at (x,y), in the specified Paint. The origin is interpreted based on the Align setting in the Paint. Parameters text The text to be drawn start The index of the first character in text to draw end (end - 1) is the index of the last character in text to draw x The x-coordinate of origin for where to draw the text y The y-coordinate of origin for where to draw the text paint The paint used for the text (e.g. color, size, style)
setFullScreenMode
Controls whether the Canvas is in full-screen mode or in normal mode
	0:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
	1:	android.graphics.Canvas public void drawColor (int color) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color, using srcover porterduff mode. Parameters color the color to draw onto the canvas
	2:	android.graphics.Canvas public void drawRGB (int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color, using srcover porterduff mode. Parameters r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	3:	android.graphics.Canvas public void drawARGB (int a, int r, int g, int b) Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color, using srcover porterduff mode. Parameters a alpha component (0..255) of the color to draw onto the canvas r red component (0..255) of the color to draw onto the canvas g green component (0..255) of the color to draw onto the canvas b blue component (0..255) of the color to draw onto the canvas
	4:	android.graphics.Canvas public void drawLine (float startX, float startY, float stopX, float stopY, Paint paint) Draw a line segment with the specified start and stop x,y coordinates, using the specified paint. Note that since a line is always "framed", the Style is ignored in the paint. Degenerate lines (length is 0) will not be drawn. Parameters startX The x-coordinate of the start point of the line startY The y-coordinate of the start point of the line paint The paint used to draw the line
	5:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, Rect src, RectF dst, Paint paint) Draw the specified bitmap, scaling/translating automatically to fill the destination rectangle. If the source rectangle is not null, it specifies the subset of the bitmap to draw. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. This function ignores the density associated with the bitmap. This is because the source and destination rectangle coordinate spaces are in their respective densities, so must already have the appropriate scaling factor applied. Parameters bitmap The bitmap to be drawn src May be null. The subset of the bitmap to be drawn dst The rectangle that the bitmap will be scaled/translated to fit into paint May be null. The paint used to draw the bitmap
	6:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, Rect src, Rect dst, Paint paint) Draw the specified bitmap, scaling/translating automatically to fill the destination rectangle. If the source rectangle is not null, it specifies the subset of the bitmap to draw. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter), then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. This function ignores the density associated with the bitmap. This is because the source and destination rectangle coordinate spaces are in their respective densities, so must already have the appropriate scaling factor applied. Parameters bitmap The bitmap to be drawn src May be null. The subset of the bitmap to be drawn dst The rectangle that the bitmap will be scaled/translated to fit into paint May be null. The paint used to draw the bitmap
	7:	android.graphics.Canvas public void drawVertices (Canvas.VertexMode mode, int vertexCount, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, Paint paint) Draw the array of vertices, interpreted as triangles (based on mode). The verts array is required, and specifies the x,y pairs for each vertex. If texs is non-null, then it is used to specify the coordinate in shader coordinates to use at each vertex (the paint must have a shader in this case). If there is no texs array, but there is a color array, then each color is interpolated across its corresponding triangle in a gradient. If both texs and colors arrays are present, then they behave as before, but the resulting color at each pixels is the result of multiplying the colors from the shader and the color-gradient together. The indices array is optional, but if it is present, then it is used to specify the index of each triangle, rather than just walking through the arrays in order. Parameters mode How to interpret the array of vertices vertexCount The number of values in the vertices array (and corresponding texs and colors arrays if non-null). Each logical vertex is two values (x, y), vertexCount must be a multiple of 2. verts Array of vertices for the mesh vertOffset Number of values in the verts to skip before drawing. texs May be null. If not null, specifies the coordinates to sample into the current shader (e.g. bitmap tile or gradient) texOffset Number of values in texs to skip before drawing. colors May be null. If not null, specifies a color for each vertex, to be interpolated across the triangle. colorOffset Number of values in colors to skip before drawing. indices If not null, array of indices to reference into the vertex (texs, colors) array. indexCount number of entries in the indices array (if not null). paint Specifies the shader to use if the texs array is non-null.
	8:	android.graphics.Canvas public void drawOval (RectF oval, Paint paint) Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint. Parameters oval The rectangle bounds of the oval to be drawn
	9:	android.graphics.Canvas public void drawPath (Path path, Paint paint) Draw the specified path using the specified paint. The path will be filled or framed based on the Style in the paint. Parameters path The path to be drawn paint The paint used to draw the path
keyPressed
Called when a key is pressed
	0:	android.graphics.Canvas public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds The maximum size the offscreen bitmap needs to be (in local coordinates) alpha The alpha to apply to the offscreen when when it is drawn during restore() saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this call
	1:	android.graphics.Canvas public int saveLayer (RectF bounds, Paint paint, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds May be null. The maximum size the offscreen bitmap needs to be (in local coordinates) paint This is copied, and is applied to the offscreen when restore() is called. saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this save()
	2:	android.graphics.Canvas public int save () Saves the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Returns The value to pass to restoreToCount() to balance this save()
	3:	android.graphics.Canvas public int save (int saveFlags) Based on saveFlags, can save the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Parameters saveFlags flag bits that specify which parts of the Canvas state to save/restore Returns The value to pass to restoreToCount() to balance this save()
	4:	android.graphics.Canvas public void restore () This call balances a previous call to save(), and is used to remove all modifications to the matrix/clip state since the last save call. It is an error to call restore() more times than save() was called.
	5:	android.graphics.Canvas public void drawPicture (Picture picture) Save the canvas state, draw the picture, and restore the canvas state. This differs from picture.draw(canvas), which does not perform any save/restore. Note: This forces the picture to internally call endRecording() in order to prepare for playback. Parameters picture The picture to be drawn
	6:	android.graphics.Canvas.EdgeType public static Canvas.EdgeType valueOf (String name) 
	7:	android.graphics.Canvas.VertexMode public static Canvas.VertexMode valueOf (String name) 
	8:	android.graphics.Canvas public void restoreToCount (int saveCount) Efficient way to pop any calls to save() that happened after the save count reached saveCount. It is an error for saveCount to be less than 1. Example: int count = canvas.save(); ... // more calls potentially to save() canvas.restoreToCount(count); // now the canvas is back in the same state it was before the initial // call to save(). Parameters saveCount The save level to restore to.
	9:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
keyRepeated
Called when a key is repeated (held down)
	0:	android.graphics.Canvas public int save () Saves the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Returns The value to pass to restoreToCount() to balance this save()
	1:	android.graphics.Canvas public int save (int saveFlags) Based on saveFlags, can save the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Parameters saveFlags flag bits that specify which parts of the Canvas state to save/restore Returns The value to pass to restoreToCount() to balance this save()
	2:	android.graphics.Canvas public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds The maximum size the offscreen bitmap needs to be (in local coordinates) alpha The alpha to apply to the offscreen when when it is drawn during restore() saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this call
	3:	android.graphics.Canvas public void restoreToCount (int saveCount) Efficient way to pop any calls to save() that happened after the save count reached saveCount. It is an error for saveCount to be less than 1. Example: int count = canvas.save(); ... // more calls potentially to save() canvas.restoreToCount(count); // now the canvas is back in the same state it was before the initial // call to save(). Parameters saveCount The save level to restore to.
	4:	android.graphics.Canvas public int saveLayer (RectF bounds, Paint paint, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds May be null. The maximum size the offscreen bitmap needs to be (in local coordinates) paint This is copied, and is applied to the offscreen when restore() is called. saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this save()
	5:	android.graphics.Canvas public void drawPicture (Picture picture) Save the canvas state, draw the picture, and restore the canvas state. This differs from picture.draw(canvas), which does not perform any save/restore. Note: This forces the picture to internally call endRecording() in order to prepare for playback. Parameters picture The picture to be drawn
	6:	android.graphics.Canvas public Canvas () Construct an empty raster canvas. Use setBitmap() to specify a bitmap to draw into. The initial target density is DENSITY_NONE; this will typically be replaced when a target bitmap is set for the canvas.
	7:	android.graphics.Canvas public void restore () This call balances a previous call to save(), and is used to remove all modifications to the matrix/clip state since the last save call. It is an error to call restore() more times than save() was called.
	8:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	9:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
keyReleased
Called when a key is released
	0:	android.graphics.Canvas public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds The maximum size the offscreen bitmap needs to be (in local coordinates) alpha The alpha to apply to the offscreen when when it is drawn during restore() saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this call
	1:	android.graphics.Canvas public int saveLayer (RectF bounds, Paint paint, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds May be null. The maximum size the offscreen bitmap needs to be (in local coordinates) paint This is copied, and is applied to the offscreen when restore() is called. saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this save()
	2:	android.graphics.Canvas public int save () Saves the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Returns The value to pass to restoreToCount() to balance this save()
	3:	android.graphics.Canvas public int save (int saveFlags) Based on saveFlags, can save the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Parameters saveFlags flag bits that specify which parts of the Canvas state to save/restore Returns The value to pass to restoreToCount() to balance this save()
	4:	android.graphics.Canvas public void restore () This call balances a previous call to save(), and is used to remove all modifications to the matrix/clip state since the last save call. It is an error to call restore() more times than save() was called.
	5:	android.graphics.Canvas public void drawPicture (Picture picture) Save the canvas state, draw the picture, and restore the canvas state. This differs from picture.draw(canvas), which does not perform any save/restore. Note: This forces the picture to internally call endRecording() in order to prepare for playback. Parameters picture The picture to be drawn
	6:	android.graphics.Canvas.EdgeType public static Canvas.EdgeType valueOf (String name) 
	7:	android.graphics.Canvas.VertexMode public static Canvas.VertexMode valueOf (String name) 
	8:	android.graphics.Canvas public void restoreToCount (int saveCount) Efficient way to pop any calls to save() that happened after the save count reached saveCount. It is an error for saveCount to be less than 1. Example: int count = canvas.save(); ... // more calls potentially to save() canvas.restoreToCount(count); // now the canvas is back in the same state it was before the initial // call to save(). Parameters saveCount The save level to restore to.
	9:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
pointerPressed
Called when the pointer is pressed
	0:	android.graphics.Canvas public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds The maximum size the offscreen bitmap needs to be (in local coordinates) alpha The alpha to apply to the offscreen when when it is drawn during restore() saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this call
	1:	android.graphics.Canvas public int saveLayer (RectF bounds, Paint paint, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds May be null. The maximum size the offscreen bitmap needs to be (in local coordinates) paint This is copied, and is applied to the offscreen when restore() is called. saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this save()
	2:	android.graphics.Canvas public int save () Saves the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Returns The value to pass to restoreToCount() to balance this save()
	3:	android.graphics.Canvas public int save (int saveFlags) Based on saveFlags, can save the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Parameters saveFlags flag bits that specify which parts of the Canvas state to save/restore Returns The value to pass to restoreToCount() to balance this save()
	4:	android.graphics.Canvas public void restore () This call balances a previous call to save(), and is used to remove all modifications to the matrix/clip state since the last save call. It is an error to call restore() more times than save() was called.
	5:	android.graphics.Canvas public void drawPicture (Picture picture) Save the canvas state, draw the picture, and restore the canvas state. This differs from picture.draw(canvas), which does not perform any save/restore. Note: This forces the picture to internally call endRecording() in order to prepare for playback. Parameters picture The picture to be drawn
	6:	android.graphics.Canvas.EdgeType public static Canvas.EdgeType valueOf (String name) 
	7:	android.graphics.Canvas.VertexMode public static Canvas.VertexMode valueOf (String name) 
	8:	android.graphics.Canvas public void restoreToCount (int saveCount) Efficient way to pop any calls to save() that happened after the save count reached saveCount. It is an error for saveCount to be less than 1. Example: int count = canvas.save(); ... // more calls potentially to save() canvas.restoreToCount(count); // now the canvas is back in the same state it was before the initial // call to save(). Parameters saveCount The save level to restore to.
	9:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
pointerReleased
Called when the pointer is released
	0:	android.graphics.Canvas public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds The maximum size the offscreen bitmap needs to be (in local coordinates) alpha The alpha to apply to the offscreen when when it is drawn during restore() saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this call
	1:	android.graphics.Canvas public int saveLayer (RectF bounds, Paint paint, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds May be null. The maximum size the offscreen bitmap needs to be (in local coordinates) paint This is copied, and is applied to the offscreen when restore() is called. saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this save()
	2:	android.graphics.Canvas public int save () Saves the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Returns The value to pass to restoreToCount() to balance this save()
	3:	android.graphics.Canvas public int save (int saveFlags) Based on saveFlags, can save the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Parameters saveFlags flag bits that specify which parts of the Canvas state to save/restore Returns The value to pass to restoreToCount() to balance this save()
	4:	android.graphics.Canvas public void restore () This call balances a previous call to save(), and is used to remove all modifications to the matrix/clip state since the last save call. It is an error to call restore() more times than save() was called.
	5:	android.graphics.Canvas public void drawPicture (Picture picture) Save the canvas state, draw the picture, and restore the canvas state. This differs from picture.draw(canvas), which does not perform any save/restore. Note: This forces the picture to internally call endRecording() in order to prepare for playback. Parameters picture The picture to be drawn
	6:	android.graphics.Canvas.EdgeType public static Canvas.EdgeType valueOf (String name) 
	7:	android.graphics.Canvas.VertexMode public static Canvas.VertexMode valueOf (String name) 
	8:	android.graphics.Canvas public void restoreToCount (int saveCount) Efficient way to pop any calls to save() that happened after the save count reached saveCount. It is an error for saveCount to be less than 1. Example: int count = canvas.save(); ... // more calls potentially to save() canvas.restoreToCount(count); // now the canvas is back in the same state it was before the initial // call to save(). Parameters saveCount The save level to restore to.
	9:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
pointerDragged
Called when the pointer is dragged
	0:	android.graphics.Canvas public void drawBitmap (Bitmap bitmap, Matrix matrix, Paint paint) Draw the bitmap using the specified matrix. Parameters bitmap The bitmap to draw matrix The matrix used to transform the bitmap when it is drawn paint May be null. The paint used to draw the bitmap
	1:	android.graphics.Canvas public void drawPicture (Picture picture) Save the canvas state, draw the picture, and restore the canvas state. This differs from picture.draw(canvas), which does not perform any save/restore. Note: This forces the picture to internally call endRecording() in order to prepare for playback. Parameters picture The picture to be drawn
	2:	android.graphics.Canvas public Canvas () Construct an empty raster canvas. Use setBitmap() to specify a bitmap to draw into. The initial target density is DENSITY_NONE; this will typically be replaced when a target bitmap is set for the canvas.
	3:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	4:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
	5:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	6:	android.graphics.Canvas public void drawArc (RectF oval, float startAngle, float sweepAngle, boolean useCenter, Paint paint) Draw the specified arc, which will be scaled to fit inside the specified oval. If the start angle is negative or >= 360, the start angle is treated as start angle modulo 360. If the sweep angle is >= 360, then the oval is drawn completely. Note that this differs slightly from SkPath::arcTo, which treats the sweep angle modulo 360. If the sweep angle is negative, the sweep angle is treated as sweep angle modulo 360 The arc is drawn clockwise. An angle of 0 degrees correspond to the geometric angle of 0 degrees (3 o'clock on a watch.) Parameters oval The bounds of oval used to define the shape and size of the arc startAngle Starting angle (in degrees) where the arc begins sweepAngle Sweep angle (in degrees) measured clockwise useCenter If true, include the center of the oval in the arc, and close it if it is being stroked. This will draw a wedge paint The paint used to draw the arc
	7:	android.graphics.Canvas public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds The maximum size the offscreen bitmap needs to be (in local coordinates) alpha The alpha to apply to the offscreen when when it is drawn during restore() saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this call
	8:	android.graphics.Canvas public void drawPicture (Picture picture, RectF dst) Draw the picture, stretched to fit into the dst rectangle.
	9:	android.graphics.Canvas public void drawPicture (Picture picture, Rect dst) Draw the picture, stretched to fit into the dst rectangle.
repaint
Requests a repaint for the specified region of the Canvas
	0:	android.graphics.Canvas public boolean clipRegion (Region region) Intersect the current clip with the specified region. Note that unlike clipRect() and clipPath() which transform their arguments by the current matrix, clipRegion() assumes its argument is already in the coordinate system of the current layer's bitmap, and so not transformation is performed. Parameters region The region to operate on the current clip, based on op Returns true if the resulting is non-empty
	1:	android.graphics.Canvas public boolean clipRegion (Region region, Region.Op op) Modify the current clip with the specified region. Note that unlike clipRect() and clipPath() which transform their arguments by the current matrix, clipRegion() assumes its argument is already in the coordinate system of the current layer's bitmap, and so not transformation is performed. Parameters region The region to operate on the current clip, based on op op How the clip is modified Returns true if the resulting is non-empty
	2:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	3:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
	4:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	5:	android.graphics.Canvas public Canvas () Construct an empty raster canvas. Use setBitmap() to specify a bitmap to draw into. The initial target density is DENSITY_NONE; this will typically be replaced when a target bitmap is set for the canvas.
	6:	android.graphics.Canvas public Canvas (Bitmap bitmap) Construct a canvas with the specified bitmap to draw into. The bitmap must be mutable. The initial target density of the canvas is the same as the given bitmap's density. Parameters bitmap Specifies a mutable bitmap for the canvas to draw into.
	7:	android.graphics.Canvas public boolean clipPath (Path path) Intersect the current clip with the specified path. Parameters path The path to intersect with the current clip Returns true if the resulting is non-empty
	8:	android.graphics.Canvas public boolean clipPath (Path path, Region.Op op) Modify the current clip with the specified path. Parameters path The path to operate on the current clip op How the clip is modified Returns true if the resulting is non-empty
	9:	android.graphics.Canvas public boolean clipRect (Rect rect, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. op How the clip is modified Returns true if the resulting clip is non-empty
repaint
Requests a repaint for the entire Canvas
	0:	android.graphics.Canvas public Canvas () Construct an empty raster canvas. Use setBitmap() to specify a bitmap to draw into. The initial target density is DENSITY_NONE; this will typically be replaced when a target bitmap is set for the canvas.
	1:	android.graphics.Canvas public Canvas (Bitmap bitmap) Construct a canvas with the specified bitmap to draw into. The bitmap must be mutable. The initial target density of the canvas is the same as the given bitmap's density. Parameters bitmap Specifies a mutable bitmap for the canvas to draw into.
	2:	android.graphics.Canvas public boolean clipPath (Path path) Intersect the current clip with the specified path. Parameters path The path to intersect with the current clip Returns true if the resulting is non-empty
	3:	android.graphics.Canvas public boolean clipPath (Path path, Region.Op op) Modify the current clip with the specified path. Parameters path The path to operate on the current clip op How the clip is modified Returns true if the resulting is non-empty
	4:	android.graphics.Canvas public boolean clipRect (Rect rect, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. op How the clip is modified Returns true if the resulting clip is non-empty
	5:	android.graphics.Canvas public boolean clipRect (RectF rect, Region.Op op) Modify the current clip with the specified rectangle. Parameters rect The rect to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	6:	android.graphics.Canvas public boolean clipRect (int left, int top, int right, int bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	7:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	8:	android.graphics.Canvas public boolean clipRect (RectF rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	9:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
serviceRepaints
Forces any pending repaint requests to be serviced immediately
	0:	android.graphics.Canvas public Canvas () Construct an empty raster canvas. Use setBitmap() to specify a bitmap to draw into. The initial target density is DENSITY_NONE; this will typically be replaced when a target bitmap is set for the canvas.
	1:	android.graphics.Canvas public Canvas (Bitmap bitmap) Construct a canvas with the specified bitmap to draw into. The bitmap must be mutable. The initial target density of the canvas is the same as the given bitmap's density. Parameters bitmap Specifies a mutable bitmap for the canvas to draw into.
	2:	android.graphics.Canvas public boolean clipPath (Path path) Intersect the current clip with the specified path. Parameters path The path to intersect with the current clip Returns true if the resulting is non-empty
	3:	android.graphics.Canvas public boolean clipPath (Path path, Region.Op op) Modify the current clip with the specified path. Parameters path The path to operate on the current clip op How the clip is modified Returns true if the resulting is non-empty
	4:	android.graphics.Canvas public boolean clipRect (Rect rect, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. op How the clip is modified Returns true if the resulting clip is non-empty
	5:	android.graphics.Canvas public boolean clipRect (RectF rect, Region.Op op) Modify the current clip with the specified rectangle. Parameters rect The rect to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
	6:	android.graphics.Canvas public boolean clipRect (int left, int top, int right, int bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	7:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip Returns true if the resulting clip is non-empty
	8:	android.graphics.Canvas public boolean clipRect (RectF rect) Intersect the current clip with the specified rectangle, which is expressed in local coordinates. Parameters rect The rectangle to intersect with the current clip. Returns true if the resulting clip is non-empty
	9:	android.graphics.Canvas public boolean clipRect (float left, float top, float right, float bottom, Region.Op op) Modify the current clip with the specified rectangle, which is expressed in local coordinates. Parameters left The left side of the rectangle to intersect with the current clip top The top of the rectangle to intersect with the current clip right The right side of the rectangle to intersect with the current clip bottom The bottom of the rectangle to intersect with the current clip op How the clip is modified Returns true if the resulting clip is non-empty
showNotify
The implementation calls showNotify() immediately prior to this Canvas being made visible on the display
	0:	android.graphics.Canvas public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds The maximum size the offscreen bitmap needs to be (in local coordinates) alpha The alpha to apply to the offscreen when when it is drawn during restore() saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this call
	1:	android.graphics.Canvas public int save () Saves the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Returns The value to pass to restoreToCount() to balance this save()
	2:	android.graphics.Canvas public int saveLayer (RectF bounds, Paint paint, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds May be null. The maximum size the offscreen bitmap needs to be (in local coordinates) paint This is copied, and is applied to the offscreen when restore() is called. saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this save()
	3:	android.graphics.Canvas public int save (int saveFlags) Based on saveFlags, can save the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Parameters saveFlags flag bits that specify which parts of the Canvas state to save/restore Returns The value to pass to restoreToCount() to balance this save()
	4:	android.graphics.Canvas public void drawPicture (Picture picture) Save the canvas state, draw the picture, and restore the canvas state. This differs from picture.draw(canvas), which does not perform any save/restore. Note: This forces the picture to internally call endRecording() in order to prepare for playback. Parameters picture The picture to be drawn
	5:	android.graphics.Canvas public void restoreToCount (int saveCount) Efficient way to pop any calls to save() that happened after the save count reached saveCount. It is an error for saveCount to be less than 1. Example: int count = canvas.save(); ... // more calls potentially to save() canvas.restoreToCount(count); // now the canvas is back in the same state it was before the initial // call to save(). Parameters saveCount The save level to restore to.
	6:	android.graphics.Canvas public void restore () This call balances a previous call to save(), and is used to remove all modifications to the matrix/clip state since the last save call. It is an error to call restore() more times than save() was called.
	7:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	8:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	9:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
hideNotify
The implementation calls hideNotify() shortly after the Canvas has been removed from the display
	0:	android.graphics.Canvas public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds The maximum size the offscreen bitmap needs to be (in local coordinates) alpha The alpha to apply to the offscreen when when it is drawn during restore() saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this call
	1:	android.graphics.Canvas public void restoreToCount (int saveCount) Efficient way to pop any calls to save() that happened after the save count reached saveCount. It is an error for saveCount to be less than 1. Example: int count = canvas.save(); ... // more calls potentially to save() canvas.restoreToCount(count); // now the canvas is back in the same state it was before the initial // call to save(). Parameters saveCount The save level to restore to.
	2:	android.graphics.Canvas public void drawPicture (Picture picture) Save the canvas state, draw the picture, and restore the canvas state. This differs from picture.draw(canvas), which does not perform any save/restore. Note: This forces the picture to internally call endRecording() in order to prepare for playback. Parameters picture The picture to be drawn
	3:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	4:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
	5:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	6:	android.graphics.Canvas public void restore () This call balances a previous call to save(), and is used to remove all modifications to the matrix/clip state since the last save call. It is an error to call restore() more times than save() was called.
	7:	android.graphics.Canvas public void drawLines (float[] pts, int offset, int count, Paint paint) Draw a series of lines. Each line is taken from 4 consecutive values in the pts array. Thus to draw 1 line, the array must contain at least 4 values. This is logically the same as drawing the array as follows: drawLine(pts[0], pts[1], pts[2], pts[3]) followed by drawLine(pts[4], pts[5], pts[6], pts[7]) and so on. Parameters pts Array of points to draw [x0 y0 x1 y1 x2 y2 ...] offset Number of values in the array to skip before drawing. count The number of values in the array to process, after skipping "offset" of them. Since each line uses 4 values, the number of "lines" that are drawn is really (count >> 2). paint The paint used to draw the points
	8:	android.graphics.Canvas public void drawPoints (float[] pts, int offset, int count, Paint paint) Draw a series of points. Each point is centered at the coordinate specified by pts[], and its diameter is specified by the paint's stroke width (as transformed by the canvas' CTM), with special treatment for a stroke width of 0, which always draws exactly 1 pixel (or at most 4 if antialiasing is enabled). The shape of the point is controlled by the paint's Cap type. The shape is a square, unless the cap type is Round, in which case the shape is a circle. Parameters pts Array of points to draw [x0 y0 x1 y1 x2 y2 ...] offset Number of values to skip before starting to draw. count The number of values to process, after skipping offset of them. Since one point uses two values, the number of "points" that are drawn is really (count >> 1). paint The paint used to draw the points
	9:	android.graphics.Canvas public void drawColor (int color, PorterDuff.Mode mode) Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode. Parameters color the color to draw with mode the porter-duff mode to apply to the color
paint
Renders the Canvas
	0:	android.graphics.Canvas public void drawPosText (String text, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array. This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. Parameters text The text to be drawn pos Array of [x,y] positions, used to position each character paint The paint used for the text (e.g. color, size, style)
	1:	android.graphics.Canvas public int saveLayer (RectF bounds, Paint paint, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds May be null. The maximum size the offscreen bitmap needs to be (in local coordinates) paint This is copied, and is applied to the offscreen when restore() is called. saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this save()
	2:	android.graphics.Canvas public void drawPaint (Paint paint) Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint. Parameters paint The paint used to draw onto the canvas
	3:	android.graphics.Canvas public void drawLines (float[] pts, Paint paint) 
	4:	android.graphics.Canvas public void drawOval (RectF oval, Paint paint) Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint. Parameters oval The rectangle bounds of the oval to be drawn
	5:	android.graphics.Canvas public void drawPath (Path path, Paint paint) Draw the specified path using the specified paint. The path will be filled or framed based on the Style in the paint. Parameters path The path to be drawn paint The paint used to draw the path
	6:	android.graphics.Canvas public void drawPoints (float[] pts, Paint paint) Helper for drawPoints() that assumes you want to draw the entire array
	7:	android.graphics.Canvas public void drawRect (RectF rect, Paint paint) Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint. Parameters rect The rect to be drawn paint The paint used to draw the rect
	8:	android.graphics.Canvas public void drawRect (Rect r, Paint paint) Draw the specified Rect using the specified Paint. The rectangle will be filled or framed based on the Style in the paint. Parameters r The rectangle to be drawn. paint The paint used to draw the rectangle
	9:	android.graphics.Canvas public void drawPosText (char[] text, int index, int count, float[] pos, Paint paint) Draw the text in the array, with each character's origin specified by the pos array. This method does not support glyph composition and decomposition and should therefore not be used to render complex scripts. Parameters text The text to be drawn index The index of the first character to draw count The number of characters to draw, starting from index. pos Array of [x,y] positions, used to position each character paint The paint used for the text (e.g. color, size, style)
sizeChanged
Called when the drawable area of the Canvas has been changed
	0:	android.graphics.Canvas public boolean quickReject (RectF rect, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters rect the rect to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	1:	android.graphics.Canvas public Canvas () Construct an empty raster canvas. Use setBitmap() to specify a bitmap to draw into. The initial target density is DENSITY_NONE; this will typically be replaced when a target bitmap is set for the canvas.
	2:	android.graphics.Canvas public int saveLayerAlpha (RectF bounds, int alpha, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds The maximum size the offscreen bitmap needs to be (in local coordinates) alpha The alpha to apply to the offscreen when when it is drawn during restore() saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this call
	3:	android.graphics.Canvas public boolean quickReject (Path path, Canvas.EdgeType type) Return true if the specified path, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Note: for speed it may return false even if the path itself might not intersect the clip (i.e. the bounds of the path intersects, but the path does not). Parameters path The path to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the path (transformed by the canvas' matrix) does not intersect with the canvas' clip
	4:	android.graphics.Canvas public boolean quickReject (float left, float top, float right, float bottom, Canvas.EdgeType type) Return true if the specified rectangle, after being transformed by the current matrix, would lie completely outside of the current clip. Call this to check if an area you intend to draw into is clipped out (and therefore you can skip making the draw calls). Parameters left The left side of the rectangle to compare with the current clip top The top of the rectangle to compare with the current clip right The right side of the rectangle to compare with the current clip bottom The bottom of the rectangle to compare with the current clip type AA if the path should be considered antialiased, since that means it may affect a larger area (more pixels) than non-antialiased (BW). Returns true if the rect (transformed by the canvas' matrix) does not intersect with the canvas' clip
	5:	android.graphics.Canvas public int getDensity () Returns the target density of the canvas. The default density is derived from the density of its backing bitmap, or DENSITY_NONE if there is not one. Returns Returns the current target density of the canvas, which is used to determine the scaling factor when drawing a bitmap into it. See Also setDensity(int) getDensity()
	6:	android.graphics.Canvas public int saveLayer (RectF bounds, Paint paint, int saveFlags) This behaves the same as save(), but in addition it allocates an offscreen bitmap. All drawing calls are directed there, and only when the balancing call to restore() is made is that offscreen transfered to the canvas (or the previous layer). Subsequent calls to translate, scale, rotate, skew, concat or clipRect, clipPath all operate on this copy. When the balancing call to restore() is made, this copy is deleted and the previous matrix/clip state is restored. Parameters bounds May be null. The maximum size the offscreen bitmap needs to be (in local coordinates) paint This is copied, and is applied to the offscreen when restore() is called. saveFlags see _SAVE_FLAG constants Returns value to pass to restoreToCount() to balance this save()
	7:	android.graphics.Canvas public int save () Saves the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Returns The value to pass to restoreToCount() to balance this save()
	8:	android.graphics.Canvas public void setDensity (int density) Specifies the density for this Canvas' backing bitmap. This modifies the target density of the canvas itself, as well as the density of its backing bitmap via Bitmap.setDensity(int). Parameters density The new target density of the canvas, which is used to determine the scaling factor when drawing a bitmap into it. Use DENSITY_NONE to disable bitmap scaling. See Also getDensity() setDensity(int)
	9:	android.graphics.Canvas public int save (int saveFlags) Based on saveFlags, can save the current matrix and clip onto a private stack. Subsequent calls to translate,scale,rotate,skew,concat or clipRect,clipPath will all operate as usual, but when the balancing call to restore() is made, those calls will be forgotten, and the settings that existed before the save() will be reinstated. Parameters saveFlags flag bits that specify which parts of the Canvas state to save/restore Returns The value to pass to restoreToCount() to balance this save()
