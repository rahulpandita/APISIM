GameCanvas
Creates a new instance of a GameCanvas
	0:	java.nio.channels.spi.AbstractSelectionKey protected AbstractSelectionKey () Constructs a new AbstractSelectionKey.
	1:	android.support.v4.view.AccessibilityDelegateCompat public AccessibilityDelegateCompat () Creates a new instance.
	2:	android.support.v4.view.accessibility.AccessibilityNodeProviderCompat public AccessibilityNodeProviderCompat () Creates a new instance.
	3:	android.accessibilityservice.AccessibilityServiceInfo public AccessibilityServiceInfo () Creates a new instance.
	4:	java.security.acl.AclNotFoundException public AclNotFoundException () Creates a new AclNotFoundException.
	5:	java.net.BindException public BindException () Constructs a new instance.
	6:	javax.security.cert.Certificate public Certificate () Creates a new Certificate.
	7:	java.security.cert.CertificateEncodingException public CertificateEncodingException () Creates a new CertificateEncodingException.
	8:	javax.security.cert.CertificateEncodingException public CertificateEncodingException () Creates a new CertificateEncodingException.
	9:	java.security.cert.CertificateException public CertificateException () Creates a new CertificateException.
getGraphics
Obtains the Graphics object for rendering a GameCanvas
	0:	org.xml.sax.InputSource public String getSystemId () Get the system identifier for this input source. The getEncoding method will return the character encoding of the object pointed to, or null if unknown. If the system ID is a URL, it will be fully resolved. Returns The system identifier, or null if none was supplied. See Also setSystemId(String) getEncoding()
	1:	android.graphics.Picture public int getHeight () Get the height of the picture as passed to beginRecording. This does not reflect (per se) the content of the picture.
	2:	android.graphics.Picture public int getWidth () Get the width of the picture as passed to beginRecording. This does not reflect (per se) the content of the picture.
	3:	android.app.ActionBar.Tab public abstract ActionBar.Tab setTag (Object obj) Give this Tab an arbitrary object to hold for later use. Parameters obj Object to store Returns The current instance for call chaining
	4:	android.support.v7.app.ActionBar.Tab public abstract ActionBar.Tab setTag (Object obj) Give this Tab an arbitrary object to hold for later use. Parameters obj Object to store Returns The current instance for call chaining
	5:	org.xml.sax.ContentHandler public abstract void setDocumentLocator (Locator locator) Receive an object for locating the origin of SAX document events. SAX parsers are strongly encouraged (though not absolutely required) to supply a locator: if it does so, it must supply the locator to the application by invoking this method before invoking any of the other methods in the ContentHandler interface. The locator allows the application to determine the end position of any document-related event, even if the parser is not reporting an error. Typically, the application will use this information for reporting its own errors (such as character content that does not match an application's business rules). The information returned by the locator is probably not sufficient for use with a search engine. Note that the locator will return correct information only during the invocation SAX event callbacks after startDocument returns and before endDocument is called. The application should not attempt to use it at any other time. Parameters locator an object that can return the location of any SAX document event See Also Locator
	6:	org.xml.sax.DocumentHandler public abstract void setDocumentLocator (Locator locator) Receive an object for locating the origin of SAX document events. SAX parsers are strongly encouraged (though not absolutely required) to supply a locator: if it does so, it must supply the locator to the application by invoking this method before invoking any of the other methods in the DocumentHandler interface. The locator allows the application to determine the end position of any document-related event, even if the parser is not reporting an error. Typically, the application will use this information for reporting its own errors (such as character content that does not match an application's business rules). The information returned by the locator is probably not sufficient for use with a search engine. Note that the locator will return correct information only during the invocation of the events in this interface. The application should not attempt to use it at any other time. Parameters locator An object that can return the location of any SAX document event. See Also Locator
	7:	org.xml.sax.ContentHandler public abstract void characters (char[] ch, int start, int length) Receive notification of character data. The Parser will call this method to report each chunk of character data. SAX parsers may return all contiguous character data in a single chunk, or they may split it into several chunks; however, all of the characters in any single event must come from the same external entity so that the Locator provides useful information. The application must not attempt to read from the array outside of the specified range. Individual characters may consist of more than one Java char value. There are two important cases where this happens, because characters can't be represented in just sixteen bits. In one case, characters are represented in a Surrogate Pair, using two special Unicode values. Such characters are in the so-called "Astral Planes", with a code point above U+FFFF. A second case involves composite characters, such as a base character combining with one or more accent characters. Your code should not assume that algorithms using char-at-a-time idioms will be working in character units; in some cases they will split characters. This is relevant wherever XML permits arbitrary characters, such as attribute values, processing instruction data, and comments as well as in data reported from this method. It's also generally relevant whenever Java code manipulates internationalized text; the issue isn't unique to XML. Note that some parsers will report whitespace in element content using the ignorableWhitespace method rather than this one (validating parsers must do so). Parameters ch the characters from the XML document start the start position in the array length the number of characters to read from the array Throws SAXException any SAX exception, possibly wrapping another exception See Also ignorableWhitespace(char[], int, int) Locator
	8:	org.xml.sax.InputSource public InputStream getByteStream () Get the byte stream for this input source. The getEncoding method will return the character encoding for this byte stream, or null if unknown. Returns The byte stream, or null if none was supplied. See Also getEncoding() setByteStream(InputStream)
	9:	org.xml.sax.InputSource public Reader getCharacterStream () Get the character stream for this input source. Returns The character stream, or null if none was supplied. See Also setCharacterStream(Reader)
getKeyStates
Gets the states of the physical game keys
	0:	android.app.LocalActivityManager public Bundle saveInstanceState () Retrieve the state of all activities known by the group. For activities that have previously run and are now stopped or finished, the last saved state is used. For the current running activity, its onSaveInstanceState(Bundle) is called to retrieve its current state. Returns a Bundle holding the newly created state of all known activities See Also dispatchCreate(Bundle)
	1:	android.app.Instrumentation public void start () Create and start a new thread in which to run instrumentation. This new thread will call to onStart() where you can implement the instrumentation.
	2:	android.media.audiofx.LoudnessEnhancer public float getTargetGain () Return the target gain. Returns the effect target gain expressed in mB. Throws IllegalStateException IllegalArgumentException UnsupportedOperationException IllegalStateException IllegalArgumentException
	3:	android.view.MotionEvent public final int getButtonState () Gets the state of all buttons that are pressed such as a mouse or stylus button. Returns The button state. See Also BUTTON_PRIMARY BUTTON_SECONDARY BUTTON_TERTIARY BUTTON_FORWARD BUTTON_BACK
	4:	android.app.LocalActivityManager public String getCurrentId () Retrieve the ID of the activity that is currently running. Returns the ID of the currently running (resumed) Activity, or null if there is not one See Also startActivity(String, Intent) getCurrentActivity()
	5:	org.apache.http.conn.routing.RouteInfo public abstract HttpHost getHopTarget (int hop) Obtains the target of a hop in this route. The target of the last hop is the target host, the target of previous hops is the respective proxy in the chain. For a route through exactly one proxy, target of hop 0 is the proxy and target of hop 1 is the target host. Parameters hop index of the hop for which to get the target, 0 for first Returns the target of the given hop Throws IllegalArgumentException if the argument is negative or not less than getHopCount()
	6:	org.apache.http.conn.routing.HttpRoute public final HttpHost getHopTarget (int hop) Obtains the target of a hop in this route. The target of the last hop is the target host, the target of previous hops is the respective proxy in the chain. For a route through exactly one proxy, target of hop 0 is the proxy and target of hop 1 is the target host. Parameters hop index of the hop for which to get the target, 0 for first Returns the target of the given hop
	7:	org.apache.http.conn.routing.RouteTracker public final HttpHost getHopTarget (int hop) Obtains the target of a hop in this route. The target of the last hop is the target host, the target of previous hops is the respective proxy in the chain. For a route through exactly one proxy, target of hop 0 is the proxy and target of hop 1 is the target host. Parameters hop index of the hop for which to get the target, 0 for first Returns the target of the given hop
	8:	java.io.PrintStream public PrintStream append (CharSequence charSequence, int start, int end) Appends a subsequence of CharSequence charSequence, or "null". Parameters charSequence the character sequence appended to the target stream. start the index of the first char in the character sequence appended to the target stream. end the index of the character following the last character of the subsequence appended to the target stream. Returns this stream. Throws IndexOutOfBoundsException if start > end, start < 0, end < 0 or either start or end are greater or equal than the length of charSequence.
	9:	java.io.PipedOutputStream public PipedOutputStream (PipedInputStream target) Constructs a new PipedOutputStream connected to the PipedInputStream target. Any data written to this stream can be read from the target stream. Parameters target the piped input stream to connect to. Throws IOException if this stream or target are already connected.
paint
Paints this GameCanvas
	0:	android.graphics.Paint public Paint (Paint paint) Create a new paint, initialized with the attributes in the specified paint parameter. Parameters paint Existing paint used to initialized the attributes of the new paint.
	1:	android.graphics.LayerRasterizer public void addLayer (Paint paint) 
	2:	android.graphics.Paint public Paint () Create a new paint with default settings.
	3:	android.graphics.Canvas public void drawPaint (Paint paint) Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint. Parameters paint The paint used to draw onto the canvas
	4:	java.security.KeyFactory public final Key translateKey (Key key) Translates the given key into a key from this key factory. Parameters key the key to translate. Returns the translated key. Throws InvalidKeyException if the specified key can not be translated by this key factory.
	5:	java.security.KeyFactorySpi protected abstract Key engineTranslateKey (Key key) Translates the given key into a key from this key factory. Parameters key the key to translate. Returns the translated key. Throws InvalidKeyException if the specified key can not be translated by this key factory.
	6:	android.graphics.Canvas public void drawLines (float[] pts, Paint paint) 
	7:	android.graphics.drawable.NinePatchDrawable public Paint getPaint () 
	8:	javax.crypto.KeyAgreement public final Key doPhase (Key key, boolean lastPhase) Does the next (or the last) phase of the key agreement, using the specified key. Parameters key the key received from the other party for this phase. lastPhase set to true if this is the last phase of this key agreement. Returns the intermediate key from this phase or null if there is no intermediate key for this phase. Throws InvalidKeyException if the specified key cannot be used in this key agreement or this phase, IllegalStateException if this instance has not been initialized.
	9:	javax.crypto.KeyAgreementSpi protected abstract Key engineDoPhase (Key key, boolean lastPhase) Does the next (or the last) phase of the key agreement, using the specified key. Parameters key the key received from the other party for this phase. lastPhase set to true if this is the last phase of this key agreement. Returns the intermediate key from this phase or null if there is no intermediate key for this phase. Throws InvalidKeyException if the specified key cannot be used in this key agreement or this phase, IllegalStateException if this instance has not been initialized.
flushGraphics
Flushes the specified region of the off-screen buffer to the display
	0:	java.util.zip.Deflater public synchronized int deflate (byte[] buf, int offset, int byteCount, int flush) Deflates data (previously passed to setInput) into a specific region within the supplied buffer, optionally flushing the input buffer. Parameters flush one of NO_FLUSH, SYNC_FLUSH or FULL_FLUSH. Returns the number of compressed bytes written to buf. If this equals byteCount, the number of bytes of input to be flushed may have exceeded the output buffer's capacity. In this case, finishing a flush will require the output buffer to be drained and additional calls to deflate(byte[]) to be made. Throws IllegalArgumentException if flush is invalid.
	1:	android.os.PowerManager public PowerManager.WakeLock newWakeLock (int levelAndFlags, String tag) Creates a new wake lock with the specified level and flags. The levelAndFlags parameter specifies a wake lock level and optional flags combined using the logical OR operator. The wake lock levels are: PARTIAL_WAKE_LOCK, FULL_WAKE_LOCK, SCREEN_DIM_WAKE_LOCK and SCREEN_BRIGHT_WAKE_LOCK. Exactly one wake lock level must be specified as part of the levelAndFlags parameter. The wake lock flags are: ACQUIRE_CAUSES_WAKEUP and ON_AFTER_RELEASE. Multiple flags can be combined as part of the levelAndFlags parameters. Call acquire() on the object to acquire the wake lock, and release() when you are done. PowerManager pm = (PowerManager)mContext.getSystemService( Context.POWER_SERVICE); PowerManager.WakeLock wl = pm.newWakeLock( PowerManager.SCREEN_DIM_WAKE_LOCK | PowerManager.ON_AFTER_RELEASE, TAG); wl.acquire(); // ... do work... wl.release(); Although a wake lock can be created without special permissions, the WAKE_LOCK permission is required to actually acquire or release the wake lock that is returned. If using this to keep the screen on, you should strongly consider using FLAG_KEEP_SCREEN_ON instead. This window flag will be correctly managed by the platform as the user moves between applications and doesn't require a special permission. Parameters levelAndFlags Combination of wake lock level and flag values defining the requested behavior of the WakeLock. tag Your class name (or other tag) for debugging purposes. See Also acquire() release() PARTIAL_WAKE_LOCK FULL_WAKE_LOCK SCREEN_DIM_WAKE_LOCK SCREEN_BRIGHT_WAKE_LOCK ACQUIRE_CAUSES_WAKEUP ON_AFTER_RELEASE
	2:	java.nio.ByteBuffer public abstract ByteBuffer asReadOnlyBuffer () Returns a read-only buffer that shares its content with this buffer. The returned buffer is guaranteed to be a new instance, even if this buffer is read-only itself. The new buffer's position, limit, capacity and mark are the same as this buffer. The new buffer shares its content with this buffer, which means this buffer's change of content will be visible to the new buffer. The two buffer's position, limit and mark are independent. Returns a read-only version of this buffer.
	3:	java.nio.FloatBuffer public abstract FloatBuffer asReadOnlyBuffer () Returns a read-only buffer that shares its content with this buffer. The returned buffer is guaranteed to be a new instance, even if this buffer is read-only itself. The new buffer's position, limit, capacity and mark are the same as this buffer. The new buffer shares its content with this buffer, which means this buffer's change of content will be visible to the new buffer. The two buffer's position, limit and mark are independent. Returns a read-only version of this buffer.
	4:	android.inputmethodservice.KeyboardView public void invalidateAllKeys () Requests a redraw of the entire keyboard. Calling invalidate() is not sufficient because the keyboard renders the keys to an off-screen buffer and an invalidate() only draws the cached buffer. See Also invalidateKey(int)
	5:	java.nio.CharBuffer public abstract CharBuffer asReadOnlyBuffer () Returns a read-only buffer that shares its content with this buffer. The returned buffer is guaranteed to be a new instance, even if this buffer is read-only itself. The new buffer's position, limit, capacity and mark are the same as this buffer's. The new buffer shares its content with this buffer, which means this buffer's change of content will be visible to the new buffer. The two buffer's position, limit and mark are independent. Returns a read-only version of this buffer.
	6:	java.nio.DoubleBuffer public abstract DoubleBuffer asReadOnlyBuffer () Returns a read-only buffer that shares its content with this buffer. The returned buffer is guaranteed to be a new instance, even if this buffer is read-only itself. The new buffer's position, limit, capacity and mark are the same as this buffer's. The new buffer shares its content with this buffer, which means that this buffer's change of content will be visible to the new buffer. The two buffer's position, limit and mark are independent. Returns a read-only version of this buffer.
	7:	java.nio.IntBuffer public abstract IntBuffer asReadOnlyBuffer () Returns a read-only buffer that shares its content with this buffer. The returned buffer is guaranteed to be a new instance, even this buffer is read-only itself. The new buffer's position, limit, capacity and mark are the same as this buffer's. The new buffer shares its content with this buffer, which means this buffer's change of content will be visible to the new buffer. The two buffer's position, limit and mark are independent. Returns a read-only version of this buffer.
	8:	java.nio.LongBuffer public abstract LongBuffer asReadOnlyBuffer () Returns a read-only buffer that shares its content with this buffer. The returned buffer is guaranteed to be a new instance, even if this buffer is read-only itself. The new buffer's position, limit, capacity and mark are the same as this buffer's. The new buffer shares its content with this buffer, which means this buffer's change of content will be visible to the new buffer. The two buffer's position, limit and mark are independent. Returns a read-only version of this buffer.
	9:	java.io.PrintStream public void write (byte[] buffer, int offset, int length) Writes count bytes from buffer starting at offset to the target stream. If autoFlush is set, this stream gets flushed after writing the buffer. This stream's error flag is set to true if this stream is closed or an I/O error occurs. Parameters buffer the buffer to be written. offset the index of the first byte in buffer to write. length the number of bytes in buffer to write. Throws IndexOutOfBoundsException if offset < 0 or count < 0, or if offset + count is bigger than the length of buffer. See Also flush()
flushGraphics
Flushes the off-screen buffer to the display
	0:	java.nio.ByteBuffer public abstract ByteBuffer asReadOnlyBuffer () Returns a read-only buffer that shares its content with this buffer. The returned buffer is guaranteed to be a new instance, even if this buffer is read-only itself. The new buffer's position, limit, capacity and mark are the same as this buffer. The new buffer shares its content with this buffer, which means this buffer's change of content will be visible to the new buffer. The two buffer's position, limit and mark are independent. Returns a read-only version of this buffer.
	1:	java.nio.FloatBuffer public abstract FloatBuffer asReadOnlyBuffer () Returns a read-only buffer that shares its content with this buffer. The returned buffer is guaranteed to be a new instance, even if this buffer is read-only itself. The new buffer's position, limit, capacity and mark are the same as this buffer. The new buffer shares its content with this buffer, which means this buffer's change of content will be visible to the new buffer. The two buffer's position, limit and mark are independent. Returns a read-only version of this buffer.
	2:	android.inputmethodservice.KeyboardView public void invalidateAllKeys () Requests a redraw of the entire keyboard. Calling invalidate() is not sufficient because the keyboard renders the keys to an off-screen buffer and an invalidate() only draws the cached buffer. See Also invalidateKey(int)
	3:	java.nio.CharBuffer public abstract CharBuffer asReadOnlyBuffer () Returns a read-only buffer that shares its content with this buffer. The returned buffer is guaranteed to be a new instance, even if this buffer is read-only itself. The new buffer's position, limit, capacity and mark are the same as this buffer's. The new buffer shares its content with this buffer, which means this buffer's change of content will be visible to the new buffer. The two buffer's position, limit and mark are independent. Returns a read-only version of this buffer.
	4:	java.nio.DoubleBuffer public abstract DoubleBuffer asReadOnlyBuffer () Returns a read-only buffer that shares its content with this buffer. The returned buffer is guaranteed to be a new instance, even if this buffer is read-only itself. The new buffer's position, limit, capacity and mark are the same as this buffer's. The new buffer shares its content with this buffer, which means that this buffer's change of content will be visible to the new buffer. The two buffer's position, limit and mark are independent. Returns a read-only version of this buffer.
	5:	java.nio.IntBuffer public abstract IntBuffer asReadOnlyBuffer () Returns a read-only buffer that shares its content with this buffer. The returned buffer is guaranteed to be a new instance, even this buffer is read-only itself. The new buffer's position, limit, capacity and mark are the same as this buffer's. The new buffer shares its content with this buffer, which means this buffer's change of content will be visible to the new buffer. The two buffer's position, limit and mark are independent. Returns a read-only version of this buffer.
	6:	java.nio.LongBuffer public abstract LongBuffer asReadOnlyBuffer () Returns a read-only buffer that shares its content with this buffer. The returned buffer is guaranteed to be a new instance, even if this buffer is read-only itself. The new buffer's position, limit, capacity and mark are the same as this buffer's. The new buffer shares its content with this buffer, which means this buffer's change of content will be visible to the new buffer. The two buffer's position, limit and mark are independent. Returns a read-only version of this buffer.
	7:	java.io.PrintStream public void write (byte[] buffer, int offset, int length) Writes count bytes from buffer starting at offset to the target stream. If autoFlush is set, this stream gets flushed after writing the buffer. This stream's error flag is set to true if this stream is closed or an I/O error occurs. Parameters buffer the buffer to be written. offset the index of the first byte in buffer to write. length the number of bytes in buffer to write. Throws IndexOutOfBoundsException if offset < 0 or count < 0, or if offset + count is bigger than the length of buffer. See Also flush()
	8:	android.app.Dialog public void setContentView (int layoutResID) Set the screen content from a layout resource. The resource will be inflated, adding all top-level views to the screen. Parameters layoutResID Resource ID to be inflated.
	9:	javax.microedition.khronos.opengles.GL10 public abstract void glCompressedTexImage2D (int target, int level, int internalformat, int width, int height, int border, int imageSize, Buffer data) 
